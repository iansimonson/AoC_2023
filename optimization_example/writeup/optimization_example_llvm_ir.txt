; ModuleID = 'odin_package'
source_filename = "odin_package"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%runtime.Type_Info = type { i64, i64, i32, [4 x i8], i64, { [15 x i64], i64 } }
%..string = type { ptr, i64 }
%runtime.Default_Temp_Allocator = type { %runtime.Arena }
%runtime.Arena = type { %runtime.Allocator, ptr, i64, i64, i64, i64 }
%runtime.Allocator = type { ptr, ptr }
%strconv.Float_Info = type { i64, i64, i64 }
%utf8.Accept_Range = type { i8, i8 }
%runtime.Type_Info_Named = type { %..string, ptr, %..string, %runtime.Source_Code_Location }
%runtime.Source_Code_Location = type { %..string, i32, i32, %..string }
%runtime.Type_Info_Struct = type { { ptr, i64 }, { ptr, i64 }, { ptr, i64 }, { ptr, i64 }, { ptr, i64 }, i8, i8, i8, i8, [4 x i8], ptr, i8, [7 x i8], ptr, i64 }
%runtime.string_decode_rune.Accept_Range-2 = type { i8, i8 }
%runtime.Type_Info_Pointer = type { ptr }
%runtime.Type_Info_Integer = type { i8, i8 }
%runtime.Type_Info_Bit_Set = type { ptr, ptr, i64, i64 }
%runtime.Type_Info_Enum = type { ptr, { ptr, i64 }, { ptr, i64 } }
%runtime.Type_Info_Union = type { { ptr, i64 }, i64, ptr, ptr, i8, i8, i8, [5 x i8] }
%runtime.Type_Info_Slice = type { ptr, i64 }
%runtime.Type_Info_Procedure = type { ptr, ptr, i8, i8, [6 x i8] }
%runtime.Type_Info_Parameters = type { { ptr, i64 }, { ptr, i64 } }
%runtime.Type_Info_Float = type { i8 }
%runtime.Type_Info_String = type { i8 }
%runtime.Context = type { %runtime.Allocator, %runtime.Allocator, ptr, %runtime.Logger, ptr, i64, ptr }
%runtime.Logger = type { ptr, ptr, i64, i16, [6 x i8] }
%sys_windows.SECURITY_ATTRIBUTES = type { i32, [4 x i8], ptr, i32, [4 x i8] }
%..any = type { ptr, i64 }
%runtime.Memory_Block = type { ptr, %runtime.Allocator, ptr, i64, i64 }
%sys_windows.FILETIME = type { i32, i32 }
%runtime.Type_Info_Matrix = type { ptr, i64, i64, i64, i64 }
%runtime.Type_Info_Relative_Multi_Pointer = type { ptr, ptr }
%runtime.Type_Info_Array = type { ptr, i64, i64 }
%runtime.Type_Info_Enumerated_Array = type { ptr, ptr, i64, i64, i64, i64, i8, [7 x i8] }
%runtime.Type_Info_Simd_Vector = type { ptr, i64, i64 }
%fmt.Info = type { i8, i8, i8, i8, i8, i8, i8, [1 x i8], i64, i64, i64, i8, i8, i8, i8, [4 x i8], %io.Stream, %..any, i64, i64, %"runtime.Maybe($T=int)-8047", i8, [7 x i8], i64 }
%io.Stream = type { ptr, ptr }
%"runtime.Maybe($T=int)-8047" = type { i64, i64 }
%bufio.Writer = type { { ptr, i64 }, %runtime.Allocator, %io.Stream, i64, i32, [4 x i8], i64 }
%sys_windows.OVERLAPPED = type { ptr, ptr, i32, i32, ptr }
%runtime.Map_Cell_Info = type { i64, i64, i64, i64 }
%runtime.Map_Info = type { ptr, ptr, ptr, ptr }
%runtime.Raw_String = type { ptr, i64 }
%runtime.Raw_Soa_Pointer = type { ptr, i64 }
%runtime.Raw_Slice = type { ptr, i64 }
%runtime.Raw_Dynamic_Array = type { ptr, i64, i64, %runtime.Allocator }
%runtime.Type_Info_Dynamic_Array = type { ptr, i64 }
%runtime.Type_Info_Map = type { ptr, ptr, ptr }
%runtime.Type_Info_Relative_Pointer = type { ptr, ptr }
%..quaternion256 = type { double, double, double, double }
%strconv_decimal.Decimal = type { [384 x i8], i64, i64, i8, i8, [6 x i8] }
%..complex128 = type { double, double }
%..quaternion128 = type { float, float, float, float }

@"__$type_info_data" = internal global [151 x %runtime.Type_Info] zeroinitializer
@"__$type_info_types_data" = internal global [120 x ptr] zeroinitializer
@"__$type_info_names_data" = internal global [120 x %..string] zeroinitializer
@"__$type_info_offsets_data" = internal global [120 x i64] zeroinitializer
@"__$type_info_usings_data" = internal global [120 x i8] zeroinitializer
@"__$type_info_tags_data" = internal global [120 x %..string] zeroinitializer
@runtime.args__ = internal unnamed_addr global { ptr, i64 } zeroinitializer
@runtime.global_default_temp_allocator_data = internal thread_local global %runtime.Default_Temp_Allocator zeroinitializer
@opt_ex.data = internal global { ptr, i64 } zeroinitializer
@opt_ex.big_grid_1.0 = internal unnamed_addr global ptr null
@opt_ex.big_grid_1.1 = internal unnamed_addr global i64 0
@opt_ex.big_grid_2.0 = internal unnamed_addr global ptr null
@opt_ex.big_grid_2.1 = internal unnamed_addr global i64 0
@opt_ex.row_col_data.0 = internal unnamed_addr global ptr null
@opt_ex.row_col_data.1 = internal unnamed_addr global i64 0
@opt_ex.grid_width = internal unnamed_addr global i64 0
@time.days_before = internal unnamed_addr constant [13 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334, i32 365]
@fmt.__MEMORY_LOWER = internal global %..string { ptr @"csbs$0", i64 26 }
@"csbs$0" = private unnamed_addr constant [27 x i8] c" b kib mib gib tib pib eib\00", align 1
@fmt.__MEMORY_UPPER = internal global %..string { ptr @"csbs$1", i64 26 }
@"csbs$1" = private unnamed_addr constant [27 x i8] c" B KiB MiB GiB TiB PiB EiB\00", align 1
@fmt.__DIGITS_LOWER = internal global %..string { ptr @"csbs$2", i64 17 }
@"csbs$2" = private unnamed_addr constant [18 x i8] c"0123456789abcdefx\00", align 1
@fmt.__DIGITS_UPPER = internal global %..string { ptr @"csbs$3", i64 17 }
@"csbs$3" = private unnamed_addr constant [18 x i8] c"0123456789ABCDEFX\00", align 1
@strconv._f16_info = internal unnamed_addr constant %strconv.Float_Info { i64 10, i64 5, i64 -15 }
@strconv._f32_info = internal unnamed_addr constant %strconv.Float_Info { i64 23, i64 8, i64 -127 }
@strconv._f64_info = internal unnamed_addr constant %strconv.Float_Info { i64 52, i64 11, i64 -1023 }
@strconv.digits = internal global %..string { ptr @"csbs$4", i64 36 }
@"csbs$4" = private unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 1
@utf8.accept_ranges = internal unnamed_addr constant [5 x %utf8.Accept_Range] [%utf8.Accept_Range { i8 -128, i8 -65 }, %utf8.Accept_Range { i8 -96, i8 -65 }, %utf8.Accept_Range { i8 -128, i8 -97 }, %utf8.Accept_Range { i8 -112, i8 -65 }, %utf8.Accept_Range { i8 -128, i8 -113 }]
@strconv_decimal._shift_left_offsets-4005 = internal unnamed_addr constant [61 x { i64, %..string }] [{ i64, %..string } zeroinitializer, { i64, %..string } { i64 1, %..string { ptr @"csbs$6", i64 1 } }, { i64, %..string } { i64 1, %..string { ptr @"csbs$7", i64 2 } }, { i64, %..string } { i64 1, %..string { ptr @"csbs$8", i64 3 } }, { i64, %..string } { i64 2, %..string { ptr @"csbs$9", i64 3 } }, { i64, %..string } { i64 2, %..string { ptr @"csbs$a", i64 4 } }, { i64, %..string } { i64 2, %..string { ptr @"csbs$b", i64 5 } }, { i64, %..string } { i64 3, %..string { ptr @"csbs$c", i64 5 } }, { i64, %..string } { i64 3, %..string { ptr @"csbs$d", i64 6 } }, { i64, %..string } { i64 3, %..string { ptr @"csbs$e", i64 7 } }, { i64, %..string } { i64 4, %..string { ptr @"csbs$f", i64 7 } }, { i64, %..string } { i64 4, %..string { ptr @"csbs$10", i64 8 } }, { i64, %..string } { i64 4, %..string { ptr @"csbs$11", i64 9 } }, { i64, %..string } { i64 4, %..string { ptr @"csbs$12", i64 10 } }, { i64, %..string } { i64 5, %..string { ptr @"csbs$13", i64 10 } }, { i64, %..string } { i64 5, %..string { ptr @"csbs$14", i64 11 } }, { i64, %..string } { i64 5, %..string { ptr @"csbs$15", i64 12 } }, { i64, %..string } { i64 6, %..string { ptr @"csbs$16", i64 12 } }, { i64, %..string } { i64 6, %..string { ptr @"csbs$17", i64 13 } }, { i64, %..string } { i64 6, %..string { ptr @"csbs$18", i64 14 } }, { i64, %..string } { i64 7, %..string { ptr @"csbs$19", i64 14 } }, { i64, %..string } { i64 7, %..string { ptr @"csbs$1a", i64 15 } }, { i64, %..string } { i64 7, %..string { ptr @"csbs$1b", i64 16 } }, { i64, %..string } { i64 7, %..string { ptr @"csbs$1c", i64 17 } }, { i64, %..string } { i64 8, %..string { ptr @"csbs$1d", i64 17 } }, { i64, %..string } { i64 8, %..string { ptr @"csbs$1e", i64 18 } }, { i64, %..string } { i64 8, %..string { ptr @"csbs$1f", i64 19 } }, { i64, %..string } { i64 9, %..string { ptr @"csbs$20", i64 19 } }, { i64, %..string } { i64 9, %..string { ptr @"csbs$21", i64 20 } }, { i64, %..string } { i64 9, %..string { ptr @"csbs$22", i64 21 } }, { i64, %..string } { i64 10, %..string { ptr @"csbs$23", i64 21 } }, { i64, %..string } { i64 10, %..string { ptr @"csbs$24", i64 22 } }, { i64, %..string } { i64 10, %..string { ptr @"csbs$25", i64 23 } }, { i64, %..string } { i64 10, %..string { ptr @"csbs$26", i64 24 } }, { i64, %..string } { i64 11, %..string { ptr @"csbs$27", i64 24 } }, { i64, %..string } { i64 11, %..string { ptr @"csbs$28", i64 25 } }, { i64, %..string } { i64 11, %..string { ptr @"csbs$29", i64 26 } }, { i64, %..string } { i64 12, %..string { ptr @"csbs$2a", i64 26 } }, { i64, %..string } { i64 12, %..string { ptr @"csbs$2b", i64 27 } }, { i64, %..string } { i64 12, %..string { ptr @"csbs$2c", i64 28 } }, { i64, %..string } { i64 13, %..string { ptr @"csbs$2d", i64 28 } }, { i64, %..string } { i64 13, %..string { ptr @"csbs$2e", i64 29 } }, { i64, %..string } { i64 13, %..string { ptr @"csbs$2f", i64 30 } }, { i64, %..string } { i64 13, %..string { ptr @"csbs$30", i64 31 } }, { i64, %..string } { i64 14, %..string { ptr @"csbs$31", i64 31 } }, { i64, %..string } { i64 14, %..string { ptr @"csbs$32", i64 32 } }, { i64, %..string } { i64 14, %..string { ptr @"csbs$33", i64 33 } }, { i64, %..string } { i64 15, %..string { ptr @"csbs$34", i64 33 } }, { i64, %..string } { i64 15, %..string { ptr @"csbs$35", i64 34 } }, { i64, %..string } { i64 15, %..string { ptr @"csbs$36", i64 35 } }, { i64, %..string } { i64 16, %..string { ptr @"csbs$37", i64 35 } }, { i64, %..string } { i64 16, %..string { ptr @"csbs$38", i64 36 } }, { i64, %..string } { i64 16, %..string { ptr @"csbs$39", i64 37 } }, { i64, %..string } { i64 16, %..string { ptr @"csbs$3a", i64 38 } }, { i64, %..string } { i64 17, %..string { ptr @"csbs$3b", i64 38 } }, { i64, %..string } { i64 17, %..string { ptr @"csbs$3c", i64 39 } }, { i64, %..string } { i64 17, %..string { ptr @"csbs$3d", i64 40 } }, { i64, %..string } { i64 18, %..string { ptr @"csbs$3e", i64 40 } }, { i64, %..string } { i64 18, %..string { ptr @"csbs$3f", i64 41 } }, { i64, %..string } { i64 18, %..string { ptr @"csbs$40", i64 42 } }, { i64, %..string } { i64 19, %..string { ptr @"csbs$41", i64 42 } }]
@"csbs$6" = private unnamed_addr constant [2 x i8] c"5\00", align 1
@"csbs$7" = private unnamed_addr constant [3 x i8] c"25\00", align 1
@"csbs$8" = private unnamed_addr constant [4 x i8] c"125\00", align 1
@"csbs$9" = private unnamed_addr constant [4 x i8] c"625\00", align 1
@"csbs$a" = private unnamed_addr constant [5 x i8] c"3125\00", align 1
@"csbs$b" = private unnamed_addr constant [6 x i8] c"15625\00", align 1
@"csbs$c" = private unnamed_addr constant [6 x i8] c"78125\00", align 1
@"csbs$d" = private unnamed_addr constant [7 x i8] c"390625\00", align 1
@"csbs$e" = private unnamed_addr constant [8 x i8] c"1953125\00", align 1
@"csbs$f" = private unnamed_addr constant [8 x i8] c"9765625\00", align 1
@"csbs$10" = private unnamed_addr constant [9 x i8] c"48828125\00", align 1
@"csbs$11" = private unnamed_addr constant [10 x i8] c"244140625\00", align 1
@"csbs$12" = private unnamed_addr constant [11 x i8] c"1220703125\00", align 1
@"csbs$13" = private unnamed_addr constant [11 x i8] c"6103515625\00", align 1
@"csbs$14" = private unnamed_addr constant [12 x i8] c"30517578125\00", align 1
@"csbs$15" = private unnamed_addr constant [13 x i8] c"152587890625\00", align 1
@"csbs$16" = private unnamed_addr constant [13 x i8] c"762939453125\00", align 1
@"csbs$17" = private unnamed_addr constant [14 x i8] c"3814697265625\00", align 1
@"csbs$18" = private unnamed_addr constant [15 x i8] c"19073486328125\00", align 1
@"csbs$19" = private unnamed_addr constant [15 x i8] c"95367431640625\00", align 1
@"csbs$1a" = private unnamed_addr constant [16 x i8] c"476837158203125\00", align 1
@"csbs$1b" = private unnamed_addr constant [17 x i8] c"2384185791015625\00", align 1
@"csbs$1c" = private unnamed_addr constant [18 x i8] c"11920928955078125\00", align 1
@"csbs$1d" = private unnamed_addr constant [18 x i8] c"59604644775390625\00", align 1
@"csbs$1e" = private unnamed_addr constant [19 x i8] c"298023223876953125\00", align 1
@"csbs$1f" = private unnamed_addr constant [20 x i8] c"1490116119384765625\00", align 1
@"csbs$20" = private unnamed_addr constant [20 x i8] c"7450580596923828125\00", align 1
@"csbs$21" = private unnamed_addr constant [21 x i8] c"37252902984619140625\00", align 1
@"csbs$22" = private unnamed_addr constant [22 x i8] c"186264514923095703125\00", align 1
@"csbs$23" = private unnamed_addr constant [22 x i8] c"931322574615478515625\00", align 1
@"csbs$24" = private unnamed_addr constant [23 x i8] c"4656612873077392578125\00", align 1
@"csbs$25" = private unnamed_addr constant [24 x i8] c"23283064365386962890625\00", align 1
@"csbs$26" = private unnamed_addr constant [25 x i8] c"116415321826934814453125\00", align 1
@"csbs$27" = private unnamed_addr constant [25 x i8] c"582076609134674072265625\00", align 1
@"csbs$28" = private unnamed_addr constant [26 x i8] c"2910383045673370361328125\00", align 1
@"csbs$29" = private unnamed_addr constant [27 x i8] c"14551915228366851806640625\00", align 1
@"csbs$2a" = private unnamed_addr constant [27 x i8] c"72759576141834259033203125\00", align 1
@"csbs$2b" = private unnamed_addr constant [28 x i8] c"363797880709171295166015625\00", align 1
@"csbs$2c" = private unnamed_addr constant [29 x i8] c"1818989403545856475830078125\00", align 1
@"csbs$2d" = private unnamed_addr constant [29 x i8] c"9094947017729282379150390625\00", align 1
@"csbs$2e" = private unnamed_addr constant [30 x i8] c"45474735088646411895751953125\00", align 1
@"csbs$2f" = private unnamed_addr constant [31 x i8] c"227373675443232059478759765625\00", align 1
@"csbs$30" = private unnamed_addr constant [32 x i8] c"1136868377216160297393798828125\00", align 1
@"csbs$31" = private unnamed_addr constant [32 x i8] c"5684341886080801486968994140625\00", align 1
@"csbs$32" = private unnamed_addr constant [33 x i8] c"28421709430404007434844970703125\00", align 1
@"csbs$33" = private unnamed_addr constant [34 x i8] c"142108547152020037174224853515625\00", align 1
@"csbs$34" = private unnamed_addr constant [34 x i8] c"710542735760100185871124267578125\00", align 1
@"csbs$35" = private unnamed_addr constant [35 x i8] c"3552713678800500929355621337890625\00", align 1
@"csbs$36" = private unnamed_addr constant [36 x i8] c"17763568394002504646778106689453125\00", align 1
@"csbs$37" = private unnamed_addr constant [36 x i8] c"88817841970012523233890533447265625\00", align 1
@"csbs$38" = private unnamed_addr constant [37 x i8] c"444089209850062616169452667236328125\00", align 1
@"csbs$39" = private unnamed_addr constant [38 x i8] c"2220446049250313080847263336181640625\00", align 1
@"csbs$3a" = private unnamed_addr constant [39 x i8] c"11102230246251565404236316680908203125\00", align 1
@"csbs$3b" = private unnamed_addr constant [39 x i8] c"55511151231257827021181583404541015625\00", align 1
@"csbs$3c" = private unnamed_addr constant [40 x i8] c"277555756156289135105907917022705078125\00", align 1
@"csbs$3d" = private unnamed_addr constant [41 x i8] c"1387778780781445675529539585113525390625\00", align 1
@"csbs$3e" = private unnamed_addr constant [41 x i8] c"6938893903907228377647697925567626953125\00", align 1
@"csbs$3f" = private unnamed_addr constant [42 x i8] c"34694469519536141888238489627838134765625\00", align 1
@"csbs$40" = private unnamed_addr constant [43 x i8] c"173472347597680709441192448139190673828125\00", align 1
@"csbs$41" = private unnamed_addr constant [43 x i8] c"867361737988403547205962240695953369140625\00", align 1
@os.stdout = internal unnamed_addr global i64 0
@"csbs$42" = private unnamed_addr constant [8 x i8] c"runtime\00", align 1
@"csbs$43" = private unnamed_addr constant [44 x i8] c"C:/Users/isimo/.odin/core/runtime/core.odin\00", align 1
@"csbs$44" = private unnamed_addr constant [10 x i8] c"Type_Info\00", align 1
@"ggv$0" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$44", i64 9 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 14), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 190, i32 1, %..string zeroinitializer } }
@"csbs$45" = private unnamed_addr constant [5 x i8] c"size\00", align 1
@"csbs$46" = private unnamed_addr constant [6 x i8] c"align\00", align 1
@"csbs$47" = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@"csbs$48" = private unnamed_addr constant [3 x i8] c"id\00", align 1
@"csbs$49" = private unnamed_addr constant [8 x i8] c"variant\00", align 1
@"ggv$1" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr @"__$type_info_types_data", i64 5 }, { ptr, i64 } { ptr @"__$type_info_names_data", i64 5 }, { ptr, i64 } { ptr @"__$type_info_offsets_data", i64 5 }, { ptr, i64 } { ptr @"__$type_info_usings_data", i64 5 }, { ptr, i64 } { ptr @"__$type_info_tags_data", i64 5 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$4a" = private unnamed_addr constant [16 x i8] c"Type_Info_Flags\00", align 1
@"ggv$2" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$4a", i64 15 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 16), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 188, i32 1, %..string zeroinitializer } }
@"csbs$4b" = private unnamed_addr constant [15 x i8] c"Type_Info_Flag\00", align 1
@"ggv$3" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$4b", i64 14 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 18), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 184, i32 1, %..string zeroinitializer } }
@"$enum_names-18" = private unnamed_addr constant [2 x %..string] [%..string { ptr @"csbs$4c", i64 10 }, %..string { ptr @"csbs$4d", i64 14 }]
@"$enum_values-18" = private unnamed_addr constant [2 x i64] [i64 0, i64 1]
@"csbs$4c" = private unnamed_addr constant [11 x i8] c"Comparable\00", align 1
@"csbs$4d" = private unnamed_addr constant [15 x i8] c"Simple_Compare\00", align 1
@"csbs$4e" = private unnamed_addr constant [16 x i8] c"Type_Info_Named\00", align 1
@"ggv$4" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$4e", i64 15 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 22), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 64, i32 1, %..string zeroinitializer } }
@"csbs$4f" = private unnamed_addr constant [5 x i8] c"name\00", align 1
@"csbs$50" = private unnamed_addr constant [5 x i8] c"base\00", align 1
@"csbs$51" = private unnamed_addr constant [4 x i8] c"pkg\00", align 1
@"csbs$52" = private unnamed_addr constant [4 x i8] c"loc\00", align 1
@"ggv$5" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 33), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 5), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 5), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 5), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 5), i64 4 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr @"__$equal1", i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$53" = private unnamed_addr constant [21 x i8] c"Source_Code_Location\00", align 1
@"ggv$6" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$53", i64 20 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 26), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 292, i32 1, %..string zeroinitializer } }
@"csbs$54" = private unnamed_addr constant [10 x i8] c"file_path\00", align 1
@"csbs$55" = private unnamed_addr constant [5 x i8] c"line\00", align 1
@"csbs$56" = private unnamed_addr constant [7 x i8] c"column\00", align 1
@"csbs$57" = private unnamed_addr constant [10 x i8] c"procedure\00", align 1
@"ggv$7" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 37), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 9), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 9), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 9), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 9), i64 4 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr @"__$equal2", i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$58" = private unnamed_addr constant [18 x i8] c"Type_Info_Integer\00", align 1
@"ggv$8" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$58", i64 17 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 29), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 70, i32 1, %..string zeroinitializer } }
@"csbs$59" = private unnamed_addr constant [7 x i8] c"signed\00", align 1
@"csbs$5a" = private unnamed_addr constant [11 x i8] c"endianness\00", align 1
@"ggv$9" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 41), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 13), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 13), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 13), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 13), i64 2 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$5b" = private unnamed_addr constant [20 x i8] c"Platform_Endianness\00", align 1
@"ggv$a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$5b", i64 19 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 32), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 45, i32 1, %..string zeroinitializer } }
@"$enum_names-32" = private unnamed_addr constant [3 x %..string] [%..string { ptr @"csbs$5c", i64 8 }, %..string { ptr @"csbs$5d", i64 6 }, %..string { ptr @"csbs$5e", i64 3 }]
@"$enum_values-32" = private unnamed_addr constant [3 x i64] [i64 0, i64 1, i64 2]
@"csbs$5c" = private unnamed_addr constant [9 x i8] c"Platform\00", align 1
@"csbs$5d" = private unnamed_addr constant [7 x i8] c"Little\00", align 1
@"csbs$5e" = private unnamed_addr constant [4 x i8] c"Big\00", align 1
@"csbs$5f" = private unnamed_addr constant [15 x i8] c"Type_Info_Rune\00", align 1
@"ggv$b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$5f", i64 14 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 71, i32 1, %..string zeroinitializer } }
@"csbs$60" = private unnamed_addr constant [16 x i8] c"Type_Info_Float\00", align 1
@"ggv$c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$60", i64 15 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 36), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 72, i32 1, %..string zeroinitializer } }
@"ggv$d" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 43), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 15), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 15), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 15), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 15), i64 1 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$61" = private unnamed_addr constant [18 x i8] c"Type_Info_Complex\00", align 1
@"ggv$e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$61", i64 17 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 73, i32 1, %..string zeroinitializer } }
@"csbs$62" = private unnamed_addr constant [21 x i8] c"Type_Info_Quaternion\00", align 1
@"ggv$f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$62", i64 20 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 74, i32 1, %..string zeroinitializer } }
@"csbs$63" = private unnamed_addr constant [17 x i8] c"Type_Info_String\00", align 1
@"ggv$10" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$63", i64 16 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 40), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 75, i32 1, %..string zeroinitializer } }
@"csbs$64" = private unnamed_addr constant [11 x i8] c"is_cstring\00", align 1
@"ggv$11" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 44), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 16), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 16), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 16), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 16), i64 1 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$65" = private unnamed_addr constant [18 x i8] c"Type_Info_Boolean\00", align 1
@"ggv$12" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$65", i64 17 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 76, i32 1, %..string zeroinitializer } }
@"csbs$66" = private unnamed_addr constant [14 x i8] c"Type_Info_Any\00", align 1
@"ggv$13" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$66", i64 13 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 77, i32 1, %..string zeroinitializer } }
@"csbs$67" = private unnamed_addr constant [18 x i8] c"Type_Info_Type_Id\00", align 1
@"ggv$14" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$67", i64 17 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 78, i32 1, %..string zeroinitializer } }
@"csbs$68" = private unnamed_addr constant [18 x i8] c"Type_Info_Pointer\00", align 1
@"ggv$15" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$68", i64 17 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 79, i32 1, %..string zeroinitializer } }
@"csbs$69" = private unnamed_addr constant [5 x i8] c"elem\00", align 1
@"ggv$16" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 45), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 17), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 17), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 17), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 17), i64 1 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$6a" = private unnamed_addr constant [24 x i8] c"Type_Info_Multi_Pointer\00", align 1
@"ggv$17" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$6a", i64 23 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 82, i32 1, %..string zeroinitializer } }
@"csbs$6b" = private unnamed_addr constant [20 x i8] c"Type_Info_Procedure\00", align 1
@"ggv$18" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$6b", i64 19 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 48), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 85, i32 1, %..string zeroinitializer } }
@"csbs$6c" = private unnamed_addr constant [7 x i8] c"params\00", align 1
@"csbs$6d" = private unnamed_addr constant [8 x i8] c"results\00", align 1
@"csbs$6e" = private unnamed_addr constant [9 x i8] c"variadic\00", align 1
@"csbs$6f" = private unnamed_addr constant [11 x i8] c"convention\00", align 1
@"ggv$19" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 46), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 18), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 18), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 18), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 18), i64 4 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$70" = private unnamed_addr constant [19 x i8] c"Calling_Convention\00", align 1
@"ggv$1a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$70", i64 18 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 50), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 26, i32 1, %..string zeroinitializer } }
@"$enum_names-50" = private unnamed_addr constant [10 x %..string] [%..string { ptr @"csbs$71", i64 7 }, %..string { ptr @"csbs$72", i64 4 }, %..string { ptr @"csbs$73", i64 11 }, %..string { ptr @"csbs$74", i64 5 }, %..string { ptr @"csbs$75", i64 8 }, %..string { ptr @"csbs$76", i64 9 }, %..string { ptr @"csbs$77", i64 4 }, %..string { ptr @"csbs$78", i64 5 }, %..string { ptr @"csbs$79", i64 5 }, %..string { ptr @"csbs$7a", i64 4 }]
@"$enum_values-50" = private unnamed_addr constant [10 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 9, i64 10]
@"csbs$71" = private unnamed_addr constant [8 x i8] c"Invalid\00", align 1
@"csbs$72" = private unnamed_addr constant [5 x i8] c"Odin\00", align 1
@"csbs$73" = private unnamed_addr constant [12 x i8] c"Contextless\00", align 1
@"csbs$74" = private unnamed_addr constant [6 x i8] c"CDecl\00", align 1
@"csbs$75" = private unnamed_addr constant [9 x i8] c"Std_Call\00", align 1
@"csbs$76" = private unnamed_addr constant [10 x i8] c"Fast_Call\00", align 1
@"csbs$77" = private unnamed_addr constant [5 x i8] c"None\00", align 1
@"csbs$78" = private unnamed_addr constant [6 x i8] c"Naked\00", align 1
@"csbs$79" = private unnamed_addr constant [6 x i8] c"Win64\00", align 1
@"csbs$7a" = private unnamed_addr constant [5 x i8] c"SysV\00", align 1
@"csbs$7b" = private unnamed_addr constant [16 x i8] c"Type_Info_Array\00", align 1
@"ggv$1b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$7b", i64 15 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 52), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 91, i32 1, %..string zeroinitializer } }
@"csbs$7c" = private unnamed_addr constant [10 x i8] c"elem_size\00", align 1
@"csbs$7d" = private unnamed_addr constant [6 x i8] c"count\00", align 1
@"ggv$1c" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 50), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 22), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 22), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 22), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 22), i64 3 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$7e" = private unnamed_addr constant [27 x i8] c"Type_Info_Enumerated_Array\00", align 1
@"ggv$1d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$7e", i64 26 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 54), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 96, i32 1, %..string zeroinitializer } }
@"csbs$7f" = private unnamed_addr constant [6 x i8] c"index\00", align 1
@"csbs$80" = private unnamed_addr constant [10 x i8] c"min_value\00", align 1
@"csbs$81" = private unnamed_addr constant [10 x i8] c"max_value\00", align 1
@"csbs$82" = private unnamed_addr constant [10 x i8] c"is_sparse\00", align 1
@"ggv$1e" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 53), i64 7 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 25), i64 7 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 25), i64 7 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 25), i64 7 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 25), i64 7 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$83" = private unnamed_addr constant [21 x i8] c"Type_Info_Enum_Value\00", align 1
@"ggv$1f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$83", i64 20 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 43, i32 1, %..string zeroinitializer } }
@"csbs$84" = private unnamed_addr constant [24 x i8] c"Type_Info_Dynamic_Array\00", align 1
@"ggv$20" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$84", i64 23 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 58), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 105, i32 1, %..string zeroinitializer } }
@"ggv$21" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 60), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 32), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 32), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 32), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 32), i64 2 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$85" = private unnamed_addr constant [16 x i8] c"Type_Info_Slice\00", align 1
@"ggv$22" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$85", i64 15 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 58), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 106, i32 1, %..string zeroinitializer } }
@"csbs$86" = private unnamed_addr constant [21 x i8] c"Type_Info_Parameters\00", align 1
@"ggv$23" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$86", i64 20 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 61), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 108, i32 1, %..string zeroinitializer } }
@"csbs$87" = private unnamed_addr constant [6 x i8] c"types\00", align 1
@"csbs$88" = private unnamed_addr constant [6 x i8] c"names\00", align 1
@"ggv$24" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 62), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 34), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 34), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 34), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 34), i64 2 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$89" = private unnamed_addr constant [17 x i8] c"Type_Info_Struct\00", align 1
@"ggv$25" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$89", i64 16 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 67), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 114, i32 1, %..string zeroinitializer } }
@"csbs$8a" = private unnamed_addr constant [8 x i8] c"offsets\00", align 1
@"csbs$8b" = private unnamed_addr constant [7 x i8] c"usings\00", align 1
@"csbs$8c" = private unnamed_addr constant [5 x i8] c"tags\00", align 1
@"csbs$8d" = private unnamed_addr constant [10 x i8] c"is_packed\00", align 1
@"csbs$8e" = private unnamed_addr constant [13 x i8] c"is_raw_union\00", align 1
@"csbs$8f" = private unnamed_addr constant [11 x i8] c"is_no_copy\00", align 1
@"csbs$90" = private unnamed_addr constant [13 x i8] c"custom_align\00", align 1
@"csbs$91" = private unnamed_addr constant [6 x i8] c"equal\00", align 1
@"csbs$92" = private unnamed_addr constant [9 x i8] c"soa_kind\00", align 1
@"csbs$93" = private unnamed_addr constant [14 x i8] c"soa_base_type\00", align 1
@"csbs$94" = private unnamed_addr constant [8 x i8] c"soa_len\00", align 1
@"ggv$26" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 64), i64 13 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 36), i64 13 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 36), i64 13 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 36), i64 13 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 36), i64 13 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$95" = private unnamed_addr constant [11 x i8] c"Equal_Proc\00", align 1
@"ggv$27" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$95", i64 10 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 74), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 52, i32 1, %..string zeroinitializer } }
@"csbs$96" = private unnamed_addr constant [2 x i8] c"_\00", align 1
@"csbs$97" = private unnamed_addr constant [26 x i8] c"Type_Info_Struct_Soa_Kind\00", align 1
@"ggv$28" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$97", i64 25 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 78), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 56, i32 1, %..string zeroinitializer } }
@"$enum_names-78" = private unnamed_addr constant [4 x %..string] [%..string { ptr @"csbs$77", i64 4 }, %..string { ptr @"csbs$98", i64 5 }, %..string { ptr @"csbs$99", i64 5 }, %..string { ptr @"csbs$9a", i64 7 }]
@"$enum_values-78" = private unnamed_addr constant [4 x i64] [i64 0, i64 1, i64 2, i64 3]
@"csbs$98" = private unnamed_addr constant [6 x i8] c"Fixed\00", align 1
@"csbs$99" = private unnamed_addr constant [6 x i8] c"Slice\00", align 1
@"csbs$9a" = private unnamed_addr constant [8 x i8] c"Dynamic\00", align 1
@"csbs$9b" = private unnamed_addr constant [16 x i8] c"Type_Info_Union\00", align 1
@"ggv$29" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$9b", i64 15 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 80), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 132, i32 1, %..string zeroinitializer } }
@"csbs$9c" = private unnamed_addr constant [9 x i8] c"variants\00", align 1
@"csbs$9d" = private unnamed_addr constant [11 x i8] c"tag_offset\00", align 1
@"csbs$9e" = private unnamed_addr constant [9 x i8] c"tag_type\00", align 1
@"csbs$9f" = private unnamed_addr constant [7 x i8] c"no_nil\00", align 1
@"csbs$a0" = private unnamed_addr constant [11 x i8] c"shared_nil\00", align 1
@"ggv$2a" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 80), i64 7 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 52), i64 7 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 49), i64 7 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 49), i64 7 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 49), i64 7 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$a1" = private unnamed_addr constant [15 x i8] c"Type_Info_Enum\00", align 1
@"ggv$2b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$a1", i64 14 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 82), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 143, i32 1, %..string zeroinitializer } }
@"csbs$a2" = private unnamed_addr constant [7 x i8] c"values\00", align 1
@"ggv$2c" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 87), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 59), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 56), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 56), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 56), i64 3 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$a3" = private unnamed_addr constant [14 x i8] c"Type_Info_Map\00", align 1
@"ggv$2d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$a3", i64 13 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 86), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 148, i32 1, %..string zeroinitializer } }
@"csbs$a4" = private unnamed_addr constant [4 x i8] c"key\00", align 1
@"csbs$a5" = private unnamed_addr constant [6 x i8] c"value\00", align 1
@"csbs$a6" = private unnamed_addr constant [9 x i8] c"map_info\00", align 1
@"ggv$2e" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 90), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 62), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 59), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 59), i64 3 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 59), i64 3 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$a7" = private unnamed_addr constant [60 x i8] c"C:/Users/isimo/.odin/core/runtime/dynamic_map_internal.odin\00", align 1
@"csbs$a8" = private unnamed_addr constant [9 x i8] c"Map_Info\00", align 1
@"ggv$2f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$a8", i64 8 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 89), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$a7", i64 59 }, i32 300, i32 1, %..string zeroinitializer } }
@"csbs$a9" = private unnamed_addr constant [3 x i8] c"ks\00", align 1
@"csbs$aa" = private unnamed_addr constant [3 x i8] c"vs\00", align 1
@"csbs$ab" = private unnamed_addr constant [11 x i8] c"key_hasher\00", align 1
@"csbs$ac" = private unnamed_addr constant [10 x i8] c"key_equal\00", align 1
@"ggv$30" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 93), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 65), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 62), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 62), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 62), i64 4 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$ad" = private unnamed_addr constant [14 x i8] c"Map_Cell_Info\00", align 1
@"ggv$31" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$ad", i64 13 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 92), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$a7", i64 59 }, i32 99, i32 1, %..string zeroinitializer } }
@"csbs$ae" = private unnamed_addr constant [13 x i8] c"size_of_type\00", align 1
@"csbs$af" = private unnamed_addr constant [14 x i8] c"align_of_type\00", align 1
@"csbs$b0" = private unnamed_addr constant [13 x i8] c"size_of_cell\00", align 1
@"csbs$b1" = private unnamed_addr constant [18 x i8] c"elements_per_cell\00", align 1
@"ggv$32" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 97), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 69), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 66), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 66), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 66), i64 4 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$b2" = private unnamed_addr constant [5 x i8] c"seed\00", align 1
@"csbs$b3" = private unnamed_addr constant [4 x i8] c"lhs\00", align 1
@"csbs$b4" = private unnamed_addr constant [4 x i8] c"rhs\00", align 1
@"csbs$b5" = private unnamed_addr constant [18 x i8] c"Type_Info_Bit_Set\00", align 1
@"ggv$33" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$b5", i64 17 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 11), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 153, i32 1, %..string zeroinitializer } }
@"csbs$b6" = private unnamed_addr constant [11 x i8] c"underlying\00", align 1
@"csbs$b7" = private unnamed_addr constant [6 x i8] c"lower\00", align 1
@"csbs$b8" = private unnamed_addr constant [6 x i8] c"upper\00", align 1
@"ggv$34" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 106), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 78), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 70), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 70), i64 4 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 70), i64 4 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$b9" = private unnamed_addr constant [22 x i8] c"Type_Info_Simd_Vector\00", align 1
@"ggv$35" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$b9", i64 21 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 52), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 159, i32 1, %..string zeroinitializer } }
@"csbs$ba" = private unnamed_addr constant [27 x i8] c"Type_Info_Relative_Pointer\00", align 1
@"ggv$36" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$ba", i64 26 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 100), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 164, i32 1, %..string zeroinitializer } }
@"csbs$bb" = private unnamed_addr constant [8 x i8] c"pointer\00", align 1
@"csbs$bc" = private unnamed_addr constant [13 x i8] c"base_integer\00", align 1
@"ggv$37" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 110), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 82), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 74), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 74), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 74), i64 2 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$bd" = private unnamed_addr constant [33 x i8] c"Type_Info_Relative_Multi_Pointer\00", align 1
@"ggv$38" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$bd", i64 32 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 100), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 168, i32 1, %..string zeroinitializer } }
@"csbs$be" = private unnamed_addr constant [17 x i8] c"Type_Info_Matrix\00", align 1
@"ggv$39" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$be", i64 16 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 103), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 172, i32 1, %..string zeroinitializer } }
@"csbs$bf" = private unnamed_addr constant [12 x i8] c"elem_stride\00", align 1
@"csbs$c0" = private unnamed_addr constant [10 x i8] c"row_count\00", align 1
@"csbs$c1" = private unnamed_addr constant [13 x i8] c"column_count\00", align 1
@"ggv$3a" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 112), i64 5 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 84), i64 5 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 76), i64 5 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 76), i64 5 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 76), i64 5 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$c2" = private unnamed_addr constant [22 x i8] c"Type_Info_Soa_Pointer\00", align 1
@"ggv$3b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$c2", i64 21 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$43", i64 43 }, i32 180, i32 1, %..string zeroinitializer } }
@"csbs$c3" = private unnamed_addr constant [52 x i8] c"C:/Users/isimo/.odin/core/runtime/core_builtin.odin\00", align 1
@"csbs$c4" = private unnamed_addr constant [14 x i8] c"Maybe($T=int)\00", align 1
@"ggv$3c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$c4", i64 13 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 6), %..string { ptr @"csbs$42", i64 7 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$c3", i64 51 }, i32 6, i32 10, %..string zeroinitializer } }
@"csbs$c5" = private unnamed_addr constant [2 x i8] c"T\00", align 1
@"csbs$c6" = private unnamed_addr constant [5 x i8] c"time\00", align 1
@"csbs$c7" = private unnamed_addr constant [41 x i8] c"C:/Users/isimo/.odin/core/time/time.odin\00", align 1
@"csbs$c8" = private unnamed_addr constant [9 x i8] c"Duration\00", align 1
@"ggv$3d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$c8", i64 8 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56), %..string { ptr @"csbs$c6", i64 4 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$c7", i64 40 }, i32 5, i32 1, %..string zeroinitializer } }
@"csbs$c9" = private unnamed_addr constant [5 x i8] c"Time\00", align 1
@"ggv$3e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { ptr @"csbs$c9", i64 4 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 149), %..string { ptr @"csbs$c6", i64 4 }, %runtime.Source_Code_Location { %..string { ptr @"csbs$c7", i64 40 }, i32 19, i32 1, %..string zeroinitializer } }
@"csbs$ca" = private unnamed_addr constant [6 x i8] c"_nsec\00", align 1
@"ggv$3f" = private unnamed_addr constant %runtime.Type_Info_Struct { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 119), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 90), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 81), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 81), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_tags_data", i64 0, i64 81), i64 1 }, i8 0, i8 0, i8 0, i8 0, [4 x i8] zeroinitializer, ptr null, i8 0, [7 x i8] zeroinitializer, ptr null, i64 0 }
@"csbs$cb" = private unnamed_addr constant [2 x i8] c" \00", align 1
@"csbs$cc" = private unnamed_addr constant [17 x i8] c"BENCHMARKING....\00", align 1
@"csbs$cd" = private unnamed_addr constant [34 x i8] c"=================================\00", align 1
@"csbs$ce" = private unnamed_addr constant [7 x i8] c"Width:\00", align 1
@"csbs$cf" = private unnamed_addr constant [6 x i8] c"time:\00", align 1
@"csbs$d0" = private unnamed_addr constant [3 x i8] c"ns\00", align 1
@"csbs$d1" = private unnamed_addr constant [14 x i8] c"unused value:\00", align 1
@"csbs$d2" = private unnamed_addr constant [3 x i8] c"\\a\00", align 1
@"csbs$d3" = private unnamed_addr constant [3 x i8] c"\\b\00", align 1
@"csbs$d4" = private unnamed_addr constant [3 x i8] c"\\e\00", align 1
@"csbs$d5" = private unnamed_addr constant [3 x i8] c"\\f\00", align 1
@"csbs$d6" = private unnamed_addr constant [3 x i8] c"\\n\00", align 1
@"csbs$d7" = private unnamed_addr constant [3 x i8] c"\\r\00", align 1
@"csbs$d8" = private unnamed_addr constant [3 x i8] c"\\t\00", align 1
@"csbs$d9" = private unnamed_addr constant [3 x i8] c"\\v\00", align 1
@"csbs$da" = private unnamed_addr constant [5 x i8] c"\\x00\00", align 1
@"ggv$4d" = private unnamed_addr constant %..string { ptr @"csbs$da", i64 4 }
@"csbs$db" = private unnamed_addr constant [3 x i8] c"\\x\00", align 1
@"csbs$dc" = private unnamed_addr constant [4 x i8] c"nil\00", align 1
@"csbs$dd" = private unnamed_addr constant [4 x i8] c"int\00", align 1
@"csbs$de" = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@"csbs$df" = private unnamed_addr constant [8 x i8] c"uintptr\00", align 1
@"csbs$e0" = private unnamed_addr constant [5 x i8] c"rune\00", align 1
@"csbs$e1" = private unnamed_addr constant [8 x i8] c"complex\00", align 1
@"csbs$e2" = private unnamed_addr constant [11 x i8] c"quaternion\00", align 1
@"csbs$e3" = private unnamed_addr constant [7 x i8] c"string\00", align 1
@"csbs$e4" = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@"csbs$e5" = private unnamed_addr constant [4 x i8] c"any\00", align 1
@"csbs$e6" = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@"csbs$e7" = private unnamed_addr constant [7 x i8] c"rawptr\00", align 1
@"csbs$e8" = private unnamed_addr constant [2 x i8] c"^\00", align 1
@"csbs$e9" = private unnamed_addr constant [4 x i8] c"[^]\00", align 1
@"csbs$ea" = private unnamed_addr constant [7 x i8] c"#soa ^\00", align 1
@"csbs$eb" = private unnamed_addr constant [5 x i8] c"proc\00", align 1
@"csbs$ec" = private unnamed_addr constant [3 x i8] c"()\00", align 1
@"csbs$ed" = private unnamed_addr constant [45 x i8] c"C:/Users/isimo/.odin/core/runtime/print.odin\00", align 1
@"ggv$61" = private unnamed_addr constant %..string { ptr @"csbs$ed", i64 44 }
@"csbs$ee" = private unnamed_addr constant [3 x i8] c", \00", align 1
@"csbs$ef" = private unnamed_addr constant [2 x i8] c")\00", align 1
@"csbs$f0" = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@"csbs$f1" = private unnamed_addr constant [3 x i8] c": \00", align 1
@"csbs$f2" = private unnamed_addr constant [8 x i8] c"#sparse\00", align 1
@"csbs$f3" = private unnamed_addr constant [10 x i8] c"[dynamic]\00", align 1
@"csbs$f4" = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@"csbs$f5" = private unnamed_addr constant [5 x i8] c"map[\00", align 1
@"csbs$f6" = private unnamed_addr constant [6 x i8] c"#soa[\00", align 1
@"csbs$f7" = private unnamed_addr constant [7 x i8] c"#soa[]\00", align 1
@"csbs$f8" = private unnamed_addr constant [14 x i8] c"#soa[dynamic]\00", align 1
@"csbs$f9" = private unnamed_addr constant [8 x i8] c"struct \00", align 1
@"csbs$fa" = private unnamed_addr constant [9 x i8] c"#packed \00", align 1
@"csbs$fb" = private unnamed_addr constant [12 x i8] c"#raw_union \00", align 1
@"csbs$fc" = private unnamed_addr constant [8 x i8] c"#align(\00", align 1
@"csbs$fd" = private unnamed_addr constant [3 x i8] c") \00", align 1
@"csbs$fe" = private unnamed_addr constant [7 x i8] c"union \00", align 1
@"csbs$ff" = private unnamed_addr constant [9 x i8] c"#no_nil \00", align 1
@"csbs$100" = private unnamed_addr constant [2 x i8] c"}\00", align 1
@"csbs$101" = private unnamed_addr constant [6 x i8] c"enum \00", align 1
@"csbs$102" = private unnamed_addr constant [3 x i8] c" {\00", align 1
@"csbs$103" = private unnamed_addr constant [9 x i8] c"bit_set[\00", align 1
@"csbs$104" = private unnamed_addr constant [3 x i8] c"..\00", align 1
@"ggv$82" = private unnamed_addr constant %..string { ptr @"csbs$104", i64 2 }
@"csbs$105" = private unnamed_addr constant [3 x i8] c"; \00", align 1
@"csbs$106" = private unnamed_addr constant [7 x i8] c"#simd[\00", align 1
@"csbs$107" = private unnamed_addr constant [11 x i8] c"#relative(\00", align 1
@"csbs$108" = private unnamed_addr constant [8 x i8] c"matrix[\00", align 1
@"csbs$109" = private unnamed_addr constant [2 x i8] c"]\00", align 1
@"csbs$10a" = private unnamed_addr constant [12 x i8] c"./input.txt\00", align 1
@"csbs$10b" = private unnamed_addr constant [83 x i8] c"C:/Users/isimo/development/AoC_2023/optimization_example/for_loop_temporaries.odin\00", align 1
@"csbs$10c" = private unnamed_addr constant [10 x i8] c"load_data\00", align 1
@"ggv$8c" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$10b", i64 82 }, i32 11, i32 15, %..string { ptr @"csbs$10c", i64 9 } }
@"ggv$8e" = private unnamed_addr constant %..string { ptr @"csbs$cb", i64 1 }
@"csbs$10d" = private unnamed_addr constant [19 x i8] c"aocloop_bench_init\00", align 1
@"ggv$8f" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$10b", i64 82 }, i32 23, i32 18, %..string { ptr @"csbs$10d", i64 18 } }
@"ggv$90" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$10b", i64 82 }, i32 25, i32 18, %..string { ptr @"csbs$10d", i64 18 } }
@"ggv$91" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$10b", i64 82 }, i32 28, i32 20, %..string { ptr @"csbs$10d", i64 18 } }
@"csbs$10e" = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@"csbs$10f" = private unnamed_addr constant [22 x i8] c"aocloop_bench_destroy\00", align 1
@"ggv$93" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$10b", i64 82 }, i32 112, i32 5, %..string { ptr @"csbs$10f", i64 21 } }
@"ggv$94" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$10b", i64 82 }, i32 113, i32 5, %..string { ptr @"csbs$10f", i64 21 } }
@"ggv$95" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$10b", i64 82 }, i32 114, i32 5, %..string { ptr @"csbs$10f", i64 21 } }
@"csbs$110" = private unnamed_addr constant [6 x i8] c"panic\00", align 1
@"ggv$97" = private unnamed_addr constant %..string { ptr @"csbs$110", i64 5 }
@"csbs$112" = private unnamed_addr constant [3 x i8] c"%!\00", align 1
@"ggv$99" = private unnamed_addr constant %..string { ptr @"csbs$112", i64 2 }
@"csbs$113" = private unnamed_addr constant [6 x i8] c"<nil>\00", align 1
@"csbs$114" = private unnamed_addr constant [5 x i8] c"true\00", align 1
@"csbs$115" = private unnamed_addr constant [6 x i8] c"false\00", align 1
@"csbs$116" = private unnamed_addr constant [54 x i8] c"_fmt_int: buffer overrun. Width and precision too big\00", align 1
@"csbs$117" = private unnamed_addr constant [39 x i8] c"C:/Users/isimo/.odin/core/fmt/fmt.odin\00", align 1
@"csbs$118" = private unnamed_addr constant [9 x i8] c"_fmt_int\00", align 1
@"ggv$9b" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$117", i64 38 }, i32 918, i32 4, %..string { ptr @"csbs$118", i64 8 } }
@"csbs$119" = private unnamed_addr constant [31 x i8] c"_fmt_int: unknown base, whoops\00", align 1
@"ggv$9d" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$117", i64 38 }, i32 944, i32 3, %..string { ptr @"csbs$118", i64 8 } }
@"csbs$11a" = private unnamed_addr constant [13 x i8] c"_fmt_int_128\00", align 1
@"ggv$9f" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$117", i64 38 }, i32 994, i32 4, %..string { ptr @"csbs$11a", i64 12 } }
@"ggv$a0" = private unnamed_addr constant %..string { ptr @"csbs$116", i64 53 }
@"ggv$a1" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$117", i64 38 }, i32 1020, i32 3, %..string { ptr @"csbs$11a", i64 12 } }
@"ggv$a2" = private unnamed_addr constant %..string { ptr @"csbs$119", i64 30 }
@"csbs$11b" = private unnamed_addr constant [3 x i8] c"U+\00", align 1
@"ggv$a4" = private unnamed_addr constant %..string { ptr @"csbs$11b", i64 2 }
@"csbs$11c" = private unnamed_addr constant [21 x i8] c"Unhandled float size\00", align 1
@"csbs$11d" = private unnamed_addr constant [10 x i8] c"fmt_float\00", align 1
@"ggv$a5" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$117", i64 38 }, i32 1280, i32 9, %..string { ptr @"csbs$11d", i64 9 } }
@"ggv$a6" = private unnamed_addr constant %..string { ptr @"csbs$11c", i64 20 }
@"csbs$11e" = private unnamed_addr constant [3 x i8] c"0h\00", align 1
@"ggv$a7" = private unnamed_addr constant %..string { ptr @"csbs$11e", i64 2 }
@"csbs$11f" = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@"ggv$a8" = private unnamed_addr constant %..string { ptr @"csbs$11f", i64 2 }
@"csbs$120" = private unnamed_addr constant [13 x i8] c"#soa{data=0x\00", align 1
@"ggv$a9" = private unnamed_addr constant %..string { ptr @"csbs$120", i64 12 }
@"csbs$121" = private unnamed_addr constant [9 x i8] c", index=\00", align 1
@"ggv$aa" = private unnamed_addr constant %..string { ptr @"csbs$121", i64 8 }
@"ggv$ab" = private unnamed_addr constant %..string { ptr @"csbs$100", i64 1 }
@"csbs$122" = private unnamed_addr constant [19 x i8] c"%!(BAD ENUM VALUE=\00", align 1
@"ggv$ad" = private unnamed_addr constant %..string { ptr @"csbs$122", i64 18 }
@"csbs$123" = private unnamed_addr constant [22 x i8] c"unknown bit_size size\00", align 1
@"csbs$124" = private unnamed_addr constant [12 x i8] c"fmt_bit_set\00", align 1
@"ggv$af" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$117", i64 38 }, i32 1618, i32 9, %..string { ptr @"csbs$124", i64 11 } }
@"ggv$b0" = private unnamed_addr constant %..string { ptr @"csbs$123", i64 21 }
@"csbs$125" = private unnamed_addr constant [3 x i8] c",\0A\00", align 1
@"csbs$126" = private unnamed_addr constant [4 x i8] c"fmt\00", align 1
@"csbs$127" = private unnamed_addr constant [2 x i8] c"-\00", align 1
@"csbs$128" = private unnamed_addr constant [2 x i8] c"0\00", align 1
@"csbs$129" = private unnamed_addr constant [12 x i8] c"(raw union)\00", align 1
@"ggv$b8" = private unnamed_addr constant %..string { ptr @"csbs$129", i64 11 }
@"csbs$12a" = private unnamed_addr constant [3 x i8] c"{}\00", align 1
@"ggv$b9" = private unnamed_addr constant %..string { ptr @"csbs$12a", i64 2 }
@"csbs$12b" = private unnamed_addr constant [4 x i8] c" = \00", align 1
@"csbs$12c" = private unnamed_addr constant [6 x i8] c"any{}\00", align 1
@"ggv$c0" = private unnamed_addr constant %..string { ptr @"csbs$117", i64 38 }
@"ggv$c5" = private unnamed_addr constant %..string { ptr @"csbs$12c", i64 5 }
@"csbs$12d" = private unnamed_addr constant [37 x i8] c"C:/Users/isimo/.odin/core/os/os.odin\00", align 1
@"csbs$12e" = private unnamed_addr constant [29 x i8] c"read_entire_file_from_handle\00", align 1
@"ggv$c7" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$12d", i64 36 }, i32 128, i32 3, %..string { ptr @"csbs$12e", i64 28 } }
@runtime.string_decode_rune-.accept_sizes-22666 = internal unnamed_addr constant [256 x i8] c
@runtime.string_decode_rune-.accept_ranges-22895 = internal unnamed_addr constant [5 x %runtime.string_decode_rune.Accept_Range-2] [%runtime.string_decode_rune.Accept_Range-2 { i8 -128, i8 -65 }, %runtime.string_decode_rune.Accept_Range-2 { i8 -96, i8 -65 }, %runtime.string_decode_rune.Accept_Range-2 { i8 -128, i8 -97 }, %runtime.string_decode_rune.Accept_Range-2 { i8 -112, i8 -65 }, %runtime.string_decode_rune.Accept_Range-2 { i8 -128, i8 -113 }]
@"csbs$12f" = private unnamed_addr constant [3 x i8] c"0s\00", align 1
@"ggv$ca" = private unnamed_addr constant %..string { ptr @"csbs$12f", i64 2 }
@"csbs$131" = private unnamed_addr constant [11 x i8] c" +0000 UTC\00", align 1
@"ggv$cc" = private unnamed_addr constant %..string { ptr @"csbs$131", i64 10 }
@"csbs$132" = private unnamed_addr constant [23 x i8] c"Invalid union tag type\00", align 1
@"csbs$133" = private unnamed_addr constant [10 x i8] c"fmt_union\00", align 1
@"ggv$d0" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$117", i64 38 }, i32 2247, i32 8, %..string { ptr @"csbs$133", i64 9 } }
@"ggv$d1" = private unnamed_addr constant %..string { ptr @"csbs$132", i64 22 }
@"csbs$134" = private unnamed_addr constant [3 x i8] c"[\0A\00", align 1
@"ggv$dd" = private unnamed_addr constant %..string { ptr @"csbs$134", i64 2 }
@"ggv$df" = private unnamed_addr constant %..string { ptr @"csbs$125", i64 2 }
@"ggv$e1" = private unnamed_addr constant %..string { ptr @"csbs$12b", i64 3 }
@"csbs$135" = private unnamed_addr constant [2 x i8] c"=\00", align 1
@"ggv$e5" = private unnamed_addr constant %..string { ptr @"csbs$135", i64 1 }
@"csbs$136" = private unnamed_addr constant [4 x i8] c" @ \00", align 1
@"ggv$e8" = private unnamed_addr constant %..string { ptr @"csbs$136", i64 3 }
@"ggv$e9" = private unnamed_addr constant %..string zeroinitializer
@"ggv$ea" = private unnamed_addr constant %..string { ptr @"csbs$113", i64 5 }
@"csbs$137" = private unnamed_addr constant [48 x i8] c"C:/Users/isimo/.odin/core/sys/windows/util.odin\00", align 1
@"csbs$138" = private unnamed_addr constant [14 x i8] c"utf8_to_utf16\00", align 1
@"ggv$ec" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$137", i64 47 }, i32 41, i32 10, %..string { ptr @"csbs$138", i64 13 } }
@"ggv$ed" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$137", i64 47 }, i32 45, i32 3, %..string { ptr @"csbs$138", i64 13 } }
@"ggv$f6" = private unnamed_addr constant %..string { ptr @"csbs$db", i64 2 }
@"csbs$139" = private unnamed_addr constant [3 x i8] c"00\00", align 1
@"ggv$f7" = private unnamed_addr constant %..string { ptr @"csbs$139", i64 2 }
@"ggv$f8" = private unnamed_addr constant %..string { ptr @"csbs$d2", i64 2 }
@"ggv$f9" = private unnamed_addr constant %..string { ptr @"csbs$d3", i64 2 }
@"ggv$fa" = private unnamed_addr constant %..string { ptr @"csbs$d4", i64 2 }
@"ggv$fb" = private unnamed_addr constant %..string { ptr @"csbs$d5", i64 2 }
@"ggv$fc" = private unnamed_addr constant %..string { ptr @"csbs$d6", i64 2 }
@"ggv$fd" = private unnamed_addr constant %..string { ptr @"csbs$d7", i64 2 }
@"ggv$fe" = private unnamed_addr constant %..string { ptr @"csbs$d8", i64 2 }
@"ggv$ff" = private unnamed_addr constant %..string { ptr @"csbs$d9", i64 2 }
@"ggv$100" = private unnamed_addr constant { ptr, i64 } zeroinitializer
@"csbs$13a" = private unnamed_addr constant [44 x i8] c"C:/Users/isimo/.odin/core/bufio/writer.odin\00", align 1
@"csbs$13b" = private unnamed_addr constant [15 x i8] c"writer_destroy\00", align 1
@"ggv$101" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$13a", i64 43 }, i32 38, i32 2, %..string { ptr @"csbs$13b", i64 14 } }
@"csbs$13c" = private unnamed_addr constant [26 x i8] c"strconv: invalid bit_size\00", align 1
@"csbs$13d" = private unnamed_addr constant [53 x i8] c"C:/Users/isimo/.odin/core/strconv/generic_float.odin\00", align 1
@"csbs$13e" = private unnamed_addr constant [13 x i8] c"generic_ftoa\00", align 1
@"ggv$102" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$13d", i64 52 }, i32 60, i32 3, %..string { ptr @"csbs$13e", i64 12 } }
@"ggv$103" = private unnamed_addr constant %..string { ptr @"csbs$13c", i64 25 }
@"csbs$13f" = private unnamed_addr constant [4 x i8] c"NaN\00", align 1
@"csbs$140" = private unnamed_addr constant [5 x i8] c"-Inf\00", align 1
@"csbs$141" = private unnamed_addr constant [5 x i8] c"+Inf\00", align 1
@"csbs$142" = private unnamed_addr constant [42 x i8] c"is_integer_negative: Unknown integer size\00", align 1
@"csbs$143" = private unnamed_addr constant [48 x i8] c"C:/Users/isimo/.odin/core/strconv/integers.odin\00", align 1
@"csbs$144" = private unnamed_addr constant [20 x i8] c"is_integer_negative\00", align 1
@"ggv$104" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$143", i64 47 }, i32 45, i32 4, %..string { ptr @"csbs$144", i64 19 } }
@"ggv$105" = private unnamed_addr constant %..string { ptr @"csbs$142", i64 41 }
@"ggv$10c" = private unnamed_addr constant %..string { ptr @"csbs$dc", i64 3 }
@"ggv$10d" = private unnamed_addr constant %..string { ptr @"csbs$dd", i64 3 }
@"ggv$10e" = private unnamed_addr constant %..string { ptr @"csbs$de", i64 4 }
@"ggv$10f" = private unnamed_addr constant %..string { ptr @"csbs$df", i64 7 }
@"csbs$149" = private unnamed_addr constant [3 x i8] c"le\00", align 1
@"csbs$14a" = private unnamed_addr constant [3 x i8] c"be\00", align 1
@"ggv$112" = private unnamed_addr constant %..string { ptr @"csbs$e0", i64 4 }
@"ggv$113" = private unnamed_addr constant %..string { ptr @"csbs$149", i64 2 }
@"ggv$114" = private unnamed_addr constant %..string { ptr @"csbs$14a", i64 2 }
@"ggv$115" = private unnamed_addr constant %..string { ptr @"csbs$e1", i64 7 }
@"ggv$116" = private unnamed_addr constant %..string { ptr @"csbs$e2", i64 10 }
@"csbs$14b" = private unnamed_addr constant [8 x i8] c"cstring\00", align 1
@"ggv$117" = private unnamed_addr constant %..string { ptr @"csbs$14b", i64 7 }
@"ggv$118" = private unnamed_addr constant %..string { ptr @"csbs$e3", i64 6 }
@"ggv$119" = private unnamed_addr constant %..string { ptr @"csbs$e4", i64 4 }
@"ggv$11a" = private unnamed_addr constant %..string { ptr @"csbs$e5", i64 3 }
@"ggv$11b" = private unnamed_addr constant %..string { ptr @"csbs$e6", i64 6 }
@"ggv$11c" = private unnamed_addr constant %..string { ptr @"csbs$e7", i64 6 }
@"ggv$11d" = private unnamed_addr constant %..string { ptr @"csbs$e8", i64 1 }
@"ggv$11e" = private unnamed_addr constant %..string { ptr @"csbs$e9", i64 3 }
@"ggv$11f" = private unnamed_addr constant %..string { ptr @"csbs$ea", i64 6 }
@"ggv$120" = private unnamed_addr constant %..string { ptr @"csbs$eb", i64 4 }
@"ggv$121" = private unnamed_addr constant %..string { ptr @"csbs$ec", i64 2 }
@"csbs$14c" = private unnamed_addr constant [45 x i8] c"C:/Users/isimo/.odin/core/reflect/types.odin\00", align 1
@"ggv$122" = private unnamed_addr constant %..string { ptr @"csbs$14c", i64 44 }
@"csbs$14d" = private unnamed_addr constant [2 x i8] c"(\00", align 1
@"ggv$126" = private unnamed_addr constant %..string { ptr @"csbs$f0", i64 4 }
@"ggv$127" = private unnamed_addr constant %..string { ptr @"csbs$14d", i64 1 }
@"ggv$12a" = private unnamed_addr constant %..string { ptr @"csbs$ef", i64 1 }
@"csbs$14e" = private unnamed_addr constant [2 x i8] c"[\00", align 1
@"ggv$12d" = private unnamed_addr constant %..string { ptr @"csbs$f2", i64 7 }
@"ggv$12e" = private unnamed_addr constant %..string { ptr @"csbs$14e", i64 1 }
@"ggv$130" = private unnamed_addr constant %..string { ptr @"csbs$f3", i64 9 }
@"ggv$131" = private unnamed_addr constant %..string { ptr @"csbs$f4", i64 2 }
@"ggv$132" = private unnamed_addr constant %..string { ptr @"csbs$f5", i64 4 }
@"ggv$133" = private unnamed_addr constant %..string { ptr @"csbs$f6", i64 5 }
@"ggv$134" = private unnamed_addr constant %..string { ptr @"csbs$f7", i64 6 }
@"ggv$135" = private unnamed_addr constant %..string { ptr @"csbs$f8", i64 13 }
@"ggv$136" = private unnamed_addr constant %..string { ptr @"csbs$f9", i64 7 }
@"ggv$137" = private unnamed_addr constant %..string { ptr @"csbs$fa", i64 8 }
@"ggv$138" = private unnamed_addr constant %..string { ptr @"csbs$fb", i64 11 }
@"ggv$13c" = private unnamed_addr constant %..string { ptr @"csbs$f1", i64 2 }
@"ggv$13d" = private unnamed_addr constant %..string { ptr @"csbs$fe", i64 6 }
@"ggv$13e" = private unnamed_addr constant %..string { ptr @"csbs$ff", i64 8 }
@"csbs$14f" = private unnamed_addr constant [13 x i8] c"#shared_nil \00", align 1
@"ggv$13f" = private unnamed_addr constant %..string { ptr @"csbs$14f", i64 12 }
@"ggv$140" = private unnamed_addr constant %..string { ptr @"csbs$fc", i64 7 }
@"ggv$143" = private unnamed_addr constant %..string { ptr @"csbs$101", i64 5 }
@"ggv$144" = private unnamed_addr constant %..string { ptr @"csbs$102", i64 2 }
@"ggv$146" = private unnamed_addr constant %..string { ptr @"csbs$103", i64 8 }
@"csbs$150" = private unnamed_addr constant [4 x i8] c"..=\00", align 1
@"ggv$148" = private unnamed_addr constant %..string { ptr @"csbs$150", i64 3 }
@"ggv$149" = private unnamed_addr constant %..string { ptr @"csbs$105", i64 2 }
@"ggv$14a" = private unnamed_addr constant %..string { ptr @"csbs$106", i64 6 }
@"ggv$14d" = private unnamed_addr constant %..string { ptr @"csbs$107", i64 10 }
@"ggv$14e" = private unnamed_addr constant %..string { ptr @"csbs$fd", i64 2 }
@"ggv$14f" = private unnamed_addr constant %..string { ptr @"csbs$108", i64 7 }
@"ggv$150" = private unnamed_addr constant %..string { ptr @"csbs$ee", i64 2 }
@"ggv$151" = private unnamed_addr constant %..string { ptr @"csbs$109", i64 1 }
@"csbs$151" = private unnamed_addr constant [47 x i8] c"C:/Users/isimo/.odin/core/reflect/reflect.odin\00", align 1
@"ggv$152" = private unnamed_addr constant %..string { ptr @"csbs$151", i64 46 }
@"csbs$152" = private unnamed_addr constant [67 x i8] c"C:/Users/isimo/.odin/core/runtime/default_temporary_allocator.odin\00", align 1
@"csbs$153" = private unnamed_addr constant [31 x i8] c"default_temp_allocator_destroy\00", align 1
@"ggv$153" = private unnamed_addr constant %runtime.Source_Code_Location { %..string { ptr @"csbs$152", i64 66 }, i32 33, i32 4, %..string { ptr @"csbs$153", i64 30 } }
@"csbs$154" = private unnamed_addr constant [33 x i8] c" Invalid slice length for make: \00", align 1
@"ggv$154" = private unnamed_addr constant %..string { ptr @"csbs$154", i64 32 }
@"csbs$156" = private unnamed_addr constant [30 x i8] c" Invalid type assertion from \00", align 1
@"csbs$157" = private unnamed_addr constant [5 x i8] c" to \00", align 1
@"ggv$158" = private unnamed_addr constant %..string { ptr @"csbs$156", i64 29 }
@"ggv$159" = private unnamed_addr constant %..string { ptr @"csbs$157", i64 4 }
@"csbs$158" = private unnamed_addr constant [16 x i8] c", actual type: \00", align 1
@"ggv$15a" = private unnamed_addr constant %..string { ptr @"csbs$158", i64 15 }

; Function Attrs: noinline nounwind optnone
define internal fastcc void @"__$startup_type_info"() unnamed_addr #0 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 65), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 65, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 65, i32 2), align 4
  store i64 720575940379279425, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 65, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 65, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 65, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23, i32 2), align 4
  store i64 432345564227567639, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23, i32 4), align 8
  store i64 7, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 24), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 24, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 24, i32 2), align 4
  store i64 720575940379279384, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 24, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 24, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 24, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9, i32 2), align 4
  store i64 72057594037927945, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9, i32 4), align 8
  store %runtime.Type_Info_Integer zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1, i32 2), align 4
  store i64 4683743612465315841, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 63), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 63, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 63, i32 2), align 4
  store i64 720575940379279423, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 63, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 63, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 63, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12, i32 2), align 4
  store i64 720575940379279372, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 13) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12, i32 5, i32 1), align 8
  store i64 160, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 13), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 13, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 13, i32 2), align 4
  store i64 3602879701896396813, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 13, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 13, i32 5), ptr @"ggv$0", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 13, i32 5, i32 1), align 8
  store i64 160, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 14), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 14, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 14, i32 2), align 4
  store i64 1297036692682702862, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 14, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr @"__$type_info_types_data", align 8
  store %..string { ptr @"csbs$45", i64 4 }, ptr @"__$type_info_names_data", align 8
  store i64 0, ptr @"__$type_info_offsets_data", align 8
  store i8 0, ptr @"__$type_info_usings_data", align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr (ptr, ptr @"__$type_info_types_data", i64 1), align 8
  store %..string { ptr @"csbs$46", i64 5 }, ptr getelementptr (%..string, ptr @"__$type_info_names_data", i64 1), align 8
  store i64 8, ptr getelementptr (i64, ptr @"__$type_info_offsets_data", i64 1), align 8
  store i8 0, ptr getelementptr (i8, ptr @"__$type_info_usings_data", i64 1), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 15), ptr getelementptr (ptr, ptr @"__$type_info_types_data", i64 2), align 8
  store %..string { ptr @"csbs$47", i64 5 }, ptr getelementptr (%..string, ptr @"__$type_info_names_data", i64 2), align 8
  store i64 16, ptr getelementptr (i64, ptr @"__$type_info_offsets_data", i64 2), align 8
  store i8 0, ptr getelementptr (i8, ptr @"__$type_info_usings_data", i64 2), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 4), ptr getelementptr (ptr, ptr @"__$type_info_types_data", i64 3), align 8
  store %..string { ptr @"csbs$48", i64 2 }, ptr getelementptr (%..string, ptr @"__$type_info_names_data", i64 3), align 8
  store i64 24, ptr getelementptr (i64, ptr @"__$type_info_offsets_data", i64 3), align 8
  store i8 0, ptr getelementptr (i8, ptr @"__$type_info_usings_data", i64 3), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 20), ptr getelementptr (ptr, ptr @"__$type_info_types_data", i64 4), align 8
  store %..string { ptr @"csbs$49", i64 7 }, ptr getelementptr (%..string, ptr @"__$type_info_names_data", i64 4), align 8
  store i64 32, ptr getelementptr (i64, ptr @"__$type_info_offsets_data", i64 4), align 8
  store i8 0, ptr getelementptr (i8, ptr @"__$type_info_usings_data", i64 4), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 14, i32 5), ptr @"ggv$1", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 14, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 15), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 15, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 15, i32 2), align 4
  store i64 3891110078048108559, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 15, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 15, i32 5), ptr @"ggv$2", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 15, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 16), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 16, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 16, i32 2), align 4
  store i64 1585267068834414608, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 16, i32 4), align 8
  store %runtime.Type_Info_Bit_Set { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 17), ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 19), i64 0, i64 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 16, i32 5), align 8
  store i64 23, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 16, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 17), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 17, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 17, i32 2), align 4
  store i64 3746994889972252689, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 17, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 17, i32 5), ptr @"ggv$3", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 17, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 18), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 18, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 18, i32 2), align 4
  store i64 1441151880758558738, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 18, i32 4), align 8
  store %runtime.Type_Info_Enum { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9), { ptr, i64 } { ptr @"$enum_names-18", i64 2 }, { ptr, i64 } { ptr @"$enum_values-18", i64 2 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 18, i32 5), align 8
  store i64 21, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 18, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 19), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 19, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 19, i32 2), align 4
  store i64 72057594037927955, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 19, i32 4), align 8
  store %runtime.Type_Info_Integer zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 19, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 19, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 4), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 4, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 4, i32 2), align 4
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 4, i32 4), align 8
  store i64 10, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 4, i32 5, i32 1), align 8
  store i64 128, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 20), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 20, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 20, i32 2), align 4
  store i64 1369094286720630804, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 20, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 21), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 5), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 28), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 6), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 33), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 7), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 35), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 8), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 37), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 9), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 38), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 10), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 39), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 11), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 41), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 12), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 42), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 13), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 43), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 14), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 44), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 15), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 46), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 16), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 47), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 17), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 51), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 18), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 53), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 19), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 57), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 20), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 59), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 21), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 60), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 22), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 66), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 23), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 79), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 24), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 81), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 25), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 85), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 26), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 10), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 27), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 98), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 28), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 99), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 29), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 101), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 30), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 102), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 31), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 104), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 32), align 8
  store %runtime.Type_Info_Union { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 5), i64 28 }, i64 120, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 7), ptr null, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 20, i32 5), align 8
  store i64 20, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 20, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 7), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 7, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 7, i32 2), align 4
  store i64 72057594037927943, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 7, i32 4), align 8
  store %runtime.Type_Info_Integer zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 7, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 7, i32 5, i32 1), align 8
  store i64 80, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 21), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 21, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 21, i32 2), align 4
  store i64 3602879701896396821, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 21, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 21, i32 5), ptr @"ggv$4", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 21, i32 5, i32 1), align 8
  store i64 80, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 22), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 22, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 22, i32 2), align 4
  store i64 1297036692682702870, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 22, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 33), align 8
  store %..string { ptr @"csbs$4f", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 5), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 5), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 5), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 34), align 8
  store %..string { ptr @"csbs$50", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 6), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 6), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 6), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 35), align 8
  store %..string { ptr @"csbs$51", i64 3 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 7), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 7), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 7), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 25), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 36), align 8
  store %..string { ptr @"csbs$52", i64 3 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 8), align 8
  store i64 40, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 8), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 8), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 22, i32 5), ptr @"ggv$5", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 22, i32 5, i32 1), align 8
  store i64 40, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 25), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 25, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 25, i32 2), align 4
  store i64 3602879701896396825, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 25, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 25, i32 5), ptr @"ggv$6", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 25, i32 5, i32 1), align 8
  store i64 40, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 26), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 26, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 26, i32 2), align 4
  store i64 1297036692682702874, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 26, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 37), align 8
  store %..string { ptr @"csbs$54", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 9), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 9), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 9), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 27), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 38), align 8
  store %..string { ptr @"csbs$55", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 10), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 10), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 10), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 27), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 39), align 8
  store %..string { ptr @"csbs$56", i64 6 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 11), align 8
  store i64 20, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 11), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 11), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 40), align 8
  store %..string { ptr @"csbs$57", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 12), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 12), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 12), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 26, i32 5), ptr @"ggv$7", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 26, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 27), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 27, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 27, i32 2), align 4
  store i64 4683743612465315867, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 27, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 27, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 27, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 28), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 28, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 28, i32 2), align 4
  store i64 3602879701896396828, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 28, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 28, i32 5), ptr @"ggv$8", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 28, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 29), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 29, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 29, i32 2), align 4
  store i64 1297036692682702877, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 29, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 41), align 8
  store %..string { ptr @"csbs$59", i64 6 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 13), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 13), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 13), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 31), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 42), align 8
  store %..string { ptr @"csbs$5a", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 14), align 8
  store i64 1, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 14), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 14), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 29, i32 5), ptr @"ggv$9", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 29, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30, i32 2), align 4
  store i64 504403158265495582, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30, i32 4), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 31), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 31, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 31, i32 2), align 4
  store i64 3746994889972252703, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 31, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 31, i32 5), ptr @"ggv$a", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 31, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 32), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 32, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 32, i32 2), align 4
  store i64 1441151880758558752, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 32, i32 4), align 8
  store %runtime.Type_Info_Enum { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9), { ptr, i64 } { ptr @"$enum_names-32", i64 3 }, { ptr, i64 } { ptr @"$enum_values-32", i64 3 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 32, i32 5), align 8
  store i64 21, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 32, i32 5, i32 1), align 8
  store i64 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 33), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 33, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 33, i32 2), align 4
  store i64 3602879701896396833, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 33, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 33, i32 5), ptr @"ggv$b", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 33, i32 5, i32 1), align 8
  store i64 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34, i32 2), align 4
  store i64 1297036692682702882, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34, i32 4), align 8
  call void @llvm.memset.p0.i64(ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34, i32 5), i8 0, i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 34, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 35), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 35, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 35, i32 2), align 4
  store i64 3602879701896396835, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 35, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 35, i32 5), ptr @"ggv$c", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 35, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 36), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 36, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 36, i32 2), align 4
  store i64 1297036692682702884, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 36, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 31), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 43), align 8
  store %..string { ptr @"csbs$5a", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 15), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 15), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 15), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 36, i32 5), ptr @"ggv$d", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 36, i32 5, i32 1), align 8
  store i64 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 37), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 37, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 37, i32 2), align 4
  store i64 3602879701896396837, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 37, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 37, i32 5), ptr @"ggv$e", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 37, i32 5, i32 1), align 8
  store i64 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 38), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 38, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 38, i32 2), align 4
  store i64 3602879701896396838, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 38, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 38, i32 5), ptr @"ggv$f", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 38, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 39), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 39, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 39, i32 2), align 4
  store i64 3602879701896396839, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 39, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 39, i32 5), ptr @"ggv$10", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 39, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 40), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 40, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 40, i32 2), align 4
  store i64 1297036692682702888, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 40, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 44), align 8
  store %..string { ptr @"csbs$64", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 16), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 16), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 16), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 40, i32 5), ptr @"ggv$11", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 40, i32 5, i32 1), align 8
  store i64 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 41), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 41, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 41, i32 2), align 4
  store i64 3602879701896396841, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 41, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 41, i32 5), ptr @"ggv$12", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 41, i32 5, i32 1), align 8
  store i64 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 42), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 42, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 42, i32 2), align 4
  store i64 3602879701896396842, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 42, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 42, i32 5), ptr @"ggv$13", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 42, i32 5, i32 1), align 8
  store i64 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 43), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 43, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 43, i32 2), align 4
  store i64 3602879701896396843, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 43, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 43, i32 5), ptr @"ggv$14", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 43, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 44), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 44, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 44, i32 2), align 4
  store i64 3602879701896396844, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 44, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 44, i32 5), ptr @"ggv$15", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 44, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45, i32 2), align 4
  store i64 1297036692682702893, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 45), align 8
  store %..string { ptr @"csbs$69", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 17), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 17), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 17), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45, i32 5), ptr @"ggv$16", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 45, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 46), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 46, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 46, i32 2), align 4
  store i64 3602879701896396846, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 46, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 46, i32 5), ptr @"ggv$17", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 46, i32 5, i32 1), align 8
  store i64 24, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 47), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 47, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 47, i32 2), align 4
  store i64 3602879701896396847, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 47, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 47, i32 5), ptr @"ggv$18", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 47, i32 5, i32 1), align 8
  store i64 24, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 48), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 48, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 48, i32 2), align 4
  store i64 1297036692682702896, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 48, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 46), align 8
  store %..string { ptr @"csbs$6c", i64 6 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 18), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 18), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 18), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 47), align 8
  store %..string { ptr @"csbs$6d", i64 7 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 19), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 19), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 19), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 48), align 8
  store %..string { ptr @"csbs$6e", i64 8 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 20), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 20), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 20), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 49), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 49), align 8
  store %..string { ptr @"csbs$6f", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 21), align 8
  store i64 17, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 21), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 21), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 48, i32 5), ptr @"ggv$19", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 48, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 49), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 49, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 49, i32 2), align 4
  store i64 3746994889972252721, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 49, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 49, i32 5), ptr @"ggv$1a", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 49, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 50), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 50, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 50, i32 2), align 4
  store i64 1441151880758558770, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 50, i32 4), align 8
  store %runtime.Type_Info_Enum { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9), { ptr, i64 } { ptr @"$enum_names-50", i64 10 }, { ptr, i64 } { ptr @"$enum_values-50", i64 10 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 50, i32 5), align 8
  store i64 21, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 50, i32 5, i32 1), align 8
  store i64 24, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 51), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 51, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 51, i32 2), align 4
  store i64 3602879701896396851, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 51, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 51, i32 5), ptr @"ggv$1b", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 51, i32 5, i32 1), align 8
  store i64 24, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 52), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 52, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 52, i32 2), align 4
  store i64 1297036692682702900, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 52, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 50), align 8
  store %..string { ptr @"csbs$69", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 22), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 22), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 22), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 51), align 8
  store %..string { ptr @"csbs$7c", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 23), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 23), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 23), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 52), align 8
  store %..string { ptr @"csbs$7d", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 24), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 24), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 24), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 52, i32 5), ptr @"ggv$1c", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 52, i32 5, i32 1), align 8
  store i64 56, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 53), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 53, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 53, i32 2), align 4
  store i64 3602879701896396853, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 53, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 53, i32 5), ptr @"ggv$1d", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 53, i32 5, i32 1), align 8
  store i64 56, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 54), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 54, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 54, i32 2), align 4
  store i64 1297036692682702902, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 54, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 53), align 8
  store %..string { ptr @"csbs$69", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 25), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 25), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 25), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 54), align 8
  store %..string { ptr @"csbs$7f", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 26), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 26), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 26), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 55), align 8
  store %..string { ptr @"csbs$7c", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 27), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 27), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 27), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 56), align 8
  store %..string { ptr @"csbs$7d", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 28), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 28), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 28), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 57), align 8
  store %..string { ptr @"csbs$80", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 29), align 8
  store i64 32, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 29), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 29), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 58), align 8
  store %..string { ptr @"csbs$81", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 30), align 8
  store i64 40, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 30), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 30), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 59), align 8
  store %..string { ptr @"csbs$82", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 31), align 8
  store i64 48, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 31), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 31), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 54, i32 5), ptr @"ggv$1e", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 54, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55, i32 2), align 4
  store i64 6989586621679009847, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55, i32 5), ptr @"ggv$1f", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56, i32 2), align 4
  store i64 4683743612465315896, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 57), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 57, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 57, i32 2), align 4
  store i64 3602879701896396857, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 57, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 57, i32 5), ptr @"ggv$20", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 57, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 58), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 58, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 58, i32 2), align 4
  store i64 1297036692682702906, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 58, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 60), align 8
  store %..string { ptr @"csbs$69", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 32), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 32), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 32), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 61), align 8
  store %..string { ptr @"csbs$7c", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 33), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 33), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 33), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 58, i32 5), ptr @"ggv$21", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 58, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 59), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 59, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 59, i32 2), align 4
  store i64 3602879701896396859, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 59, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 59, i32 5), ptr @"ggv$22", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 59, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 60), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 60, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 60, i32 2), align 4
  store i64 3602879701896396860, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 60, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 60, i32 5), ptr @"ggv$23", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 60, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 61), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 61, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 61, i32 2), align 4
  store i64 1297036692682702909, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 61, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 62), align 8
  store %..string { ptr @"csbs$87", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 34), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 34), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 34), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 63), align 8
  store %..string { ptr @"csbs$88", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 35), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 35), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 35), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 61, i32 5), ptr @"ggv$24", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 61, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62, i32 2), align 4
  store i64 1152921504606847038, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62, i32 4), align 8
  store %runtime.Type_Info_Slice { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), i64 8 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62, i32 5), align 8
  store i64 17, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64, i32 2), align 4
  store i64 1152921504606847040, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64, i32 4), align 8
  store %runtime.Type_Info_Slice { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 23), i64 16 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64, i32 5), align 8
  store i64 17, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64, i32 5, i32 1), align 8
  store i64 120, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 66), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 66, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 66, i32 2), align 4
  store i64 3602879701896396866, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 66, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 66, i32 5), ptr @"ggv$25", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 66, i32 5, i32 1), align 8
  store i64 120, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 67), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 67, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 67, i32 2), align 4
  store i64 1297036692682702915, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 67, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 64), align 8
  store %..string { ptr @"csbs$87", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 36), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 36), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 36), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 65), align 8
  store %..string { ptr @"csbs$88", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 37), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 37), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 37), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 68), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 66), align 8
  store %..string { ptr @"csbs$8a", i64 7 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 38), align 8
  store i64 32, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 38), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 38), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 71), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 67), align 8
  store %..string { ptr @"csbs$8b", i64 6 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 39), align 8
  store i64 48, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 39), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 39), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 68), align 8
  store %..string { ptr @"csbs$8c", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 40), align 8
  store i64 64, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 40), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 40), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 69), align 8
  store %..string { ptr @"csbs$8d", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 41), align 8
  store i64 80, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 41), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 41), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 70), align 8
  store %..string { ptr @"csbs$8e", i64 12 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 42), align 8
  store i64 81, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 42), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 42), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 71), align 8
  store %..string { ptr @"csbs$8f", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 43), align 8
  store i64 82, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 43), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 43), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 72), align 8
  store %..string { ptr @"csbs$90", i64 12 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 44), align 8
  store i64 83, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 44), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 44), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 73), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 73), align 8
  store %..string { ptr @"csbs$91", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 45), align 8
  store i64 88, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 45), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 45), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 77), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 74), align 8
  store %..string { ptr @"csbs$92", i64 8 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 46), align 8
  store i64 96, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 46), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 46), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 75), align 8
  store %..string { ptr @"csbs$93", i64 13 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 47), align 8
  store i64 104, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 47), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 47), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 76), align 8
  store %..string { ptr @"csbs$94", i64 7 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 48), align 8
  store i64 112, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 48), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 48), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 67, i32 5), ptr @"ggv$26", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 67, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 68), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 68, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 68, i32 2), align 4
  store i64 1152921504606847044, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 68, i32 4), align 8
  store %runtime.Type_Info_Slice { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), i64 8 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 68, i32 5), align 8
  store i64 17, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 68, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69, i32 2), align 4
  store i64 72057594037928005, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69, i32 4), align 8
  store %runtime.Type_Info_Integer zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 70), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 70, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 70, i32 2), align 4
  store i64 720575940379279430, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 70, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 70, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 70, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 71), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 71, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 71, i32 2), align 4
  store i64 1152921504606847047, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 71, i32 4), align 8
  store %runtime.Type_Info_Slice { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), i64 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 71, i32 5), align 8
  store i64 17, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 71, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 72), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 72, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 72, i32 2), align 4
  store i64 720575940379279432, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 72, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 72, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 72, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 73), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 73, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 73, i32 2), align 4
  store i64 3170534137668829257, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 73, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 73, i32 5), ptr @"ggv$27", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 73, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 74), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 74, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 74, i32 2), align 4
  store i64 864691128455135306, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 74, i32 4), align 8
  store %runtime.Type_Info_Procedure { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 75), ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 76), i8 0, i8 2, [6 x i8] zeroinitializer }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 74, i32 5), align 8
  store i64 13, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 74, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 75), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 75, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 75, i32 2), align 4
  store i64 1224979098644774987, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 75, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 77), align 8
  store %..string { ptr @"csbs$96", i64 1 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 49), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 78), align 8
  store %..string { ptr @"csbs$96", i64 1 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 50), align 8
  store %runtime.Type_Info_Parameters { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 77), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 49), i64 2 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 75, i32 5), align 8
  store i64 18, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 75, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3, i32 2), align 4
  store i64 720575940379279363, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3, i32 4), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 76), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 76, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 76, i32 2), align 4
  store i64 1224979098644774988, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 76, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 79), align 8
  store %runtime.Type_Info_Parameters { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 79), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 51), i64 1 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 76, i32 5), align 8
  store i64 18, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 76, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 77), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 77, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 77, i32 2), align 4
  store i64 3746994889972252749, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 77, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 77, i32 5), ptr @"ggv$28", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 77, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 78), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 78, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 78, i32 2), align 4
  store i64 1441151880758558798, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 78, i32 4), align 8
  store %runtime.Type_Info_Enum { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 9), { ptr, i64 } { ptr @"$enum_names-78", i64 4 }, { ptr, i64 } { ptr @"$enum_values-78", i64 4 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 78, i32 5), align 8
  store i64 21, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 78, i32 5, i32 1), align 8
  store i64 48, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 79), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 79, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 79, i32 2), align 4
  store i64 3602879701896396879, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 79, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 79, i32 5), ptr @"ggv$29", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 79, i32 5, i32 1), align 8
  store i64 48, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 80), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 80, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 80, i32 2), align 4
  store i64 1297036692682702928, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 80, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 62), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 80), align 8
  store %..string { ptr @"csbs$9c", i64 8 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 52), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 49), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 49), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 81), align 8
  store %..string { ptr @"csbs$9d", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 53), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 50), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 50), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 82), align 8
  store %..string { ptr @"csbs$9e", i64 8 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 54), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 51), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 51), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 73), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 83), align 8
  store %..string { ptr @"csbs$91", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 55), align 8
  store i64 32, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 52), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 52), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 84), align 8
  store %..string { ptr @"csbs$90", i64 12 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 56), align 8
  store i64 40, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 53), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 53), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 85), align 8
  store %..string { ptr @"csbs$9f", i64 6 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 57), align 8
  store i64 41, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 54), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 54), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 30), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 86), align 8
  store %..string { ptr @"csbs$a0", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 58), align 8
  store i64 42, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 55), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 55), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 80, i32 5), ptr @"ggv$2a", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 80, i32 5, i32 1), align 8
  store i64 40, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 81), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 81, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 81, i32 2), align 4
  store i64 3602879701896396881, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 81, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 81, i32 5), ptr @"ggv$2b", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 81, i32 5, i32 1), align 8
  store i64 40, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 82), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 82, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 82, i32 2), align 4
  store i64 1297036692682702930, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 82, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 87), align 8
  store %..string { ptr @"csbs$50", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 59), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 56), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 56), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 64), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 88), align 8
  store %..string { ptr @"csbs$88", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 60), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 57), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 57), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 83), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 89), align 8
  store %..string { ptr @"csbs$a2", i64 6 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 61), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 58), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 58), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 82, i32 5), ptr @"ggv$2c", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 82, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 83), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 83, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 83, i32 2), align 4
  store i64 1152921504606847059, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 83, i32 4), align 8
  store %runtime.Type_Info_Slice { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55), i64 8 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 83, i32 5), align 8
  store i64 17, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 83, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 84), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 84, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 84, i32 2), align 4
  store i64 720575940379279444, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 84, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 55) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 84, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 84, i32 5, i32 1), align 8
  store i64 24, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 85), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 85, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 85, i32 2), align 4
  store i64 3602879701896396885, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 85, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 85, i32 5), ptr @"ggv$2d", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 85, i32 5, i32 1), align 8
  store i64 24, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 86), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 86, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 86, i32 2), align 4
  store i64 1297036692682702934, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 86, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 90), align 8
  store %..string { ptr @"csbs$a4", i64 3 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 62), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 59), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 59), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 91), align 8
  store %..string { ptr @"csbs$a5", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 63), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 60), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 60), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 87), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 92), align 8
  store %..string { ptr @"csbs$a6", i64 8 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 64), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 61), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 61), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 86, i32 5), ptr @"ggv$2e", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 86, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 87), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 87, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 87, i32 2), align 4
  store i64 720575940379279447, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 87, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 88) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 87, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 87, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 88), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 88, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 88, i32 2), align 4
  store i64 3602879701896396888, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 88, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 88, i32 5), ptr @"ggv$2f", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 88, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 89), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 89, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 89, i32 2), align 4
  store i64 1297036692682702937, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 89, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 90), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 93), align 8
  store %..string { ptr @"csbs$a9", i64 2 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 65), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 62), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 62), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 90), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 94), align 8
  store %..string { ptr @"csbs$aa", i64 2 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 66), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 63), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 63), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 93), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 95), align 8
  store %..string { ptr @"csbs$ab", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 67), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 64), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 64), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 96), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 96), align 8
  store %..string { ptr @"csbs$ac", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 68), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 65), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 65), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 89, i32 5), ptr @"ggv$30", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 89, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 90), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 90, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 90, i32 2), align 4
  store i64 720575940379279450, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 90, i32 4), align 8
  store %runtime.Type_Info_Pointer { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 91) }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 90, i32 5), align 8
  store i64 11, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 90, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 91), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 91, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 91, i32 2), align 4
  store i64 3602879701896396891, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 91, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 91, i32 5), ptr @"ggv$31", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 91, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 92), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 92, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 92, i32 2), align 4
  store i64 1297036692682702940, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 92, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 97), align 8
  store %..string { ptr @"csbs$ae", i64 12 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 69), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 66), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 66), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 98), align 8
  store %..string { ptr @"csbs$af", i64 13 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 70), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 67), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 67), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 99), align 8
  store %..string { ptr @"csbs$b0", i64 12 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 71), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 68), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 68), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 100), align 8
  store %..string { ptr @"csbs$b1", i64 17 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 72), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 69), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 69), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 92, i32 5), ptr @"ggv$32", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 92, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 93), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 93, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 93, i32 2), align 4
  store i64 864691128455135325, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 93, i32 4), align 8
  store %runtime.Type_Info_Procedure { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 94), ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 95), i8 0, i8 2, [6 x i8] zeroinitializer }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 93, i32 5), align 8
  store i64 13, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 93, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 94), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 94, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 94, i32 2), align 4
  store i64 1224979098644775006, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 94, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 101), align 8
  store %..string { ptr @"csbs$a4", i64 3 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 73), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 102), align 8
  store %..string { ptr @"csbs$b2", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 74), align 8
  store %runtime.Type_Info_Parameters { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 101), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 73), i64 2 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 94, i32 5), align 8
  store i64 18, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 94, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 95), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 95, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 95, i32 2), align 4
  store i64 1224979098644775007, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 95, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 69), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 103), align 8
  store %runtime.Type_Info_Parameters { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 103), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 75), i64 1 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 95, i32 5), align 8
  store i64 18, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 95, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 96), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 96, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 96, i32 2), align 4
  store i64 864691128455135328, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 96, i32 4), align 8
  store %runtime.Type_Info_Procedure { ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 97), ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 76), i8 0, i8 2, [6 x i8] zeroinitializer }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 96, i32 5), align 8
  store i64 13, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 96, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 97), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 97, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 97, i32 2), align 4
  store i64 1224979098644775009, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 97, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 104), align 8
  store %..string { ptr @"csbs$b3", i64 3 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 76), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 3), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 105), align 8
  store %..string { ptr @"csbs$b4", i64 3 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 77), align 8
  store %runtime.Type_Info_Parameters { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 104), i64 2 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 76), i64 2 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 97, i32 5), align 8
  store i64 18, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 97, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 10), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 10, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 10, i32 2), align 4
  store i64 3602879701896396810, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 10, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 10, i32 5), ptr @"ggv$33", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 10, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 11), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 11, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 11, i32 2), align 4
  store i64 1297036692682702859, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 11, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 106), align 8
  store %..string { ptr @"csbs$69", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 78), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 70), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 70), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 107), align 8
  store %..string { ptr @"csbs$b6", i64 10 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 79), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 71), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 71), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 108), align 8
  store %..string { ptr @"csbs$b7", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 80), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 72), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 72), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 109), align 8
  store %..string { ptr @"csbs$b8", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 81), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 73), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 73), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 11, i32 5), ptr @"ggv$34", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 11, i32 5, i32 1), align 8
  store i64 24, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 98), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 98, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 98, i32 2), align 4
  store i64 3602879701896396898, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 98, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 98, i32 5), ptr @"ggv$35", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 98, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 99), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 99, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 99, i32 2), align 4
  store i64 3602879701896396899, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 99, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 99, i32 5), ptr @"ggv$36", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 99, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 100), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 100, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 100, i32 2), align 4
  store i64 1297036692682702948, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 100, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 110), align 8
  store %..string { ptr @"csbs$bb", i64 7 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 82), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 74), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 74), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 111), align 8
  store %..string { ptr @"csbs$bc", i64 12 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 83), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 75), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 75), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 100, i32 5), ptr @"ggv$37", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 100, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 101), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 101, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 101, i32 2), align 4
  store i64 3602879701896396901, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 101, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 101, i32 5), ptr @"ggv$38", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 101, i32 5, i32 1), align 8
  store i64 40, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 102), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 102, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 102, i32 2), align 4
  store i64 3602879701896396902, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 102, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 102, i32 5), ptr @"ggv$39", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 102, i32 5, i32 1), align 8
  store i64 40, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 103), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 103, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 103, i32 2), align 4
  store i64 1297036692682702951, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 103, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 12), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 112), align 8
  store %..string { ptr @"csbs$69", i64 4 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 84), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 76), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 76), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 113), align 8
  store %..string { ptr @"csbs$7c", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 85), align 8
  store i64 8, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 77), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 77), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 114), align 8
  store %..string { ptr @"csbs$bf", i64 11 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 86), align 8
  store i64 16, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 78), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 78), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 115), align 8
  store %..string { ptr @"csbs$c0", i64 9 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 87), align 8
  store i64 24, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 79), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 79), align 1
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 116), align 8
  store %..string { ptr @"csbs$c1", i64 12 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 88), align 8
  store i64 32, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 80), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 80), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 103, i32 5), ptr @"ggv$3a", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 103, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 104), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 104, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 104, i32 2), align 4
  store i64 3602879701896396904, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 104, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 104, i32 5), ptr @"ggv$3b", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 104, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 2), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 2, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 2, i32 2), align 4
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 2, i32 4), align 8
  store i64 9, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 2, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 107), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 107, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 107, i32 2), align 4
  store i64 72057594037928043, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 107, i32 4), align 8
  store %runtime.Type_Info_Integer zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 107, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 107, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 5), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 5, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 5, i32 2), align 4
  store i64 3674937295934324741, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 5, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 5, i32 5), ptr @"ggv$3c", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 5, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 6), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 6, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 6, i32 2), align 4
  store i64 1369094286720630790, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 6, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 117), align 8
  store %runtime.Type_Info_Union { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 117), i64 1 }, i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 7), ptr null, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 6, i32 5), align 8
  store i64 20, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 6, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 8), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 8, i32 1), align 8
  store i32 0, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 8, i32 2), align 4
  store i64 1224979098644774920, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 8, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 1), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 118), align 8
  store %..string { ptr @"csbs$c5", i64 1 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 89), align 8
  store %runtime.Type_Info_Parameters { { ptr, i64 } { ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 118), i64 1 }, { ptr, i64 } { ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 89), i64 1 } }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 8, i32 5), align 8
  store i64 18, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 8, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 105), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 105, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 105, i32 2), align 4
  store i64 72057594037928041, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 105, i32 4), align 8
  store %runtime.Type_Info_Integer zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 105, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 105, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 106), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 106, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 106, i32 2), align 4
  store i64 4755801206503243882, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 106, i32 4), align 8
  store i64 3, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 106, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 138), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 138, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 138, i32 2), align 4
  store i64 4683743612465315978, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 138, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 138, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 138, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 132), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 132, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 132, i32 2), align 4
  store i64 4683743612465315972, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 132, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 132, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 132, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 147), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 147, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 147, i32 2), align 4
  store i64 4683743612465315987, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 147, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 147, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 147, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 108), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 108, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 108, i32 2), align 4
  store i64 72057594037928044, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 108, i32 4), align 8
  store %runtime.Type_Info_Integer zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 108, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 108, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 144), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 144, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 144, i32 2), align 4
  store i64 72057594037928080, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 144, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 144, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 144, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 139), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 139, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 139, i32 2), align 4
  store i64 72057594037928075, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 139, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 139, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 139, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 113), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 113, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 113, i32 2), align 4
  store i64 72057594037928049, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 113, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 113, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 113, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 133), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 133, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 133, i32 2), align 4
  store i64 72057594037928069, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 133, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 133, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 133, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 114), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 114, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 114, i32 2), align 4
  store i64 4683743612465315954, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 114, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 114, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 114, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 127), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 127, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 127, i32 2), align 4
  store i64 4683743612465315967, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 127, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 127, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 127, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 143), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 143, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 143, i32 2), align 4
  store i64 4683743612465315983, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 143, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 143, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 143, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 123), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 123, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 123, i32 2), align 4
  store i64 4683743612465315963, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 123, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 123, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 123, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 126), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 126, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 126, i32 2), align 4
  store i64 72057594037928062, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 126, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 126, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 126, i32 5, i32 1), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 140), align 8
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 140, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 140, i32 2), align 4
  store i64 504403158265495692, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 140, i32 4), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 140, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 109), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 109, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 109, i32 2), align 4
  store i64 504403158265495661, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 109, i32 4), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 109, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 137), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 137, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 137, i32 2), align 4
  store i64 72057594037928073, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 137, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 137, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 137, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 134), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 134, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 134, i32 2), align 4
  store i64 504403158265495686, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 134, i32 4), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 134, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 120), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 120, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 120, i32 2), align 4
  store i64 72057594037928056, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 120, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 120, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 120, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 124), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 124, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 124, i32 2), align 4
  store i64 72057594037928060, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 124, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 124, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 124, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 146), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 146, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 146, i32 2), align 4
  store i64 4683743612465315986, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 146, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 146, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 146, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 131), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 131, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 131, i32 2), align 4
  store i64 4683743612465315971, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 131, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 131, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 131, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 141), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 141, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 141, i32 2), align 4
  store i64 4683743612465315981, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 141, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 141, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 141, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 119), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 119, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 119, i32 2), align 4
  store i64 4683743612465315959, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 119, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 119, i32 5), align 1
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 119, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 111), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 111, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 111, i32 2), align 4
  store i64 216172782113783919, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 111, i32 4), align 8
  store %runtime.Type_Info_Float zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 111, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 111, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 122), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 122, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 122, i32 2), align 4
  store i64 216172782113783930, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 122, i32 4), align 8
  store %runtime.Type_Info_Float zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 122, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 122, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 115), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 115, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 115, i32 2), align 4
  store i64 216172782113783923, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 115, i32 4), align 8
  store %runtime.Type_Info_Float { i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 115, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 115, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 112), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 112, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 112, i32 2), align 4
  store i64 216172782113783920, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 112, i32 4), align 8
  store %runtime.Type_Info_Float { i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 112, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 112, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 129), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 129, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 129, i32 2), align 4
  store i64 504403158265495681, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 129, i32 4), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 129, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 116), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 116, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 116, i32 2), align 4
  store i64 216172782113783924, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 116, i32 4), align 8
  store %runtime.Type_Info_Float { i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 116, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 116, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 136), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 136, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 136, i32 2), align 4
  store i64 216172782113783944, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 136, i32 4), align 8
  store %runtime.Type_Info_Float zeroinitializer, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 136, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 136, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 142), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 142, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 142, i32 2), align 4
  store i64 216172782113783950, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 142, i32 4), align 8
  store %runtime.Type_Info_Float { i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 142, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 142, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 117), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 117, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 117, i32 2), align 4
  store i64 216172782113783925, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 117, i32 4), align 8
  store %runtime.Type_Info_Float { i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 117, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 117, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 130), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 130, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 130, i32 2), align 4
  store i64 288230376151711874, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 130, i32 4), align 8
  store i64 5, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 130, i32 5, i32 1), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 145), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 145, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 145, i32 2), align 4
  store i64 216172782113783953, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 145, i32 4), align 8
  store %runtime.Type_Info_Float { i8 2 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 145, i32 5), align 1
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 145, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 128), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 128, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 128, i32 2), align 4
  store i64 288230376151711872, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 128, i32 4), align 8
  store i64 5, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 128, i32 5, i32 1), align 8
  store i64 16, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 110), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 110, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 110, i32 2), align 4
  store i64 110, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 110, i32 4), align 8
  store i64 6, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 110, i32 5, i32 1), align 8
  store i64 4, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 135), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 135, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 135, i32 2), align 4
  store i64 288230376151711879, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 135, i32 4), align 8
  store i64 5, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 135, i32 5, i32 1), align 8
  store i64 32, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 121), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 121, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 121, i32 2), align 4
  store i64 121, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 121, i32 4), align 8
  store i64 6, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 121, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 118), align 8
  store i64 2, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 118, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 118, i32 2), align 4
  store i64 118, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 118, i32 4), align 8
  store i64 6, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 118, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 125), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 125, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 125, i32 2), align 4
  store i64 5044031582654955645, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 125, i32 4), align 8
  store %runtime.Type_Info_String { i8 1 }, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 125, i32 5), align 1
  store i64 7, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 125, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 150), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 150, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 150, i32 2), align 4
  store i64 6989586621679009942, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 150, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 150, i32 5), ptr @"ggv$3d", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 150, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 148), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 148, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 148, i32 2), align 4
  store i64 3602879701896396948, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 148, i32 4), align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 148, i32 5), ptr @"ggv$3e", i64 80, i1 false)
  store i64 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 148, i32 5, i32 1), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 149), align 8
  store i64 8, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 149, i32 1), align 8
  store i32 1, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 149, i32 2), align 4
  store i64 1297036692682702997, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 149, i32 4), align 8
  store ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 56), ptr getelementptr inbounds ([120 x ptr], ptr @"__$type_info_types_data", i64 0, i64 119), align 8
  store %..string { ptr @"csbs$ca", i64 5 }, ptr getelementptr inbounds ([120 x %..string], ptr @"__$type_info_names_data", i64 0, i64 90), align 8
  store i64 0, ptr getelementptr inbounds ([120 x i64], ptr @"__$type_info_offsets_data", i64 0, i64 81), align 8
  store i8 0, ptr getelementptr inbounds ([120 x i8], ptr @"__$type_info_usings_data", i64 0, i64 81), align 1
  call void @llvm.memmove.p0.p0.i64(ptr align 1 getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 149, i32 5), ptr @"ggv$3f", i64 120, i1 false)
  store i64 19, ptr getelementptr inbounds ([151 x %runtime.Type_Info], ptr @"__$type_info_data", i64 0, i64 149, i32 5, i32 1), align 8
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none)
define i8 @"__$equal1"(ptr nonnull readonly %0, ptr nonnull readonly %1) #2 {
decls:
  %2 = icmp eq ptr %0, %1
  br i1 %2, label %common.ret, label %diff_ptr

common.ret:                                       ; preds = %for.body.i.i, %for.body.i.i18, %for.body.i.i.i, %for.body.i.i17.i, %for.loop.i.i20.i, %btrue2.i, %diff_ptr.i, %btrue.i, %btrue1.i, %btrue1, %diff_ptr, %btrue, %if.done.i15.i, %decls
  %common.ret.op = phi i8 [ 1, %decls ], [ 1, %if.done.i15.i ], [ 0, %btrue ], [ 0, %diff_ptr ], [ 0, %btrue1 ], [ 0, %btrue1.i ], [ 0, %btrue.i ], [ 0, %diff_ptr.i ], [ 0, %btrue2.i ], [ 0, %for.body.i.i17.i ], [ 1, %for.loop.i.i20.i ], [ 0, %for.body.i.i.i ], [ 0, %for.body.i.i18 ], [ 0, %for.body.i.i ]
  ret i8 %common.ret.op

diff_ptr:                                         ; preds = %decls
  %.val10 = load ptr, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  %.val11 = load i64, ptr %3, align 8
  %.val12 = load ptr, ptr %1, align 8
  %4 = getelementptr i8, ptr %1, i64 8
  %.val13 = load i64, ptr %4, align 8
  %.not.i = icmp eq i64 %.val11, %.val13
  br i1 %.not.i, label %if.done.i, label %common.ret

if.done.i:                                        ; preds = %diff_ptr
  %5 = icmp ne i64 %.val11, 0
  %6 = icmp ne ptr %.val10, %.val12
  %or.cond.not11.i.i = select i1 %5, i1 %6, i1 false
  br i1 %or.cond.not11.i.i, label %for.body.i.i, label %btrue

for.loop.i.i:                                     ; preds = %for.body.i.i
  %7 = add nuw i64 %i.06.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %7, %.val11
  br i1 %exitcond.not.i.i, label %btrue, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.done.i, %for.loop.i.i
  %i.06.i.i = phi i64 [ %7, %for.loop.i.i ], [ 0, %if.done.i ]
  %8 = getelementptr i8, ptr %.val10, i64 %i.06.i.i
  %9 = load i8, ptr %8, align 1
  %10 = getelementptr i8, ptr %.val12, i64 %i.06.i.i
  %11 = load i8, ptr %10, align 1
  %.not.i.i = icmp eq i8 %9, %11
  br i1 %.not.i.i, label %for.loop.i.i, label %common.ret

btrue:                                            ; preds = %for.loop.i.i, %if.done.i
  %12 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 1
  %13 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 1
  %14 = load ptr, ptr %12, align 8
  %15 = load ptr, ptr %13, align 8
  %16 = icmp eq ptr %14, %15
  br i1 %16, label %btrue1, label %common.ret

btrue1:                                           ; preds = %btrue
  %17 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 2
  %18 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 2
  %.val = load ptr, ptr %17, align 8
  %19 = getelementptr { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 2, i32 1
  %.val7 = load i64, ptr %19, align 8
  %.val8 = load ptr, ptr %18, align 8
  %20 = getelementptr { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 2, i32 1
  %.val9 = load i64, ptr %20, align 8
  %.not.i14 = icmp eq i64 %.val7, %.val9
  br i1 %.not.i14, label %if.done.i16, label %common.ret

if.done.i16:                                      ; preds = %btrue1
  %21 = icmp ne i64 %.val7, 0
  %22 = icmp ne ptr %.val, %.val8
  %or.cond.not11.i.i17 = select i1 %21, i1 %22, i1 false
  br i1 %or.cond.not11.i.i17, label %for.body.i.i18, label %diff_ptr.i

for.loop.i.i21:                                   ; preds = %for.body.i.i18
  %23 = add nuw i64 %i.06.i.i19, 1
  %exitcond.not.i.i22 = icmp eq i64 %23, %.val7
  br i1 %exitcond.not.i.i22, label %diff_ptr.i, label %for.body.i.i18

for.body.i.i18:                                   ; preds = %if.done.i16, %for.loop.i.i21
  %i.06.i.i19 = phi i64 [ %23, %for.loop.i.i21 ], [ 0, %if.done.i16 ]
  %24 = getelementptr i8, ptr %.val, i64 %i.06.i.i19
  %25 = load i8, ptr %24, align 1
  %26 = getelementptr i8, ptr %.val8, i64 %i.06.i.i19
  %27 = load i8, ptr %26, align 1
  %.not.i.i20 = icmp eq i8 %25, %27
  br i1 %.not.i.i20, label %for.loop.i.i21, label %common.ret

diff_ptr.i:                                       ; preds = %for.loop.i.i21, %if.done.i16
  %28 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 3
  %29 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 3
  %.val9.i = load ptr, ptr %29, align 8
  %30 = getelementptr { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 3, i32 0, i32 1
  %.val10.i = load i64, ptr %30, align 8
  %.val11.i = load ptr, ptr %28, align 8
  %31 = getelementptr { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 3, i32 0, i32 1
  %.val12.i = load i64, ptr %31, align 8
  %.not.i.i24 = icmp eq i64 %.val10.i, %.val12.i
  br i1 %.not.i.i24, label %if.done.i.i, label %common.ret

if.done.i.i:                                      ; preds = %diff_ptr.i
  %32 = icmp ne i64 %.val10.i, 0
  %33 = icmp ne ptr %.val9.i, %.val11.i
  %or.cond.not11.i.i.i = select i1 %32, i1 %33, i1 false
  br i1 %or.cond.not11.i.i.i, label %for.body.i.i.i, label %btrue.i

for.loop.i.i.i:                                   ; preds = %for.body.i.i.i
  %34 = add nuw i64 %i.06.i.i.i, 1
  %exitcond.not.i.i.i = icmp eq i64 %34, %.val10.i
  br i1 %exitcond.not.i.i.i, label %btrue.i, label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %if.done.i.i, %for.loop.i.i.i
  %i.06.i.i.i = phi i64 [ %34, %for.loop.i.i.i ], [ 0, %if.done.i.i ]
  %35 = getelementptr i8, ptr %.val9.i, i64 %i.06.i.i.i
  %36 = load i8, ptr %35, align 1
  %37 = getelementptr i8, ptr %.val11.i, i64 %i.06.i.i.i
  %38 = load i8, ptr %37, align 1
  %.not.i.i.i = icmp eq i8 %36, %38
  br i1 %.not.i.i.i, label %for.loop.i.i.i, label %common.ret

btrue.i:                                          ; preds = %for.loop.i.i.i, %if.done.i.i
  %39 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 3, i32 1
  %40 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 3, i32 1
  %41 = load i32, ptr %39, align 4
  %42 = load i32, ptr %40, align 4
  %43 = icmp eq i32 %41, %42
  br i1 %43, label %btrue1.i, label %common.ret

btrue1.i:                                         ; preds = %btrue.i
  %44 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 3, i32 2
  %45 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 3, i32 2
  %46 = load i32, ptr %44, align 4
  %47 = load i32, ptr %45, align 4
  %48 = icmp eq i32 %46, %47
  br i1 %48, label %btrue2.i, label %common.ret

btrue2.i:                                         ; preds = %btrue1.i
  %49 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 3, i32 3
  %50 = getelementptr inbounds { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 3, i32 3
  %.val.i = load ptr, ptr %49, align 8
  %51 = getelementptr { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %0, i64 0, i32 3, i32 3, i32 1
  %.val6.i = load i64, ptr %51, align 8
  %.val7.i = load ptr, ptr %50, align 8
  %52 = getelementptr { %..string, ptr, %..string, %runtime.Source_Code_Location }, ptr %1, i64 0, i32 3, i32 3, i32 1
  %.val8.i = load i64, ptr %52, align 8
  %.not.i13.i = icmp eq i64 %.val6.i, %.val8.i
  br i1 %.not.i13.i, label %if.done.i15.i, label %common.ret

if.done.i15.i:                                    ; preds = %btrue2.i
  %53 = icmp ne i64 %.val6.i, 0
  %54 = icmp ne ptr %.val.i, %.val7.i
  %or.cond.not11.i.i16.i = select i1 %53, i1 %54, i1 false
  br i1 %or.cond.not11.i.i16.i, label %for.body.i.i17.i, label %common.ret

for.loop.i.i20.i:                                 ; preds = %for.body.i.i17.i
  %55 = add nuw i64 %i.06.i.i18.i, 1
  %exitcond.not.i.i21.i = icmp eq i64 %55, %.val6.i
  br i1 %exitcond.not.i.i21.i, label %common.ret, label %for.body.i.i17.i

for.body.i.i17.i:                                 ; preds = %if.done.i15.i, %for.loop.i.i20.i
  %i.06.i.i18.i = phi i64 [ %55, %for.loop.i.i20.i ], [ 0, %if.done.i15.i ]
  %56 = getelementptr i8, ptr %.val.i, i64 %i.06.i.i18.i
  %57 = load i8, ptr %56, align 1
  %58 = getelementptr i8, ptr %.val7.i, i64 %i.06.i.i18.i
  %59 = load i8, ptr %58, align 1
  %.not.i.i19.i = icmp eq i8 %57, %59
  br i1 %.not.i.i19.i, label %for.loop.i.i20.i, label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none)
define i8 @"__$equal2"(ptr nonnull readonly %0, ptr nonnull readonly %1) #2 {
decls:
  %2 = icmp eq ptr %0, %1
  br i1 %2, label %common.ret, label %diff_ptr

common.ret:                                       ; preds = %for.body.i.i, %for.body.i.i17, %for.loop.i.i20, %btrue2, %diff_ptr, %btrue, %btrue1, %if.done.i15, %decls
  %common.ret.op = phi i8 [ 1, %decls ], [ 1, %if.done.i15 ], [ 0, %btrue1 ], [ 0, %btrue ], [ 0, %diff_ptr ], [ 0, %btrue2 ], [ 0, %for.body.i.i17 ], [ 1, %for.loop.i.i20 ], [ 0, %for.body.i.i ]
  ret i8 %common.ret.op

diff_ptr:                                         ; preds = %decls
  %.val9 = load ptr, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  %.val10 = load i64, ptr %3, align 8
  %.val11 = load ptr, ptr %1, align 8
  %4 = getelementptr i8, ptr %1, i64 8
  %.val12 = load i64, ptr %4, align 8
  %.not.i = icmp eq i64 %.val10, %.val12
  br i1 %.not.i, label %if.done.i, label %common.ret

if.done.i:                                        ; preds = %diff_ptr
  %5 = icmp ne i64 %.val10, 0
  %6 = icmp ne ptr %.val9, %.val11
  %or.cond.not11.i.i = select i1 %5, i1 %6, i1 false
  br i1 %or.cond.not11.i.i, label %for.body.i.i, label %btrue

for.loop.i.i:                                     ; preds = %for.body.i.i
  %7 = add nuw i64 %i.06.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %7, %.val10
  br i1 %exitcond.not.i.i, label %btrue, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.done.i, %for.loop.i.i
  %i.06.i.i = phi i64 [ %7, %for.loop.i.i ], [ 0, %if.done.i ]
  %8 = getelementptr i8, ptr %.val9, i64 %i.06.i.i
  %9 = load i8, ptr %8, align 1
  %10 = getelementptr i8, ptr %.val11, i64 %i.06.i.i
  %11 = load i8, ptr %10, align 1
  %.not.i.i = icmp eq i8 %9, %11
  br i1 %.not.i.i, label %for.loop.i.i, label %common.ret

btrue:                                            ; preds = %for.loop.i.i, %if.done.i
  %12 = getelementptr inbounds { %..string, i32, i32, %..string }, ptr %0, i64 0, i32 1
  %13 = getelementptr inbounds { %..string, i32, i32, %..string }, ptr %1, i64 0, i32 1
  %14 = load i32, ptr %12, align 4
  %15 = load i32, ptr %13, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %btrue1, label %common.ret

btrue1:                                           ; preds = %btrue
  %17 = getelementptr inbounds { %..string, i32, i32, %..string }, ptr %0, i64 0, i32 2
  %18 = getelementptr inbounds { %..string, i32, i32, %..string }, ptr %1, i64 0, i32 2
  %19 = load i32, ptr %17, align 4
  %20 = load i32, ptr %18, align 4
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %btrue2, label %common.ret

btrue2:                                           ; preds = %btrue1
  %22 = getelementptr inbounds { %..string, i32, i32, %..string }, ptr %0, i64 0, i32 3
  %23 = getelementptr inbounds { %..string, i32, i32, %..string }, ptr %1, i64 0, i32 3
  %.val = load ptr, ptr %22, align 8
  %24 = getelementptr { %..string, i32, i32, %..string }, ptr %0, i64 0, i32 3, i32 1
  %.val6 = load i64, ptr %24, align 8
  %.val7 = load ptr, ptr %23, align 8
  %25 = getelementptr { %..string, i32, i32, %..string }, ptr %1, i64 0, i32 3, i32 1
  %.val8 = load i64, ptr %25, align 8
  %.not.i13 = icmp eq i64 %.val6, %.val8
  br i1 %.not.i13, label %if.done.i15, label %common.ret

if.done.i15:                                      ; preds = %btrue2
  %26 = icmp ne i64 %.val6, 0
  %27 = icmp ne ptr %.val, %.val7
  %or.cond.not11.i.i16 = select i1 %26, i1 %27, i1 false
  br i1 %or.cond.not11.i.i16, label %for.body.i.i17, label %common.ret

for.loop.i.i20:                                   ; preds = %for.body.i.i17
  %28 = add nuw i64 %i.06.i.i18, 1
  %exitcond.not.i.i21 = icmp eq i64 %28, %.val6
  br i1 %exitcond.not.i.i21, label %common.ret, label %for.body.i.i17

for.body.i.i17:                                   ; preds = %if.done.i15, %for.loop.i.i20
  %i.06.i.i18 = phi i64 [ %28, %for.loop.i.i20 ], [ 0, %if.done.i15 ]
  %29 = getelementptr i8, ptr %.val, i64 %i.06.i.i18
  %30 = load i8, ptr %29, align 1
  %31 = getelementptr i8, ptr %.val7, i64 %i.06.i.i18
  %32 = load i8, ptr %31, align 1
  %.not.i.i19 = icmp eq i8 %30, %32
  br i1 %.not.i.i19, label %for.loop.i.i20, label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline optnone
define void @"__$startup_runtime"(ptr noalias nocapture nonnull %__.context_ptr) local_unnamed_addr #4 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call fastcc void @"__$startup_type_info"()
  %0 = call fastcc i64 @os.get_std_handle()
  store i64 %0, ptr @os.stdout, align 8
  call fastcc void @opt_ex.load_data(ptr %__.context_ptr)
  ret void
}

define internal fastcc i64 @os.get_std_handle() unnamed_addr {
decls:
  %0 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -11)
  %1 = ptrtoint ptr %0 to i64
  ret i64 %1
}

define internal fastcc void @opt_ex.load_data(ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %0 = alloca { ptr, i64 }, align 8
  %1 = alloca { ptr, i64 }, align 8
  %2 = alloca i64, align 8
  %length.i.i.i = alloca i64, align 8
  %3 = alloca %runtime.Context, align 8
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca { ptr, i64 }, align 8
  %sa_inherit.i.i = alloca %sys_windows.SECURITY_ATTRIBUTES, align 8
  %data.i = alloca { ptr, i64 }, align 8
  %10 = alloca %runtime.Context, align 8
  %11 = alloca { ptr, i64 }, align 8
  %12 = alloca { ptr, i64 }, align 8
  %13 = alloca [1 x %..any], align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %11, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %data.i)
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %10)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %data.i, i8 0, i64 16, i1 false), !noalias !0
  %.unpack.i = load ptr, ptr %__.context_ptr, align 8, !noalias !0
  %.elt1.i = getelementptr inbounds %runtime.Allocator, ptr %__.context_ptr, i64 0, i32 1
  %.unpack2.i = load ptr, ptr %.elt1.i, align 8, !noalias !0
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %10, ptr noundef nonnull align 1 dereferenceable(96) %__.context_ptr, i64 96, i1 false), !noalias !4
  store ptr %.unpack.i, ptr %10, align 8, !noalias !0
  %.repack3.i = getelementptr inbounds %runtime.Allocator, ptr %10, i64 0, i32 1
  store ptr %.unpack2.i, ptr %.repack3.i, align 8, !noalias !0
  tail call void @llvm.experimental.noalias.scope.decl(metadata !5)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %sa_inherit.i.i), !noalias !0
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %sa_inherit.i.i, i8 0, i64 24, i1 false), !noalias !8
  store i32 24, ptr %sa_inherit.i.i, align 8, !noalias !8
  %sa_inherit.repack19.i.i = getelementptr inbounds %sys_windows.SECURITY_ATTRIBUTES, ptr %sa_inherit.i.i, i64 0, i32 1
  %sa_inherit.repack21.i.i = getelementptr inbounds %sys_windows.SECURITY_ATTRIBUTES, ptr %sa_inherit.i.i, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(12) %sa_inherit.repack19.i.i, i8 0, i64 12, i1 false), !noalias !8
  store i32 1, ptr %sa_inherit.repack21.i.i, align 8, !noalias !8
  %sa_inherit.repack22.i.i = getelementptr inbounds %sys_windows.SECURITY_ATTRIBUTES, ptr %sa_inherit.i.i, i64 0, i32 4
  %14 = getelementptr inbounds %runtime.Context, ptr %10, i64 0, i32 1
  store i32 0, ptr %sa_inherit.repack22.i.i, align 4, !noalias !8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9), !noalias !8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %9, i8 0, i64 16, i1 false), !noalias !10
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7), !noalias !10
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8), !noalias !10
  %15 = tail call x86_stdcallcc i32 @MultiByteToWideChar(i32 65001, i32 8, ptr nonnull @"csbs$10a", i32 11, ptr null, i32 0), !noalias !13
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %sys_windows.utf8_to_wstring.exit.i.i, label %if.done2.i.i.i.i

if.done2.i.i.i.i:                                 ; preds = %decls
  %17 = add i32 %15, 1
  %18 = sext i32 %17 to i64
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %7, i8 0, i64 16, i1 false), !noalias !13
  %19 = icmp sgt i32 %17, -1
  br i1 %19, label %runtime.make_slice_error_loc.exit.i.i.i.i.i.i, label %if.done.i.i.i.i.i.i.i

if.done.i.i.i.i.i.i.i:                            ; preds = %if.done2.i.i.i.i
  tail call fastcc void @runtime.print_caller_location(ptr nonnull @"ggv$ec"), !noalias !17
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$154")
  tail call fastcc void @runtime.print_i64(i64 %18), !noalias !17
  tail call fastcc void @runtime.print_byte(i8 10)
  tail call fastcc void @runtime.bounds_trap(), !noalias !17
  unreachable

runtime.make_slice_error_loc.exit.i.i.i.i.i.i:    ; preds = %if.done2.i.i.i.i
  %20 = shl nsw i64 %18, 1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6), !noalias !17
  %21 = icmp eq i32 %17, 0
  br i1 %21, label %runtime.make_slice-20458.exit.i.thread.i.i.i, label %if.done.i17.i.i.i.i.i.i

if.done.i17.i.i.i.i.i.i:                          ; preds = %runtime.make_slice_error_loc.exit.i.i.i.i.i.i
  %22 = load ptr, ptr %14, align 8, !alias.scope !5, !noalias !24
  %23 = icmp eq ptr %22, null
  br i1 %23, label %runtime.make_slice-20458.exit.i.thread.i.i.i, label %runtime.make_slice-20458.exit.i.i.i.i

runtime.make_slice-20458.exit.i.i.i.i:            ; preds = %if.done.i17.i.i.i.i.i.i
  %24 = getelementptr inbounds %runtime.Context, ptr %10, i64 0, i32 1, i32 1
  %25 = load ptr, ptr %24, align 8, !alias.scope !5, !noalias !24
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %6, i8 0, i64 16, i1 false), !noalias !28
  %26 = call i8 %22(ptr %25, i8 0, i64 %20, i64 2, ptr null, i64 0, ptr nonnull @"ggv$ec", ptr nonnull %6, ptr nonnull %10) #30, !noalias !29
  %.unpack.i.i.i.i.i.i.i = load ptr, ptr %6, align 8, !noalias !28
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !17
  %27 = call x86_stdcallcc i32 @MultiByteToWideChar(i32 65001, i32 8, ptr nonnull @"csbs$10a", i32 11, ptr %.unpack.i.i.i.i.i.i.i, i32 %15), !noalias !30
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %if.then3.i.i.i.i, label %if.done4.i.i.i.i

runtime.make_slice-20458.exit.i.thread.i.i.i:     ; preds = %if.done.i17.i.i.i.i.i.i, %runtime.make_slice_error_loc.exit.i.i.i.i.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !17
  %29 = tail call x86_stdcallcc i32 @MultiByteToWideChar(i32 65001, i32 8, ptr nonnull @"csbs$10a", i32 11, ptr null, i32 %15), !noalias !31
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %if.then3.i.thread.i.i.i, label %if.done4.i.i.i.i

if.then3.i.thread.i.i.i:                          ; preds = %runtime.make_slice-20458.exit.i.thread.i.i.i
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5), !noalias !32
  br label %runtime.delete_slice-20911.exit.i.i.i.i

if.then3.i.i.i.i:                                 ; preds = %runtime.make_slice-20458.exit.i.i.i.i
  %31 = icmp eq ptr %.unpack.i.i.i.i.i.i.i, null
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5), !noalias !32
  br i1 %31, label %runtime.delete_slice-20911.exit.i.i.i.i, label %cmp.or.i.i.i.i.i.i

cmp.or.i.i.i.i.i.i:                               ; preds = %if.then3.i.i.i.i
  %32 = load ptr, ptr %14, align 8, !alias.scope !5, !noalias !35
  %33 = icmp eq ptr %32, null
  br i1 %33, label %runtime.delete_slice-20911.exit.i.i.i.i, label %if.done.i.i.i.i.i.i

if.done.i.i.i.i.i.i:                              ; preds = %cmp.or.i.i.i.i.i.i
  %34 = load ptr, ptr %24, align 8, !alias.scope !5, !noalias !35
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %5, i8 0, i64 16, i1 false), !noalias !38
  %35 = call i8 %32(ptr %34, i8 1, i64 0, i64 0, ptr nonnull %.unpack.i.i.i.i.i.i.i, i64 %20, ptr nonnull @"ggv$ed", ptr nonnull %5, ptr nonnull %10) #30, !noalias !30
  br label %runtime.delete_slice-20911.exit.i.i.i.i

runtime.delete_slice-20911.exit.i.i.i.i:          ; preds = %if.done.i.i.i.i.i.i, %cmp.or.i.i.i.i.i.i, %if.then3.i.i.i.i, %if.then3.i.thread.i.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5), !noalias !32
  br label %sys_windows.utf8_to_wstring.exit.i.i

if.done4.i.i.i.i:                                 ; preds = %runtime.make_slice-20458.exit.i.thread.i.i.i, %runtime.make_slice-20458.exit.i.i.i.i
  %.unpack.sink.i.i.i3.i.i.i = phi ptr [ null, %runtime.make_slice-20458.exit.i.thread.i.i.i ], [ %.unpack.i.i.i.i.i.i.i, %runtime.make_slice-20458.exit.i.i.i.i ]
  %36 = sext i32 %15 to i64
  %37 = getelementptr i16, ptr %.unpack.sink.i.i.i3.i.i.i, i64 %36
  store i16 0, ptr %37, align 2, !noalias !30
  %38 = zext i32 %15 to i64
  %smin.i.i.i.i = call i32 @llvm.smin.i32(i32 %15, i32 0)
  br label %for.loop.i.i.i.i

for.loop.i.i.i.i:                                 ; preds = %cmp.and.i.i.i.i, %if.done4.i.i.i.i
  %indvars.iv.i.i.i.i = phi i64 [ %41, %cmp.and.i.i.i.i ], [ %38, %if.done4.i.i.i.i ]
  %39 = trunc i64 %indvars.iv.i.i.i.i to i32
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %cmp.and.i.i.i.i, label %for.done.i.i.i.i

cmp.and.i.i.i.i:                                  ; preds = %for.loop.i.i.i.i
  %41 = add nsw i64 %indvars.iv.i.i.i.i, -1
  %42 = getelementptr i16, ptr %.unpack.sink.i.i.i3.i.i.i, i64 %41
  %43 = load i16, ptr %42, align 2, !noalias !30
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %for.loop.i.i.i.i, label %for.done.i.i.i.i

for.done.i.i.i.i:                                 ; preds = %cmp.and.i.i.i.i, %for.loop.i.i.i.i
  %n.0.lcssa.i.i.i.i = phi i32 [ %39, %cmp.and.i.i.i.i ], [ %smin.i.i.i.i, %for.loop.i.i.i.i ]
  %45 = sext i32 %n.0.lcssa.i.i.i.i to i64
  store ptr %.unpack.sink.i.i.i3.i.i.i, ptr %8, align 8, !noalias !13
  %46 = getelementptr inbounds { ptr, i64 }, ptr %8, i64 0, i32 1
  store i64 %45, ptr %46, align 8, !noalias !13
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %9, ptr nonnull align 8 %8, i64 16, i1 false), !noalias !39
  %.unpack.pre.i.i.i = load ptr, ptr %9, align 8, !noalias !10
  br label %sys_windows.utf8_to_wstring.exit.i.i

sys_windows.utf8_to_wstring.exit.i.i:             ; preds = %for.done.i.i.i.i, %runtime.delete_slice-20911.exit.i.i.i.i, %decls
  %.unpack.i.i.i = phi ptr [ null, %runtime.delete_slice-20911.exit.i.i.i.i ], [ %.unpack.pre.i.i.i, %for.done.i.i.i.i ], [ null, %decls ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7), !noalias !10
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8), !noalias !10
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9), !noalias !8
  %47 = call x86_stdcallcc ptr @CreateFileW(ptr %.unpack.i.i.i, i32 -2147483648, i32 3, ptr nonnull %sa_inherit.i.i, i32 3, i32 33554560, ptr null), !noalias !40
  %.not.i.i = icmp eq ptr %47, inttoptr (i64 -1 to ptr)
  br i1 %.not.i.i, label %os.open.exit.i, label %os.open.exit.thread.i

os.open.exit.thread.i:                            ; preds = %sys_windows.utf8_to_wstring.exit.i.i
  %48 = ptrtoint ptr %47 to i64
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %sa_inherit.i.i), !noalias !0
  br label %if.done.i

os.open.exit.i:                                   ; preds = %sys_windows.utf8_to_wstring.exit.i.i
  %49 = call x86_stdcallcc i32 @GetLastError(), !noalias !40
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %sa_inherit.i.i), !noalias !0
  %.not.i = icmp eq i32 %49, 0
  br i1 %.not.i, label %if.done.i, label %os.read_entire_file_from_filename.exit

if.done.i:                                        ; preds = %os.open.exit.i, %os.open.exit.thread.i
  %storemerge.i4.i = phi i64 [ %48, %os.open.exit.thread.i ], [ -1, %os.open.exit.i ]
  call void @llvm.lifetime.start.p0(i64 96, ptr nonnull %3), !noalias !0
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4), !noalias !0
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %3, ptr noundef nonnull align 8 dereferenceable(96) %10, i64 96, i1 false), !noalias !41
  store ptr %.unpack.i, ptr %3, align 8, !noalias !44
  %.repack9.i.i = getelementptr inbounds %runtime.Allocator, ptr %3, i64 0, i32 1
  store ptr %.unpack2.i, ptr %.repack9.i.i, align 8, !noalias !44
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %length.i.i.i), !noalias !44
  store i64 0, ptr %length.i.i.i, align 8, !noalias !46
  %50 = inttoptr i64 %storemerge.i4.i to ptr
  %51 = call x86_stdcallcc i32 @GetFileSizeEx(ptr %50, ptr nonnull %length.i.i.i), !noalias !46
  %.not.i.i.i = icmp eq i32 %51, 0
  br i1 %.not.i.i.i, label %os.file_size.exit.i.i, label %os.file_size.exit.thread.i.i

os.file_size.exit.thread.i.i:                     ; preds = %if.done.i
  %52 = load i64, ptr %length.i.i.i, align 8, !noalias !46
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %length.i.i.i), !noalias !44
  br label %if.done.i.i

os.file_size.exit.i.i:                            ; preds = %if.done.i
  %53 = call x86_stdcallcc i32 @GetLastError(), !noalias !46
  %54 = load i64, ptr %length.i.i.i, align 8, !noalias !46
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %length.i.i.i), !noalias !44
  %.not.i15.i = icmp eq i32 %53, 0
  br i1 %.not.i15.i, label %if.done.i.i, label %os.read_entire_file_from_handle.exit.i

if.done.i.i:                                      ; preds = %os.file_size.exit.i.i, %os.file_size.exit.thread.i.i
  %55 = phi i64 [ %52, %os.file_size.exit.thread.i.i ], [ %54, %os.file_size.exit.i.i ]
  %56 = icmp slt i64 %55, 1
  br i1 %56, label %os.read_entire_file_from_handle.exit.i, label %if.done2.i.i

if.done2.i.i:                                     ; preds = %if.done.i.i
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %4, i8 0, i64 16, i1 false), !noalias !44
  call fastcc void @runtime.make_slice-19739(i64 %55, ptr nonnull %__.context_ptr, ptr nonnull @"ggv$8c", ptr %4, ptr %3)
  %.unpack11.i.i = load ptr, ptr %4, align 8, !noalias !44
  %.elt12.i.i = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  %.unpack13.i.i = load i64, ptr %.elt12.i.i, align 8, !noalias !44
  %57 = icmp eq ptr %.unpack11.i.i, null
  br i1 %57, label %os.read_entire_file_from_handle.exit.i, label %if.done4.i.i

if.done4.i.i:                                     ; preds = %if.done2.i.i
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %1), !noalias !49
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2), !noalias !49
  %58 = icmp sgt i64 %.unpack13.i.i, 0
  br i1 %58, label %for.body.lr.ph.i.i.i.i, label %os.read_full.exit.thread.i.i

for.body.lr.ph.i.i.i.i:                           ; preds = %if.done4.i.i
  %59 = getelementptr inbounds { ptr, i64 }, ptr %1, i64 0, i32 1
  br label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.body.i.i.i.i, %for.body.lr.ph.i.i.i.i
  %n.01.i.i.i.i = phi i64 [ 0, %for.body.lr.ph.i.i.i.i ], [ %64, %for.body.i.i.i.i ]
  %60 = getelementptr i8, ptr %.unpack11.i.i, i64 %n.01.i.i.i.i
  %61 = sub i64 %.unpack13.i.i, %n.01.i.i.i.i
  store ptr %60, ptr %1, align 8, !noalias !52
  store i64 %61, ptr %59, align 8, !noalias !52
  store i64 0, ptr %2, align 8, !noalias !52
  %62 = call fastcc i64 @os.read(i64 %storemerge.i4.i, ptr nonnull %1, ptr %2), !noalias !52
  %63 = load i64, ptr %2, align 8, !noalias !52
  %64 = add i64 %63, %n.01.i.i.i.i
  %65 = icmp sgt i64 %63, 0
  %66 = icmp slt i64 %64, %.unpack13.i.i
  %or.cond.i.i.i.i = select i1 %65, i1 %66, i1 false
  %67 = icmp eq i64 %62, 0
  %or.cond5.i.i.i.i = select i1 %or.cond.i.i.i.i, i1 %67, i1 false
  br i1 %or.cond5.i.i.i.i, label %for.body.i.i.i.i, label %for.done.loopexit.i.i.i.i

for.done.loopexit.i.i.i.i:                        ; preds = %for.body.i.i.i.i
  br i1 %66, label %os.read_full.exit.i.i, label %os.read_full.exit.thread.i.i

os.read_full.exit.thread.i.i:                     ; preds = %for.done.loopexit.i.i.i.i, %if.done4.i.i
  %storemerge.i.i.ph.i.i = phi i64 [ %64, %for.done.loopexit.i.i.i.i ], [ 0, %if.done4.i.i ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %1), !noalias !49
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2), !noalias !49
  br label %os.read_entire_file_from_handle.exit.i

os.read_full.exit.i.i:                            ; preds = %for.done.loopexit.i.i.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %1), !noalias !49
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2), !noalias !49
  br i1 %67, label %os.read_entire_file_from_handle.exit.i, label %cmp.or.i.i.i.i

cmp.or.i.i.i.i:                                   ; preds = %os.read_full.exit.i.i
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %0), !noalias !55
  %68 = load ptr, ptr %3, align 8, !noalias !58
  %69 = icmp eq ptr %68, null
  br i1 %69, label %runtime.delete_slice-19740.exit.i.i, label %if.done.i.i.i.i

if.done.i.i.i.i:                                  ; preds = %cmp.or.i.i.i.i
  %70 = load ptr, ptr %.repack9.i.i, align 8, !noalias !58
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %0, i8 0, i64 16, i1 false), !noalias !58
  %71 = call i8 %68(ptr %70, i8 1, i64 0, i64 0, ptr nonnull %.unpack11.i.i, i64 %.unpack13.i.i, ptr nonnull @"ggv$c7", ptr nonnull %0, ptr nonnull %3) #30, !noalias !44
  br label %runtime.delete_slice-19740.exit.i.i

runtime.delete_slice-19740.exit.i.i:              ; preds = %if.done.i.i.i.i, %cmp.or.i.i.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %0), !noalias !55
  br label %os.read_entire_file_from_handle.exit.i

os.read_entire_file_from_handle.exit.i:           ; preds = %runtime.delete_slice-19740.exit.i.i, %os.read_full.exit.i.i, %os.read_full.exit.thread.i.i, %if.done2.i.i, %if.done.i.i, %os.file_size.exit.i.i
  %.unpack7.i = phi i64 [ 0, %runtime.delete_slice-19740.exit.i.i ], [ 0, %os.file_size.exit.i.i ], [ 0, %if.done.i.i ], [ 0, %if.done2.i.i ], [ %storemerge.i.i.ph.i.i, %os.read_full.exit.thread.i.i ], [ %64, %os.read_full.exit.i.i ]
  %.unpack5.i = phi ptr [ null, %runtime.delete_slice-19740.exit.i.i ], [ null, %os.file_size.exit.i.i ], [ null, %if.done.i.i ], [ null, %if.done2.i.i ], [ %.unpack11.i.i, %os.read_full.exit.thread.i.i ], [ %.unpack11.i.i, %os.read_full.exit.i.i ]
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %3), !noalias !0
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !0
  %72 = call x86_stdcallcc i32 @CloseHandle(ptr %50), !noalias !0
  %.not.i16.i = icmp eq i32 %72, 0
  br i1 %.not.i16.i, label %if.then.i18.i, label %os.read_entire_file_from_filename.exit

if.then.i18.i:                                    ; preds = %os.read_entire_file_from_handle.exit.i
  %73 = call x86_stdcallcc i32 @GetLastError(), !noalias !0
  br label %os.read_entire_file_from_filename.exit

os.read_entire_file_from_filename.exit:           ; preds = %os.open.exit.i, %os.read_entire_file_from_handle.exit.i, %if.then.i18.i
  %.unpack2 = phi i64 [ %.unpack7.i, %os.read_entire_file_from_handle.exit.i ], [ %.unpack7.i, %if.then.i18.i ], [ 0, %os.open.exit.i ]
  %.unpack = phi ptr [ %.unpack5.i, %os.read_entire_file_from_handle.exit.i ], [ %.unpack5.i, %if.then.i18.i ], [ null, %os.open.exit.i ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %data.i)
  call void @llvm.lifetime.end.p0(i64 96, ptr nonnull %10)
  store ptr %.unpack, ptr @opt_ex.data, align 8
  store i64 %.unpack2, ptr getelementptr inbounds ({ ptr, i64 }, ptr @opt_ex.data, i64 0, i32 1), align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %12, i8 0, i64 16, i1 false)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %13, i8 0, i64 16, i1 false)
  store ptr getelementptr inbounds ({ ptr, i64 }, ptr @opt_ex.data, i64 0, i32 1), ptr %13, align 8
  %.repack7 = getelementptr inbounds %..any, ptr %13, i64 0, i32 1
  store i64 4683743612465315841, ptr %.repack7, align 8
  store ptr %13, ptr %12, align 8
  %74 = getelementptr inbounds { ptr, i64 }, ptr %12, i64 0, i32 1
  store i64 1, ptr %74, align 8
  call fastcc void @fmt.println(ptr nonnull %12, ptr nonnull @"ggv$8e", ptr %__.context_ptr)
  ret void
}

; Function Attrs: noinline optnone
define void @"__$cleanup_runtime"(ptr noalias nocapture nonnull %__.context_ptr) local_unnamed_addr #4 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call fastcc void @runtime._destroy_temp_allocator_fini-7538(ptr %__.context_ptr)
  ret void
}

define internal fastcc void @runtime._destroy_temp_allocator_fini-7538(ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %0 = alloca { ptr, i64 }, align 8
  %1 = load ptr, ptr getelementptr inbounds (%runtime.Default_Temp_Allocator, ptr @runtime.global_default_temp_allocator_data, i64 0, i32 0, i32 1), align 16, !noalias !61
  %.not1.i.i = icmp eq ptr %1, null
  br i1 %.not1.i.i, label %runtime.default_temp_allocator_destroy.exit, label %if.then.i.i.preheader.i

if.then.i.i.preheader.i:                          ; preds = %decls
  %.pre1.i = load i64, ptr getelementptr inbounds (%runtime.Default_Temp_Allocator, ptr @runtime.global_default_temp_allocator_data, i64 0, i32 0, i32 3), align 16, !noalias !61
  br label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %runtime.memory_block_dealloc.exit.i.i, %if.then.i.i.preheader.i
  %2 = phi i64 [ %11, %runtime.memory_block_dealloc.exit.i.i ], [ %.pre1.i, %if.then.i.i.preheader.i ]
  %3 = phi ptr [ %12, %runtime.memory_block_dealloc.exit.i.i ], [ %1, %if.then.i.i.preheader.i ]
  %4 = load ptr, ptr %3, align 8
  store ptr %4, ptr getelementptr inbounds (%runtime.Default_Temp_Allocator, ptr @runtime.global_default_temp_allocator_data, i64 0, i32 0, i32 1), align 16, !noalias !61
  %5 = getelementptr inbounds %runtime.Memory_Block, ptr %3, i64 0, i32 4
  %6 = load i64, ptr %5, align 8
  %7 = sub i64 %2, %6
  store i64 %7, ptr getelementptr inbounds (%runtime.Default_Temp_Allocator, ptr @runtime.global_default_temp_allocator_data, i64 0, i32 0, i32 3), align 16, !noalias !61
  %8 = getelementptr inbounds %runtime.Memory_Block, ptr %3, i64 0, i32 1
  %.unpack.i.i.i = load ptr, ptr %8, align 8, !noalias !66
  %.elt1.i.i.i = getelementptr inbounds %runtime.Memory_Block, ptr %3, i64 0, i32 1, i32 1
  %.unpack2.i.i.i = load ptr, ptr %.elt1.i.i.i, align 8, !noalias !66
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %0), !noalias !69
  %9 = icmp eq ptr %.unpack.i.i.i, null
  br i1 %9, label %runtime.memory_block_dealloc.exit.i.i, label %if.done.i.i.i.i

if.done.i.i.i.i:                                  ; preds = %if.then.i.i.i
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %0, i8 0, i64 16, i1 false), !noalias !70
  %10 = call i8 %.unpack.i.i.i(ptr %.unpack2.i.i.i, i8 1, i64 0, i64 0, ptr nonnull %3, i64 0, ptr nonnull @"ggv$153", ptr nonnull %0, ptr nonnull %__.context_ptr) #30
  %.pre.i.i = load ptr, ptr getelementptr inbounds (%runtime.Default_Temp_Allocator, ptr @runtime.global_default_temp_allocator_data, i64 0, i32 0, i32 1), align 16, !noalias !61
  %.pre.i = load i64, ptr getelementptr inbounds (%runtime.Default_Temp_Allocator, ptr @runtime.global_default_temp_allocator_data, i64 0, i32 0, i32 3), align 16, !noalias !61
  br label %runtime.memory_block_dealloc.exit.i.i

runtime.memory_block_dealloc.exit.i.i:            ; preds = %if.done.i.i.i.i, %if.then.i.i.i
  %11 = phi i64 [ %7, %if.then.i.i.i ], [ %.pre.i, %if.done.i.i.i.i ]
  %12 = phi ptr [ %4, %if.then.i.i.i ], [ %.pre.i.i, %if.done.i.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %0), !noalias !69
  %.not.i.i = icmp eq ptr %12, null
  br i1 %.not.i.i, label %runtime.default_temp_allocator_destroy.exit, label %if.then.i.i.i

runtime.default_temp_allocator_destroy.exit:      ; preds = %runtime.memory_block_dealloc.exit.i.i, %decls
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(56) @runtime.global_default_temp_allocator_data, i8 0, i64 56, i1 false), !noalias !73
  ret void
}

; Function Attrs: noreturn
define internal fastcc void @runtime.bounds_trap() unnamed_addr #5 {
decls:
  tail call fastcc void @runtime.windows_trap_array_bounds-752()
  unreachable
}

; Function Attrs: noreturn
define internal fastcc void @runtime.type_assertion_trap() unnamed_addr #5 {
decls:
  tail call fastcc void @runtime.windows_trap_type_assertion-762()
  unreachable
}

define internal fastcc i8 @runtime.arena_alloc(ptr nocapture %0, i64 %1, i64 %2, ptr %3, ptr noalias nocapture nonnull writeonly %4, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %5 = alloca { ptr, i64 }, align 8
  %data = alloca { ptr, i64 }, align 8
  %6 = alloca %runtime.Allocator, align 8
  %7 = alloca { ptr, i64 }, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %data, i8 0, i64 16, i1 false)
  %8 = icmp eq i64 %1, 0
  br i1 %8, label %if.then, label %if.done

common.ret:                                       ; preds = %runtime.alloc_from_memory_block.exit, %or_return.return, %if.then
  %common.ret.op = phi i8 [ 0, %if.then ], [ %35, %or_return.return ], [ %common.ret.op.i33, %runtime.alloc_from_memory_block.exit ]
  ret i8 %common.ret.op

if.then:                                          ; preds = %decls
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false)
  br label %common.ret

if.done:                                          ; preds = %decls
  %9 = getelementptr inbounds %runtime.Arena, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8
  %11 = icmp eq ptr %10, null
  br i1 %11, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %if.done
  %12 = getelementptr inbounds %runtime.Memory_Block, ptr %10, i64 0, i32 3
  %13 = load i64, ptr %12, align 8
  %14 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %13, i64 %1)
  %15 = extractvalue { i64, i1 } %14, 0
  %16 = extractvalue { i64, i1 } %14, 1
  %17 = getelementptr inbounds %runtime.Memory_Block, ptr %10, i64 0, i32 4
  %18 = load i64, ptr %17, align 8
  %19 = icmp ule i64 %15, %18
  %.not37 = select i1 %16, i1 true, i1 %19
  br i1 %.not37, label %cmp.or.if.done.i_crit_edge, label %if.then1

cmp.or.if.done.i_crit_edge:                       ; preds = %cmp.or
  %.pre45 = add i64 %2, -1
  br label %if.done.i

if.then1:                                         ; preds = %cmp.or, %if.done
  %20 = add i64 %2, -1
  %21 = and i64 %20, %1
  %.not.i = icmp eq i64 %21, 0
  %22 = sub i64 %2, %21
  %23 = select i1 %.not.i, i64 0, i64 %22
  %p.0.i = add i64 %23, %1
  %24 = getelementptr inbounds %runtime.Arena, ptr %0, i64 0, i32 4
  %25 = load i64, ptr %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.then1
  store i64 4194304, ptr %24, align 8
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %if.then1
  %27 = phi i64 [ 4194304, %if.then2 ], [ %25, %if.then1 ]
  %28 = tail call i64 @llvm.umax.i64(i64 %p.0.i, i64 %27)
  %29 = load ptr, ptr %0, align 8
  %30 = icmp eq ptr %29, null
  br i1 %30, label %if.then4, label %if.done3.if.done5_crit_edge

if.done3.if.done5_crit_edge:                      ; preds = %if.done3
  %.phi.trans.insert = getelementptr inbounds %runtime.Allocator, ptr %0, i64 0, i32 1
  %.pre = load ptr, ptr %.phi.trans.insert, align 8, !noalias !74
  br label %if.done5

if.then4:                                         ; preds = %if.done3
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %6, i8 0, i64 16, i1 false)
  store ptr @runtime.default_allocator_proc, ptr %0, align 8
  %.repack26 = getelementptr inbounds %runtime.Allocator, ptr %0, i64 0, i32 1
  store ptr null, ptr %.repack26, align 8
  br label %if.done5

if.done5:                                         ; preds = %if.done3.if.done5_crit_edge, %if.then4
  %31 = phi ptr [ null, %if.then4 ], [ %.pre, %if.done3.if.done5_crit_edge ]
  %32 = phi ptr [ @runtime.default_allocator_proc, %if.then4 ], [ %29, %if.done3.if.done5_crit_edge ]
  %33 = add i64 %28, 48
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5), !noalias !81
  %34 = icmp ne i64 %33, 0
  tail call void @llvm.assume(i1 %34)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %5, i8 0, i64 16, i1 false), !noalias !74
  %35 = call i8 %32(ptr %31, i8 0, i64 %33, i64 16, ptr null, i64 0, ptr %3, ptr nonnull %5, ptr nonnull %__.context_ptr) #30, !noalias !82
  %.unpack.i.i = load ptr, ptr %5, align 8, !noalias !74
  %.elt2.i.i = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  %.unpack3.i.i = load i64, ptr %.elt2.i.i, align 8, !noalias !74
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5), !noalias !81
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %or_return.continue, label %or_return.return

or_return.return:                                 ; preds = %if.done5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false)
  br label %common.ret

or_return.continue:                               ; preds = %if.done5
  %37 = getelementptr i8, ptr %.unpack.i.i, i64 %.unpack3.i.i
  %38 = ptrtoint ptr %37 to i64
  %39 = getelementptr inbounds %runtime.Memory_Block, ptr %.unpack.i.i, i64 0, i32 1
  %40 = load <2 x ptr>, ptr %0, align 8, !noalias !81
  store <2 x ptr> %40, ptr %39, align 8, !noalias !83
  %41 = getelementptr inbounds %runtime.Memory_Block, ptr %.unpack.i.i, i64 0, i32 2
  %42 = ptrtoint ptr %.unpack.i.i to i64
  %43 = add i64 %42, 48
  %44 = inttoptr i64 %43 to ptr
  store ptr %44, ptr %41, align 8, !noalias !83
  %45 = getelementptr inbounds %runtime.Memory_Block, ptr %.unpack.i.i, i64 0, i32 4
  %46 = sub i64 %38, %43
  store i64 %46, ptr %45, align 8, !noalias !83
  %47 = load ptr, ptr %9, align 8
  store ptr %47, ptr %.unpack.i.i, align 8
  store ptr %.unpack.i.i, ptr %9, align 8
  %48 = getelementptr inbounds %runtime.Arena, ptr %0, i64 0, i32 3
  %49 = load i64, ptr %45, align 8
  %50 = load i64, ptr %48, align 8
  %51 = add i64 %50, %49
  store i64 %51, ptr %48, align 8
  %.phi.trans.insert38 = getelementptr inbounds %runtime.Memory_Block, ptr %.unpack.i.i, i64 0, i32 3
  %.pre39 = load i64, ptr %.phi.trans.insert38, align 8
  br label %if.done.i

if.done.i:                                        ; preds = %cmp.or.if.done.i_crit_edge, %or_return.continue
  %.pre-phi = phi i64 [ %.pre45, %cmp.or.if.done.i_crit_edge ], [ %20, %or_return.continue ]
  %52 = phi i64 [ %13, %cmp.or.if.done.i_crit_edge ], [ %.pre39, %or_return.continue ]
  %53 = phi ptr [ %10, %cmp.or.if.done.i_crit_edge ], [ %.unpack.i.i, %or_return.continue ]
  %size.0 = phi i64 [ %1, %cmp.or.if.done.i_crit_edge ], [ %p.0.i, %or_return.continue ]
  %54 = getelementptr %runtime.Memory_Block, ptr %53, i64 0, i32 3
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %7, i8 0, i64 16, i1 false)
  %55 = getelementptr i8, ptr %53, i64 24
  %.val.i = load ptr, ptr %55, align 8, !noalias !84
  %.val27.i = load i64, ptr %54, align 8
  %56 = getelementptr i8, ptr %.val.i, i64 %.val27.i
  %57 = ptrtoint ptr %56 to i64
  %58 = and i64 %.pre-phi, %57
  %.not.i.i = icmp eq i64 %58, 0
  %59 = sub i64 %2, %58
  %spec.select.i.i = select i1 %.not.i.i, i64 0, i64 %59
  %60 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %size.0, i64 %spec.select.i.i)
  %61 = extractvalue { i64, i1 } %60, 1
  br i1 %61, label %runtime.alloc_from_memory_block.exit, label %if.init.i

if.init.i:                                        ; preds = %if.done.i
  %62 = extractvalue { i64, i1 } %60, 0
  %63 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %.val27.i, i64 %62)
  %64 = extractvalue { i64, i1 } %63, 1
  br i1 %64, label %runtime.alloc_from_memory_block.exit, label %cmp.or.i

cmp.or.i:                                         ; preds = %if.init.i
  %65 = extractvalue { i64, i1 } %63, 0
  %66 = getelementptr inbounds %runtime.Memory_Block, ptr %53, i64 0, i32 4
  %67 = load i64, ptr %66, align 8, !noalias !84
  %68 = icmp ugt i64 %65, %67
  br i1 %68, label %runtime.alloc_from_memory_block.exit, label %if.done4.i

if.done4.i:                                       ; preds = %cmp.or.i
  %69 = add i64 %spec.select.i.i, %.val27.i
  %70 = getelementptr i8, ptr %.val.i, i64 %69
  store i64 %65, ptr %54, align 8, !noalias !84
  %.pre42 = load ptr, ptr %9, align 8
  %.phi.trans.insert43 = getelementptr inbounds %runtime.Memory_Block, ptr %.pre42, i64 0, i32 3
  %.pre44 = load i64, ptr %.phi.trans.insert43, align 8
  br label %runtime.alloc_from_memory_block.exit

runtime.alloc_from_memory_block.exit:             ; preds = %if.init.i, %cmp.or.i, %if.done.i, %if.done4.i
  %71 = phi i64 [ %.pre44, %if.done4.i ], [ %.val27.i, %if.done.i ], [ %.val27.i, %cmp.or.i ], [ %.val27.i, %if.init.i ]
  %.unpack10 = phi i64 [ %size.0, %if.done4.i ], [ 0, %if.done.i ], [ 0, %cmp.or.i ], [ 0, %if.init.i ]
  %.unpack = phi ptr [ %70, %if.done4.i ], [ null, %if.done.i ], [ null, %cmp.or.i ], [ null, %if.init.i ]
  %common.ret.op.i33 = phi i8 [ 0, %if.done4.i ], [ 1, %if.done.i ], [ 1, %cmp.or.i ], [ 1, %if.init.i ]
  %72 = getelementptr inbounds %runtime.Arena, ptr %0, i64 0, i32 2
  %73 = sub i64 %71, %52
  %74 = load i64, ptr %72, align 8
  %75 = add i64 %73, %74
  store i64 %75, ptr %72, align 8
  store ptr %.unpack, ptr %4, align 8
  %.repack16 = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  store i64 %.unpack10, ptr %.repack16, align 8
  br label %common.ret
}

; Function Attrs: nofree nosync nounwind memory(argmem: readwrite)
define internal fastcc <2 x i64> @runtime.udivmod128(ptr nocapture readonly %0, ptr nocapture readonly %1, ptr writeonly %2) unnamed_addr #6 {
decls:
  %q = alloca [2 x i64], align 16
  %r = alloca [2 x i64], align 8
  %.unpack = load i64, ptr %0, align 8
  %.elt56 = getelementptr inbounds [2 x i64], ptr %0, i64 0, i64 1
  %.unpack57 = load i64, ptr %.elt56, align 8
  %.unpack60 = load i64, ptr %1, align 8
  %.elt61 = getelementptr inbounds [2 x i64], ptr %1, i64 0, i64 1
  %.unpack62 = load i64, ptr %.elt61, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 16 %q, i8 0, i64 16, i1 false)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %r, i8 0, i64 16, i1 false)
  %3 = icmp eq i64 %.unpack57, 0
  br i1 %3, label %if.then, label %if.done6

if.then:                                          ; preds = %decls
  %4 = icmp eq i64 %.unpack62, 0
  %.not81 = icmp eq ptr %2, null
  br i1 %4, label %if.then1, label %if.done3

if.then1:                                         ; preds = %if.then
  %5 = udiv i64 %.unpack, %.unpack60
  %6 = urem i64 %.unpack, %.unpack60
  br i1 %.not81, label %if.done, label %if.then2

if.then2:                                         ; preds = %if.then1
  %7 = zext i64 %6 to i128
  store i128 %7, ptr %2, align 8
  br label %if.done

common.ret:                                       ; preds = %for.done, %if.then43, %if.then7, %if.then34, %if.then35, %if.then20, %if.then21, %if.done3, %if.then4, %if.done29, %if.then28, %if.done18, %if.done14, %if.done
  %common.ret.op = phi <2 x i64> [ %.cast82, %if.done ], [ %.cast77, %if.done14 ], [ %.cast, %if.done18 ], [ %46, %if.then28 ], [ %55, %if.done29 ], [ zeroinitializer, %if.then4 ], [ zeroinitializer, %if.done3 ], [ zeroinitializer, %if.then21 ], [ zeroinitializer, %if.then20 ], [ zeroinitializer, %if.then35 ], [ zeroinitializer, %if.then34 ], [ <i64 poison, i64 0>, %if.then7 ], [ %257, %if.then43 ], [ %257, %for.done ]
  ret <2 x i64> %common.ret.op

if.done:                                          ; preds = %if.then2, %if.then1
  %.cast82 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %5, i64 0
  br label %common.ret

if.done3:                                         ; preds = %if.then
  br i1 %.not81, label %common.ret, label %if.then4

if.then4:                                         ; preds = %if.done3
  %8 = zext i64 %.unpack to i128
  store i128 %8, ptr %2, align 8
  br label %common.ret

if.done6:                                         ; preds = %decls
  %9 = icmp eq i64 %.unpack60, 0
  %10 = icmp eq i64 %.unpack62, 0
  br i1 %9, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.done6
  br i1 %10, label %common.ret, label %if.done11

if.done11:                                        ; preds = %if.then7
  %11 = icmp eq i64 %.unpack, 0
  br i1 %11, label %if.then12, label %if.done15

if.then12:                                        ; preds = %if.done11
  %.not76 = icmp eq ptr %2, null
  %12 = udiv i64 %.unpack57, %.unpack62
  %13 = urem i64 %.unpack57, %.unpack62
  br i1 %.not76, label %if.done14, label %if.then13

if.then13:                                        ; preds = %if.then12
  %14 = getelementptr inbounds [2 x i64], ptr %r, i64 0, i64 1
  store i64 %13, ptr %14, align 8
  store i64 0, ptr %r, align 8
  %15 = load i128, ptr %r, align 8
  store i128 %15, ptr %2, align 8
  br label %if.done14

if.done14:                                        ; preds = %if.then13, %if.then12
  %.cast77 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %12, i64 0
  br label %common.ret

if.done15:                                        ; preds = %if.done11
  %16 = tail call i64 @llvm.ctpop.i64(i64 %.unpack62), !range !87
  %17 = icmp ult i64 %16, 2
  br i1 %17, label %if.then16, label %if.done19

if.then16:                                        ; preds = %if.done15
  %.not75 = icmp eq ptr %2, null
  br i1 %.not75, label %if.done18, label %if.then17

if.then17:                                        ; preds = %if.then16
  %18 = add i64 %.unpack62, -1
  %19 = and i64 %18, %.unpack57
  %20 = getelementptr inbounds [2 x i64], ptr %r, i64 0, i64 1
  store i64 %.unpack, ptr %r, align 8
  store i64 %19, ptr %20, align 8
  %21 = load i128, ptr %r, align 8
  store i128 %21, ptr %2, align 8
  br label %if.done18

if.done18:                                        ; preds = %if.then17, %if.then16
  %22 = tail call i64 @llvm.cttz.i64(i64 %.unpack62, i1 true), !range !87
  %23 = lshr i64 %.unpack57, %22
  %.cast = insertelement <2 x i64> <i64 poison, i64 0>, i64 %23, i64 0
  br label %common.ret

if.done19:                                        ; preds = %if.done15
  %24 = tail call i64 @llvm.ctlz.i64(i64 %.unpack62, i1 true), !range !87
  %25 = trunc i64 %24 to i32
  %26 = tail call i64 @llvm.ctlz.i64(i64 %.unpack57, i1 true), !range !87
  %27 = trunc i64 %26 to i32
  %28 = sub nsw i32 %25, %27
  %29 = icmp ugt i32 %28, 62
  br i1 %29, label %if.then20, label %if.done23

if.then20:                                        ; preds = %if.done19
  %.not74 = icmp eq ptr %2, null
  br i1 %.not74, label %common.ret, label %if.then21

if.then21:                                        ; preds = %if.then20
  %30 = load i128, ptr %0, align 8
  store i128 %30, ptr %2, align 8
  br label %common.ret

if.done23:                                        ; preds = %if.done19
  %31 = add nuw nsw i32 %28, 1
  %32 = sub nuw nsw i32 63, %28
  %33 = zext i32 %32 to i64
  %34 = shl i64 %.unpack, %33
  %35 = zext i32 %31 to i64
  %36 = lshr i64 %.unpack57, %35
  %37 = shl i64 %.unpack57, %33
  %38 = lshr i64 %.unpack, %35
  %39 = or i64 %37, %38
  br label %for.body.lr.ph

if.else:                                          ; preds = %if.done6
  br i1 %10, label %if.then24, label %if.else33

if.then24:                                        ; preds = %if.else
  %40 = tail call i64 @llvm.ctpop.i64(i64 %.unpack60), !range !87
  %41 = icmp ult i64 %40, 2
  br i1 %41, label %if.then25, label %if.done30

if.then25:                                        ; preds = %if.then24
  %.not73 = icmp eq ptr %2, null
  br i1 %.not73, label %if.done27, label %if.then26

if.then26:                                        ; preds = %if.then25
  %42 = add i64 %.unpack60, -1
  %43 = and i64 %42, %.unpack
  %44 = zext i64 %43 to i128
  store i128 %44, ptr %2, align 8
  br label %if.done27

if.done27:                                        ; preds = %if.then26, %if.then25
  %45 = icmp eq i64 %.unpack60, 1
  br i1 %45, label %if.then28, label %if.done29

if.then28:                                        ; preds = %if.done27
  %46 = load <2 x i64>, ptr %0, align 8
  br label %common.ret

if.done29:                                        ; preds = %if.done27
  %47 = tail call i64 @llvm.cttz.i64(i64 %.unpack60, i1 true), !range !87
  %48 = getelementptr inbounds [2 x i64], ptr %q, i64 0, i64 1
  %49 = lshr i64 %.unpack57, %47
  store i64 %49, ptr %48, align 8
  %50 = sub nuw nsw i64 64, %47
  %.not84 = icmp eq i64 %47, 0
  %51 = shl i64 %.unpack57, %50
  %52 = select i1 %.not84, i64 0, i64 %51
  %53 = lshr i64 %.unpack, %47
  %54 = or i64 %52, %53
  store i64 %54, ptr %q, align 16
  %55 = load <2 x i64>, ptr %q, align 16
  br label %common.ret

if.done30:                                        ; preds = %if.then24
  %56 = tail call i64 @llvm.ctlz.i64(i64 %.unpack60, i1 true), !range !87
  %57 = trunc i64 %56 to i32
  %58 = tail call i64 @llvm.ctlz.i64(i64 %.unpack57, i1 true), !range !87
  %59 = trunc i64 %58 to i32
  %reass.sub = sub nsw i32 %57, %59
  %60 = add nsw i32 %reass.sub, 65
  %61 = icmp eq i32 %60, 64
  br i1 %61, label %for.body.lr.ph, label %switch.case.next

switch.case.next:                                 ; preds = %if.done30
  %62 = icmp ult i32 %60, 64
  br i1 %62, label %switch.case.body32, label %switch.default.body

switch.case.body32:                               ; preds = %switch.case.next
  %63 = xor i32 %reass.sub, -1
  %64 = zext i32 %63 to i64
  %65 = shl i64 %.unpack, %64
  %66 = zext i32 %60 to i64
  %67 = lshr i64 %.unpack57, %66
  %68 = shl i64 %.unpack57, %64
  %69 = lshr i64 %.unpack, %66
  %70 = or i64 %68, %69
  br label %for.body.lr.ph

switch.default.body:                              ; preds = %switch.case.next
  %71 = sub nsw i32 63, %reass.sub
  %72 = zext i32 %71 to i64
  %73 = shl i64 %.unpack, %72
  store i64 %73, ptr %q, align 16
  %74 = getelementptr inbounds [2 x i64], ptr %q, i64 0, i64 1
  %75 = shl i64 %.unpack57, %72
  %76 = add nsw i32 %reass.sub, 1
  %77 = zext i32 %76 to i64
  %78 = icmp ult i32 %76, 64
  %79 = lshr i64 %.unpack, %77
  %80 = select i1 %78, i64 %79, i64 0
  %81 = or i64 %75, %80
  store i64 %81, ptr %74, align 8
  %82 = lshr i64 %.unpack57, %77
  %83 = select i1 %78, i64 %82, i64 0
  br label %for.body.lr.ph

if.else33:                                        ; preds = %if.else
  %84 = tail call i64 @llvm.ctlz.i64(i64 %.unpack62, i1 true), !range !87
  %85 = trunc i64 %84 to i32
  %86 = tail call i64 @llvm.ctlz.i64(i64 %.unpack57, i1 true), !range !87
  %87 = trunc i64 %86 to i32
  %88 = sub nsw i32 %85, %87
  %89 = icmp ugt i32 %88, 63
  br i1 %89, label %if.then34, label %if.done37

if.then34:                                        ; preds = %if.else33
  %.not71 = icmp eq ptr %2, null
  br i1 %.not71, label %common.ret, label %if.then35

if.then35:                                        ; preds = %if.then34
  %90 = load i128, ptr %0, align 8
  store i128 %90, ptr %2, align 8
  br label %common.ret

if.done37:                                        ; preds = %if.else33
  %91 = add nuw nsw i32 %88, 1
  store i64 0, ptr %q, align 16
  %92 = icmp eq i32 %91, 64
  br i1 %92, label %if.then38, label %if.else39

if.then38:                                        ; preds = %if.done37
  %93 = getelementptr inbounds [2 x i64], ptr %q, i64 0, i64 1
  store i64 %.unpack, ptr %93, align 8
  br label %for.body.lr.ph

if.else39:                                        ; preds = %if.done37
  %94 = zext i32 %91 to i64
  %95 = lshr i64 %.unpack57, %94
  %96 = sub nuw nsw i32 63, %88
  %97 = zext i32 %96 to i64
  %98 = shl i64 %.unpack57, %97
  %99 = lshr i64 %.unpack, %94
  %100 = or i64 %98, %99
  %101 = getelementptr inbounds [2 x i64], ptr %q, i64 0, i64 1
  %102 = shl i64 %.unpack, %97
  store i64 %102, ptr %101, align 8
  br label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.done30, %if.done23, %if.then38, %if.else39, %switch.case.body32, %switch.default.body
  %103 = phi i64 [ %39, %if.done23 ], [ %70, %switch.case.body32 ], [ %83, %switch.default.body ], [ %.unpack57, %if.then38 ], [ %100, %if.else39 ], [ %.unpack57, %if.done30 ]
  %104 = phi i64 [ %36, %if.done23 ], [ %67, %switch.case.body32 ], [ 0, %switch.default.body ], [ 0, %if.then38 ], [ %95, %if.else39 ], [ 0, %if.done30 ]
  %.promoted = phi i64 [ %34, %if.done23 ], [ %65, %switch.case.body32 ], [ %81, %switch.default.body ], [ %.unpack, %if.then38 ], [ %102, %if.else39 ], [ %.unpack, %if.done30 ]
  %q.promoted = phi i64 [ 0, %if.done23 ], [ 0, %switch.case.body32 ], [ %73, %switch.default.body ], [ 0, %if.then38 ], [ 0, %if.else39 ], [ 0, %if.done30 ]
  %sr.0 = phi i32 [ %31, %if.done23 ], [ %60, %switch.case.body32 ], [ %60, %switch.default.body ], [ 64, %if.then38 ], [ %91, %if.else39 ], [ 64, %if.done30 ]
  %105 = getelementptr inbounds [2 x i64], ptr %r, i64 0, i64 1
  %106 = getelementptr inbounds [2 x i64], ptr %q, i64 0, i64 1
  %107 = load i128, ptr %1, align 8
  %108 = add nsw i32 %sr.0, -1
  %xtraiter = and i32 %sr.0, 7
  %109 = icmp ult i32 %108, 7
  br i1 %109, label %for.done.unr-lcssa, label %for.body.lr.ph.new

for.body.lr.ph.new:                               ; preds = %for.body.lr.ph
  %unroll_iter = and i32 %sr.0, -8
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph.new
  %110 = phi i64 [ %103, %for.body.lr.ph.new ], [ %231, %for.body ]
  %111 = phi i64 [ %104, %for.body.lr.ph.new ], [ %233, %for.body ]
  %112 = phi i64 [ %.promoted, %for.body.lr.ph.new ], [ %221, %for.body ]
  %carry.087 = phi i64 [ 0, %for.body.lr.ph.new ], [ %228, %for.body ]
  %113 = phi i64 [ %q.promoted, %for.body.lr.ph.new ], [ %223, %for.body ]
  %niter = phi i32 [ 0, %for.body.lr.ph.new ], [ %niter.next.7, %for.body ]
  %114 = tail call i64 @llvm.fshl.i64(i64 %111, i64 %110, i64 1)
  store i64 %114, ptr %105, align 8
  %115 = tail call i64 @llvm.fshl.i64(i64 %110, i64 %112, i64 1)
  store i64 %115, ptr %r, align 8
  %116 = tail call i64 @llvm.fshl.i64(i64 %112, i64 %113, i64 1)
  %117 = shl i64 %113, 1
  %118 = or i64 %117, %carry.087
  %119 = load i128, ptr %r, align 8
  %120 = xor i128 %119, -1
  %121 = add i128 %107, %120
  %122 = lshr i128 %121, 127
  %123 = trunc i128 %122 to i64
  %isneg = icmp slt i128 %121, 0
  %124 = select i1 %isneg, i128 %107, i128 0
  %125 = sub i128 %119, %124
  %126 = trunc i128 %125 to i64
  %127 = lshr i128 %125, 64
  %128 = trunc i128 %127 to i64
  store i64 %126, ptr %r, align 8
  %129 = tail call i64 @llvm.fshl.i64(i64 %128, i64 %126, i64 1)
  store i64 %129, ptr %105, align 8
  %130 = tail call i64 @llvm.fshl.i64(i64 %126, i64 %116, i64 1)
  store i64 %130, ptr %r, align 8
  %131 = tail call i64 @llvm.fshl.i64(i64 %116, i64 %118, i64 1)
  %132 = shl i64 %118, 1
  %133 = or i64 %132, %123
  %134 = load i128, ptr %r, align 8
  %135 = xor i128 %134, -1
  %136 = add i128 %107, %135
  %137 = lshr i128 %136, 127
  %138 = trunc i128 %137 to i64
  %isneg.1 = icmp slt i128 %136, 0
  %139 = select i1 %isneg.1, i128 %107, i128 0
  %140 = sub i128 %134, %139
  %141 = trunc i128 %140 to i64
  %142 = lshr i128 %140, 64
  %143 = trunc i128 %142 to i64
  store i64 %141, ptr %r, align 8
  %144 = tail call i64 @llvm.fshl.i64(i64 %143, i64 %141, i64 1)
  store i64 %144, ptr %105, align 8
  %145 = tail call i64 @llvm.fshl.i64(i64 %141, i64 %131, i64 1)
  store i64 %145, ptr %r, align 8
  %146 = tail call i64 @llvm.fshl.i64(i64 %131, i64 %132, i64 1)
  %147 = shl i64 %133, 1
  %148 = or i64 %147, %138
  %149 = load i128, ptr %r, align 8
  %150 = xor i128 %149, -1
  %151 = add i128 %107, %150
  %152 = lshr i128 %151, 127
  %153 = trunc i128 %152 to i64
  %isneg.2 = icmp slt i128 %151, 0
  %154 = select i1 %isneg.2, i128 %107, i128 0
  %155 = sub i128 %149, %154
  %156 = trunc i128 %155 to i64
  %157 = lshr i128 %155, 64
  %158 = trunc i128 %157 to i64
  store i64 %156, ptr %r, align 8
  %159 = tail call i64 @llvm.fshl.i64(i64 %158, i64 %156, i64 1)
  store i64 %159, ptr %105, align 8
  %160 = tail call i64 @llvm.fshl.i64(i64 %156, i64 %146, i64 1)
  store i64 %160, ptr %r, align 8
  %161 = tail call i64 @llvm.fshl.i64(i64 %146, i64 %147, i64 1)
  %162 = shl i64 %148, 1
  %163 = or i64 %162, %153
  %164 = load i128, ptr %r, align 8
  %165 = xor i128 %164, -1
  %166 = add i128 %107, %165
  %167 = lshr i128 %166, 127
  %168 = trunc i128 %167 to i64
  %isneg.3 = icmp slt i128 %166, 0
  %169 = select i1 %isneg.3, i128 %107, i128 0
  %170 = sub i128 %164, %169
  %171 = trunc i128 %170 to i64
  %172 = lshr i128 %170, 64
  %173 = trunc i128 %172 to i64
  store i64 %171, ptr %r, align 8
  %174 = tail call i64 @llvm.fshl.i64(i64 %173, i64 %171, i64 1)
  store i64 %174, ptr %105, align 8
  %175 = tail call i64 @llvm.fshl.i64(i64 %171, i64 %161, i64 1)
  store i64 %175, ptr %r, align 8
  %176 = tail call i64 @llvm.fshl.i64(i64 %161, i64 %162, i64 1)
  %177 = shl i64 %163, 1
  %178 = or i64 %177, %168
  %179 = load i128, ptr %r, align 8
  %180 = xor i128 %179, -1
  %181 = add i128 %107, %180
  %182 = lshr i128 %181, 127
  %183 = trunc i128 %182 to i64
  %isneg.4 = icmp slt i128 %181, 0
  %184 = select i1 %isneg.4, i128 %107, i128 0
  %185 = sub i128 %179, %184
  %186 = trunc i128 %185 to i64
  %187 = lshr i128 %185, 64
  %188 = trunc i128 %187 to i64
  store i64 %186, ptr %r, align 8
  %189 = tail call i64 @llvm.fshl.i64(i64 %188, i64 %186, i64 1)
  store i64 %189, ptr %105, align 8
  %190 = tail call i64 @llvm.fshl.i64(i64 %186, i64 %176, i64 1)
  store i64 %190, ptr %r, align 8
  %191 = tail call i64 @llvm.fshl.i64(i64 %176, i64 %177, i64 1)
  %192 = shl i64 %178, 1
  %193 = or i64 %192, %183
  %194 = load i128, ptr %r, align 8
  %195 = xor i128 %194, -1
  %196 = add i128 %107, %195
  %197 = lshr i128 %196, 127
  %198 = trunc i128 %197 to i64
  %isneg.5 = icmp slt i128 %196, 0
  %199 = select i1 %isneg.5, i128 %107, i128 0
  %200 = sub i128 %194, %199
  %201 = trunc i128 %200 to i64
  %202 = lshr i128 %200, 64
  %203 = trunc i128 %202 to i64
  store i64 %201, ptr %r, align 8
  %204 = tail call i64 @llvm.fshl.i64(i64 %203, i64 %201, i64 1)
  store i64 %204, ptr %105, align 8
  %205 = tail call i64 @llvm.fshl.i64(i64 %201, i64 %191, i64 1)
  store i64 %205, ptr %r, align 8
  %206 = tail call i64 @llvm.fshl.i64(i64 %191, i64 %192, i64 1)
  %207 = shl i64 %193, 1
  %208 = or i64 %207, %198
  %209 = load i128, ptr %r, align 8
  %210 = xor i128 %209, -1
  %211 = add i128 %107, %210
  %212 = lshr i128 %211, 127
  %213 = trunc i128 %212 to i64
  %isneg.6 = icmp slt i128 %211, 0
  %214 = select i1 %isneg.6, i128 %107, i128 0
  %215 = sub i128 %209, %214
  %216 = trunc i128 %215 to i64
  %217 = lshr i128 %215, 64
  %218 = trunc i128 %217 to i64
  store i64 %216, ptr %r, align 8
  %219 = tail call i64 @llvm.fshl.i64(i64 %218, i64 %216, i64 1)
  store i64 %219, ptr %105, align 8
  %220 = tail call i64 @llvm.fshl.i64(i64 %216, i64 %206, i64 1)
  store i64 %220, ptr %r, align 8
  %221 = tail call i64 @llvm.fshl.i64(i64 %206, i64 %207, i64 1)
  %222 = shl i64 %208, 1
  %223 = or i64 %222, %213
  %224 = load i128, ptr %r, align 8
  %225 = xor i128 %224, -1
  %226 = add i128 %107, %225
  %227 = lshr i128 %226, 127
  %228 = trunc i128 %227 to i64
  %isneg.7 = icmp slt i128 %226, 0
  %229 = select i1 %isneg.7, i128 %107, i128 0
  %230 = sub i128 %224, %229
  %231 = trunc i128 %230 to i64
  %232 = lshr i128 %230, 64
  %233 = trunc i128 %232 to i64
  store i64 %231, ptr %r, align 8
  store i64 %233, ptr %105, align 8
  %niter.next.7 = add i32 %niter, 8
  %niter.ncmp.7 = icmp eq i32 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.done.unr-lcssa, label %for.body

for.done.unr-lcssa:                               ; preds = %for.body, %for.body.lr.ph
  %.lcssa103.ph = phi i64 [ undef, %for.body.lr.ph ], [ %221, %for.body ]
  %.lcssa102.ph = phi i64 [ undef, %for.body.lr.ph ], [ %223, %for.body ]
  %.lcssa101.ph = phi i128 [ undef, %for.body.lr.ph ], [ %227, %for.body ]
  %.lcssa.ph = phi i128 [ undef, %for.body.lr.ph ], [ %230, %for.body ]
  %.unr = phi i64 [ %103, %for.body.lr.ph ], [ %231, %for.body ]
  %.unr104 = phi i64 [ %104, %for.body.lr.ph ], [ %233, %for.body ]
  %.unr105 = phi i64 [ %.promoted, %for.body.lr.ph ], [ %221, %for.body ]
  %carry.087.unr = phi i64 [ 0, %for.body.lr.ph ], [ %228, %for.body ]
  %.unr106 = phi i64 [ %q.promoted, %for.body.lr.ph ], [ %223, %for.body ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.done, label %for.body.epil

for.body.epil:                                    ; preds = %for.done.unr-lcssa, %for.body.epil
  %234 = phi i64 [ %251, %for.body.epil ], [ %.unr, %for.done.unr-lcssa ]
  %235 = phi i64 [ %253, %for.body.epil ], [ %.unr104, %for.done.unr-lcssa ]
  %236 = phi i64 [ %240, %for.body.epil ], [ %.unr105, %for.done.unr-lcssa ]
  %carry.087.epil = phi i64 [ %248, %for.body.epil ], [ %carry.087.unr, %for.done.unr-lcssa ]
  %237 = phi i64 [ %243, %for.body.epil ], [ %.unr106, %for.done.unr-lcssa ]
  %epil.iter = phi i32 [ %epil.iter.next, %for.body.epil ], [ 0, %for.done.unr-lcssa ]
  %238 = tail call i64 @llvm.fshl.i64(i64 %235, i64 %234, i64 1)
  store i64 %238, ptr %105, align 8
  %239 = tail call i64 @llvm.fshl.i64(i64 %234, i64 %236, i64 1)
  store i64 %239, ptr %r, align 8
  %240 = tail call i64 @llvm.fshl.i64(i64 %236, i64 %237, i64 1)
  %241 = shl i64 %237, 1
  %242 = and i64 %carry.087.epil, 4294967295
  %243 = or i64 %241, %242
  %244 = load i128, ptr %r, align 8
  %245 = xor i128 %244, -1
  %246 = add i128 %107, %245
  %247 = lshr i128 %246, 127
  %248 = trunc i128 %247 to i64
  %isneg.epil = icmp slt i128 %246, 0
  %249 = select i1 %isneg.epil, i128 %107, i128 0
  %250 = sub i128 %244, %249
  %251 = trunc i128 %250 to i64
  %252 = lshr i128 %250, 64
  %253 = trunc i128 %252 to i64
  store i64 %251, ptr %r, align 8
  store i64 %253, ptr %105, align 8
  %epil.iter.next = add i32 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i32 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.done, label %for.body.epil, !llvm.loop !88

for.done:                                         ; preds = %for.body.epil, %for.done.unr-lcssa
  %.lcssa103 = phi i64 [ %.lcssa103.ph, %for.done.unr-lcssa ], [ %240, %for.body.epil ]
  %.lcssa102 = phi i64 [ %.lcssa102.ph, %for.done.unr-lcssa ], [ %243, %for.body.epil ]
  %.lcssa101 = phi i128 [ %.lcssa101.ph, %for.done.unr-lcssa ], [ %247, %for.body.epil ]
  %.lcssa = phi i128 [ %.lcssa.ph, %for.done.unr-lcssa ], [ %250, %for.body.epil ]
  store i64 %.lcssa103, ptr %106, align 8
  store i64 %.lcssa102, ptr %q, align 16
  %254 = load i128, ptr %q, align 16
  %255 = shl i128 %254, 1
  %256 = or i128 %255, %.lcssa101
  %.not65 = icmp eq ptr %2, null
  %257 = bitcast i128 %256 to <2 x i64>
  br i1 %.not65, label %common.ret, label %if.then43

if.then43:                                        ; preds = %for.done
  store i128 %.lcssa, ptr %2, align 8
  br label %common.ret
}

define internal fastcc void @runtime.print_string(ptr nocapture readonly %0) unnamed_addr {
decls:
  %single_write_length.i.i = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !90
  %1 = getelementptr inbounds { ptr, i64 }, ptr %0, i64 0, i32 1
  %2 = load i64, ptr %1, align 8, !noalias !93
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %runtime.os_write.exit, label %if.done.i.i

if.done.i.i:                                      ; preds = %decls
  %4 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !93
  %5 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %4, i32 1, i32 0), !noalias !93
  store i32 0, ptr %single_write_length.i.i, align 4, !noalias !93
  %6 = load i64, ptr %1, align 8, !noalias !93
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %for.body.i.i, label %runtime.os_write.exit

for.loop.i.i:                                     ; preds = %for.body.i.i
  %8 = zext i32 %17 to i64
  %9 = add i64 %total_write.06.i.i, %8
  %10 = icmp slt i64 %9, %6
  br i1 %10, label %for.body.i.i, label %runtime.os_write.exit

for.body.i.i:                                     ; preds = %if.done.i.i, %for.loop.i.i
  %total_write.06.i.i = phi i64 [ %9, %for.loop.i.i ], [ 0, %if.done.i.i ]
  %11 = sub i64 %6, %total_write.06.i.i
  %12 = trunc i64 %11 to i32
  %13 = call i32 @llvm.smin.i32(i32 %12, i32 1073741824)
  %14 = load ptr, ptr %0, align 8, !noalias !93
  %15 = getelementptr i8, ptr %14, i64 %total_write.06.i.i
  %16 = call x86_stdcallcc i32 @WriteFile(ptr %4, ptr %15, i32 %13, ptr nonnull %single_write_length.i.i, ptr null), !noalias !93
  %17 = load i32, ptr %single_write_length.i.i, align 4, !noalias !93
  %18 = icmp ne i32 %17, 0
  %19 = icmp ne i32 %16, 0
  %or.cond.i.i = select i1 %18, i1 %19, i1 false
  br i1 %or.cond.i.i, label %for.loop.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %for.body.i.i
  %20 = call x86_stdcallcc i32 @GetLastError(), !noalias !93
  br label %runtime.os_write.exit

runtime.os_write.exit:                            ; preds = %for.loop.i.i, %decls, %if.done.i.i, %if.then1.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !90
  ret void
}

define internal fastcc void @opt_ex.main(ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  tail call fastcc void @opt_ex.bench(ptr nonnull @opt_ex.aocloop_do_work_2, ptr %__.context_ptr)
  tail call fastcc void @opt_ex.bench(ptr nonnull @opt_ex.aocloop_do_work_3, ptr %__.context_ptr)
  tail call fastcc void @opt_ex.bench(ptr nonnull @opt_ex.aocloop_do_work_1, ptr %__.context_ptr)
  ret void
}

define internal fastcc void @opt_ex.bench(ptr nocapture readonly %0, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %1 = alloca { ptr, i64 }, align 8
  %2 = alloca { ptr, i64 }, align 8
  %3 = alloca { ptr, i64 }, align 8
  %file_time.i.i.i = alloca %sys_windows.FILETIME, align 8
  %file_time.i.i = alloca %sys_windows.FILETIME, align 8
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca [1 x %..any], align 8
  %9 = alloca %..string, align 8
  %10 = alloca { ptr, i64 }, align 8
  %11 = alloca [1 x %..any], align 8
  %12 = alloca %..string, align 8
  %13 = alloca [6 x i64], align 16
  %14 = alloca { ptr, i64 }, align 8
  %width = alloca i64, align 8
  %result = alloca i64, align 8
  %15 = alloca { ptr, i64 }, align 8
  %16 = alloca [7 x %..any], align 8
  %17 = alloca %..string, align 8
  %18 = alloca %..any, align 8
  %19 = alloca %..string, align 8
  %20 = alloca %..any, align 8
  %21 = alloca i64, align 8
  %22 = alloca %..string, align 8
  %23 = alloca %..string, align 8
  %24 = alloca %..any, align 8
  tail call fastcc void @fmt.println(ptr nonnull @"ggv$100", ptr nonnull @"ggv$8e", ptr %__.context_ptr)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %7, i8 0, i64 16, i1 false)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %8, i8 0, i64 16, i1 false)
  store ptr @"csbs$cc", ptr %9, align 8
  %.repack4 = getelementptr inbounds %..string, ptr %9, i64 0, i32 1
  store i64 16, ptr %.repack4, align 8
  store ptr %9, ptr %8, align 8
  %.repack7 = getelementptr inbounds %..any, ptr %8, i64 0, i32 1
  store i64 432345564227567639, ptr %.repack7, align 8
  store ptr %8, ptr %7, align 8
  %25 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 1, ptr %25, align 8
  call fastcc void @fmt.println(ptr nonnull %7, ptr nonnull @"ggv$8e", ptr %__.context_ptr)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %10, i8 0, i64 16, i1 false)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %11, i8 0, i64 16, i1 false)
  store ptr @"csbs$cd", ptr %12, align 8
  %.repack9 = getelementptr inbounds %..string, ptr %12, i64 0, i32 1
  store i64 33, ptr %.repack9, align 8
  store ptr %12, ptr %11, align 8
  %.repack12 = getelementptr inbounds %..any, ptr %11, i64 0, i32 1
  store i64 432345564227567639, ptr %.repack12, align 8
  store ptr %11, ptr %10, align 8
  %26 = getelementptr inbounds { ptr, i64 }, ptr %10, i64 0, i32 1
  store i64 1, ptr %26, align 8
  call fastcc void @fmt.println(ptr nonnull %10, ptr nonnull @"ggv$8e", ptr %__.context_ptr)
  store <4 x i64> <i64 1, i64 5, i64 10, i64 20>, ptr %13, align 16
  %.repack17 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 4
  store i64 50, ptr %.repack17, align 16
  %.repack18 = getelementptr inbounds [6 x i64], ptr %13, i64 0, i64 5
  store i64 100, ptr %.repack18, align 8
  store ptr %13, ptr %14, align 8
  %27 = getelementptr inbounds { ptr, i64 }, ptr %14, i64 0, i32 1
  store i64 6, ptr %27, align 8
  %.elt1.i = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  %.elt5.i = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  %28 = getelementptr inbounds %runtime.Allocator, ptr %__.context_ptr, i64 0, i32 1
  %.repack19 = getelementptr inbounds %..string, ptr %17, i64 0, i32 1
  %.repack22 = getelementptr inbounds %..any, ptr %16, i64 0, i32 1
  %29 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 1
  %30 = getelementptr inbounds %..any, ptr %18, i64 0, i32 1
  %.repack26 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 1, i32 1
  %31 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 2
  %.repack28 = getelementptr inbounds %..string, ptr %19, i64 0, i32 1
  %.repack31 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 2, i32 1
  %32 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 3
  %33 = getelementptr inbounds %..any, ptr %20, i64 0, i32 1
  %.repack35 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 3, i32 1
  %34 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 4
  %.repack37 = getelementptr inbounds %..string, ptr %22, i64 0, i32 1
  %.repack40 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 4, i32 1
  %35 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 5
  %.repack42 = getelementptr inbounds %..string, ptr %23, i64 0, i32 1
  %.repack45 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 5, i32 1
  %36 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 6
  %37 = getelementptr inbounds %..any, ptr %24, i64 0, i32 1
  %.repack49 = getelementptr inbounds [7 x %..any], ptr %16, i64 0, i64 6, i32 1
  %38 = getelementptr inbounds { ptr, i64 }, ptr %15, i64 0, i32 1
  br label %for.index.body

for.index.body:                                   ; preds = %decls, %opt_ex.aocloop_bench_destroy.exit
  %39 = phi i64 [ 0, %decls ], [ %143, %opt_ex.aocloop_bench_destroy.exit ]
  %40 = load ptr, ptr %14, align 8
  %41 = getelementptr i64, ptr %40, i64 %39
  %42 = load i64, ptr %41, align 8
  store i64 %42, ptr %width, align 8
  call void @llvm.experimental.noalias.scope.decl(metadata !96)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  store i64 %42, ptr @opt_ex.grid_width, align 8, !noalias !96
  %43 = mul i64 %42, %42
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %5, i8 0, i64 16, i1 false), !noalias !96
  call fastcc void @runtime.make_slice-19739(i64 %43, ptr nonnull %__.context_ptr, ptr nonnull @"ggv$8f", ptr %5, ptr %__.context_ptr)
  %.unpack.i = load ptr, ptr %5, align 8, !noalias !96
  %.unpack2.i = load i64, ptr %.elt1.i, align 8, !noalias !96
  store ptr %.unpack.i, ptr @opt_ex.big_grid_1.0, align 8, !noalias !96
  store i64 %.unpack2.i, ptr @opt_ex.big_grid_1.1, align 8, !noalias !96
  %44 = load i64, ptr getelementptr inbounds ({ ptr, i64 }, ptr @opt_ex.data, i64 0, i32 1), align 8, !noalias !96
  %45 = call i64 @llvm.smin.i64(i64 %.unpack2.i, i64 %44)
  %.not.i.i = icmp slt i64 %45, 1
  br i1 %.not.i.i, label %runtime.copy_slice-19597.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.index.body
  %46 = load ptr, ptr @opt_ex.data, align 8, !noalias !96
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %.unpack.i, ptr align 1 %46, i64 %45, i1 false), !noalias !96
  br label %runtime.copy_slice-19597.exit.i

runtime.copy_slice-19597.exit.i:                  ; preds = %if.then.i.i, %for.index.body
  %47 = load i64, ptr @opt_ex.grid_width, align 8, !noalias !96
  %48 = mul i64 %47, %47
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %6, i8 0, i64 16, i1 false), !noalias !96
  call fastcc void @runtime.make_slice-19739(i64 %48, ptr nonnull %__.context_ptr, ptr nonnull @"ggv$90", ptr %6, ptr %__.context_ptr)
  %.unpack4.i = load ptr, ptr %6, align 8, !noalias !96
  %.unpack6.i = load i64, ptr %.elt5.i, align 8, !noalias !96
  store ptr %.unpack4.i, ptr @opt_ex.big_grid_2.0, align 8, !noalias !96
  store i64 %.unpack6.i, ptr @opt_ex.big_grid_2.1, align 8, !noalias !96
  %49 = icmp slt i64 %.unpack6.i, 1
  br i1 %49, label %slice.fill-19732.exit.i, label %if.done.i.i

if.done.i.i:                                      ; preds = %runtime.copy_slice-19597.exit.i
  store i8 46, ptr %.unpack4.i, align 1, !noalias !96
  %50 = load i64, ptr @opt_ex.big_grid_2.1, align 8, !noalias !96
  %51 = icmp sgt i64 %50, 1
  br i1 %51, label %for.body.i.i.preheader, label %slice.fill-19732.exit.i

for.body.i.i.preheader:                           ; preds = %if.done.i.i
  %52 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %.pre.i.i = load i64, ptr @opt_ex.big_grid_2.1, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %runtime.copy_slice-19597.exit.i.i
  %53 = phi i64 [ %57, %runtime.copy_slice-19597.exit.i.i ], [ %50, %for.body.i.i.preheader ]
  %i.01.i.i = phi i64 [ %58, %runtime.copy_slice-19597.exit.i.i ], [ 1, %for.body.i.i.preheader ]
  %54 = sub i64 %53, %i.01.i.i
  %55 = call i64 @llvm.smin.i64(i64 %54, i64 %i.01.i.i)
  %.not.i.i.i = icmp slt i64 %55, 1
  br i1 %.not.i.i.i, label %runtime.copy_slice-19597.exit.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.body.i.i
  %56 = getelementptr i8, ptr %52, i64 %i.01.i.i
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %56, ptr align 1 %52, i64 %55, i1 false), !noalias !96
  br label %runtime.copy_slice-19597.exit.i.i

runtime.copy_slice-19597.exit.i.i:                ; preds = %if.then.i.i.i, %for.body.i.i
  %57 = phi i64 [ %53, %for.body.i.i ], [ %.pre.i.i, %if.then.i.i.i ]
  %58 = shl i64 %i.01.i.i, 1
  %59 = icmp slt i64 %58, %57
  br i1 %59, label %for.body.i.i, label %slice.fill-19732.exit.i

slice.fill-19732.exit.i:                          ; preds = %runtime.copy_slice-19597.exit.i.i, %if.done.i.i, %runtime.copy_slice-19597.exit.i
  %60 = load i64, ptr @opt_ex.grid_width, align 8, !noalias !96
  %61 = icmp sgt i64 %60, -1
  br i1 %61, label %runtime.make_slice_error_loc.exit.i.i.i, label %if.done.i.i.i.i

if.done.i.i.i.i:                                  ; preds = %slice.fill-19732.exit.i
  call fastcc void @runtime.print_caller_location(ptr nonnull @"ggv$91"), !noalias !99
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$154")
  call fastcc void @runtime.print_i64(i64 %60), !noalias !99
  call fastcc void @runtime.print_byte(i8 10)
  call fastcc void @runtime.bounds_trap(), !noalias !99
  unreachable

runtime.make_slice_error_loc.exit.i.i.i:          ; preds = %slice.fill-19732.exit.i
  %62 = shl i64 %60, 3
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4), !noalias !99
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %runtime.mem_alloc_bytes.exit.thread.i.i.i, label %if.done.i17.i.i.i

if.done.i17.i.i.i:                                ; preds = %runtime.make_slice_error_loc.exit.i.i.i
  %64 = load ptr, ptr %__.context_ptr, align 8, !alias.scope !96, !noalias !106
  %65 = icmp eq ptr %64, null
  br i1 %65, label %runtime.mem_alloc_bytes.exit.thread.i.i.i, label %runtime.mem_alloc_bytes.exit.i.i.i

runtime.mem_alloc_bytes.exit.thread.i.i.i:        ; preds = %if.done.i17.i.i.i, %runtime.make_slice_error_loc.exit.i.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !99
  br label %opt_ex.aocloop_bench_init.exit

runtime.mem_alloc_bytes.exit.i.i.i:               ; preds = %if.done.i17.i.i.i
  %66 = load ptr, ptr %28, align 8, !alias.scope !96, !noalias !106
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %4, i8 0, i64 16, i1 false), !noalias !110
  %67 = call i8 %64(ptr %66, i8 0, i64 %62, i64 8, ptr null, i64 0, ptr nonnull @"ggv$91", ptr nonnull %4, ptr nonnull %__.context_ptr) #30, !noalias !111
  %.unpack.i.i.i.i = load ptr, ptr %4, align 8, !noalias !110
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !99
  %68 = icmp eq ptr %.unpack.i.i.i.i, null
  %spec.select5.i.i.i = select i1 %68, i64 0, i64 %60
  br label %opt_ex.aocloop_bench_init.exit

opt_ex.aocloop_bench_init.exit:                   ; preds = %runtime.mem_alloc_bytes.exit.thread.i.i.i, %runtime.mem_alloc_bytes.exit.i.i.i
  %.unpack.sink.i.i.i = phi ptr [ null, %runtime.mem_alloc_bytes.exit.thread.i.i.i ], [ %.unpack.i.i.i.i, %runtime.mem_alloc_bytes.exit.i.i.i ]
  %.unpack13.sink.i.i.i = phi i64 [ 0, %runtime.mem_alloc_bytes.exit.thread.i.i.i ], [ %spec.select5.i.i.i, %runtime.mem_alloc_bytes.exit.i.i.i ]
  store ptr %.unpack.sink.i.i.i, ptr @opt_ex.row_col_data.0, align 8, !noalias !96
  store i64 %.unpack13.sink.i.i.i, ptr @opt_ex.row_col_data.1, align 8, !noalias !96
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  store i64 0, ptr %result, align 8
  br label %for.interval.body

for.interval.body:                                ; preds = %opt_ex.aocloop_bench_init.exit, %time.since.exit
  %i.064 = phi i64 [ 0, %opt_ex.aocloop_bench_init.exit ], [ %123, %time.since.exit ]
  %total_time.063 = phi i64 [ 0, %opt_ex.aocloop_bench_init.exit ], [ %122, %time.since.exit ]
  %69 = load i64, ptr getelementptr inbounds ({ ptr, i64 }, ptr @opt_ex.data, i64 0, i32 1), align 8
  %70 = load i64, ptr @opt_ex.big_grid_1.1, align 8
  %71 = call i64 @llvm.smin.i64(i64 %70, i64 %69)
  %.not.i.i51 = icmp slt i64 %71, 1
  br i1 %.not.i.i51, label %runtime.copy_slice-19597.exit.i53, label %if.then.i.i52

if.then.i.i52:                                    ; preds = %for.interval.body
  %72 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %73 = load ptr, ptr @opt_ex.data, align 8
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %72, ptr align 1 %73, i64 %71, i1 false)
  br label %runtime.copy_slice-19597.exit.i53

runtime.copy_slice-19597.exit.i53:                ; preds = %if.then.i.i52, %for.interval.body
  %74 = load i64, ptr @opt_ex.big_grid_2.1, align 8
  %75 = icmp slt i64 %74, 1
  br i1 %75, label %slice.fill-19732.exit.i55, label %if.done.i.i54

if.done.i.i54:                                    ; preds = %runtime.copy_slice-19597.exit.i53
  %76 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  store i8 46, ptr %76, align 1
  %77 = load i64, ptr @opt_ex.big_grid_2.1, align 8
  %78 = icmp sgt i64 %77, 1
  br i1 %78, label %for.body.i.i56.preheader, label %slice.fill-19732.exit.i55

for.body.i.i56.preheader:                         ; preds = %if.done.i.i54
  %79 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %.pre.i.i60 = load i64, ptr @opt_ex.big_grid_2.1, align 8
  br label %for.body.i.i56

for.body.i.i56:                                   ; preds = %for.body.i.i56.preheader, %runtime.copy_slice-19597.exit.i.i61
  %80 = phi i64 [ %84, %runtime.copy_slice-19597.exit.i.i61 ], [ %77, %for.body.i.i56.preheader ]
  %i.01.i.i57 = phi i64 [ %85, %runtime.copy_slice-19597.exit.i.i61 ], [ 1, %for.body.i.i56.preheader ]
  %81 = sub i64 %80, %i.01.i.i57
  %82 = call i64 @llvm.smin.i64(i64 %81, i64 %i.01.i.i57)
  %.not.i.i.i58 = icmp slt i64 %82, 1
  br i1 %.not.i.i.i58, label %runtime.copy_slice-19597.exit.i.i61, label %if.then.i.i.i59

if.then.i.i.i59:                                  ; preds = %for.body.i.i56
  %83 = getelementptr i8, ptr %79, i64 %i.01.i.i57
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %83, ptr align 1 %79, i64 %82, i1 false)
  br label %runtime.copy_slice-19597.exit.i.i61

runtime.copy_slice-19597.exit.i.i61:              ; preds = %if.then.i.i.i59, %for.body.i.i56
  %84 = phi i64 [ %80, %for.body.i.i56 ], [ %.pre.i.i60, %if.then.i.i.i59 ]
  %85 = shl i64 %i.01.i.i57, 1
  %86 = icmp slt i64 %85, %84
  br i1 %86, label %for.body.i.i56, label %slice.fill-19732.exit.i55

slice.fill-19732.exit.i55:                        ; preds = %runtime.copy_slice-19597.exit.i.i61, %if.done.i.i54, %runtime.copy_slice-19597.exit.i53
  %87 = load i64, ptr @opt_ex.row_col_data.1, align 8
  %88 = icmp slt i64 %87, 1
  br i1 %88, label %opt_ex.aocloop_per_iter_cleanup.exit, label %if.done.i1.i

if.done.i1.i:                                     ; preds = %slice.fill-19732.exit.i55
  %89 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  store i64 0, ptr %89, align 8
  %90 = load i64, ptr @opt_ex.row_col_data.1, align 8
  %91 = icmp sgt i64 %90, 1
  br i1 %91, label %for.body.lr.ph.i.i, label %opt_ex.aocloop_per_iter_cleanup.exit

for.body.lr.ph.i.i:                               ; preds = %if.done.i1.i
  %.pre11.i.i = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %.pre.i5.i = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %.pre12.i.i = load i64, ptr @opt_ex.row_col_data.1, align 8
  br label %for.body.i2.i

for.body.i2.i:                                    ; preds = %runtime.copy_slice-20060.exit.i.i, %for.body.lr.ph.i.i
  %92 = phi i64 [ %90, %for.body.lr.ph.i.i ], [ %98, %runtime.copy_slice-20060.exit.i.i ]
  %93 = phi ptr [ %.pre11.i.i, %for.body.lr.ph.i.i ], [ %99, %runtime.copy_slice-20060.exit.i.i ]
  %i.03.i.i = phi i64 [ 1, %for.body.lr.ph.i.i ], [ %100, %runtime.copy_slice-20060.exit.i.i ]
  %94 = sub i64 %92, %i.03.i.i
  %95 = call i64 @llvm.smin.i64(i64 %94, i64 %i.03.i.i)
  %.not.i.i3.i = icmp slt i64 %95, 1
  br i1 %.not.i.i3.i, label %runtime.copy_slice-20060.exit.i.i, label %if.then.i.i4.i

if.then.i.i4.i:                                   ; preds = %for.body.i2.i
  %96 = getelementptr i64, ptr %93, i64 %i.03.i.i
  %97 = shl i64 %95, 3
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %96, ptr align 1 %93, i64 %97, i1 false)
  br label %runtime.copy_slice-20060.exit.i.i

runtime.copy_slice-20060.exit.i.i:                ; preds = %if.then.i.i4.i, %for.body.i2.i
  %98 = phi i64 [ %92, %for.body.i2.i ], [ %.pre12.i.i, %if.then.i.i4.i ]
  %99 = phi ptr [ %93, %for.body.i2.i ], [ %.pre.i5.i, %if.then.i.i4.i ]
  %100 = shl i64 %i.03.i.i, 1
  %101 = icmp slt i64 %100, %98
  br i1 %101, label %for.body.i2.i, label %opt_ex.aocloop_per_iter_cleanup.exit

opt_ex.aocloop_per_iter_cleanup.exit:             ; preds = %runtime.copy_slice-20060.exit.i.i, %slice.fill-19732.exit.i55, %if.done.i1.i
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %file_time.i.i)
  store i64 0, ptr %file_time.i.i, align 8
  call x86_stdcallcc void @GetSystemTimePreciseAsFileTime(ptr nonnull %file_time.i.i)
  %102 = load i64, ptr %file_time.i.i, align 8
  %103 = mul i64 %102, 100
  %104 = add i64 %103, 6802270473709551616
  %or.cond.i.i.i = icmp ugt i64 %104, 999999999
  br i1 %or.cond.i.i.i, label %if.then.i.i.i62, label %time.now.exit

if.then.i.i.i62:                                  ; preds = %opt_ex.aocloop_per_iter_cleanup.exit
  %105 = sdiv i64 %104, 1000000000
  %.neg.i.i.i = mul nsw i64 %105, -1000000000
  %106 = add i64 %.neg.i.i.i, %104
  %107 = icmp slt i64 %106, 0
  %108 = add nsw i64 %106, 1000000000
  %.lobit.i.i.i = ashr i64 %106, 63
  %spec.select.i.i.i = add nsw i64 %.lobit.i.i.i, %105
  %spec.select4.i.i.i = select i1 %107, i64 %108, i64 %106
  %.neg65 = mul i64 %spec.select.i.i.i, -1000000000
  br label %time.now.exit

time.now.exit:                                    ; preds = %opt_ex.aocloop_per_iter_cleanup.exit, %if.then.i.i.i62
  %sec.0.i.i.i.neg66 = phi i64 [ 0, %opt_ex.aocloop_per_iter_cleanup.exit ], [ %.neg65, %if.then.i.i.i62 ]
  %nsec.0.i.i.i = phi i64 [ %104, %opt_ex.aocloop_per_iter_cleanup.exit ], [ %spec.select4.i.i.i, %if.then.i.i.i62 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %file_time.i.i)
  %109 = call i64 %0(ptr nonnull %__.context_ptr), !callees !112
  %110 = load i64, ptr %result, align 8
  %111 = add i64 %110, %109
  store i64 %111, ptr %result, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %file_time.i.i.i)
  store i64 0, ptr %file_time.i.i.i, align 8
  call x86_stdcallcc void @GetSystemTimePreciseAsFileTime(ptr nonnull %file_time.i.i.i)
  %112 = load i64, ptr %file_time.i.i.i, align 8
  %113 = mul i64 %112, 100
  %114 = add i64 %113, 6802270473709551616
  %or.cond.i.i.i.i = icmp ugt i64 %114, 999999999
  br i1 %or.cond.i.i.i.i, label %if.then.i.i.i.i, label %time.since.exit

if.then.i.i.i.i:                                  ; preds = %time.now.exit
  %115 = sdiv i64 %114, 1000000000
  %.neg.i.i.i.i = mul nsw i64 %115, -1000000000
  %116 = add i64 %.neg.i.i.i.i, %114
  %117 = icmp slt i64 %116, 0
  %118 = add nsw i64 %116, 1000000000
  %.lobit.i.i.i.i = ashr i64 %116, 63
  %spec.select.i.i.i.i = add nsw i64 %.lobit.i.i.i.i, %115
  %spec.select4.i.i.i.i = select i1 %117, i64 %118, i64 %116
  %119 = mul i64 %spec.select.i.i.i.i, 1000000000
  br label %time.since.exit

time.since.exit:                                  ; preds = %time.now.exit, %if.then.i.i.i.i
  %sec.0.i.i.i.i = phi i64 [ 0, %time.now.exit ], [ %119, %if.then.i.i.i.i ]
  %nsec.0.i.i.i.i = phi i64 [ %114, %time.now.exit ], [ %spec.select4.i.i.i.i, %if.then.i.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %file_time.i.i.i)
  %.neg = add i64 %sec.0.i.i.i.neg66, %total_time.063
  %120 = sub i64 %.neg, %nsec.0.i.i.i
  %121 = add i64 %120, %sec.0.i.i.i.i
  %122 = add i64 %121, %nsec.0.i.i.i.i
  %123 = add nuw nsw i64 %i.064, 1
  %exitcond.not = icmp eq i64 %123, 100000
  br i1 %exitcond.not, label %for.interval.done, label %for.interval.body

for.interval.done:                                ; preds = %time.since.exit
  call void @llvm.experimental.noalias.scope.decl(metadata !113)
  %opt_ex.big_grid_1.val.i = load ptr, ptr @opt_ex.big_grid_1.0, align 8, !noalias !113
  %opt_ex.big_grid_1.val2.i = load i64, ptr @opt_ex.big_grid_1.1, align 8, !noalias !113
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3), !noalias !116
  %124 = icmp eq ptr %opt_ex.big_grid_1.val.i, null
  br i1 %124, label %runtime.delete_slice-19740.exit.i, label %cmp.or.i.i.i

cmp.or.i.i.i:                                     ; preds = %for.interval.done
  %125 = load ptr, ptr %__.context_ptr, align 8, !alias.scope !113, !noalias !119
  %126 = icmp eq ptr %125, null
  br i1 %126, label %runtime.delete_slice-19740.exit.i, label %if.done.i.i.i

if.done.i.i.i:                                    ; preds = %cmp.or.i.i.i
  %127 = load ptr, ptr %28, align 8, !alias.scope !113, !noalias !119
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %3, i8 0, i64 16, i1 false), !noalias !122
  %128 = call i8 %125(ptr %127, i8 1, i64 0, i64 0, ptr nonnull %opt_ex.big_grid_1.val.i, i64 %opt_ex.big_grid_1.val2.i, ptr nonnull @"ggv$93", ptr nonnull %3, ptr nonnull %__.context_ptr) #30
  br label %runtime.delete_slice-19740.exit.i

runtime.delete_slice-19740.exit.i:                ; preds = %if.done.i.i.i, %cmp.or.i.i.i, %for.interval.done
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3), !noalias !116
  %opt_ex.big_grid_2.val.i = load ptr, ptr @opt_ex.big_grid_2.0, align 8, !noalias !113
  %opt_ex.big_grid_2.val1.i = load i64, ptr @opt_ex.big_grid_2.1, align 8, !noalias !113
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2), !noalias !123
  %129 = icmp eq ptr %opt_ex.big_grid_2.val.i, null
  br i1 %129, label %runtime.delete_slice-19740.exit6.i, label %cmp.or.i.i3.i

cmp.or.i.i3.i:                                    ; preds = %runtime.delete_slice-19740.exit.i
  %130 = load ptr, ptr %__.context_ptr, align 8, !alias.scope !113, !noalias !126
  %131 = icmp eq ptr %130, null
  br i1 %131, label %runtime.delete_slice-19740.exit6.i, label %if.done.i.i4.i

if.done.i.i4.i:                                   ; preds = %cmp.or.i.i3.i
  %132 = load ptr, ptr %28, align 8, !alias.scope !113, !noalias !126
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %2, i8 0, i64 16, i1 false), !noalias !129
  %133 = call i8 %130(ptr %132, i8 1, i64 0, i64 0, ptr nonnull %opt_ex.big_grid_2.val.i, i64 %opt_ex.big_grid_2.val1.i, ptr nonnull @"ggv$94", ptr nonnull %2, ptr nonnull %__.context_ptr) #30
  br label %runtime.delete_slice-19740.exit6.i

runtime.delete_slice-19740.exit6.i:               ; preds = %if.done.i.i4.i, %cmp.or.i.i3.i, %runtime.delete_slice-19740.exit.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2), !noalias !123
  %134 = load ptr, ptr @opt_ex.row_col_data.0, align 8, !noalias !130
  %135 = load i64, ptr @opt_ex.row_col_data.1, align 8, !noalias !130
  %136 = shl i64 %135, 3
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %1), !noalias !130
  %137 = icmp eq ptr %134, null
  br i1 %137, label %opt_ex.aocloop_bench_destroy.exit, label %cmp.or.i.i7.i

cmp.or.i.i7.i:                                    ; preds = %runtime.delete_slice-19740.exit6.i
  %138 = load ptr, ptr %__.context_ptr, align 8, !alias.scope !113, !noalias !133
  %139 = icmp eq ptr %138, null
  br i1 %139, label %opt_ex.aocloop_bench_destroy.exit, label %if.done.i.i8.i

if.done.i.i8.i:                                   ; preds = %cmp.or.i.i7.i
  %140 = load ptr, ptr %28, align 8, !alias.scope !113, !noalias !133
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %1, i8 0, i64 16, i1 false), !noalias !136
  %141 = call i8 %138(ptr %140, i8 1, i64 0, i64 0, ptr nonnull %134, i64 %136, ptr nonnull @"ggv$95", ptr nonnull %1, ptr nonnull %__.context_ptr) #30
  br label %opt_ex.aocloop_bench_destroy.exit

opt_ex.aocloop_bench_destroy.exit:                ; preds = %runtime.delete_slice-19740.exit6.i, %cmp.or.i.i7.i, %if.done.i.i8.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %1), !noalias !130
  %142 = sdiv i64 %122, 100000
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %15, i8 0, i64 16, i1 false)
  store ptr @"csbs$ce", ptr %17, align 8
  store i64 6, ptr %.repack19, align 8
  store ptr %17, ptr %16, align 8
  store i64 432345564227567639, ptr %.repack22, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %18, i8 0, i64 16, i1 false)
  store ptr %width, ptr %18, align 8
  store i64 4683743612465315841, ptr %30, align 8
  store ptr %width, ptr %29, align 8
  store i64 4683743612465315841, ptr %.repack26, align 8
  store ptr @"csbs$cf", ptr %19, align 8
  store i64 5, ptr %.repack28, align 8
  store ptr %19, ptr %31, align 8
  store i64 432345564227567639, ptr %.repack31, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %20, i8 0, i64 16, i1 false)
  store i64 %142, ptr %21, align 8
  store ptr %21, ptr %20, align 8
  store i64 4683743612465315841, ptr %33, align 8
  store ptr %21, ptr %32, align 8
  store i64 4683743612465315841, ptr %.repack35, align 8
  store ptr @"csbs$d0", ptr %22, align 8
  store i64 2, ptr %.repack37, align 8
  store ptr %22, ptr %34, align 8
  store i64 432345564227567639, ptr %.repack40, align 8
  store ptr @"csbs$d1", ptr %23, align 8
  store i64 13, ptr %.repack42, align 8
  store ptr %23, ptr %35, align 8
  store i64 432345564227567639, ptr %.repack45, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %24, i8 0, i64 16, i1 false)
  store ptr %result, ptr %24, align 8
  store i64 4683743612465315841, ptr %37, align 8
  store ptr %result, ptr %36, align 8
  store i64 4683743612465315841, ptr %.repack49, align 8
  store ptr %16, ptr %15, align 8
  store i64 7, ptr %38, align 8
  call fastcc void @fmt.println(ptr nonnull %15, ptr nonnull @"ggv$8e", ptr %__.context_ptr)
  %143 = add nuw nsw i64 %39, 1
  %exitcond69.not = icmp eq i64 %143, 6
  br i1 %exitcond69.not, label %for.index.done, label %for.index.body

for.index.done:                                   ; preds = %opt_ex.aocloop_bench_destroy.exit
  ret void
}

define internal fastcc void @runtime.print_byte(i8 %0) unnamed_addr {
if.done.i.i:
  %single_write_length.i.i = alloca i32, align 4
  %1 = alloca [1 x i8], align 16
  store i8 %0, ptr %1, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !137
  %2 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !140
  %3 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %2, i32 1, i32 0), !noalias !140
  store i32 0, ptr %single_write_length.i.i, align 4, !noalias !140
  %4 = call x86_stdcallcc i32 @WriteFile(ptr %2, ptr nonnull %1, i32 1, ptr nonnull %single_write_length.i.i, ptr null), !noalias !140
  %5 = load i32, ptr %single_write_length.i.i, align 4, !noalias !140
  %6 = icmp ne i32 %5, 0
  %7 = icmp ne i32 %4, 0
  %or.cond.i.i = select i1 %6, i1 %7, i1 false
  br i1 %or.cond.i.i, label %runtime.os_write.exit, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.done.i.i
  %8 = call x86_stdcallcc i32 @GetLastError(), !noalias !140
  br label %runtime.os_write.exit

runtime.os_write.exit:                            ; preds = %if.done.i.i, %if.then1.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !137
  ret void
}

define internal fastcc void @runtime.print_encoded_rune(i32 %0) unnamed_addr {
decls:
  %single_write_length.i.i.i29 = alloca i32, align 4
  %1 = alloca [1 x i8], align 16
  %single_write_length.i.i.i23 = alloca i32, align 4
  %single_write_length.i.i.i.i = alloca i32, align 4
  %2 = alloca [1 x i8], align 16
  %b.i = alloca [4 x i8], align 1
  %single_write_length.i.i.i17 = alloca i32, align 4
  %3 = alloca [1 x i8], align 16
  %single_write_length.i.i.i11 = alloca i32, align 4
  %4 = alloca [1 x i8], align 16
  %single_write_length.i.i.i = alloca i32, align 4
  %5 = alloca [1 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5)
  store i8 39, ptr %5, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i), !noalias !143
  %6 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !146
  %7 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %6, i32 1, i32 0), !noalias !146
  store i32 0, ptr %single_write_length.i.i.i, align 4, !noalias !146
  %8 = call x86_stdcallcc i32 @WriteFile(ptr %6, ptr nonnull %5, i32 1, ptr nonnull %single_write_length.i.i.i, ptr null), !noalias !146
  %9 = load i32, ptr %single_write_length.i.i.i, align 4, !noalias !146
  %10 = icmp ne i32 %9, 0
  %11 = icmp ne i32 %8, 0
  %or.cond.i.i.i = select i1 %10, i1 %11, i1 false
  br i1 %or.cond.i.i.i, label %runtime.print_byte.exit, label %if.then1.i.i.i

if.then1.i.i.i:                                   ; preds = %decls
  %12 = call x86_stdcallcc i32 @GetLastError(), !noalias !146
  br label %runtime.print_byte.exit

runtime.print_byte.exit:                          ; preds = %decls, %if.then1.i.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i), !noalias !143
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5)
  switch i32 %0, label %switch.default.body [
    i32 7, label %switch.case.body
    i32 8, label %switch.case.body1
    i32 27, label %switch.case.body2
    i32 12, label %switch.case.body3
    i32 10, label %switch.case.body4
    i32 13, label %switch.case.body5
    i32 9, label %switch.case.body6
    i32 11, label %switch.case.body7
  ]

switch.case.body:                                 ; preds = %runtime.print_byte.exit
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$f8")
  br label %switch.done

switch.case.body1:                                ; preds = %runtime.print_byte.exit
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$f9")
  br label %switch.done

switch.case.body2:                                ; preds = %runtime.print_byte.exit
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$fa")
  br label %switch.done

switch.case.body3:                                ; preds = %runtime.print_byte.exit
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$fb")
  br label %switch.done

switch.case.body4:                                ; preds = %runtime.print_byte.exit
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$fc")
  br label %switch.done

switch.case.body5:                                ; preds = %runtime.print_byte.exit
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$fd")
  br label %switch.done

switch.case.body6:                                ; preds = %runtime.print_byte.exit
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$fe")
  br label %switch.done

switch.case.body7:                                ; preds = %runtime.print_byte.exit
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$ff")
  br label %switch.done

switch.default.body:                              ; preds = %runtime.print_byte.exit
  %13 = icmp slt i32 %0, 1
  br i1 %13, label %if.then, label %if.else

if.then:                                          ; preds = %switch.default.body
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$4d")
  br label %switch.done

if.else:                                          ; preds = %switch.default.body
  %14 = icmp ult i32 %0, 32
  br i1 %14, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.else
  %15 = trunc i32 %0 to i8
  %16 = lshr i8 %15, 4
  %17 = and i8 %15, 15
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$f6")
  %18 = zext i8 %16 to i64
  %19 = getelementptr i8, ptr @"csbs$4", i64 %18
  %20 = load i8, ptr %19, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4)
  store i8 %20, ptr %4, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i11), !noalias !149
  %21 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !152
  %22 = call x86_stdcallcc i32 @SetHandleInformation(ptr %21, i32 1, i32 0), !noalias !152
  store i32 0, ptr %single_write_length.i.i.i11, align 4, !noalias !152
  %23 = call x86_stdcallcc i32 @WriteFile(ptr %21, ptr nonnull %4, i32 1, ptr nonnull %single_write_length.i.i.i11, ptr null), !noalias !152
  %24 = load i32, ptr %single_write_length.i.i.i11, align 4, !noalias !152
  %25 = icmp ne i32 %24, 0
  %26 = icmp ne i32 %23, 0
  %or.cond.i.i.i12 = select i1 %25, i1 %26, i1 false
  br i1 %or.cond.i.i.i12, label %runtime.print_byte.exit16, label %if.then1.i.i.i13

if.then1.i.i.i13:                                 ; preds = %if.then8
  %27 = call x86_stdcallcc i32 @GetLastError(), !noalias !152
  br label %runtime.print_byte.exit16

runtime.print_byte.exit16:                        ; preds = %if.then8, %if.then1.i.i.i13
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i11), !noalias !149
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4)
  %28 = zext i8 %17 to i64
  %29 = getelementptr i8, ptr @"csbs$4", i64 %28
  %30 = load i8, ptr %29, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3)
  store i8 %30, ptr %3, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i17), !noalias !155
  %31 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !158
  %32 = call x86_stdcallcc i32 @SetHandleInformation(ptr %31, i32 1, i32 0), !noalias !158
  store i32 0, ptr %single_write_length.i.i.i17, align 4, !noalias !158
  %33 = call x86_stdcallcc i32 @WriteFile(ptr %31, ptr nonnull %3, i32 1, ptr nonnull %single_write_length.i.i.i17, ptr null), !noalias !158
  %34 = load i32, ptr %single_write_length.i.i.i17, align 4, !noalias !158
  %35 = icmp ne i32 %34, 0
  %36 = icmp ne i32 %33, 0
  %or.cond.i.i.i18 = select i1 %35, i1 %36, i1 false
  br i1 %or.cond.i.i.i18, label %runtime.print_byte.exit22, label %if.then1.i.i.i19

if.then1.i.i.i19:                                 ; preds = %runtime.print_byte.exit16
  %37 = call x86_stdcallcc i32 @GetLastError(), !noalias !158
  br label %runtime.print_byte.exit22

runtime.print_byte.exit22:                        ; preds = %runtime.print_byte.exit16, %if.then1.i.i.i19
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i17), !noalias !155
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3)
  br label %switch.done

if.else9:                                         ; preds = %if.else
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %b.i)
  %38 = icmp ult i32 %0, 128
  br i1 %38, label %if.then.i, label %if.done.i.i

if.then.i:                                        ; preds = %if.else9
  %39 = trunc i32 %0 to i8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %2)
  store i8 %39, ptr %2, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i.i), !noalias !161
  %40 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !164
  %41 = call x86_stdcallcc i32 @SetHandleInformation(ptr %40, i32 1, i32 0), !noalias !164
  store i32 0, ptr %single_write_length.i.i.i.i, align 4, !noalias !164
  %42 = call x86_stdcallcc i32 @WriteFile(ptr %40, ptr nonnull %2, i32 1, ptr nonnull %single_write_length.i.i.i.i, ptr null), !noalias !164
  %43 = load i32, ptr %single_write_length.i.i.i.i, align 4, !noalias !164
  %44 = icmp ne i32 %43, 0
  %45 = icmp ne i32 %42, 0
  %or.cond.i.i.i.i = select i1 %44, i1 %45, i1 false
  br i1 %or.cond.i.i.i.i, label %runtime.print_byte.exit.i, label %if.then1.i.i.i.i

if.then1.i.i.i.i:                                 ; preds = %if.then.i
  %46 = call x86_stdcallcc i32 @GetLastError(), !noalias !164
  br label %runtime.print_byte.exit.i

runtime.print_byte.exit.i:                        ; preds = %if.then.i, %if.then1.i.i.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i.i), !noalias !161
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %2)
  br label %runtime.print_rune.exit

if.done.i.i:                                      ; preds = %if.else9
  %47 = icmp ult i32 %0, 2048
  br i1 %47, label %if.then1.i.i, label %if.done2.i.i

if.then1.i.i:                                     ; preds = %if.done.i.i
  %48 = lshr i32 %0, 6
  %49 = trunc i32 %48 to i8
  %50 = or i8 %49, -64
  br label %if.done.i.i.i

if.done2.i.i:                                     ; preds = %if.done.i.i
  %51 = icmp ugt i32 %0, 1114111
  %52 = and i32 %0, -2048
  %or.cond.i.i = icmp eq i32 %52, 55296
  %or.cond58.i.i = or i1 %51, %or.cond.i.i
  %r.0.i.i = select i1 %or.cond58.i.i, i32 65533, i32 %0
  %53 = icmp ult i32 %0, 65536
  br i1 %53, label %if.then5.i.i, label %if.done6.i.i

if.then5.i.i:                                     ; preds = %if.done2.i.i
  %54 = lshr i32 %r.0.i.i, 12
  %55 = trunc i32 %54 to i8
  %56 = or i8 %55, -32
  %57 = lshr i32 %r.0.i.i, 6
  %58 = trunc i32 %r.0.i.i to i8
  %59 = and i8 %58, 63
  %60 = or i8 %59, -128
  br label %if.done.i.i.i

if.done6.i.i:                                     ; preds = %if.done2.i.i
  %61 = lshr i32 %r.0.i.i, 18
  %62 = trunc i32 %61 to i8
  %63 = or i8 %62, -16
  %64 = lshr i32 %r.0.i.i, 12
  %65 = lshr i32 %r.0.i.i, 6
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 63
  %68 = or i8 %67, -128
  %69 = trunc i32 %r.0.i.i to i8
  %70 = and i8 %69, 63
  %71 = or i8 %70, -128
  br label %if.done.i.i.i

if.done.i.i.i:                                    ; preds = %if.done6.i.i, %if.then5.i.i, %if.then1.i.i
  %.sink61.i.i = phi i8 [ %63, %if.done6.i.i ], [ %56, %if.then5.i.i ], [ %50, %if.then1.i.i ]
  %.sink60.i.in.in.in.i = phi i32 [ %64, %if.done6.i.i ], [ %57, %if.then5.i.i ], [ %0, %if.then1.i.i ]
  %.sink59.i.i = phi i8 [ %68, %if.done6.i.i ], [ %60, %if.then5.i.i ], [ 0, %if.then1.i.i ]
  %.sink.i.i = phi i8 [ %71, %if.done6.i.i ], [ 0, %if.then5.i.i ], [ 0, %if.then1.i.i ]
  %common.ret.op.i.i = phi i64 [ 4, %if.done6.i.i ], [ 3, %if.then5.i.i ], [ 2, %if.then1.i.i ]
  %.sink60.i.in.in.i = trunc i32 %.sink60.i.in.in.in.i to i8
  %.sink60.i.in.i = and i8 %.sink60.i.in.in.i, 63
  %.sink60.i.i = or i8 %.sink60.i.in.i, -128
  store i8 %.sink61.i.i, ptr %b.i, align 1
  %b.repack7.i = getelementptr inbounds [4 x i8], ptr %b.i, i64 0, i64 1
  store i8 %.sink60.i.i, ptr %b.repack7.i, align 1
  %b.repack9.i = getelementptr inbounds [4 x i8], ptr %b.i, i64 0, i64 2
  store i8 %.sink59.i.i, ptr %b.repack9.i, align 1
  %b.repack11.i = getelementptr inbounds [4 x i8], ptr %b.i, i64 0, i64 3
  store i8 %.sink.i.i, ptr %b.repack11.i, align 1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i23), !noalias !167
  %72 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !170
  %73 = call x86_stdcallcc i32 @SetHandleInformation(ptr %72, i32 1, i32 0), !noalias !170
  store i32 0, ptr %single_write_length.i.i.i23, align 4, !noalias !170
  br label %for.body.i.i.i

for.loop.i.i.i27:                                 ; preds = %for.body.i.i.i
  %74 = zext i32 %82 to i64
  %75 = add i64 %total_write.06.i.i.i, %74
  %76 = icmp slt i64 %75, %common.ret.op.i.i
  br i1 %76, label %for.body.i.i.i, label %runtime.os_write.exit.i

for.body.i.i.i:                                   ; preds = %for.loop.i.i.i27, %if.done.i.i.i
  %total_write.06.i.i.i = phi i64 [ %75, %for.loop.i.i.i27 ], [ 0, %if.done.i.i.i ]
  %77 = sub i64 %common.ret.op.i.i, %total_write.06.i.i.i
  %78 = trunc i64 %77 to i32
  %79 = call i32 @llvm.smin.i32(i32 %78, i32 1073741824)
  %80 = getelementptr i8, ptr %b.i, i64 %total_write.06.i.i.i
  %81 = call x86_stdcallcc i32 @WriteFile(ptr %72, ptr %80, i32 %79, ptr nonnull %single_write_length.i.i.i23, ptr null), !noalias !170
  %82 = load i32, ptr %single_write_length.i.i.i23, align 4, !noalias !170
  %83 = icmp ne i32 %82, 0
  %84 = icmp ne i32 %81, 0
  %or.cond.i.i.i24 = select i1 %83, i1 %84, i1 false
  br i1 %or.cond.i.i.i24, label %for.loop.i.i.i27, label %if.then1.i.i.i25

if.then1.i.i.i25:                                 ; preds = %for.body.i.i.i
  %85 = call x86_stdcallcc i32 @GetLastError(), !noalias !170
  br label %runtime.os_write.exit.i

runtime.os_write.exit.i:                          ; preds = %for.loop.i.i.i27, %if.then1.i.i.i25
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i23), !noalias !167
  br label %runtime.print_rune.exit

runtime.print_rune.exit:                          ; preds = %runtime.print_byte.exit.i, %runtime.os_write.exit.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %b.i)
  br label %switch.done

switch.done:                                      ; preds = %if.then, %runtime.print_rune.exit, %runtime.print_byte.exit22, %switch.case.body7, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %switch.case.body
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %1)
  store i8 39, ptr %1, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i29), !noalias !173
  %86 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !176
  %87 = call x86_stdcallcc i32 @SetHandleInformation(ptr %86, i32 1, i32 0), !noalias !176
  store i32 0, ptr %single_write_length.i.i.i29, align 4, !noalias !176
  %88 = call x86_stdcallcc i32 @WriteFile(ptr %86, ptr nonnull %1, i32 1, ptr nonnull %single_write_length.i.i.i29, ptr null), !noalias !176
  %89 = load i32, ptr %single_write_length.i.i.i29, align 4, !noalias !176
  %90 = icmp ne i32 %89, 0
  %91 = icmp ne i32 %88, 0
  %or.cond.i.i.i30 = select i1 %90, i1 %91, i1 false
  br i1 %or.cond.i.i.i30, label %runtime.print_byte.exit35, label %if.then1.i.i.i31

if.then1.i.i.i31:                                 ; preds = %switch.done
  %92 = call x86_stdcallcc i32 @GetLastError(), !noalias !176
  br label %runtime.print_byte.exit35

runtime.print_byte.exit35:                        ; preds = %switch.done, %if.then1.i.i.i31
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i29), !noalias !173
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %1)
  ret void
}

define internal fastcc void @runtime.print_u64(i64 %0) unnamed_addr {
decls:
  %single_write_length.i.i = alloca i32, align 4
  %a = alloca [129 x i8], align 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a, i8 0, i64 129, i1 false)
  %1 = icmp ugt i64 %0, 9
  br i1 %1, label %for.body, label %for.done.thread

for.done.thread:                                  ; preds = %decls
  %2 = getelementptr inbounds [129 x i8], ptr %a, i64 0, i64 128
  %3 = getelementptr i8, ptr @"csbs$4", i64 %0
  %4 = load i8, ptr %3, align 1
  store i8 %4, ptr %2, align 1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !179
  br label %if.done.i.i

for.body:                                         ; preds = %decls, %for.body
  %u.02 = phi i64 [ %10, %for.body ], [ %0, %decls ]
  %i.01 = phi i64 [ %5, %for.body ], [ 129, %decls ]
  %5 = add i64 %i.01, -1
  %6 = getelementptr [129 x i8], ptr %a, i64 0, i64 %5
  %7 = urem i64 %u.02, 10
  %8 = getelementptr i8, ptr @"csbs$4", i64 %7
  %9 = load i8, ptr %8, align 1
  store i8 %9, ptr %6, align 1
  %10 = udiv i64 %u.02, 10
  %11 = icmp ugt i64 %u.02, 99
  br i1 %11, label %for.body, label %for.done

for.done:                                         ; preds = %for.body
  %12 = add i64 %i.01, -2
  %13 = getelementptr [129 x i8], ptr %a, i64 0, i64 %12
  %14 = getelementptr i8, ptr @"csbs$4", i64 %10
  %15 = load i8, ptr %14, align 1
  store i8 %15, ptr %13, align 1
  %16 = sub i64 131, %i.01
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !179
  %17 = icmp eq i64 %5, 130
  br i1 %17, label %runtime.os_write.exit, label %if.done.i.i

if.done.i.i:                                      ; preds = %for.done.thread, %for.done
  %18 = phi i64 [ 1, %for.done.thread ], [ %16, %for.done ]
  %19 = phi i64 [ 128, %for.done.thread ], [ %12, %for.done ]
  %20 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !182
  %21 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %20, i32 1, i32 0), !noalias !182
  store i32 0, ptr %single_write_length.i.i, align 4, !noalias !182
  %22 = icmp sgt i64 %18, 0
  br i1 %22, label %for.body.i.i.preheader, label %runtime.os_write.exit

for.body.i.i.preheader:                           ; preds = %if.done.i.i
  %23 = getelementptr inbounds [129 x i8], ptr %a, i64 0, i64 %19
  br label %for.body.i.i

for.loop.i.i:                                     ; preds = %for.body.i.i
  %24 = zext i32 %32 to i64
  %25 = add i64 %total_write.06.i.i, %24
  %26 = icmp slt i64 %25, %18
  br i1 %26, label %for.body.i.i, label %runtime.os_write.exit

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %for.loop.i.i
  %total_write.06.i.i = phi i64 [ %25, %for.loop.i.i ], [ 0, %for.body.i.i.preheader ]
  %27 = sub i64 %18, %total_write.06.i.i
  %28 = trunc i64 %27 to i32
  %29 = call i32 @llvm.smin.i32(i32 %28, i32 1073741824)
  %30 = getelementptr i8, ptr %23, i64 %total_write.06.i.i
  %31 = call x86_stdcallcc i32 @WriteFile(ptr %20, ptr %30, i32 %29, ptr nonnull %single_write_length.i.i, ptr null), !noalias !182
  %32 = load i32, ptr %single_write_length.i.i, align 4, !noalias !182
  %33 = icmp ne i32 %32, 0
  %34 = icmp ne i32 %31, 0
  %or.cond.i.i = select i1 %33, i1 %34, i1 false
  br i1 %or.cond.i.i, label %for.loop.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %for.body.i.i
  %35 = call x86_stdcallcc i32 @GetLastError(), !noalias !182
  br label %runtime.os_write.exit

runtime.os_write.exit:                            ; preds = %for.loop.i.i, %for.done, %if.done.i.i, %if.then1.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !179
  ret void
}

define internal fastcc void @runtime.print_i64(i64 %0) unnamed_addr {
decls:
  %single_write_length.i.i = alloca i32, align 4
  %a = alloca [129 x i8], align 1
  %1 = tail call i64 @llvm.abs.i64(i64 %0, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a, i8 0, i64 129, i1 false)
  %2 = icmp sgt i64 %1, 9
  br i1 %2, label %for.body, label %for.done

for.body:                                         ; preds = %decls, %for.body
  %i.02 = phi i64 [ %3, %for.body ], [ 129, %decls ]
  %u.01 = phi i64 [ %8, %for.body ], [ %1, %decls ]
  %3 = add i64 %i.02, -1
  %4 = getelementptr [129 x i8], ptr %a, i64 0, i64 %3
  %5 = urem i64 %u.01, 10
  %6 = getelementptr i8, ptr @"csbs$4", i64 %5
  %7 = load i8, ptr %6, align 1
  store i8 %7, ptr %4, align 1
  %8 = udiv i64 %u.01, 10
  %9 = icmp ugt i64 %u.01, 99
  br i1 %9, label %for.body, label %for.done

for.done:                                         ; preds = %for.body, %decls
  %u.0.lcssa = phi i64 [ %1, %decls ], [ %8, %for.body ]
  %i.0.lcssa = phi i64 [ 129, %decls ], [ %3, %for.body ]
  %10 = add i64 %i.0.lcssa, -1
  %11 = getelementptr [129 x i8], ptr %a, i64 0, i64 %10
  %12 = srem i64 %u.0.lcssa, 10
  %13 = getelementptr i8, ptr @"csbs$4", i64 %12
  %14 = load i8, ptr %13, align 1
  store i8 %14, ptr %11, align 1
  %.not = icmp sgt i64 %0, -1
  br i1 %.not, label %if.done, label %if.then

if.then:                                          ; preds = %for.done
  %15 = add i64 %i.0.lcssa, -2
  %16 = getelementptr [129 x i8], ptr %a, i64 0, i64 %15
  store i8 45, ptr %16, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %for.done
  %i.1 = phi i64 [ %15, %if.then ], [ %10, %for.done ]
  %17 = getelementptr i8, ptr %a, i64 %i.1
  %18 = sub i64 129, %i.1
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !185
  %19 = icmp eq i64 %i.1, 129
  br i1 %19, label %runtime.os_write.exit, label %if.done.i.i

if.done.i.i:                                      ; preds = %if.done
  %20 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !188
  %21 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %20, i32 1, i32 0), !noalias !188
  store i32 0, ptr %single_write_length.i.i, align 4, !noalias !188
  %22 = icmp sgt i64 %18, 0
  br i1 %22, label %for.body.i.i, label %runtime.os_write.exit

for.loop.i.i:                                     ; preds = %for.body.i.i
  %23 = zext i32 %31 to i64
  %24 = add i64 %total_write.06.i.i, %23
  %25 = icmp slt i64 %24, %18
  br i1 %25, label %for.body.i.i, label %runtime.os_write.exit

for.body.i.i:                                     ; preds = %if.done.i.i, %for.loop.i.i
  %total_write.06.i.i = phi i64 [ %24, %for.loop.i.i ], [ 0, %if.done.i.i ]
  %26 = sub i64 %18, %total_write.06.i.i
  %27 = trunc i64 %26 to i32
  %28 = call i32 @llvm.smin.i32(i32 %27, i32 1073741824)
  %29 = getelementptr i8, ptr %17, i64 %total_write.06.i.i
  %30 = call x86_stdcallcc i32 @WriteFile(ptr %20, ptr %29, i32 %28, ptr nonnull %single_write_length.i.i, ptr null), !noalias !188
  %31 = load i32, ptr %single_write_length.i.i, align 4, !noalias !188
  %32 = icmp ne i32 %31, 0
  %33 = icmp ne i32 %30, 0
  %or.cond.i.i = select i1 %32, i1 %33, i1 false
  br i1 %or.cond.i.i, label %for.loop.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %for.body.i.i
  %34 = call x86_stdcallcc i32 @GetLastError(), !noalias !188
  br label %runtime.os_write.exit

runtime.os_write.exit:                            ; preds = %for.loop.i.i, %if.done, %if.done.i.i, %if.then1.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i), !noalias !185
  ret void
}

define internal fastcc void @runtime.print_caller_location(ptr nocapture readonly %0) unnamed_addr {
decls:
  %single_write_length.i.i.i7 = alloca i32, align 4
  %1 = alloca [1 x i8], align 16
  %single_write_length.i.i.i1 = alloca i32, align 4
  %2 = alloca [1 x i8], align 16
  %single_write_length.i.i.i = alloca i32, align 4
  %3 = alloca [1 x i8], align 16
  tail call fastcc void @runtime.print_string(ptr %0)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3)
  store i8 40, ptr %3, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i), !noalias !191
  %4 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !194
  %5 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %4, i32 1, i32 0), !noalias !194
  store i32 0, ptr %single_write_length.i.i.i, align 4, !noalias !194
  %6 = call x86_stdcallcc i32 @WriteFile(ptr %4, ptr nonnull %3, i32 1, ptr nonnull %single_write_length.i.i.i, ptr null), !noalias !194
  %7 = load i32, ptr %single_write_length.i.i.i, align 4, !noalias !194
  %8 = icmp ne i32 %7, 0
  %9 = icmp ne i32 %6, 0
  %or.cond.i.i.i = select i1 %8, i1 %9, i1 false
  br i1 %or.cond.i.i.i, label %runtime.print_byte.exit, label %if.then1.i.i.i

if.then1.i.i.i:                                   ; preds = %decls
  %10 = call x86_stdcallcc i32 @GetLastError(), !noalias !194
  br label %runtime.print_byte.exit

runtime.print_byte.exit:                          ; preds = %decls, %if.then1.i.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i), !noalias !191
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3)
  %11 = getelementptr inbounds %runtime.Source_Code_Location, ptr %0, i64 0, i32 1
  %12 = load i32, ptr %11, align 4
  %13 = sext i32 %12 to i64
  call fastcc void @runtime.print_u64(i64 %13)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %2)
  store i8 58, ptr %2, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i1), !noalias !197
  %14 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !200
  %15 = call x86_stdcallcc i32 @SetHandleInformation(ptr %14, i32 1, i32 0), !noalias !200
  store i32 0, ptr %single_write_length.i.i.i1, align 4, !noalias !200
  %16 = call x86_stdcallcc i32 @WriteFile(ptr %14, ptr nonnull %2, i32 1, ptr nonnull %single_write_length.i.i.i1, ptr null), !noalias !200
  %17 = load i32, ptr %single_write_length.i.i.i1, align 4, !noalias !200
  %18 = icmp ne i32 %17, 0
  %19 = icmp ne i32 %16, 0
  %or.cond.i.i.i2 = select i1 %18, i1 %19, i1 false
  br i1 %or.cond.i.i.i2, label %runtime.print_byte.exit6, label %if.then1.i.i.i3

if.then1.i.i.i3:                                  ; preds = %runtime.print_byte.exit
  %20 = call x86_stdcallcc i32 @GetLastError(), !noalias !200
  br label %runtime.print_byte.exit6

runtime.print_byte.exit6:                         ; preds = %runtime.print_byte.exit, %if.then1.i.i.i3
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i1), !noalias !197
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %2)
  %21 = getelementptr inbounds %runtime.Source_Code_Location, ptr %0, i64 0, i32 2
  %22 = load i32, ptr %21, align 4
  %23 = sext i32 %22 to i64
  call fastcc void @runtime.print_u64(i64 %23)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %1)
  store i8 41, ptr %1, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i7), !noalias !203
  %24 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !206
  %25 = call x86_stdcallcc i32 @SetHandleInformation(ptr %24, i32 1, i32 0), !noalias !206
  store i32 0, ptr %single_write_length.i.i.i7, align 4, !noalias !206
  %26 = call x86_stdcallcc i32 @WriteFile(ptr %24, ptr nonnull %1, i32 1, ptr nonnull %single_write_length.i.i.i7, ptr null), !noalias !206
  %27 = load i32, ptr %single_write_length.i.i.i7, align 4, !noalias !206
  %28 = icmp ne i32 %27, 0
  %29 = icmp ne i32 %26, 0
  %or.cond.i.i.i8 = select i1 %28, i1 %29, i1 false
  br i1 %or.cond.i.i.i8, label %runtime.print_byte.exit12, label %if.then1.i.i.i9

if.then1.i.i.i9:                                  ; preds = %runtime.print_byte.exit6
  %30 = call x86_stdcallcc i32 @GetLastError(), !noalias !206
  br label %runtime.print_byte.exit12

runtime.print_byte.exit12:                        ; preds = %runtime.print_byte.exit6, %if.then1.i.i.i9
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i7), !noalias !203
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %1)
  ret void
}

define internal fastcc void @runtime.print_type(ptr readonly %0) unnamed_addr {
decls:
  %single_write_length.i.i.i421 = alloca i32, align 4
  %1 = alloca [1 x i8], align 16
  %single_write_length.i.i.i415 = alloca i32, align 4
  %2 = alloca [1 x i8], align 16
  %single_write_length.i.i.i248 = alloca i32, align 4
  %3 = alloca [1 x i8], align 16
  %single_write_length.i.i.i241 = alloca i32, align 4
  %4 = alloca [1 x i8], align 16
  %5 = alloca [80 x i8], align 8
  %single_write_length.i.i.i231 = alloca i32, align 4
  %single_write_length.i.i.i225 = alloca i32, align 4
  %6 = alloca [1 x i8], align 16
  %single_write_length.i.i.i215 = alloca i32, align 4
  %single_write_length.i.i.i209 = alloca i32, align 4
  %7 = alloca [1 x i8], align 16
  %single_write_length.i.i.i202 = alloca i32, align 4
  %8 = alloca [1 x i8], align 16
  %single_write_length.i.i.i195 = alloca i32, align 4
  %9 = alloca [1 x i8], align 16
  %single_write_length.i.i.i188 = alloca i32, align 4
  %10 = alloca [1 x i8], align 16
  %single_write_length.i.i.i181 = alloca i32, align 4
  %11 = alloca [1 x i8], align 16
  %single_write_length.i.i.i171 = alloca i32, align 4
  %single_write_length.i.i.i166 = alloca i32, align 4
  %12 = alloca [1 x i8], align 16
  %single_write_length.i.i.i = alloca i32, align 4
  %13 = alloca [120 x i8], align 8
  %14 = icmp eq ptr %0, null
  br i1 %14, label %if.then, label %if.done.lr.ph

if.done.lr.ph:                                    ; preds = %decls
  %15 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %13, i64 0, i32 3
  %16 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %13, i64 0, i32 4
  %17 = getelementptr inbounds %runtime.Type_Info_Relative_Multi_Pointer, ptr %13, i64 0, i32 1
  %18 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %13, i64 0, i32 11
  %19 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %13, i64 0, i32 13
  %20 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %13, i64 0, i32 14
  br label %if.done

common.ret:                                       ; preds = %if.done, %if.done29, %runtime.print_string.exit, %typeswitch.body6, %runtime.print_byte.exit, %typeswitch.body8, %typeswitch.body9, %typeswitch.body10, %typeswitch.body15, %typeswitch.body16, %runtime.print_byte.exit193, %runtime.print_byte.exit207, %runtime.print_byte.exit214, %for.index.done71, %for.index.done82, %for.index.done90, %runtime.print_byte.exit246, %runtime.print_byte.exit253, %switch.default.body, %switch.case.body3, %switch.case.body2, %switch.case.body, %switch.default.body13, %switch.case.body12, %if.then18, %if.then44, %for.index.done43, %if.then
  ret void

if.then:                                          ; preds = %tailrecurse.backedge, %decls
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$10c")
  br label %common.ret

if.done:                                          ; preds = %if.done.lr.ph, %tailrecurse.backedge
  %.tr301 = phi ptr [ %0, %if.done.lr.ph ], [ %.tr.be, %tailrecurse.backedge ]
  %21 = getelementptr inbounds %runtime.Type_Info, ptr %.tr301, i64 0, i32 5
  %22 = getelementptr inbounds %runtime.Type_Info, ptr %.tr301, i64 0, i32 5, i32 1
  %23 = load i64, ptr %22, align 8
  switch i64 %23, label %common.ret [
    i64 1, label %typeswitch.body
    i64 2, label %typeswitch.body1
    i64 3, label %typeswitch.body6
    i64 4, label %typeswitch.body7
    i64 5, label %typeswitch.body8
    i64 6, label %typeswitch.body9
    i64 7, label %typeswitch.body10
    i64 8, label %typeswitch.body11
    i64 9, label %typeswitch.body15
    i64 10, label %typeswitch.body16
    i64 11, label %typeswitch.body17
    i64 12, label %typeswitch.body21
    i64 28, label %typeswitch.body22
    i64 13, label %typeswitch.body23
    i64 18, label %typeswitch.body32
    i64 14, label %typeswitch.body46
    i64 15, label %typeswitch.body47
    i64 16, label %typeswitch.body50
    i64 17, label %typeswitch.body51
    i64 22, label %typeswitch.body52
    i64 19, label %typeswitch.body53
    i64 20, label %typeswitch.body72
    i64 21, label %typeswitch.body83
    i64 23, label %typeswitch.body91
    i64 24, label %typeswitch.body96
    i64 25, label %typeswitch.body97
    i64 26, label %typeswitch.body98
    i64 27, label %typeswitch.body99
  ]

typeswitch.body:                                  ; preds = %if.done
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %13, ptr noundef nonnull align 1 dereferenceable(80) %21, i64 80, i1 false)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i), !noalias !209
  %24 = load i64, ptr %17, align 8, !noalias !212
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %runtime.print_string.exit, label %if.done.i.i.i

if.done.i.i.i:                                    ; preds = %typeswitch.body
  %26 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !212
  %27 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %26, i32 1, i32 0), !noalias !212
  store i32 0, ptr %single_write_length.i.i.i, align 4, !noalias !212
  %28 = icmp sgt i64 %24, 0
  br i1 %28, label %for.body.i.i.i.preheader, label %runtime.print_string.exit

for.body.i.i.i.preheader:                         ; preds = %if.done.i.i.i
  %.pre366 = load ptr, ptr %13, align 8, !noalias !212
  br label %for.body.i.i.i

for.loop.i.i.i:                                   ; preds = %for.body.i.i.i
  %29 = zext i32 %37 to i64
  %30 = add i64 %total_write.06.i.i.i, %29
  %31 = icmp slt i64 %30, %24
  br i1 %31, label %for.body.i.i.i, label %runtime.print_string.exit

for.body.i.i.i:                                   ; preds = %for.body.i.i.i.preheader, %for.loop.i.i.i
  %total_write.06.i.i.i = phi i64 [ %30, %for.loop.i.i.i ], [ 0, %for.body.i.i.i.preheader ]
  %32 = sub i64 %24, %total_write.06.i.i.i
  %33 = trunc i64 %32 to i32
  %34 = call i32 @llvm.smin.i32(i32 %33, i32 1073741824)
  %35 = getelementptr i8, ptr %.pre366, i64 %total_write.06.i.i.i
  %36 = call x86_stdcallcc i32 @WriteFile(ptr %26, ptr %35, i32 %34, ptr nonnull %single_write_length.i.i.i, ptr null), !noalias !212
  %37 = load i32, ptr %single_write_length.i.i.i, align 4, !noalias !212
  %38 = icmp ne i32 %37, 0
  %39 = icmp ne i32 %36, 0
  %or.cond.i.i.i = select i1 %38, i1 %39, i1 false
  br i1 %or.cond.i.i.i, label %for.loop.i.i.i, label %if.then1.i.i.i

if.then1.i.i.i:                                   ; preds = %for.body.i.i.i
  %40 = call x86_stdcallcc i32 @GetLastError(), !noalias !212
  br label %runtime.print_string.exit

runtime.print_string.exit:                        ; preds = %for.loop.i.i.i, %typeswitch.body, %if.done.i.i.i, %if.then1.i.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i), !noalias !209
  br label %common.ret

typeswitch.body1:                                 ; preds = %if.done
  %41 = load i16, ptr %21, align 1
  store i16 %41, ptr %13, align 8
  %42 = getelementptr inbounds %runtime.Type_Info, ptr %.tr301, i64 0, i32 4
  %43 = load i64, ptr %42, align 8
  switch i64 %43, label %switch.default.body [
    i64 4683743612465315841, label %switch.case.body
    i64 72057594037928043, label %switch.case.body2
    i64 72057594037928005, label %switch.case.body3
  ]

switch.case.body:                                 ; preds = %typeswitch.body1
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$10d")
  br label %common.ret

switch.case.body2:                                ; preds = %typeswitch.body1
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$10e")
  br label %common.ret

switch.case.body3:                                ; preds = %typeswitch.body1
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$10f")
  br label %common.ret

switch.default.body:                              ; preds = %typeswitch.body1
  %44 = and i16 %41, 255
  %.not164 = icmp eq i16 %44, 0
  %. = select i1 %.not164, i8 117, i8 105
  tail call fastcc void @runtime.print_byte(i8 %.)
  %45 = load i64, ptr %.tr301, align 8
  %46 = shl i64 %45, 3
  tail call fastcc void @runtime.print_u64(i64 %46)
  br label %common.ret

typeswitch.body6:                                 ; preds = %if.done
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$112")
  br label %common.ret

typeswitch.body7:                                 ; preds = %if.done
  %47 = load i8, ptr %21, align 1
  store i8 %47, ptr %13, align 8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %12)
  store i8 102, ptr %12, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i166), !noalias !215
  %48 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !218
  %49 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %48, i32 1, i32 0), !noalias !218
  store i32 0, ptr %single_write_length.i.i.i166, align 4, !noalias !218
  %50 = call x86_stdcallcc i32 @WriteFile(ptr %48, ptr nonnull %12, i32 1, ptr nonnull %single_write_length.i.i.i166, ptr null), !noalias !218
  %51 = load i32, ptr %single_write_length.i.i.i166, align 4, !noalias !218
  %52 = icmp ne i32 %51, 0
  %53 = icmp ne i32 %50, 0
  %or.cond.i.i.i167 = select i1 %52, i1 %53, i1 false
  br i1 %or.cond.i.i.i167, label %runtime.print_byte.exit, label %if.then1.i.i.i168

if.then1.i.i.i168:                                ; preds = %typeswitch.body7
  %54 = call x86_stdcallcc i32 @GetLastError(), !noalias !218
  br label %runtime.print_byte.exit

runtime.print_byte.exit:                          ; preds = %typeswitch.body7, %if.then1.i.i.i168
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i166), !noalias !215
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %12)
  %55 = load i64, ptr %.tr301, align 8
  %56 = shl i64 %55, 3
  call fastcc void @runtime.print_u64(i64 %56)
  br label %common.ret

typeswitch.body8:                                 ; preds = %if.done
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$115")
  %57 = load i64, ptr %.tr301, align 8
  %58 = shl i64 %57, 3
  tail call fastcc void @runtime.print_u64(i64 %58)
  br label %common.ret

typeswitch.body9:                                 ; preds = %if.done
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$116")
  %59 = load i64, ptr %.tr301, align 8
  %60 = shl i64 %59, 3
  tail call fastcc void @runtime.print_u64(i64 %60)
  br label %common.ret

typeswitch.body10:                                ; preds = %if.done
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$118")
  br label %common.ret

typeswitch.body11:                                ; preds = %if.done
  %61 = getelementptr inbounds %runtime.Type_Info, ptr %.tr301, i64 0, i32 4
  %62 = load i64, ptr %61, align 8
  %cond = icmp eq i64 %62, 504403158265495582
  br i1 %cond, label %switch.case.body12, label %switch.default.body13

switch.case.body12:                               ; preds = %typeswitch.body11
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$119")
  br label %common.ret

switch.default.body13:                            ; preds = %typeswitch.body11
  tail call fastcc void @runtime.print_byte(i8 98)
  %63 = load i64, ptr %.tr301, align 8
  %64 = shl i64 %63, 3
  tail call fastcc void @runtime.print_u64(i64 %64)
  br label %common.ret

typeswitch.body15:                                ; preds = %if.done
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$11a")
  br label %common.ret

typeswitch.body16:                                ; preds = %if.done
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$11b")
  br label %common.ret

typeswitch.body17:                                ; preds = %if.done
  %65 = load i64, ptr %21, align 1
  store i64 %65, ptr %13, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %if.then18, label %if.else19

if.then18:                                        ; preds = %typeswitch.body17
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$11c")
  br label %common.ret

if.else19:                                        ; preds = %typeswitch.body17
  %67 = inttoptr i64 %65 to ptr
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$11d")
  br label %tailrecurse.backedge

tailrecurse.backedge:                             ; preds = %if.else19, %typeswitch.body21, %typeswitch.body22, %if.then30, %typeswitch.body50, %typeswitch.body51, %runtime.print_byte.exit426, %switch.case.body56, %switch.case.body57, %typeswitch.body97, %typeswitch.body98, %typeswitch.body99
  %.tr.be = phi ptr [ %67, %if.else19 ], [ %.cast311, %typeswitch.body21 ], [ %.cast, %typeswitch.body22 ], [ %90, %if.then30 ], [ %151, %typeswitch.body50 ], [ %152, %typeswitch.body51 ], [ %171, %runtime.print_byte.exit426 ], [ %172, %switch.case.body56 ], [ %173, %switch.case.body57 ], [ %288, %typeswitch.body97 ], [ %290, %typeswitch.body98 ], [ %293, %typeswitch.body99 ]
  %68 = icmp eq ptr %.tr.be, null
  br i1 %68, label %if.then, label %if.done

typeswitch.body21:                                ; preds = %if.done
  %69 = load i64, ptr %21, align 1
  store i64 %69, ptr %13, align 8
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$11e")
  %.cast311 = inttoptr i64 %69 to ptr
  br label %tailrecurse.backedge

typeswitch.body22:                                ; preds = %if.done
  %70 = load i64, ptr %21, align 1
  store i64 %70, ptr %13, align 8
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$11f")
  %.cast = inttoptr i64 %70 to ptr
  br label %tailrecurse.backedge

typeswitch.body23:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 24, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$120")
  %71 = load ptr, ptr %13, align 8
  %72 = icmp eq ptr %71, null
  br i1 %72, label %if.done29, label %if.else25

if.else25:                                        ; preds = %typeswitch.body23
  %73 = getelementptr inbounds %runtime.Type_Info, ptr %71, i64 0, i32 5
  %74 = getelementptr inbounds %runtime.Type_Info, ptr %71, i64 0, i32 5, i32 1
  %75 = load i64, ptr %74, align 8
  %76 = icmp eq i64 %75, 18
  br i1 %76, label %runtime.type_assertion_check2.exit, label %if.done.i

if.done.i:                                        ; preds = %if.else25
  tail call fastcc void @runtime.type_assertion_check2.handle_error-1(ptr nonnull @"ggv$61", i32 321, i32 9, i64 1369094286720630804, i64 3602879701896396860, ptr nonnull %73)
  unreachable

runtime.type_assertion_check2.exit:               ; preds = %if.else25
  %.unpack149.unpack = load ptr, ptr %73, align 8
  %.unpack149.elt152 = getelementptr inbounds %runtime.Type_Info, ptr %71, i64 0, i32 5, i32 0, i64 1
  %.unpack149.unpack153 = load i64, ptr %.unpack149.elt152, align 8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %2)
  store i8 40, ptr %2, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i415), !noalias !221
  %77 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !224
  %78 = call x86_stdcallcc i32 @SetHandleInformation(ptr %77, i32 1, i32 0), !noalias !224
  store i32 0, ptr %single_write_length.i.i.i415, align 4, !noalias !224
  %79 = call x86_stdcallcc i32 @WriteFile(ptr %77, ptr nonnull %2, i32 1, ptr nonnull %single_write_length.i.i.i415, ptr null), !noalias !224
  %80 = load i32, ptr %single_write_length.i.i.i415, align 4, !noalias !224
  %81 = icmp ne i32 %80, 0
  %82 = icmp ne i32 %79, 0
  %or.cond.i.i.i416 = select i1 %81, i1 %82, i1 false
  br i1 %or.cond.i.i.i416, label %runtime.print_byte.exit419, label %if.then1.i.i.i417

if.then1.i.i.i417:                                ; preds = %runtime.type_assertion_check2.exit
  %83 = call x86_stdcallcc i32 @GetLastError(), !noalias !224
  br label %runtime.print_byte.exit419

runtime.print_byte.exit419:                       ; preds = %runtime.type_assertion_check2.exit, %if.then1.i.i.i417
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i415), !noalias !221
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %2)
  %84 = icmp sgt i64 %.unpack149.unpack153, 0
  br i1 %84, label %for.index.body, label %if.done29

for.index.body:                                   ; preds = %runtime.print_byte.exit419, %if.done28
  %85 = phi i64 [ %89, %if.done28 ], [ 0, %runtime.print_byte.exit419 ]
  %.0108300 = phi i64 [ %85, %if.done28 ], [ -1, %runtime.print_byte.exit419 ]
  %86 = getelementptr ptr, ptr %.unpack149.unpack, i64 %85
  %87 = load ptr, ptr %86, align 8
  %88 = icmp ult i64 %.0108300, 9223372036854775807
  br i1 %88, label %if.then27, label %if.done28

if.then27:                                        ; preds = %for.index.body
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$150")
  br label %if.done28

if.done28:                                        ; preds = %if.then27, %for.index.body
  tail call fastcc void @runtime.print_type(ptr %87)
  %89 = add nuw nsw i64 %85, 1
  %exitcond.not = icmp eq i64 %89, %.unpack149.unpack153
  br i1 %exitcond.not, label %if.done29, label %for.index.body

if.done29:                                        ; preds = %if.done28, %runtime.print_byte.exit419, %typeswitch.body23
  %"ggv$63.sink" = phi ptr [ @"ggv$121", %typeswitch.body23 ], [ @"ggv$12a", %runtime.print_byte.exit419 ], [ @"ggv$12a", %if.done28 ]
  tail call fastcc void @runtime.print_string(ptr nonnull %"ggv$63.sink")
  %90 = load ptr, ptr %17, align 8
  %.not148 = icmp eq ptr %90, null
  br i1 %.not148, label %common.ret, label %if.then30

if.then30:                                        ; preds = %if.done29
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$126")
  br label %tailrecurse.backedge

typeswitch.body32:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 32, i1 false)
  %91 = getelementptr inbounds %runtime.Type_Info_Parameters, ptr %13, i64 0, i32 1
  %92 = load i64, ptr %15, align 8
  %.not126 = icmp eq i64 %92, 1
  br i1 %.not126, label %for.index.body36.lr.ph, label %if.done34

if.done34:                                        ; preds = %typeswitch.body32
  tail call fastcc void @runtime.print_byte(i8 40)
  %93 = icmp sgt i64 %92, 0
  br i1 %93, label %for.index.body36.lr.ph, label %if.then44

for.index.body36.lr.ph:                           ; preds = %typeswitch.body32, %if.done34
  %.pre363 = load ptr, ptr %91, align 8
  %94 = load ptr, ptr %13, align 8
  br label %for.index.body36

for.index.body36:                                 ; preds = %for.index.body36.lr.ph, %if.done42
  %95 = phi i64 [ 0, %for.index.body36.lr.ph ], [ %115, %if.done42 ]
  %.0110309 = phi i64 [ -1, %for.index.body36.lr.ph ], [ %95, %if.done42 ]
  %96 = getelementptr %..string, ptr %.pre363, i64 %95
  %.unpack128 = load ptr, ptr %96, align 8
  %.elt129 = getelementptr %..string, ptr %.pre363, i64 %95, i32 1
  %.unpack130 = load i64, ptr %.elt129, align 8
  %97 = icmp ult i64 %.0110309, 9223372036854775807
  br i1 %97, label %if.then38, label %if.done39

if.then38:                                        ; preds = %for.index.body36
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$150")
  br label %if.done39

if.done39:                                        ; preds = %if.then38, %for.index.body36
  %98 = getelementptr ptr, ptr %94, i64 %95
  %99 = load ptr, ptr %98, align 8
  %100 = icmp sgt i64 %.unpack130, 0
  br i1 %100, label %if.then41, label %if.done42

if.then41:                                        ; preds = %if.done39
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i171), !noalias !227
  %101 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !230
  %102 = call x86_stdcallcc i32 @SetHandleInformation(ptr %101, i32 1, i32 0), !noalias !230
  store i32 0, ptr %single_write_length.i.i.i171, align 4, !noalias !230
  br label %for.body.i.i.i174

for.loop.i.i.i178:                                ; preds = %for.body.i.i.i174
  %103 = zext i32 %111 to i64
  %104 = add i64 %total_write.06.i.i.i175, %103
  %105 = icmp slt i64 %104, %.unpack130
  br i1 %105, label %for.body.i.i.i174, label %runtime.print_string.exit179

for.body.i.i.i174:                                ; preds = %if.then41, %for.loop.i.i.i178
  %total_write.06.i.i.i175 = phi i64 [ %104, %for.loop.i.i.i178 ], [ 0, %if.then41 ]
  %106 = sub i64 %.unpack130, %total_write.06.i.i.i175
  %107 = trunc i64 %106 to i32
  %108 = call i32 @llvm.smin.i32(i32 %107, i32 1073741824)
  %109 = getelementptr i8, ptr %.unpack128, i64 %total_write.06.i.i.i175
  %110 = call x86_stdcallcc i32 @WriteFile(ptr %101, ptr %109, i32 %108, ptr nonnull %single_write_length.i.i.i171, ptr null), !noalias !230
  %111 = load i32, ptr %single_write_length.i.i.i171, align 4, !noalias !230
  %112 = icmp ne i32 %111, 0
  %113 = icmp ne i32 %110, 0
  %or.cond.i.i.i176 = select i1 %112, i1 %113, i1 false
  br i1 %or.cond.i.i.i176, label %for.loop.i.i.i178, label %if.then1.i.i.i177

if.then1.i.i.i177:                                ; preds = %for.body.i.i.i174
  %114 = call x86_stdcallcc i32 @GetLastError(), !noalias !230
  br label %runtime.print_string.exit179

runtime.print_string.exit179:                     ; preds = %for.loop.i.i.i178, %if.then1.i.i.i177
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i171), !noalias !227
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$13c")
  br label %if.done42

if.done42:                                        ; preds = %runtime.print_string.exit179, %if.done39
  call fastcc void @runtime.print_type(ptr %99)
  %115 = add nuw nsw i64 %95, 1
  %exitcond361.not = icmp eq i64 %115, %92
  br i1 %exitcond361.not, label %for.index.done43, label %for.index.body36

for.index.done43:                                 ; preds = %if.done42
  br i1 %.not126, label %common.ret, label %if.then44

if.then44:                                        ; preds = %if.done34, %for.index.done43
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$12a")
  br label %common.ret

typeswitch.body46:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %11)
  store i8 91, ptr %11, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i181), !noalias !233
  %116 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !236
  %117 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %116, i32 1, i32 0), !noalias !236
  store i32 0, ptr %single_write_length.i.i.i181, align 4, !noalias !236
  %118 = call x86_stdcallcc i32 @WriteFile(ptr %116, ptr nonnull %11, i32 1, ptr nonnull %single_write_length.i.i.i181, ptr null), !noalias !236
  %119 = load i32, ptr %single_write_length.i.i.i181, align 4, !noalias !236
  %120 = icmp ne i32 %119, 0
  %121 = icmp ne i32 %118, 0
  %or.cond.i.i.i182 = select i1 %120, i1 %121, i1 false
  br i1 %or.cond.i.i.i182, label %runtime.print_byte.exit186, label %if.then1.i.i.i183

if.then1.i.i.i183:                                ; preds = %typeswitch.body46
  %122 = call x86_stdcallcc i32 @GetLastError(), !noalias !236
  br label %runtime.print_byte.exit186

runtime.print_byte.exit186:                       ; preds = %typeswitch.body46, %if.then1.i.i.i183
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i181), !noalias !233
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %11)
  %123 = getelementptr inbounds %runtime.Type_Info_Array, ptr %13, i64 0, i32 2
  %124 = load i64, ptr %123, align 8
  call fastcc void @runtime.print_u64(i64 %124)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %10)
  store i8 93, ptr %10, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i188), !noalias !239
  %125 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !242
  %126 = call x86_stdcallcc i32 @SetHandleInformation(ptr %125, i32 1, i32 0), !noalias !242
  store i32 0, ptr %single_write_length.i.i.i188, align 4, !noalias !242
  %127 = call x86_stdcallcc i32 @WriteFile(ptr %125, ptr nonnull %10, i32 1, ptr nonnull %single_write_length.i.i.i188, ptr null), !noalias !242
  %128 = load i32, ptr %single_write_length.i.i.i188, align 4, !noalias !242
  %129 = icmp ne i32 %128, 0
  %130 = icmp ne i32 %127, 0
  %or.cond.i.i.i189 = select i1 %129, i1 %130, i1 false
  br i1 %or.cond.i.i.i189, label %runtime.print_byte.exit193, label %if.then1.i.i.i190

if.then1.i.i.i190:                                ; preds = %runtime.print_byte.exit186
  %131 = call x86_stdcallcc i32 @GetLastError(), !noalias !242
  br label %runtime.print_byte.exit193

runtime.print_byte.exit193:                       ; preds = %runtime.print_byte.exit186, %if.then1.i.i.i190
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i188), !noalias !239
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %10)
  %132 = load ptr, ptr %13, align 8
  call fastcc void @runtime.print_type(ptr %132)
  br label %common.ret

typeswitch.body47:                                ; preds = %if.done
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %13, ptr noundef nonnull align 1 dereferenceable(56) %21, i64 56, i1 false)
  %133 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %13, i64 0, i32 6
  %134 = load i8, ptr %133, align 8
  %.not125 = icmp eq i8 %134, 0
  br i1 %.not125, label %if.done49, label %if.then48

if.then48:                                        ; preds = %typeswitch.body47
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$12d")
  br label %if.done49

if.done49:                                        ; preds = %if.then48, %typeswitch.body47
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %9)
  store i8 91, ptr %9, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i195), !noalias !245
  %135 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !248
  %136 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %135, i32 1, i32 0), !noalias !248
  store i32 0, ptr %single_write_length.i.i.i195, align 4, !noalias !248
  %137 = call x86_stdcallcc i32 @WriteFile(ptr %135, ptr nonnull %9, i32 1, ptr nonnull %single_write_length.i.i.i195, ptr null), !noalias !248
  %138 = load i32, ptr %single_write_length.i.i.i195, align 4, !noalias !248
  %139 = icmp ne i32 %138, 0
  %140 = icmp ne i32 %137, 0
  %or.cond.i.i.i196 = select i1 %139, i1 %140, i1 false
  br i1 %or.cond.i.i.i196, label %runtime.print_byte.exit200, label %if.then1.i.i.i197

if.then1.i.i.i197:                                ; preds = %if.done49
  %141 = call x86_stdcallcc i32 @GetLastError(), !noalias !248
  br label %runtime.print_byte.exit200

runtime.print_byte.exit200:                       ; preds = %if.done49, %if.then1.i.i.i197
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i195), !noalias !245
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9)
  %142 = load ptr, ptr %17, align 8
  call fastcc void @runtime.print_type(ptr %142)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8)
  store i8 93, ptr %8, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i202), !noalias !251
  %143 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !254
  %144 = call x86_stdcallcc i32 @SetHandleInformation(ptr %143, i32 1, i32 0), !noalias !254
  store i32 0, ptr %single_write_length.i.i.i202, align 4, !noalias !254
  %145 = call x86_stdcallcc i32 @WriteFile(ptr %143, ptr nonnull %8, i32 1, ptr nonnull %single_write_length.i.i.i202, ptr null), !noalias !254
  %146 = load i32, ptr %single_write_length.i.i.i202, align 4, !noalias !254
  %147 = icmp ne i32 %146, 0
  %148 = icmp ne i32 %145, 0
  %or.cond.i.i.i203 = select i1 %147, i1 %148, i1 false
  br i1 %or.cond.i.i.i203, label %runtime.print_byte.exit207, label %if.then1.i.i.i204

if.then1.i.i.i204:                                ; preds = %runtime.print_byte.exit200
  %149 = call x86_stdcallcc i32 @GetLastError(), !noalias !254
  br label %runtime.print_byte.exit207

runtime.print_byte.exit207:                       ; preds = %runtime.print_byte.exit200, %if.then1.i.i.i204
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i202), !noalias !251
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8)
  %150 = load ptr, ptr %13, align 8
  call fastcc void @runtime.print_type(ptr %150)
  br label %common.ret

typeswitch.body50:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 16, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$130")
  %151 = load ptr, ptr %13, align 8
  br label %tailrecurse.backedge

typeswitch.body51:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 16, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$131")
  %152 = load ptr, ptr %13, align 8
  br label %tailrecurse.backedge

typeswitch.body52:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 24, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$132")
  %153 = load ptr, ptr %13, align 8
  tail call fastcc void @runtime.print_type(ptr %153)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %7)
  store i8 93, ptr %7, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i209), !noalias !257
  %154 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !260
  %155 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %154, i32 1, i32 0), !noalias !260
  store i32 0, ptr %single_write_length.i.i.i209, align 4, !noalias !260
  %156 = call x86_stdcallcc i32 @WriteFile(ptr %154, ptr nonnull %7, i32 1, ptr nonnull %single_write_length.i.i.i209, ptr null), !noalias !260
  %157 = load i32, ptr %single_write_length.i.i.i209, align 4, !noalias !260
  %158 = icmp ne i32 %157, 0
  %159 = icmp ne i32 %156, 0
  %or.cond.i.i.i210 = select i1 %158, i1 %159, i1 false
  br i1 %or.cond.i.i.i210, label %runtime.print_byte.exit214, label %if.then1.i.i.i211

if.then1.i.i.i211:                                ; preds = %typeswitch.body52
  %160 = call x86_stdcallcc i32 @GetLastError(), !noalias !260
  br label %runtime.print_byte.exit214

runtime.print_byte.exit214:                       ; preds = %typeswitch.body52, %if.then1.i.i.i211
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i209), !noalias !257
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %7)
  %161 = load ptr, ptr %17, align 8
  call fastcc void @runtime.print_type(ptr %161)
  br label %common.ret

typeswitch.body53:                                ; preds = %if.done
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %13, ptr noundef nonnull align 1 dereferenceable(120) %21, i64 120, i1 false)
  %162 = load i8, ptr %18, align 8
  switch i8 %162, label %switch.done58 [
    i8 3, label %switch.case.body57
    i8 1, label %switch.case.body55
    i8 2, label %switch.case.body56
  ]

switch.case.body55:                               ; preds = %typeswitch.body53
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$133")
  %163 = load i64, ptr %20, align 8
  tail call fastcc void @runtime.print_u64(i64 %163)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %1)
  store i8 93, ptr %1, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i421), !noalias !263
  %164 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !266
  %165 = call x86_stdcallcc i32 @SetHandleInformation(ptr %164, i32 1, i32 0), !noalias !266
  store i32 0, ptr %single_write_length.i.i.i421, align 4, !noalias !266
  %166 = call x86_stdcallcc i32 @WriteFile(ptr %164, ptr nonnull %1, i32 1, ptr nonnull %single_write_length.i.i.i421, ptr null), !noalias !266
  %167 = load i32, ptr %single_write_length.i.i.i421, align 4, !noalias !266
  %168 = icmp ne i32 %167, 0
  %169 = icmp ne i32 %166, 0
  %or.cond.i.i.i422 = select i1 %168, i1 %169, i1 false
  br i1 %or.cond.i.i.i422, label %runtime.print_byte.exit426, label %if.then1.i.i.i423

if.then1.i.i.i423:                                ; preds = %switch.case.body55
  %170 = call x86_stdcallcc i32 @GetLastError(), !noalias !266
  br label %runtime.print_byte.exit426

runtime.print_byte.exit426:                       ; preds = %switch.case.body55, %if.then1.i.i.i423
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i421), !noalias !263
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %1)
  %171 = load ptr, ptr %19, align 8
  br label %tailrecurse.backedge

switch.case.body56:                               ; preds = %typeswitch.body53
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$134")
  %172 = load ptr, ptr %19, align 8
  br label %tailrecurse.backedge

switch.case.body57:                               ; preds = %typeswitch.body53
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$135")
  %173 = load ptr, ptr %19, align 8
  br label %tailrecurse.backedge

switch.done58:                                    ; preds = %typeswitch.body53
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$136")
  %174 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %13, i64 0, i32 5
  %175 = load i8, ptr %174, align 8
  %.not117 = icmp eq i8 %175, 0
  br i1 %.not117, label %if.done60, label %if.then59

if.then59:                                        ; preds = %switch.done58
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$137")
  br label %if.done60

if.done60:                                        ; preds = %if.then59, %switch.done58
  %176 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %13, i64 0, i32 6
  %177 = load i8, ptr %176, align 1
  %.not118 = icmp eq i8 %177, 0
  br i1 %.not118, label %if.done62, label %if.then61

if.then61:                                        ; preds = %if.done60
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$138")
  br label %if.done62

if.done62:                                        ; preds = %if.then61, %if.done60
  %178 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %13, i64 0, i32 8
  %179 = load i8, ptr %178, align 1
  %.not119 = icmp eq i8 %179, 0
  br i1 %.not119, label %if.done64, label %if.then63

if.then63:                                        ; preds = %if.done62
  %180 = getelementptr inbounds %runtime.Type_Info, ptr %.tr301, i64 0, i32 1
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$140")
  %181 = load i64, ptr %180, align 8
  tail call fastcc void @runtime.print_u64(i64 %181)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$14e")
  br label %if.done64

if.done64:                                        ; preds = %if.then63, %if.done62
  tail call fastcc void @runtime.print_byte(i8 123)
  %182 = load i64, ptr %15, align 8
  %183 = icmp sgt i64 %182, 0
  br i1 %183, label %for.index.body66.lr.ph, label %for.index.done71

for.index.body66.lr.ph:                           ; preds = %if.done64
  %184 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %13, i64 0, i32 1
  %.pre362 = load ptr, ptr %184, align 8
  %185 = load ptr, ptr %13, align 8
  br label %for.index.body66

for.index.body66:                                 ; preds = %for.index.body66.lr.ph, %runtime.print_string.exit223
  %186 = phi i64 [ 0, %for.index.body66.lr.ph ], [ %207, %runtime.print_string.exit223 ]
  %.0109306 = phi i64 [ -1, %for.index.body66.lr.ph ], [ %186, %runtime.print_string.exit223 ]
  %187 = getelementptr %..string, ptr %.pre362, i64 %186
  %.unpack120 = load ptr, ptr %187, align 8
  %.elt121 = getelementptr %..string, ptr %.pre362, i64 %186, i32 1
  %.unpack122 = load i64, ptr %.elt121, align 8
  %188 = icmp ult i64 %.0109306, 9223372036854775807
  br i1 %188, label %if.then69, label %if.done70

if.then69:                                        ; preds = %for.index.body66
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$150")
  br label %if.done70

if.done70:                                        ; preds = %if.then69, %for.index.body66
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i215), !noalias !269
  %189 = icmp eq i64 %.unpack122, 0
  br i1 %189, label %runtime.print_string.exit223, label %if.done.i.i.i216

if.done.i.i.i216:                                 ; preds = %if.done70
  %190 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !272
  %191 = call x86_stdcallcc i32 @SetHandleInformation(ptr %190, i32 1, i32 0), !noalias !272
  store i32 0, ptr %single_write_length.i.i.i215, align 4, !noalias !272
  %192 = icmp sgt i64 %.unpack122, 0
  br i1 %192, label %for.body.i.i.i218, label %runtime.print_string.exit223

for.loop.i.i.i222:                                ; preds = %for.body.i.i.i218
  %193 = zext i32 %201 to i64
  %194 = add i64 %total_write.06.i.i.i219, %193
  %195 = icmp slt i64 %194, %.unpack122
  br i1 %195, label %for.body.i.i.i218, label %runtime.print_string.exit223

for.body.i.i.i218:                                ; preds = %if.done.i.i.i216, %for.loop.i.i.i222
  %total_write.06.i.i.i219 = phi i64 [ %194, %for.loop.i.i.i222 ], [ 0, %if.done.i.i.i216 ]
  %196 = sub i64 %.unpack122, %total_write.06.i.i.i219
  %197 = trunc i64 %196 to i32
  %198 = call i32 @llvm.smin.i32(i32 %197, i32 1073741824)
  %199 = getelementptr i8, ptr %.unpack120, i64 %total_write.06.i.i.i219
  %200 = call x86_stdcallcc i32 @WriteFile(ptr %190, ptr %199, i32 %198, ptr nonnull %single_write_length.i.i.i215, ptr null), !noalias !272
  %201 = load i32, ptr %single_write_length.i.i.i215, align 4, !noalias !272
  %202 = icmp ne i32 %201, 0
  %203 = icmp ne i32 %200, 0
  %or.cond.i.i.i220 = select i1 %202, i1 %203, i1 false
  br i1 %or.cond.i.i.i220, label %for.loop.i.i.i222, label %if.then1.i.i.i221

if.then1.i.i.i221:                                ; preds = %for.body.i.i.i218
  %204 = call x86_stdcallcc i32 @GetLastError(), !noalias !272
  br label %runtime.print_string.exit223

runtime.print_string.exit223:                     ; preds = %for.loop.i.i.i222, %if.done70, %if.done.i.i.i216, %if.then1.i.i.i221
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i215), !noalias !269
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$13c")
  %205 = getelementptr ptr, ptr %185, i64 %186
  %206 = load ptr, ptr %205, align 8
  call fastcc void @runtime.print_type(ptr %206)
  %207 = add nuw nsw i64 %186, 1
  %exitcond360.not = icmp eq i64 %207, %182
  br i1 %exitcond360.not, label %for.index.done71, label %for.index.body66

for.index.done71:                                 ; preds = %runtime.print_string.exit223, %if.done64
  call fastcc void @runtime.print_byte(i8 125)
  br label %common.ret

typeswitch.body72:                                ; preds = %if.done
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %13, ptr noundef nonnull align 1 dereferenceable(48) %21, i64 48, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$13d")
  %208 = getelementptr inbounds %runtime.Type_Info_Union, ptr %13, i64 0, i32 4
  %209 = load i8, ptr %208, align 8
  %.not115 = icmp eq i8 %209, 0
  br i1 %.not115, label %if.done74, label %if.then73

if.then73:                                        ; preds = %typeswitch.body72
  %210 = getelementptr inbounds %runtime.Type_Info, ptr %.tr301, i64 0, i32 1
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$140")
  %211 = load i64, ptr %210, align 8
  tail call fastcc void @runtime.print_u64(i64 %211)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$14e")
  br label %if.done74

if.done74:                                        ; preds = %if.then73, %typeswitch.body72
  %212 = getelementptr inbounds %runtime.Type_Info_Union, ptr %13, i64 0, i32 5
  %213 = load i8, ptr %212, align 1
  %.not116 = icmp eq i8 %213, 0
  br i1 %.not116, label %if.done76, label %if.then75

if.then75:                                        ; preds = %if.done74
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$13e")
  br label %if.done76

if.done76:                                        ; preds = %if.then75, %if.done74
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6)
  store i8 123, ptr %6, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i225), !noalias !275
  %214 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !278
  %215 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %214, i32 1, i32 0), !noalias !278
  store i32 0, ptr %single_write_length.i.i.i225, align 4, !noalias !278
  %216 = call x86_stdcallcc i32 @WriteFile(ptr %214, ptr nonnull %6, i32 1, ptr nonnull %single_write_length.i.i.i225, ptr null), !noalias !278
  %217 = load i32, ptr %single_write_length.i.i.i225, align 4, !noalias !278
  %218 = icmp ne i32 %217, 0
  %219 = icmp ne i32 %216, 0
  %or.cond.i.i.i226 = select i1 %218, i1 %219, i1 false
  br i1 %or.cond.i.i.i226, label %runtime.print_byte.exit230, label %if.then1.i.i.i227

if.then1.i.i.i227:                                ; preds = %if.done76
  %220 = call x86_stdcallcc i32 @GetLastError(), !noalias !278
  br label %runtime.print_byte.exit230

runtime.print_byte.exit230:                       ; preds = %if.done76, %if.then1.i.i.i227
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i225), !noalias !275
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6)
  %221 = load i64, ptr %17, align 8
  %222 = icmp sgt i64 %221, 0
  br i1 %222, label %for.index.body78.preheader, label %for.index.done82

for.index.body78.preheader:                       ; preds = %runtime.print_byte.exit230
  %.pre = load ptr, ptr %13, align 8
  br label %for.index.body78

for.index.body78:                                 ; preds = %for.index.body78.preheader, %if.done81
  %223 = phi i64 [ %227, %if.done81 ], [ 0, %for.index.body78.preheader ]
  %.0107304 = phi i64 [ %223, %if.done81 ], [ -1, %for.index.body78.preheader ]
  %224 = getelementptr ptr, ptr %.pre, i64 %223
  %225 = load ptr, ptr %224, align 8
  %226 = icmp ult i64 %.0107304, 9223372036854775807
  br i1 %226, label %if.then80, label %if.done81

if.then80:                                        ; preds = %for.index.body78
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$150")
  br label %if.done81

if.done81:                                        ; preds = %if.then80, %for.index.body78
  call fastcc void @runtime.print_type(ptr %225)
  %227 = add nuw nsw i64 %223, 1
  %exitcond359.not = icmp eq i64 %227, %221
  br i1 %exitcond359.not, label %for.index.done82, label %for.index.body78

for.index.done82:                                 ; preds = %if.done81, %runtime.print_byte.exit230
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$ab")
  br label %common.ret

typeswitch.body83:                                ; preds = %if.done
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %13, ptr noundef nonnull align 1 dereferenceable(40) %21, i64 40, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$143")
  %228 = load ptr, ptr %13, align 8
  tail call fastcc void @runtime.print_type(ptr %228)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$144")
  %229 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %13, i64 0, i32 1, i32 1
  %230 = load i64, ptr %229, align 8
  %231 = icmp sgt i64 %230, 0
  br i1 %231, label %for.index.body85.lr.ph, label %for.index.done90

for.index.body85.lr.ph:                           ; preds = %typeswitch.body83
  %.pre367 = load ptr, ptr %17, align 8
  br label %for.index.body85

for.index.body85:                                 ; preds = %for.index.body85.lr.ph, %runtime.print_string.exit239
  %232 = phi i64 [ 0, %for.index.body85.lr.ph ], [ %251, %runtime.print_string.exit239 ]
  %.0303 = phi i64 [ -1, %for.index.body85.lr.ph ], [ %232, %runtime.print_string.exit239 ]
  %233 = getelementptr %..string, ptr %.pre367, i64 %232
  %.unpack = load ptr, ptr %233, align 8
  %.elt111 = getelementptr %..string, ptr %.pre367, i64 %232, i32 1
  %.unpack112 = load i64, ptr %.elt111, align 8
  %234 = icmp ult i64 %.0303, 9223372036854775807
  br i1 %234, label %if.then88, label %if.done89

if.then88:                                        ; preds = %for.index.body85
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$150")
  br label %if.done89

if.done89:                                        ; preds = %if.then88, %for.index.body85
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i231), !noalias !281
  %235 = icmp eq i64 %.unpack112, 0
  br i1 %235, label %runtime.print_string.exit239, label %if.done.i.i.i232

if.done.i.i.i232:                                 ; preds = %if.done89
  %236 = call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !284
  %237 = call x86_stdcallcc i32 @SetHandleInformation(ptr %236, i32 1, i32 0), !noalias !284
  store i32 0, ptr %single_write_length.i.i.i231, align 4, !noalias !284
  %238 = icmp sgt i64 %.unpack112, 0
  br i1 %238, label %for.body.i.i.i234, label %runtime.print_string.exit239

for.loop.i.i.i238:                                ; preds = %for.body.i.i.i234
  %239 = zext i32 %247 to i64
  %240 = add i64 %total_write.06.i.i.i235, %239
  %241 = icmp slt i64 %240, %.unpack112
  br i1 %241, label %for.body.i.i.i234, label %runtime.print_string.exit239

for.body.i.i.i234:                                ; preds = %if.done.i.i.i232, %for.loop.i.i.i238
  %total_write.06.i.i.i235 = phi i64 [ %240, %for.loop.i.i.i238 ], [ 0, %if.done.i.i.i232 ]
  %242 = sub i64 %.unpack112, %total_write.06.i.i.i235
  %243 = trunc i64 %242 to i32
  %244 = call i32 @llvm.smin.i32(i32 %243, i32 1073741824)
  %245 = getelementptr i8, ptr %.unpack, i64 %total_write.06.i.i.i235
  %246 = call x86_stdcallcc i32 @WriteFile(ptr %236, ptr %245, i32 %244, ptr nonnull %single_write_length.i.i.i231, ptr null), !noalias !284
  %247 = load i32, ptr %single_write_length.i.i.i231, align 4, !noalias !284
  %248 = icmp ne i32 %247, 0
  %249 = icmp ne i32 %246, 0
  %or.cond.i.i.i236 = select i1 %248, i1 %249, i1 false
  br i1 %or.cond.i.i.i236, label %for.loop.i.i.i238, label %if.then1.i.i.i237

if.then1.i.i.i237:                                ; preds = %for.body.i.i.i234
  %250 = call x86_stdcallcc i32 @GetLastError(), !noalias !284
  br label %runtime.print_string.exit239

runtime.print_string.exit239:                     ; preds = %for.loop.i.i.i238, %if.done89, %if.done.i.i.i232, %if.then1.i.i.i237
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i231), !noalias !281
  %251 = add nuw nsw i64 %232, 1
  %exitcond358.not = icmp eq i64 %251, %230
  br i1 %exitcond358.not, label %for.index.done90, label %for.index.body85

for.index.done90:                                 ; preds = %runtime.print_string.exit239, %typeswitch.body83
  call fastcc void @runtime.print_string(ptr nonnull @"ggv$ab")
  br label %common.ret

typeswitch.body91:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 32, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$146")
  %252 = load ptr, ptr %13, align 8, !nonnull !287, !noundef !287
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %5)
  %253 = getelementptr inbounds %runtime.Type_Info, ptr %252, i64 0, i32 5, i32 1
  %254 = load i64, ptr %253, align 8
  %cond1.i = icmp eq i64 %254, 1
  br i1 %cond1.i, label %typeswitch.body.lr.ph.i, label %runtime.type_info_base.exit

typeswitch.body.lr.ph.i:                          ; preds = %typeswitch.body91
  %255 = getelementptr inbounds %runtime.Type_Info_Named, ptr %5, i64 0, i32 1
  br label %typeswitch.body.i

typeswitch.body.i:                                ; preds = %typeswitch.body.i, %typeswitch.body.lr.ph.i
  %base.02.i = phi ptr [ %252, %typeswitch.body.lr.ph.i ], [ %257, %typeswitch.body.i ]
  %256 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %5, ptr noundef nonnull align 1 dereferenceable(80) %256, i64 80, i1 false)
  %257 = load ptr, ptr %255, align 8
  %258 = getelementptr inbounds %runtime.Type_Info, ptr %257, i64 0, i32 5, i32 1
  %259 = load i64, ptr %258, align 8
  %cond.i = icmp eq i64 %259, 1
  br i1 %cond.i, label %typeswitch.body.i, label %runtime.type_info_base.exit

runtime.type_info_base.exit:                      ; preds = %typeswitch.body.i, %typeswitch.body91
  %260 = phi i64 [ %254, %typeswitch.body91 ], [ %259, %typeswitch.body.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %5)
  switch i64 %260, label %typeswitch.default.body [
    i64 21, label %typeswitch.body92
    i64 3, label %typeswitch.body93
  ]

typeswitch.body92:                                ; preds = %runtime.type_info_base.exit
  tail call fastcc void @runtime.print_type(ptr nonnull %252)
  br label %typeswitch.done

typeswitch.body93:                                ; preds = %runtime.type_info_base.exit
  %261 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %13, i64 0, i32 2
  %262 = load i64, ptr %261, align 8
  %263 = trunc i64 %262 to i32
  tail call fastcc void @runtime.print_encoded_rune(i32 %263)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$82")
  %264 = load i64, ptr %15, align 8
  %265 = trunc i64 %264 to i32
  tail call fastcc void @runtime.print_encoded_rune(i32 %265)
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %runtime.type_info_base.exit
  %266 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %13, i64 0, i32 2
  %267 = load i64, ptr %266, align 8
  tail call fastcc void @runtime.print_i64(i64 %267)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$82")
  %268 = load i64, ptr %15, align 8
  tail call fastcc void @runtime.print_i64(i64 %268)
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %typeswitch.default.body, %typeswitch.body93, %typeswitch.body92
  %269 = load ptr, ptr %17, align 8
  %.not = icmp eq ptr %269, null
  br i1 %.not, label %if.done95, label %if.then94

if.then94:                                        ; preds = %typeswitch.done
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$149")
  tail call fastcc void @runtime.print_type(ptr nonnull %269)
  br label %if.done95

if.done95:                                        ; preds = %if.then94, %typeswitch.done
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4)
  store i8 93, ptr %4, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i241), !noalias !288
  %270 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !291
  %271 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %270, i32 1, i32 0), !noalias !291
  store i32 0, ptr %single_write_length.i.i.i241, align 4, !noalias !291
  %272 = call x86_stdcallcc i32 @WriteFile(ptr %270, ptr nonnull %4, i32 1, ptr nonnull %single_write_length.i.i.i241, ptr null), !noalias !291
  %273 = load i32, ptr %single_write_length.i.i.i241, align 4, !noalias !291
  %274 = icmp ne i32 %273, 0
  %275 = icmp ne i32 %272, 0
  %or.cond.i.i.i242 = select i1 %274, i1 %275, i1 false
  br i1 %or.cond.i.i.i242, label %runtime.print_byte.exit246, label %if.then1.i.i.i243

if.then1.i.i.i243:                                ; preds = %if.done95
  %276 = call x86_stdcallcc i32 @GetLastError(), !noalias !291
  br label %runtime.print_byte.exit246

runtime.print_byte.exit246:                       ; preds = %if.done95, %if.then1.i.i.i243
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i241), !noalias !288
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4)
  br label %common.ret

typeswitch.body96:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 24, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$14a")
  %277 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, ptr %13, i64 0, i32 2
  %278 = load i64, ptr %277, align 8
  tail call fastcc void @runtime.print_u64(i64 %278)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3)
  store i8 93, ptr %3, align 16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i.i.i248), !noalias !294
  %279 = tail call x86_stdcallcc ptr @GetStdHandle(i32 -12), !noalias !297
  %280 = tail call x86_stdcallcc i32 @SetHandleInformation(ptr %279, i32 1, i32 0), !noalias !297
  store i32 0, ptr %single_write_length.i.i.i248, align 4, !noalias !297
  %281 = call x86_stdcallcc i32 @WriteFile(ptr %279, ptr nonnull %3, i32 1, ptr nonnull %single_write_length.i.i.i248, ptr null), !noalias !297
  %282 = load i32, ptr %single_write_length.i.i.i248, align 4, !noalias !297
  %283 = icmp ne i32 %282, 0
  %284 = icmp ne i32 %281, 0
  %or.cond.i.i.i249 = select i1 %283, i1 %284, i1 false
  br i1 %or.cond.i.i.i249, label %runtime.print_byte.exit253, label %if.then1.i.i.i250

if.then1.i.i.i250:                                ; preds = %typeswitch.body96
  %285 = call x86_stdcallcc i32 @GetLastError(), !noalias !297
  br label %runtime.print_byte.exit253

runtime.print_byte.exit253:                       ; preds = %typeswitch.body96, %if.then1.i.i.i250
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i.i.i248), !noalias !294
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3)
  %286 = load ptr, ptr %13, align 8
  call fastcc void @runtime.print_type(ptr %286)
  br label %common.ret

typeswitch.body97:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 16, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$14d")
  %287 = load ptr, ptr %17, align 8
  tail call fastcc void @runtime.print_type(ptr %287)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$14e")
  %288 = load ptr, ptr %13, align 8
  br label %tailrecurse.backedge

typeswitch.body98:                                ; preds = %if.done
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 1 %21, i64 16, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$14d")
  %289 = load ptr, ptr %17, align 8
  tail call fastcc void @runtime.print_type(ptr %289)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$14e")
  %290 = load ptr, ptr %13, align 8
  br label %tailrecurse.backedge

typeswitch.body99:                                ; preds = %if.done
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %13, ptr noundef nonnull align 1 dereferenceable(40) %21, i64 40, i1 false)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$14f")
  %291 = load i64, ptr %15, align 8
  tail call fastcc void @runtime.print_u64(i64 %291)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$150")
  %292 = load i64, ptr %16, align 8
  tail call fastcc void @runtime.print_u64(i64 %292)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$151")
  %293 = load ptr, ptr %13, align 8
  br label %tailrecurse.backedge
}

; Function Attrs: noreturn
declare x86_stdcallcc void @RaiseException(i32, i32, i32, ptr) local_unnamed_addr #5

; Function Attrs: noreturn
define internal fastcc void @runtime.windows_trap_array_bounds-752() unnamed_addr #5 {
decls:
  tail call x86_stdcallcc void @RaiseException(i32 -1073741684, i32 0, i32 0, ptr null)
  unreachable
}

; Function Attrs: noreturn
define internal fastcc void @runtime.windows_trap_type_assertion-762() unnamed_addr #5 {
decls:
  tail call fastcc void @runtime.windows_trap_array_bounds-752()
  unreachable
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i64 @opt_ex.aocloop_do_work_1(ptr noalias nocapture nonnull readnone %__.context_ptr) #7 {
decls:
  %0 = load i64, ptr @opt_ex.big_grid_1.1, align 8
  %1 = icmp sgt i64 %0, 0
  br i1 %1, label %for.index.body.lr.ph, label %for.index.done

for.index.body.lr.ph:                             ; preds = %decls
  %2 = load i64, ptr @opt_ex.grid_width, align 8
  %xtraiter = and i64 %0, 7
  %3 = icmp ult i64 %0, 8
  br i1 %3, label %for.index.done.loopexit.unr-lcssa, label %for.index.body.lr.ph.new

for.index.body.lr.ph.new:                         ; preds = %for.index.body.lr.ph
  %unroll_iter = and i64 %0, -8
  %4 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %5 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %6 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %7 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %8 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %9 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %10 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %11 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %12 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %13 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %14 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %15 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %16 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %17 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %18 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %19 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %20 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %21 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %22 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %23 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %24 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %25 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %26 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %27 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %28 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %29 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %30 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %31 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %32 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %33 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %34 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %35 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %36 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %37 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %38 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %39 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %40 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %41 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %42 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %43 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %44 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %45 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %46 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %47 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %48 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %49 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %50 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %51 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  br label %for.index.body

for.index.body:                                   ; preds = %switch.done.7, %for.index.body.lr.ph.new
  %52 = phi i64 [ 0, %for.index.body.lr.ph.new ], [ %236, %switch.done.7 ]
  %result.03 = phi i64 [ 0, %for.index.body.lr.ph.new ], [ %result.1.7, %switch.done.7 ]
  %niter = phi i64 [ 0, %for.index.body.lr.ph.new ], [ %niter.next.7, %switch.done.7 ]
  %53 = getelementptr i8, ptr %4, i64 %52
  %54 = load i8, ptr %53, align 1
  %55 = sdiv i64 %52, %2
  %56 = srem i64 %52, %2
  switch i8 %54, label %switch.done [
    i8 79, label %switch.case.body
    i8 35, label %switch.case.body1
  ]

switch.case.body:                                 ; preds = %for.index.body
  %57 = getelementptr i64, ptr %7, i64 %56
  %58 = load i64, ptr %57, align 8
  %59 = xor i64 %58, -1
  %60 = add nuw i64 %56, 1
  %61 = mul i64 %60, %2
  %62 = add i64 %61, %59
  %63 = getelementptr i8, ptr %8, i64 %62
  store i8 79, ptr %63, align 1
  %64 = getelementptr i64, ptr %9, i64 %56
  %65 = load i64, ptr %64, align 8
  %66 = add i64 %65, 1
  store i64 %66, ptr %64, align 8
  %67 = add i64 %55, %result.03
  br label %switch.done

switch.case.body1:                                ; preds = %for.index.body
  %68 = mul i64 %56, %2
  %69 = xor i64 %55, -1
  %70 = add i64 %2, %69
  %71 = add i64 %70, %68
  %72 = getelementptr i8, ptr %5, i64 %71
  store i8 35, ptr %72, align 1
  %73 = getelementptr i64, ptr %6, i64 %56
  %74 = add i64 %55, 1
  store i64 %74, ptr %73, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body1, %switch.case.body, %for.index.body
  %result.1 = phi i64 [ %result.03, %for.index.body ], [ %result.03, %switch.case.body1 ], [ %67, %switch.case.body ]
  %75 = or i64 %52, 1
  %76 = getelementptr i8, ptr %10, i64 %75
  %77 = load i8, ptr %76, align 1
  %78 = sdiv i64 %75, %2
  %79 = srem i64 %75, %2
  switch i8 %77, label %switch.done.1 [
    i8 79, label %switch.case.body.1
    i8 35, label %switch.case.body1.1
  ]

switch.case.body1.1:                              ; preds = %switch.done
  %80 = mul i64 %79, %2
  %81 = xor i64 %78, -1
  %82 = add i64 %2, %81
  %83 = add i64 %82, %80
  %84 = getelementptr i8, ptr %11, i64 %83
  store i8 35, ptr %84, align 1
  %85 = getelementptr i64, ptr %12, i64 %79
  %86 = add i64 %78, 1
  store i64 %86, ptr %85, align 8
  br label %switch.done.1

switch.case.body.1:                               ; preds = %switch.done
  %87 = getelementptr i64, ptr %13, i64 %79
  %88 = load i64, ptr %87, align 8
  %89 = xor i64 %88, -1
  %90 = add nuw i64 %79, 1
  %91 = mul i64 %90, %2
  %92 = add i64 %91, %89
  %93 = getelementptr i8, ptr %14, i64 %92
  store i8 79, ptr %93, align 1
  %94 = getelementptr i64, ptr %15, i64 %79
  %95 = load i64, ptr %94, align 8
  %96 = add i64 %95, 1
  store i64 %96, ptr %94, align 8
  %97 = add i64 %78, %result.1
  br label %switch.done.1

switch.done.1:                                    ; preds = %switch.case.body.1, %switch.case.body1.1, %switch.done
  %result.1.1 = phi i64 [ %result.1, %switch.done ], [ %result.1, %switch.case.body1.1 ], [ %97, %switch.case.body.1 ]
  %98 = or i64 %52, 2
  %99 = getelementptr i8, ptr %16, i64 %98
  %100 = load i8, ptr %99, align 1
  %101 = sdiv i64 %98, %2
  %102 = srem i64 %98, %2
  switch i8 %100, label %switch.done.2 [
    i8 79, label %switch.case.body.2
    i8 35, label %switch.case.body1.2
  ]

switch.case.body1.2:                              ; preds = %switch.done.1
  %103 = mul i64 %102, %2
  %104 = xor i64 %101, -1
  %105 = add i64 %2, %104
  %106 = add i64 %105, %103
  %107 = getelementptr i8, ptr %17, i64 %106
  store i8 35, ptr %107, align 1
  %108 = getelementptr i64, ptr %18, i64 %102
  %109 = add i64 %101, 1
  store i64 %109, ptr %108, align 8
  br label %switch.done.2

switch.case.body.2:                               ; preds = %switch.done.1
  %110 = getelementptr i64, ptr %19, i64 %102
  %111 = load i64, ptr %110, align 8
  %112 = xor i64 %111, -1
  %113 = add nuw i64 %102, 1
  %114 = mul i64 %113, %2
  %115 = add i64 %114, %112
  %116 = getelementptr i8, ptr %20, i64 %115
  store i8 79, ptr %116, align 1
  %117 = getelementptr i64, ptr %21, i64 %102
  %118 = load i64, ptr %117, align 8
  %119 = add i64 %118, 1
  store i64 %119, ptr %117, align 8
  %120 = add i64 %101, %result.1.1
  br label %switch.done.2

switch.done.2:                                    ; preds = %switch.case.body.2, %switch.case.body1.2, %switch.done.1
  %result.1.2 = phi i64 [ %result.1.1, %switch.done.1 ], [ %result.1.1, %switch.case.body1.2 ], [ %120, %switch.case.body.2 ]
  %121 = or i64 %52, 3
  %122 = getelementptr i8, ptr %22, i64 %121
  %123 = load i8, ptr %122, align 1
  %124 = sdiv i64 %121, %2
  %125 = srem i64 %121, %2
  switch i8 %123, label %switch.done.3 [
    i8 79, label %switch.case.body.3
    i8 35, label %switch.case.body1.3
  ]

switch.case.body1.3:                              ; preds = %switch.done.2
  %126 = mul i64 %125, %2
  %127 = xor i64 %124, -1
  %128 = add i64 %2, %127
  %129 = add i64 %128, %126
  %130 = getelementptr i8, ptr %23, i64 %129
  store i8 35, ptr %130, align 1
  %131 = getelementptr i64, ptr %24, i64 %125
  %132 = add i64 %124, 1
  store i64 %132, ptr %131, align 8
  br label %switch.done.3

switch.case.body.3:                               ; preds = %switch.done.2
  %133 = getelementptr i64, ptr %25, i64 %125
  %134 = load i64, ptr %133, align 8
  %135 = xor i64 %134, -1
  %136 = add nuw i64 %125, 1
  %137 = mul i64 %136, %2
  %138 = add i64 %137, %135
  %139 = getelementptr i8, ptr %26, i64 %138
  store i8 79, ptr %139, align 1
  %140 = getelementptr i64, ptr %27, i64 %125
  %141 = load i64, ptr %140, align 8
  %142 = add i64 %141, 1
  store i64 %142, ptr %140, align 8
  %143 = add i64 %124, %result.1.2
  br label %switch.done.3

switch.done.3:                                    ; preds = %switch.case.body.3, %switch.case.body1.3, %switch.done.2
  %result.1.3 = phi i64 [ %result.1.2, %switch.done.2 ], [ %result.1.2, %switch.case.body1.3 ], [ %143, %switch.case.body.3 ]
  %144 = or i64 %52, 4
  %145 = getelementptr i8, ptr %28, i64 %144
  %146 = load i8, ptr %145, align 1
  %147 = sdiv i64 %144, %2
  %148 = srem i64 %144, %2
  switch i8 %146, label %switch.done.4 [
    i8 79, label %switch.case.body.4
    i8 35, label %switch.case.body1.4
  ]

switch.case.body1.4:                              ; preds = %switch.done.3
  %149 = mul i64 %148, %2
  %150 = xor i64 %147, -1
  %151 = add i64 %2, %150
  %152 = add i64 %151, %149
  %153 = getelementptr i8, ptr %29, i64 %152
  store i8 35, ptr %153, align 1
  %154 = getelementptr i64, ptr %30, i64 %148
  %155 = add i64 %147, 1
  store i64 %155, ptr %154, align 8
  br label %switch.done.4

switch.case.body.4:                               ; preds = %switch.done.3
  %156 = getelementptr i64, ptr %31, i64 %148
  %157 = load i64, ptr %156, align 8
  %158 = xor i64 %157, -1
  %159 = add nuw i64 %148, 1
  %160 = mul i64 %159, %2
  %161 = add i64 %160, %158
  %162 = getelementptr i8, ptr %32, i64 %161
  store i8 79, ptr %162, align 1
  %163 = getelementptr i64, ptr %33, i64 %148
  %164 = load i64, ptr %163, align 8
  %165 = add i64 %164, 1
  store i64 %165, ptr %163, align 8
  %166 = add i64 %147, %result.1.3
  br label %switch.done.4

switch.done.4:                                    ; preds = %switch.case.body.4, %switch.case.body1.4, %switch.done.3
  %result.1.4 = phi i64 [ %result.1.3, %switch.done.3 ], [ %result.1.3, %switch.case.body1.4 ], [ %166, %switch.case.body.4 ]
  %167 = or i64 %52, 5
  %168 = getelementptr i8, ptr %34, i64 %167
  %169 = load i8, ptr %168, align 1
  %170 = sdiv i64 %167, %2
  %171 = srem i64 %167, %2
  switch i8 %169, label %switch.done.5 [
    i8 79, label %switch.case.body.5
    i8 35, label %switch.case.body1.5
  ]

switch.case.body1.5:                              ; preds = %switch.done.4
  %172 = mul i64 %171, %2
  %173 = xor i64 %170, -1
  %174 = add i64 %2, %173
  %175 = add i64 %174, %172
  %176 = getelementptr i8, ptr %35, i64 %175
  store i8 35, ptr %176, align 1
  %177 = getelementptr i64, ptr %36, i64 %171
  %178 = add i64 %170, 1
  store i64 %178, ptr %177, align 8
  br label %switch.done.5

switch.case.body.5:                               ; preds = %switch.done.4
  %179 = getelementptr i64, ptr %37, i64 %171
  %180 = load i64, ptr %179, align 8
  %181 = xor i64 %180, -1
  %182 = add nuw i64 %171, 1
  %183 = mul i64 %182, %2
  %184 = add i64 %183, %181
  %185 = getelementptr i8, ptr %38, i64 %184
  store i8 79, ptr %185, align 1
  %186 = getelementptr i64, ptr %39, i64 %171
  %187 = load i64, ptr %186, align 8
  %188 = add i64 %187, 1
  store i64 %188, ptr %186, align 8
  %189 = add i64 %170, %result.1.4
  br label %switch.done.5

switch.done.5:                                    ; preds = %switch.case.body.5, %switch.case.body1.5, %switch.done.4
  %result.1.5 = phi i64 [ %result.1.4, %switch.done.4 ], [ %result.1.4, %switch.case.body1.5 ], [ %189, %switch.case.body.5 ]
  %190 = or i64 %52, 6
  %191 = getelementptr i8, ptr %40, i64 %190
  %192 = load i8, ptr %191, align 1
  %193 = sdiv i64 %190, %2
  %194 = srem i64 %190, %2
  switch i8 %192, label %switch.done.6 [
    i8 79, label %switch.case.body.6
    i8 35, label %switch.case.body1.6
  ]

switch.case.body1.6:                              ; preds = %switch.done.5
  %195 = mul i64 %194, %2
  %196 = xor i64 %193, -1
  %197 = add i64 %2, %196
  %198 = add i64 %197, %195
  %199 = getelementptr i8, ptr %41, i64 %198
  store i8 35, ptr %199, align 1
  %200 = getelementptr i64, ptr %42, i64 %194
  %201 = add i64 %193, 1
  store i64 %201, ptr %200, align 8
  br label %switch.done.6

switch.case.body.6:                               ; preds = %switch.done.5
  %202 = getelementptr i64, ptr %43, i64 %194
  %203 = load i64, ptr %202, align 8
  %204 = xor i64 %203, -1
  %205 = add nuw i64 %194, 1
  %206 = mul i64 %205, %2
  %207 = add i64 %206, %204
  %208 = getelementptr i8, ptr %44, i64 %207
  store i8 79, ptr %208, align 1
  %209 = getelementptr i64, ptr %45, i64 %194
  %210 = load i64, ptr %209, align 8
  %211 = add i64 %210, 1
  store i64 %211, ptr %209, align 8
  %212 = add i64 %193, %result.1.5
  br label %switch.done.6

switch.done.6:                                    ; preds = %switch.case.body.6, %switch.case.body1.6, %switch.done.5
  %result.1.6 = phi i64 [ %result.1.5, %switch.done.5 ], [ %result.1.5, %switch.case.body1.6 ], [ %212, %switch.case.body.6 ]
  %213 = or i64 %52, 7
  %214 = getelementptr i8, ptr %46, i64 %213
  %215 = load i8, ptr %214, align 1
  %216 = sdiv i64 %213, %2
  %217 = srem i64 %213, %2
  switch i8 %215, label %switch.done.7 [
    i8 79, label %switch.case.body.7
    i8 35, label %switch.case.body1.7
  ]

switch.case.body1.7:                              ; preds = %switch.done.6
  %218 = mul i64 %217, %2
  %219 = xor i64 %216, -1
  %220 = add i64 %2, %219
  %221 = add i64 %220, %218
  %222 = getelementptr i8, ptr %47, i64 %221
  store i8 35, ptr %222, align 1
  %223 = getelementptr i64, ptr %48, i64 %217
  %224 = add i64 %216, 1
  store i64 %224, ptr %223, align 8
  br label %switch.done.7

switch.case.body.7:                               ; preds = %switch.done.6
  %225 = getelementptr i64, ptr %49, i64 %217
  %226 = load i64, ptr %225, align 8
  %227 = xor i64 %226, -1
  %228 = add nuw i64 %217, 1
  %229 = mul i64 %228, %2
  %230 = add i64 %229, %227
  %231 = getelementptr i8, ptr %50, i64 %230
  store i8 79, ptr %231, align 1
  %232 = getelementptr i64, ptr %51, i64 %217
  %233 = load i64, ptr %232, align 8
  %234 = add i64 %233, 1
  store i64 %234, ptr %232, align 8
  %235 = add i64 %216, %result.1.6
  br label %switch.done.7

switch.done.7:                                    ; preds = %switch.case.body.7, %switch.case.body1.7, %switch.done.6
  %result.1.7 = phi i64 [ %result.1.6, %switch.done.6 ], [ %result.1.6, %switch.case.body1.7 ], [ %235, %switch.case.body.7 ]
  %236 = add nuw nsw i64 %52, 8
  %niter.next.7 = add i64 %niter, 8
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.index.done.loopexit.unr-lcssa, label %for.index.body

for.index.done.loopexit.unr-lcssa:                ; preds = %switch.done.7, %for.index.body.lr.ph
  %result.1.lcssa.ph = phi i64 [ undef, %for.index.body.lr.ph ], [ %result.1.7, %switch.done.7 ]
  %.unr = phi i64 [ 0, %for.index.body.lr.ph ], [ %236, %switch.done.7 ]
  %result.03.unr = phi i64 [ 0, %for.index.body.lr.ph ], [ %result.1.7, %switch.done.7 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.index.done, label %for.index.body.epil.preheader

for.index.body.epil.preheader:                    ; preds = %for.index.done.loopexit.unr-lcssa
  %237 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %238 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %239 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %240 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %241 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %242 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  br label %for.index.body.epil

for.index.body.epil:                              ; preds = %switch.done.epil, %for.index.body.epil.preheader
  %243 = phi i64 [ %.unr, %for.index.body.epil.preheader ], [ %266, %switch.done.epil ]
  %result.03.epil = phi i64 [ %result.03.unr, %for.index.body.epil.preheader ], [ %result.1.epil, %switch.done.epil ]
  %epil.iter = phi i64 [ 0, %for.index.body.epil.preheader ], [ %epil.iter.next, %switch.done.epil ]
  %244 = getelementptr i8, ptr %237, i64 %243
  %245 = load i8, ptr %244, align 1
  %246 = sdiv i64 %243, %2
  %247 = srem i64 %243, %2
  switch i8 %245, label %switch.done.epil [
    i8 79, label %switch.case.body.epil
    i8 35, label %switch.case.body1.epil
  ]

switch.case.body1.epil:                           ; preds = %for.index.body.epil
  %248 = mul i64 %247, %2
  %249 = xor i64 %246, -1
  %250 = add i64 %2, %249
  %251 = add i64 %250, %248
  %252 = getelementptr i8, ptr %238, i64 %251
  store i8 35, ptr %252, align 1
  %253 = getelementptr i64, ptr %239, i64 %247
  %254 = add i64 %246, 1
  store i64 %254, ptr %253, align 8
  br label %switch.done.epil

switch.case.body.epil:                            ; preds = %for.index.body.epil
  %255 = getelementptr i64, ptr %240, i64 %247
  %256 = load i64, ptr %255, align 8
  %257 = xor i64 %256, -1
  %258 = add nuw i64 %247, 1
  %259 = mul i64 %258, %2
  %260 = add i64 %259, %257
  %261 = getelementptr i8, ptr %241, i64 %260
  store i8 79, ptr %261, align 1
  %262 = getelementptr i64, ptr %242, i64 %247
  %263 = load i64, ptr %262, align 8
  %264 = add i64 %263, 1
  store i64 %264, ptr %262, align 8
  %265 = add i64 %246, %result.03.epil
  br label %switch.done.epil

switch.done.epil:                                 ; preds = %switch.case.body.epil, %switch.case.body1.epil, %for.index.body.epil
  %result.1.epil = phi i64 [ %result.03.epil, %for.index.body.epil ], [ %result.03.epil, %switch.case.body1.epil ], [ %265, %switch.case.body.epil ]
  %266 = add nuw nsw i64 %243, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.index.done, label %for.index.body.epil, !llvm.loop !300

for.index.done:                                   ; preds = %for.index.done.loopexit.unr-lcssa, %switch.done.epil, %decls
  %result.0.lcssa = phi i64 [ 0, %decls ], [ %result.1.lcssa.ph, %for.index.done.loopexit.unr-lcssa ], [ %result.1.epil, %switch.done.epil ]
  ret i64 %result.0.lcssa
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i64 @opt_ex.aocloop_do_work_2(ptr noalias nocapture nonnull readnone %__.context_ptr) #7 {
decls:
  %0 = load i64, ptr @opt_ex.big_grid_1.1, align 8
  %1 = icmp sgt i64 %0, 0
  br i1 %1, label %for.index.body.lr.ph, label %for.index.done

for.index.body.lr.ph:                             ; preds = %decls
  %2 = load i64, ptr @opt_ex.grid_width, align 8
  %xtraiter = and i64 %0, 7
  %3 = icmp ult i64 %0, 8
  br i1 %3, label %for.index.done.loopexit.unr-lcssa, label %for.index.body.lr.ph.new

for.index.body.lr.ph.new:                         ; preds = %for.index.body.lr.ph
  %unroll_iter = and i64 %0, -8
  %4 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %5 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %6 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %7 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %8 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %9 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %10 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %11 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %12 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %13 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %14 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %15 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %16 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %17 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %18 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %19 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %20 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %21 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %22 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %23 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %24 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %25 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %26 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %27 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %28 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %29 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %30 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %31 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %32 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %33 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %34 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %35 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %36 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %37 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %38 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %39 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %40 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %41 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %42 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %43 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %44 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %45 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %46 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %47 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %48 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %49 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %50 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %51 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  br label %for.index.body

for.index.body:                                   ; preds = %switch.done.7, %for.index.body.lr.ph.new
  %52 = phi i64 [ 0, %for.index.body.lr.ph.new ], [ %252, %switch.done.7 ]
  %result.03 = phi i64 [ 0, %for.index.body.lr.ph.new ], [ %result.1.7, %switch.done.7 ]
  %niter = phi i64 [ 0, %for.index.body.lr.ph.new ], [ %niter.next.7, %switch.done.7 ]
  %53 = getelementptr i8, ptr %4, i64 %52
  %54 = load i8, ptr %53, align 1
  switch i8 %54, label %switch.done [
    i8 79, label %switch.case.body
    i8 35, label %switch.case.body1
  ]

switch.case.body:                                 ; preds = %for.index.body
  %55 = srem i64 %52, %2
  %56 = getelementptr i64, ptr %7, i64 %55
  %57 = load i64, ptr %56, align 8
  %58 = mul i64 %55, %2
  %59 = xor i64 %57, -1
  %60 = add i64 %2, %59
  %61 = add i64 %60, %58
  %62 = getelementptr i8, ptr %8, i64 %61
  store i8 79, ptr %62, align 1
  %63 = getelementptr i64, ptr %9, i64 %55
  %64 = load i64, ptr %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, ptr %63, align 8
  %66 = sdiv i64 %52, %2
  %67 = add i64 %66, %result.03
  br label %switch.done

switch.case.body1:                                ; preds = %for.index.body
  %68 = srem i64 %52, %2
  %69 = mul i64 %68, %2
  %70 = sdiv i64 %52, %2
  %71 = xor i64 %70, -1
  %72 = add i64 %2, %71
  %73 = add i64 %72, %69
  %74 = getelementptr i8, ptr %5, i64 %73
  store i8 35, ptr %74, align 1
  %75 = getelementptr i64, ptr %6, i64 %68
  %76 = add i64 %70, 1
  store i64 %76, ptr %75, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body1, %switch.case.body, %for.index.body
  %result.1 = phi i64 [ %result.03, %for.index.body ], [ %result.03, %switch.case.body1 ], [ %67, %switch.case.body ]
  %77 = or i64 %52, 1
  %78 = getelementptr i8, ptr %10, i64 %77
  %79 = load i8, ptr %78, align 1
  switch i8 %79, label %switch.done.1 [
    i8 79, label %switch.case.body.1
    i8 35, label %switch.case.body1.1
  ]

switch.case.body1.1:                              ; preds = %switch.done
  %80 = srem i64 %77, %2
  %81 = mul i64 %80, %2
  %82 = sdiv i64 %77, %2
  %83 = xor i64 %82, -1
  %84 = add i64 %2, %83
  %85 = add i64 %84, %81
  %86 = getelementptr i8, ptr %11, i64 %85
  store i8 35, ptr %86, align 1
  %87 = getelementptr i64, ptr %12, i64 %80
  %88 = add i64 %82, 1
  store i64 %88, ptr %87, align 8
  br label %switch.done.1

switch.case.body.1:                               ; preds = %switch.done
  %89 = srem i64 %77, %2
  %90 = getelementptr i64, ptr %13, i64 %89
  %91 = load i64, ptr %90, align 8
  %92 = mul i64 %89, %2
  %93 = xor i64 %91, -1
  %94 = add i64 %2, %93
  %95 = add i64 %94, %92
  %96 = getelementptr i8, ptr %14, i64 %95
  store i8 79, ptr %96, align 1
  %97 = getelementptr i64, ptr %15, i64 %89
  %98 = load i64, ptr %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, ptr %97, align 8
  %100 = sdiv i64 %77, %2
  %101 = add i64 %100, %result.1
  br label %switch.done.1

switch.done.1:                                    ; preds = %switch.case.body.1, %switch.case.body1.1, %switch.done
  %result.1.1 = phi i64 [ %result.1, %switch.done ], [ %result.1, %switch.case.body1.1 ], [ %101, %switch.case.body.1 ]
  %102 = or i64 %52, 2
  %103 = getelementptr i8, ptr %16, i64 %102
  %104 = load i8, ptr %103, align 1
  switch i8 %104, label %switch.done.2 [
    i8 79, label %switch.case.body.2
    i8 35, label %switch.case.body1.2
  ]

switch.case.body1.2:                              ; preds = %switch.done.1
  %105 = srem i64 %102, %2
  %106 = mul i64 %105, %2
  %107 = sdiv i64 %102, %2
  %108 = xor i64 %107, -1
  %109 = add i64 %2, %108
  %110 = add i64 %109, %106
  %111 = getelementptr i8, ptr %17, i64 %110
  store i8 35, ptr %111, align 1
  %112 = getelementptr i64, ptr %18, i64 %105
  %113 = add i64 %107, 1
  store i64 %113, ptr %112, align 8
  br label %switch.done.2

switch.case.body.2:                               ; preds = %switch.done.1
  %114 = srem i64 %102, %2
  %115 = getelementptr i64, ptr %19, i64 %114
  %116 = load i64, ptr %115, align 8
  %117 = mul i64 %114, %2
  %118 = xor i64 %116, -1
  %119 = add i64 %2, %118
  %120 = add i64 %119, %117
  %121 = getelementptr i8, ptr %20, i64 %120
  store i8 79, ptr %121, align 1
  %122 = getelementptr i64, ptr %21, i64 %114
  %123 = load i64, ptr %122, align 8
  %124 = add i64 %123, 1
  store i64 %124, ptr %122, align 8
  %125 = sdiv i64 %102, %2
  %126 = add i64 %125, %result.1.1
  br label %switch.done.2

switch.done.2:                                    ; preds = %switch.case.body.2, %switch.case.body1.2, %switch.done.1
  %result.1.2 = phi i64 [ %result.1.1, %switch.done.1 ], [ %result.1.1, %switch.case.body1.2 ], [ %126, %switch.case.body.2 ]
  %127 = or i64 %52, 3
  %128 = getelementptr i8, ptr %22, i64 %127
  %129 = load i8, ptr %128, align 1
  switch i8 %129, label %switch.done.3 [
    i8 79, label %switch.case.body.3
    i8 35, label %switch.case.body1.3
  ]

switch.case.body1.3:                              ; preds = %switch.done.2
  %130 = srem i64 %127, %2
  %131 = mul i64 %130, %2
  %132 = sdiv i64 %127, %2
  %133 = xor i64 %132, -1
  %134 = add i64 %2, %133
  %135 = add i64 %134, %131
  %136 = getelementptr i8, ptr %23, i64 %135
  store i8 35, ptr %136, align 1
  %137 = getelementptr i64, ptr %24, i64 %130
  %138 = add i64 %132, 1
  store i64 %138, ptr %137, align 8
  br label %switch.done.3

switch.case.body.3:                               ; preds = %switch.done.2
  %139 = srem i64 %127, %2
  %140 = getelementptr i64, ptr %25, i64 %139
  %141 = load i64, ptr %140, align 8
  %142 = mul i64 %139, %2
  %143 = xor i64 %141, -1
  %144 = add i64 %2, %143
  %145 = add i64 %144, %142
  %146 = getelementptr i8, ptr %26, i64 %145
  store i8 79, ptr %146, align 1
  %147 = getelementptr i64, ptr %27, i64 %139
  %148 = load i64, ptr %147, align 8
  %149 = add i64 %148, 1
  store i64 %149, ptr %147, align 8
  %150 = sdiv i64 %127, %2
  %151 = add i64 %150, %result.1.2
  br label %switch.done.3

switch.done.3:                                    ; preds = %switch.case.body.3, %switch.case.body1.3, %switch.done.2
  %result.1.3 = phi i64 [ %result.1.2, %switch.done.2 ], [ %result.1.2, %switch.case.body1.3 ], [ %151, %switch.case.body.3 ]
  %152 = or i64 %52, 4
  %153 = getelementptr i8, ptr %28, i64 %152
  %154 = load i8, ptr %153, align 1
  switch i8 %154, label %switch.done.4 [
    i8 79, label %switch.case.body.4
    i8 35, label %switch.case.body1.4
  ]

switch.case.body1.4:                              ; preds = %switch.done.3
  %155 = srem i64 %152, %2
  %156 = mul i64 %155, %2
  %157 = sdiv i64 %152, %2
  %158 = xor i64 %157, -1
  %159 = add i64 %2, %158
  %160 = add i64 %159, %156
  %161 = getelementptr i8, ptr %29, i64 %160
  store i8 35, ptr %161, align 1
  %162 = getelementptr i64, ptr %30, i64 %155
  %163 = add i64 %157, 1
  store i64 %163, ptr %162, align 8
  br label %switch.done.4

switch.case.body.4:                               ; preds = %switch.done.3
  %164 = srem i64 %152, %2
  %165 = getelementptr i64, ptr %31, i64 %164
  %166 = load i64, ptr %165, align 8
  %167 = mul i64 %164, %2
  %168 = xor i64 %166, -1
  %169 = add i64 %2, %168
  %170 = add i64 %169, %167
  %171 = getelementptr i8, ptr %32, i64 %170
  store i8 79, ptr %171, align 1
  %172 = getelementptr i64, ptr %33, i64 %164
  %173 = load i64, ptr %172, align 8
  %174 = add i64 %173, 1
  store i64 %174, ptr %172, align 8
  %175 = sdiv i64 %152, %2
  %176 = add i64 %175, %result.1.3
  br label %switch.done.4

switch.done.4:                                    ; preds = %switch.case.body.4, %switch.case.body1.4, %switch.done.3
  %result.1.4 = phi i64 [ %result.1.3, %switch.done.3 ], [ %result.1.3, %switch.case.body1.4 ], [ %176, %switch.case.body.4 ]
  %177 = or i64 %52, 5
  %178 = getelementptr i8, ptr %34, i64 %177
  %179 = load i8, ptr %178, align 1
  switch i8 %179, label %switch.done.5 [
    i8 79, label %switch.case.body.5
    i8 35, label %switch.case.body1.5
  ]

switch.case.body1.5:                              ; preds = %switch.done.4
  %180 = srem i64 %177, %2
  %181 = mul i64 %180, %2
  %182 = sdiv i64 %177, %2
  %183 = xor i64 %182, -1
  %184 = add i64 %2, %183
  %185 = add i64 %184, %181
  %186 = getelementptr i8, ptr %35, i64 %185
  store i8 35, ptr %186, align 1
  %187 = getelementptr i64, ptr %36, i64 %180
  %188 = add i64 %182, 1
  store i64 %188, ptr %187, align 8
  br label %switch.done.5

switch.case.body.5:                               ; preds = %switch.done.4
  %189 = srem i64 %177, %2
  %190 = getelementptr i64, ptr %37, i64 %189
  %191 = load i64, ptr %190, align 8
  %192 = mul i64 %189, %2
  %193 = xor i64 %191, -1
  %194 = add i64 %2, %193
  %195 = add i64 %194, %192
  %196 = getelementptr i8, ptr %38, i64 %195
  store i8 79, ptr %196, align 1
  %197 = getelementptr i64, ptr %39, i64 %189
  %198 = load i64, ptr %197, align 8
  %199 = add i64 %198, 1
  store i64 %199, ptr %197, align 8
  %200 = sdiv i64 %177, %2
  %201 = add i64 %200, %result.1.4
  br label %switch.done.5

switch.done.5:                                    ; preds = %switch.case.body.5, %switch.case.body1.5, %switch.done.4
  %result.1.5 = phi i64 [ %result.1.4, %switch.done.4 ], [ %result.1.4, %switch.case.body1.5 ], [ %201, %switch.case.body.5 ]
  %202 = or i64 %52, 6
  %203 = getelementptr i8, ptr %40, i64 %202
  %204 = load i8, ptr %203, align 1
  switch i8 %204, label %switch.done.6 [
    i8 79, label %switch.case.body.6
    i8 35, label %switch.case.body1.6
  ]

switch.case.body1.6:                              ; preds = %switch.done.5
  %205 = srem i64 %202, %2
  %206 = mul i64 %205, %2
  %207 = sdiv i64 %202, %2
  %208 = xor i64 %207, -1
  %209 = add i64 %2, %208
  %210 = add i64 %209, %206
  %211 = getelementptr i8, ptr %41, i64 %210
  store i8 35, ptr %211, align 1
  %212 = getelementptr i64, ptr %42, i64 %205
  %213 = add i64 %207, 1
  store i64 %213, ptr %212, align 8
  br label %switch.done.6

switch.case.body.6:                               ; preds = %switch.done.5
  %214 = srem i64 %202, %2
  %215 = getelementptr i64, ptr %43, i64 %214
  %216 = load i64, ptr %215, align 8
  %217 = mul i64 %214, %2
  %218 = xor i64 %216, -1
  %219 = add i64 %2, %218
  %220 = add i64 %219, %217
  %221 = getelementptr i8, ptr %44, i64 %220
  store i8 79, ptr %221, align 1
  %222 = getelementptr i64, ptr %45, i64 %214
  %223 = load i64, ptr %222, align 8
  %224 = add i64 %223, 1
  store i64 %224, ptr %222, align 8
  %225 = sdiv i64 %202, %2
  %226 = add i64 %225, %result.1.5
  br label %switch.done.6

switch.done.6:                                    ; preds = %switch.case.body.6, %switch.case.body1.6, %switch.done.5
  %result.1.6 = phi i64 [ %result.1.5, %switch.done.5 ], [ %result.1.5, %switch.case.body1.6 ], [ %226, %switch.case.body.6 ]
  %227 = or i64 %52, 7
  %228 = getelementptr i8, ptr %46, i64 %227
  %229 = load i8, ptr %228, align 1
  switch i8 %229, label %switch.done.7 [
    i8 79, label %switch.case.body.7
    i8 35, label %switch.case.body1.7
  ]

switch.case.body1.7:                              ; preds = %switch.done.6
  %230 = srem i64 %227, %2
  %231 = mul i64 %230, %2
  %232 = sdiv i64 %227, %2
  %233 = xor i64 %232, -1
  %234 = add i64 %2, %233
  %235 = add i64 %234, %231
  %236 = getelementptr i8, ptr %47, i64 %235
  store i8 35, ptr %236, align 1
  %237 = getelementptr i64, ptr %48, i64 %230
  %238 = add i64 %232, 1
  store i64 %238, ptr %237, align 8
  br label %switch.done.7

switch.case.body.7:                               ; preds = %switch.done.6
  %239 = srem i64 %227, %2
  %240 = getelementptr i64, ptr %49, i64 %239
  %241 = load i64, ptr %240, align 8
  %242 = mul i64 %239, %2
  %243 = xor i64 %241, -1
  %244 = add i64 %2, %243
  %245 = add i64 %244, %242
  %246 = getelementptr i8, ptr %50, i64 %245
  store i8 79, ptr %246, align 1
  %247 = getelementptr i64, ptr %51, i64 %239
  %248 = load i64, ptr %247, align 8
  %249 = add i64 %248, 1
  store i64 %249, ptr %247, align 8
  %250 = sdiv i64 %227, %2
  %251 = add i64 %250, %result.1.6
  br label %switch.done.7

switch.done.7:                                    ; preds = %switch.case.body.7, %switch.case.body1.7, %switch.done.6
  %result.1.7 = phi i64 [ %result.1.6, %switch.done.6 ], [ %result.1.6, %switch.case.body1.7 ], [ %251, %switch.case.body.7 ]
  %252 = add nuw nsw i64 %52, 8
  %niter.next.7 = add i64 %niter, 8
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.index.done.loopexit.unr-lcssa, label %for.index.body

for.index.done.loopexit.unr-lcssa:                ; preds = %switch.done.7, %for.index.body.lr.ph
  %result.1.lcssa.ph = phi i64 [ undef, %for.index.body.lr.ph ], [ %result.1.7, %switch.done.7 ]
  %.unr = phi i64 [ 0, %for.index.body.lr.ph ], [ %252, %switch.done.7 ]
  %result.03.unr = phi i64 [ 0, %for.index.body.lr.ph ], [ %result.1.7, %switch.done.7 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.index.done, label %for.index.body.epil.preheader

for.index.body.epil.preheader:                    ; preds = %for.index.done.loopexit.unr-lcssa
  %253 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %254 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %255 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %256 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %257 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %258 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  br label %for.index.body.epil

for.index.body.epil:                              ; preds = %switch.done.epil, %for.index.body.epil.preheader
  %259 = phi i64 [ %.unr, %for.index.body.epil.preheader ], [ %284, %switch.done.epil ]
  %result.03.epil = phi i64 [ %result.03.unr, %for.index.body.epil.preheader ], [ %result.1.epil, %switch.done.epil ]
  %epil.iter = phi i64 [ 0, %for.index.body.epil.preheader ], [ %epil.iter.next, %switch.done.epil ]
  %260 = getelementptr i8, ptr %253, i64 %259
  %261 = load i8, ptr %260, align 1
  switch i8 %261, label %switch.done.epil [
    i8 79, label %switch.case.body.epil
    i8 35, label %switch.case.body1.epil
  ]

switch.case.body1.epil:                           ; preds = %for.index.body.epil
  %262 = srem i64 %259, %2
  %263 = mul i64 %262, %2
  %264 = sdiv i64 %259, %2
  %265 = xor i64 %264, -1
  %266 = add i64 %2, %265
  %267 = add i64 %266, %263
  %268 = getelementptr i8, ptr %254, i64 %267
  store i8 35, ptr %268, align 1
  %269 = getelementptr i64, ptr %255, i64 %262
  %270 = add i64 %264, 1
  store i64 %270, ptr %269, align 8
  br label %switch.done.epil

switch.case.body.epil:                            ; preds = %for.index.body.epil
  %271 = srem i64 %259, %2
  %272 = getelementptr i64, ptr %256, i64 %271
  %273 = load i64, ptr %272, align 8
  %274 = mul i64 %271, %2
  %275 = xor i64 %273, -1
  %276 = add i64 %2, %275
  %277 = add i64 %276, %274
  %278 = getelementptr i8, ptr %257, i64 %277
  store i8 79, ptr %278, align 1
  %279 = getelementptr i64, ptr %258, i64 %271
  %280 = load i64, ptr %279, align 8
  %281 = add i64 %280, 1
  store i64 %281, ptr %279, align 8
  %282 = sdiv i64 %259, %2
  %283 = add i64 %282, %result.03.epil
  br label %switch.done.epil

switch.done.epil:                                 ; preds = %switch.case.body.epil, %switch.case.body1.epil, %for.index.body.epil
  %result.1.epil = phi i64 [ %result.03.epil, %for.index.body.epil ], [ %result.03.epil, %switch.case.body1.epil ], [ %283, %switch.case.body.epil ]
  %284 = add nuw nsw i64 %259, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.index.done, label %for.index.body.epil, !llvm.loop !301

for.index.done:                                   ; preds = %for.index.done.loopexit.unr-lcssa, %switch.done.epil, %decls
  %result.0.lcssa = phi i64 [ 0, %decls ], [ %result.1.lcssa.ph, %for.index.done.loopexit.unr-lcssa ], [ %result.1.epil, %switch.done.epil ]
  ret i64 %result.0.lcssa
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal i64 @opt_ex.aocloop_do_work_3(ptr noalias nocapture nonnull readnone %__.context_ptr) #7 {
decls:
  %0 = load i64, ptr @opt_ex.big_grid_1.1, align 8
  %1 = load i64, ptr @opt_ex.grid_width, align 8
  %2 = sdiv i64 %0, %1
  %3 = icmp sgt i64 %2, 0
  %4 = icmp sgt i64 %1, 0
  %or.cond = and i1 %3, %4
  br i1 %or.cond, label %for.interval.loop2.preheader.us.preheader, label %for.interval.done8

for.interval.loop2.preheader.us.preheader:        ; preds = %decls
  %xtraiter = and i64 %1, 7
  %5 = icmp ult i64 %1, 8
  %unroll_iter = and i64 %1, -8
  %6 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %7 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %8 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %9 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %10 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %11 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %12 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %13 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %14 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %15 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %16 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %17 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %18 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %19 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %20 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %21 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %22 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %23 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %24 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %25 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %26 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %27 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %28 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %29 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %30 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %31 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %32 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %33 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %34 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %35 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %36 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %37 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %38 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %39 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %40 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %41 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %42 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %43 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %44 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %45 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %46 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %47 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %48 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %49 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %50 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %51 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %52 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %53 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  %54 = load ptr, ptr @opt_ex.big_grid_1.0, align 8
  %55 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %56 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %57 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  %58 = load ptr, ptr @opt_ex.big_grid_2.0, align 8
  %59 = load ptr, ptr @opt_ex.row_col_data.0, align 8
  br label %for.interval.loop2.preheader.us

for.interval.loop2.preheader.us:                  ; preds = %for.interval.loop2.preheader.us.preheader, %for.interval.loop2.for.interval.post7_crit_edge.us
  %result.014.us = phi i64 [ %result.2.us.lcssa, %for.interval.loop2.for.interval.post7_crit_edge.us ], [ 0, %for.interval.loop2.preheader.us.preheader ]
  %row.013.us = phi i64 [ %63, %for.interval.loop2.for.interval.post7_crit_edge.us ], [ 0, %for.interval.loop2.preheader.us.preheader ]
  %60 = mul i64 %row.013.us, %1
  %61 = xor i64 %row.013.us, -1
  %62 = add i64 %1, %61
  %63 = add nuw nsw i64 %row.013.us, 1
  br i1 %5, label %for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa, label %for.interval.body3.us

for.interval.body3.us:                            ; preds = %for.interval.loop2.preheader.us, %for.interval.post.us.7
  %result.112.us = phi i64 [ %result.2.us.7, %for.interval.post.us.7 ], [ %result.014.us, %for.interval.loop2.preheader.us ]
  %col.011.us = phi i64 [ %215, %for.interval.post.us.7 ], [ 0, %for.interval.loop2.preheader.us ]
  %niter = phi i64 [ %niter.next.7, %for.interval.post.us.7 ], [ 0, %for.interval.loop2.preheader.us ]
  %64 = add i64 %col.011.us, %60
  %65 = getelementptr i8, ptr %6, i64 %64
  %66 = load i8, ptr %65, align 1
  switch i8 %66, label %for.interval.post.us [
    i8 79, label %switch.case.body.us
    i8 35, label %switch.case.body5.us
  ]

switch.case.body5.us:                             ; preds = %for.interval.body3.us
  %67 = mul i64 %col.011.us, %1
  %68 = add i64 %62, %67
  %69 = getelementptr i8, ptr %7, i64 %68
  store i8 35, ptr %69, align 1
  %70 = getelementptr i64, ptr %8, i64 %col.011.us
  store i64 %63, ptr %70, align 8
  br label %for.interval.post.us

switch.case.body.us:                              ; preds = %for.interval.body3.us
  %71 = getelementptr i64, ptr %9, i64 %col.011.us
  %72 = load i64, ptr %71, align 8
  %73 = xor i64 %72, -1
  %74 = or i64 %col.011.us, 1
  %75 = mul i64 %74, %1
  %76 = add i64 %75, %73
  %77 = getelementptr i8, ptr %10, i64 %76
  store i8 79, ptr %77, align 1
  %78 = getelementptr i64, ptr %11, i64 %col.011.us
  %79 = load i64, ptr %78, align 8
  %80 = add i64 %79, 1
  store i64 %80, ptr %78, align 8
  %81 = add i64 %result.112.us, %row.013.us
  br label %for.interval.post.us

for.interval.post.us:                             ; preds = %switch.case.body.us, %switch.case.body5.us, %for.interval.body3.us
  %result.2.us = phi i64 [ %result.112.us, %for.interval.body3.us ], [ %result.112.us, %switch.case.body5.us ], [ %81, %switch.case.body.us ]
  %82 = or i64 %col.011.us, 1
  %83 = add i64 %82, %60
  %84 = getelementptr i8, ptr %12, i64 %83
  %85 = load i8, ptr %84, align 1
  switch i8 %85, label %for.interval.post.us.1 [
    i8 79, label %switch.case.body.us.1
    i8 35, label %switch.case.body5.us.1
  ]

switch.case.body5.us.1:                           ; preds = %for.interval.post.us
  %86 = mul i64 %82, %1
  %87 = add i64 %62, %86
  %88 = getelementptr i8, ptr %13, i64 %87
  store i8 35, ptr %88, align 1
  %89 = getelementptr i64, ptr %14, i64 %82
  store i64 %63, ptr %89, align 8
  br label %for.interval.post.us.1

switch.case.body.us.1:                            ; preds = %for.interval.post.us
  %90 = getelementptr i64, ptr %15, i64 %82
  %91 = load i64, ptr %90, align 8
  %92 = xor i64 %91, -1
  %93 = or i64 %col.011.us, 2
  %94 = mul i64 %93, %1
  %95 = add i64 %94, %92
  %96 = getelementptr i8, ptr %16, i64 %95
  store i8 79, ptr %96, align 1
  %97 = getelementptr i64, ptr %17, i64 %82
  %98 = load i64, ptr %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, ptr %97, align 8
  %100 = add i64 %result.2.us, %row.013.us
  br label %for.interval.post.us.1

for.interval.post.us.1:                           ; preds = %switch.case.body.us.1, %switch.case.body5.us.1, %for.interval.post.us
  %result.2.us.1 = phi i64 [ %result.2.us, %for.interval.post.us ], [ %result.2.us, %switch.case.body5.us.1 ], [ %100, %switch.case.body.us.1 ]
  %101 = or i64 %col.011.us, 2
  %102 = add i64 %101, %60
  %103 = getelementptr i8, ptr %18, i64 %102
  %104 = load i8, ptr %103, align 1
  switch i8 %104, label %for.interval.post.us.2 [
    i8 79, label %switch.case.body.us.2
    i8 35, label %switch.case.body5.us.2
  ]

switch.case.body5.us.2:                           ; preds = %for.interval.post.us.1
  %105 = mul i64 %101, %1
  %106 = add i64 %62, %105
  %107 = getelementptr i8, ptr %19, i64 %106
  store i8 35, ptr %107, align 1
  %108 = getelementptr i64, ptr %20, i64 %101
  store i64 %63, ptr %108, align 8
  br label %for.interval.post.us.2

switch.case.body.us.2:                            ; preds = %for.interval.post.us.1
  %109 = getelementptr i64, ptr %21, i64 %101
  %110 = load i64, ptr %109, align 8
  %111 = xor i64 %110, -1
  %112 = or i64 %col.011.us, 3
  %113 = mul i64 %112, %1
  %114 = add i64 %113, %111
  %115 = getelementptr i8, ptr %22, i64 %114
  store i8 79, ptr %115, align 1
  %116 = getelementptr i64, ptr %23, i64 %101
  %117 = load i64, ptr %116, align 8
  %118 = add i64 %117, 1
  store i64 %118, ptr %116, align 8
  %119 = add i64 %result.2.us.1, %row.013.us
  br label %for.interval.post.us.2

for.interval.post.us.2:                           ; preds = %switch.case.body.us.2, %switch.case.body5.us.2, %for.interval.post.us.1
  %result.2.us.2 = phi i64 [ %result.2.us.1, %for.interval.post.us.1 ], [ %result.2.us.1, %switch.case.body5.us.2 ], [ %119, %switch.case.body.us.2 ]
  %120 = or i64 %col.011.us, 3
  %121 = add i64 %120, %60
  %122 = getelementptr i8, ptr %24, i64 %121
  %123 = load i8, ptr %122, align 1
  switch i8 %123, label %for.interval.post.us.3 [
    i8 79, label %switch.case.body.us.3
    i8 35, label %switch.case.body5.us.3
  ]

switch.case.body5.us.3:                           ; preds = %for.interval.post.us.2
  %124 = mul i64 %120, %1
  %125 = add i64 %62, %124
  %126 = getelementptr i8, ptr %25, i64 %125
  store i8 35, ptr %126, align 1
  %127 = getelementptr i64, ptr %26, i64 %120
  store i64 %63, ptr %127, align 8
  br label %for.interval.post.us.3

switch.case.body.us.3:                            ; preds = %for.interval.post.us.2
  %128 = getelementptr i64, ptr %27, i64 %120
  %129 = load i64, ptr %128, align 8
  %130 = xor i64 %129, -1
  %131 = or i64 %col.011.us, 4
  %132 = mul i64 %131, %1
  %133 = add i64 %132, %130
  %134 = getelementptr i8, ptr %28, i64 %133
  store i8 79, ptr %134, align 1
  %135 = getelementptr i64, ptr %29, i64 %120
  %136 = load i64, ptr %135, align 8
  %137 = add i64 %136, 1
  store i64 %137, ptr %135, align 8
  %138 = add i64 %result.2.us.2, %row.013.us
  br label %for.interval.post.us.3

for.interval.post.us.3:                           ; preds = %switch.case.body.us.3, %switch.case.body5.us.3, %for.interval.post.us.2
  %result.2.us.3 = phi i64 [ %result.2.us.2, %for.interval.post.us.2 ], [ %result.2.us.2, %switch.case.body5.us.3 ], [ %138, %switch.case.body.us.3 ]
  %139 = or i64 %col.011.us, 4
  %140 = add i64 %139, %60
  %141 = getelementptr i8, ptr %30, i64 %140
  %142 = load i8, ptr %141, align 1
  switch i8 %142, label %for.interval.post.us.4 [
    i8 79, label %switch.case.body.us.4
    i8 35, label %switch.case.body5.us.4
  ]

switch.case.body5.us.4:                           ; preds = %for.interval.post.us.3
  %143 = mul i64 %139, %1
  %144 = add i64 %62, %143
  %145 = getelementptr i8, ptr %31, i64 %144
  store i8 35, ptr %145, align 1
  %146 = getelementptr i64, ptr %32, i64 %139
  store i64 %63, ptr %146, align 8
  br label %for.interval.post.us.4

switch.case.body.us.4:                            ; preds = %for.interval.post.us.3
  %147 = getelementptr i64, ptr %33, i64 %139
  %148 = load i64, ptr %147, align 8
  %149 = xor i64 %148, -1
  %150 = or i64 %col.011.us, 5
  %151 = mul i64 %150, %1
  %152 = add i64 %151, %149
  %153 = getelementptr i8, ptr %34, i64 %152
  store i8 79, ptr %153, align 1
  %154 = getelementptr i64, ptr %35, i64 %139
  %155 = load i64, ptr %154, align 8
  %156 = add i64 %155, 1
  store i64 %156, ptr %154, align 8
  %157 = add i64 %result.2.us.3, %row.013.us
  br label %for.interval.post.us.4

for.interval.post.us.4:                           ; preds = %switch.case.body.us.4, %switch.case.body5.us.4, %for.interval.post.us.3
  %result.2.us.4 = phi i64 [ %result.2.us.3, %for.interval.post.us.3 ], [ %result.2.us.3, %switch.case.body5.us.4 ], [ %157, %switch.case.body.us.4 ]
  %158 = or i64 %col.011.us, 5
  %159 = add i64 %158, %60
  %160 = getelementptr i8, ptr %36, i64 %159
  %161 = load i8, ptr %160, align 1
  switch i8 %161, label %for.interval.post.us.5 [
    i8 79, label %switch.case.body.us.5
    i8 35, label %switch.case.body5.us.5
  ]

switch.case.body5.us.5:                           ; preds = %for.interval.post.us.4
  %162 = mul i64 %158, %1
  %163 = add i64 %62, %162
  %164 = getelementptr i8, ptr %37, i64 %163
  store i8 35, ptr %164, align 1
  %165 = getelementptr i64, ptr %38, i64 %158
  store i64 %63, ptr %165, align 8
  br label %for.interval.post.us.5

switch.case.body.us.5:                            ; preds = %for.interval.post.us.4
  %166 = getelementptr i64, ptr %39, i64 %158
  %167 = load i64, ptr %166, align 8
  %168 = xor i64 %167, -1
  %169 = or i64 %col.011.us, 6
  %170 = mul i64 %169, %1
  %171 = add i64 %170, %168
  %172 = getelementptr i8, ptr %40, i64 %171
  store i8 79, ptr %172, align 1
  %173 = getelementptr i64, ptr %41, i64 %158
  %174 = load i64, ptr %173, align 8
  %175 = add i64 %174, 1
  store i64 %175, ptr %173, align 8
  %176 = add i64 %result.2.us.4, %row.013.us
  br label %for.interval.post.us.5

for.interval.post.us.5:                           ; preds = %switch.case.body.us.5, %switch.case.body5.us.5, %for.interval.post.us.4
  %result.2.us.5 = phi i64 [ %result.2.us.4, %for.interval.post.us.4 ], [ %result.2.us.4, %switch.case.body5.us.5 ], [ %176, %switch.case.body.us.5 ]
  %177 = or i64 %col.011.us, 6
  %178 = add i64 %177, %60
  %179 = getelementptr i8, ptr %42, i64 %178
  %180 = load i8, ptr %179, align 1
  switch i8 %180, label %for.interval.post.us.6 [
    i8 79, label %switch.case.body.us.6
    i8 35, label %switch.case.body5.us.6
  ]

switch.case.body5.us.6:                           ; preds = %for.interval.post.us.5
  %181 = mul i64 %177, %1
  %182 = add i64 %62, %181
  %183 = getelementptr i8, ptr %43, i64 %182
  store i8 35, ptr %183, align 1
  %184 = getelementptr i64, ptr %44, i64 %177
  store i64 %63, ptr %184, align 8
  br label %for.interval.post.us.6

switch.case.body.us.6:                            ; preds = %for.interval.post.us.5
  %185 = getelementptr i64, ptr %45, i64 %177
  %186 = load i64, ptr %185, align 8
  %187 = xor i64 %186, -1
  %188 = or i64 %col.011.us, 7
  %189 = mul i64 %188, %1
  %190 = add i64 %189, %187
  %191 = getelementptr i8, ptr %46, i64 %190
  store i8 79, ptr %191, align 1
  %192 = getelementptr i64, ptr %47, i64 %177
  %193 = load i64, ptr %192, align 8
  %194 = add i64 %193, 1
  store i64 %194, ptr %192, align 8
  %195 = add i64 %result.2.us.5, %row.013.us
  br label %for.interval.post.us.6

for.interval.post.us.6:                           ; preds = %switch.case.body.us.6, %switch.case.body5.us.6, %for.interval.post.us.5
  %result.2.us.6 = phi i64 [ %result.2.us.5, %for.interval.post.us.5 ], [ %result.2.us.5, %switch.case.body5.us.6 ], [ %195, %switch.case.body.us.6 ]
  %196 = or i64 %col.011.us, 7
  %197 = add i64 %196, %60
  %198 = getelementptr i8, ptr %48, i64 %197
  %199 = load i8, ptr %198, align 1
  switch i8 %199, label %for.interval.post.us.7 [
    i8 79, label %switch.case.body.us.7
    i8 35, label %switch.case.body5.us.7
  ]

switch.case.body5.us.7:                           ; preds = %for.interval.post.us.6
  %200 = mul i64 %196, %1
  %201 = add i64 %62, %200
  %202 = getelementptr i8, ptr %49, i64 %201
  store i8 35, ptr %202, align 1
  %203 = getelementptr i64, ptr %50, i64 %196
  store i64 %63, ptr %203, align 8
  br label %for.interval.post.us.7

switch.case.body.us.7:                            ; preds = %for.interval.post.us.6
  %204 = getelementptr i64, ptr %51, i64 %196
  %205 = load i64, ptr %204, align 8
  %206 = xor i64 %205, -1
  %207 = add nuw nsw i64 %col.011.us, 8
  %208 = mul i64 %207, %1
  %209 = add i64 %208, %206
  %210 = getelementptr i8, ptr %52, i64 %209
  store i8 79, ptr %210, align 1
  %211 = getelementptr i64, ptr %53, i64 %196
  %212 = load i64, ptr %211, align 8
  %213 = add i64 %212, 1
  store i64 %213, ptr %211, align 8
  %214 = add i64 %result.2.us.6, %row.013.us
  br label %for.interval.post.us.7

for.interval.post.us.7:                           ; preds = %switch.case.body.us.7, %switch.case.body5.us.7, %for.interval.post.us.6
  %result.2.us.7 = phi i64 [ %result.2.us.6, %for.interval.post.us.6 ], [ %result.2.us.6, %switch.case.body5.us.7 ], [ %214, %switch.case.body.us.7 ]
  %215 = add nuw nsw i64 %col.011.us, 8
  %niter.next.7 = add i64 %niter, 8
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa, label %for.interval.body3.us

for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa: ; preds = %for.interval.post.us.7, %for.interval.loop2.preheader.us
  %result.2.us.lcssa.ph = phi i64 [ undef, %for.interval.loop2.preheader.us ], [ %result.2.us.7, %for.interval.post.us.7 ]
  %result.112.us.unr = phi i64 [ %result.014.us, %for.interval.loop2.preheader.us ], [ %result.2.us.7, %for.interval.post.us.7 ]
  %col.011.us.unr = phi i64 [ 0, %for.interval.loop2.preheader.us ], [ %215, %for.interval.post.us.7 ]
  br i1 %lcmp.mod.not, label %for.interval.loop2.for.interval.post7_crit_edge.us, label %for.interval.body3.us.epil

for.interval.body3.us.epil:                       ; preds = %for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa, %for.interval.post.us.epil
  %result.112.us.epil = phi i64 [ %result.2.us.epil, %for.interval.post.us.epil ], [ %result.112.us.unr, %for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa ]
  %col.011.us.epil = phi i64 [ %234, %for.interval.post.us.epil ], [ %col.011.us.unr, %for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.interval.post.us.epil ], [ 0, %for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa ]
  %216 = add i64 %col.011.us.epil, %60
  %217 = getelementptr i8, ptr %54, i64 %216
  %218 = load i8, ptr %217, align 1
  switch i8 %218, label %for.interval.post.us.epil [
    i8 79, label %switch.case.body.us.epil
    i8 35, label %switch.case.body5.us.epil
  ]

switch.case.body5.us.epil:                        ; preds = %for.interval.body3.us.epil
  %219 = mul i64 %col.011.us.epil, %1
  %220 = add i64 %62, %219
  %221 = getelementptr i8, ptr %55, i64 %220
  store i8 35, ptr %221, align 1
  %222 = getelementptr i64, ptr %56, i64 %col.011.us.epil
  store i64 %63, ptr %222, align 8
  br label %for.interval.post.us.epil

switch.case.body.us.epil:                         ; preds = %for.interval.body3.us.epil
  %223 = getelementptr i64, ptr %57, i64 %col.011.us.epil
  %224 = load i64, ptr %223, align 8
  %225 = xor i64 %224, -1
  %226 = add nuw nsw i64 %col.011.us.epil, 1
  %227 = mul i64 %226, %1
  %228 = add i64 %227, %225
  %229 = getelementptr i8, ptr %58, i64 %228
  store i8 79, ptr %229, align 1
  %230 = getelementptr i64, ptr %59, i64 %col.011.us.epil
  %231 = load i64, ptr %230, align 8
  %232 = add i64 %231, 1
  store i64 %232, ptr %230, align 8
  %233 = add i64 %result.112.us.epil, %row.013.us
  br label %for.interval.post.us.epil

for.interval.post.us.epil:                        ; preds = %switch.case.body.us.epil, %switch.case.body5.us.epil, %for.interval.body3.us.epil
  %result.2.us.epil = phi i64 [ %result.112.us.epil, %for.interval.body3.us.epil ], [ %result.112.us.epil, %switch.case.body5.us.epil ], [ %233, %switch.case.body.us.epil ]
  %234 = add nuw nsw i64 %col.011.us.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.interval.loop2.for.interval.post7_crit_edge.us, label %for.interval.body3.us.epil, !llvm.loop !302

for.interval.loop2.for.interval.post7_crit_edge.us: ; preds = %for.interval.post.us.epil, %for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa
  %result.2.us.lcssa = phi i64 [ %result.2.us.lcssa.ph, %for.interval.loop2.for.interval.post7_crit_edge.us.unr-lcssa ], [ %result.2.us.epil, %for.interval.post.us.epil ]
  %exitcond17.not = icmp eq i64 %63, %2
  br i1 %exitcond17.not, label %for.interval.done8, label %for.interval.loop2.preheader.us

for.interval.done8:                               ; preds = %for.interval.loop2.for.interval.post7_crit_edge.us, %decls
  %result.0.lcssa = phi i64 [ 0, %decls ], [ %result.2.us.lcssa, %for.interval.loop2.for.interval.post7_crit_edge.us ]
  ret i64 %result.0.lcssa
}

define internal fastcc i64 @os.read(i64 %0, ptr nocapture readonly %1, ptr noalias nocapture nonnull writeonly %2) unnamed_addr {
decls:
  %b.i.i = alloca [4 x i8], align 1
  %buf16.i = alloca [386 x i16], align 2
  %buf8.i = alloca [1544 x i8], align 1
  %single_read_length.i = alloca i32, align 4
  %m = alloca i32, align 4
  %bytes_read = alloca i32, align 4
  %3 = getelementptr inbounds { ptr, i64 }, ptr %1, i64 0, i32 1
  %4 = load i64, ptr %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %common.ret, label %if.done

common.ret:                                       ; preds = %if.then4, %os.read_console-826.exit, %decls, %if.done10, %if.else8
  %storemerge.i4.sink = phi i64 [ %storemerge.i4, %if.done10 ], [ 0, %if.else8 ], [ 0, %decls ], [ %storemerge.i, %os.read_console-826.exit ], [ %105, %if.then4 ]
  %common.ret.op = phi i64 [ 0, %if.done10 ], [ %107, %if.else8 ], [ 0, %decls ], [ %err.1.i, %os.read_console-826.exit ], [ %spec.select22, %if.then4 ]
  store i64 %storemerge.i4.sink, ptr %2, align 8
  ret i64 %common.ret.op

if.done:                                          ; preds = %decls
  %6 = inttoptr i64 %0 to ptr
  store i32 0, ptr %m, align 4
  %7 = call x86_stdcallcc i32 @GetConsoleMode(ptr %6, ptr nonnull %m)
  %8 = load i64, ptr %3, align 8
  %9 = call i64 @llvm.smin.i64(i64 %8, i64 1073741824)
  %.not = icmp eq i32 %7, 0
  br i1 %.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.done
  %10 = load ptr, ptr %1, align 8
  call void @llvm.lifetime.start.p0(i64 772, ptr nonnull %buf16.i)
  call void @llvm.lifetime.start.p0(i64 1544, ptr nonnull %buf8.i)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_read_length.i)
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %os.read_console-826.exit.thread, label %if.done.i

if.done.i:                                        ; preds = %if.then1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(772) %buf16.i, i8 0, i64 772, i1 false), !noalias !303
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1544) %buf8.i, i8 0, i64 1544, i1 false), !noalias !303
  %12 = icmp sgt i64 %8, 0
  br i1 %12, label %for.body.i.preheader, label %os.read_console-826.exit.thread

for.body.i.preheader:                             ; preds = %if.done.i
  %b.repack15.i.i = getelementptr inbounds [4 x i8], ptr %b.i.i, i64 0, i64 1
  %b.repack17.i.i = getelementptr inbounds [4 x i8], ptr %b.i.i, i64 0, i64 2
  %b.repack19.i.i = getelementptr inbounds [4 x i8], ptr %b.i.i, i64 0, i64 3
  %13 = sdiv i64 %9, 4
  %14 = call i64 @llvm.smax.i64(i64 %13, i64 1)
  %15 = call i64 @llvm.umin.i64(i64 %14, i64 386)
  %16 = trunc i64 %15 to i32
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %if.done20.i
  %n.013.i = phi i64 [ %n.1.lcssa.i, %if.done20.i ], [ 0, %for.body.i.preheader ]
  store i32 0, ptr %single_read_length.i, align 4, !noalias !303
  %17 = call x86_stdcallcc i32 @ReadConsoleW(ptr %6, ptr nonnull %buf16.i, i32 %16, ptr nonnull %single_read_length.i, ptr null), !noalias !303
  %.not.i = icmp eq i32 %17, 0
  br i1 %.not.i, label %if.then5.i, label %if.done6.i

if.then5.i:                                       ; preds = %for.body.i
  %18 = call x86_stdcallcc i32 @GetLastError(), !noalias !303
  %19 = zext i32 %18 to i64
  br label %if.done6.i

if.done6.i:                                       ; preds = %if.then5.i, %for.body.i
  %err.1.i = phi i64 [ 0, %for.body.i ], [ %19, %if.then5.i ]
  %20 = load i32, ptr %single_read_length.i, align 4, !noalias !303
  %21 = zext i32 %20 to i64
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %b.i.i), !noalias !303
  %.not3.i = icmp eq i32 %20, 0
  br i1 %.not3.i, label %utf16.decode_to_utf8.exit.thread72.i, label %for.body.i.i

utf16.decode_to_utf8.exit.thread72.i:             ; preds = %if.done6.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %b.i.i), !noalias !303
  br label %cmp.or.critedge.i

for.body.i.i:                                     ; preds = %if.done6.i, %utf8.encode_rune.exit.i.i
  %n.018.i.i = phi i64 [ %77, %utf8.encode_rune.exit.i.i ], [ 0, %if.done6.i ]
  %i.017.i.i = phi i64 [ %78, %utf8.encode_rune.exit.i.i ], [ 0, %if.done6.i ]
  %.not.i.i = icmp ult i64 %n.018.i.i, 1544
  br i1 %.not.i.i, label %if.done.i.i, label %utf16.decode_to_utf8.exit.i

if.done.i.i:                                      ; preds = %for.body.i.i
  %22 = getelementptr i16, ptr %buf16.i, i64 %i.017.i.i
  %23 = load i16, ptr %22, align 2, !noalias !303
  %24 = add i16 %23, 8192
  %or.cond.i.i = icmp ult i16 %24, -2048
  br i1 %or.cond.i.i, label %switch.done.i.i, label %cmp.and.i.i

cmp.and.i.i:                                      ; preds = %if.done.i.i
  %25 = icmp ult i16 %23, -9216
  br i1 %25, label %cmp.and2.i.i, label %if.then5.i.i.i

cmp.and2.i.i:                                     ; preds = %cmp.and.i.i
  %26 = add nsw i64 %i.017.i.i, 1
  %27 = icmp slt i64 %26, %21
  br i1 %27, label %cmp.and3.i.i, label %if.then5.i.i.i

cmp.and3.i.i:                                     ; preds = %cmp.and2.i.i
  %28 = getelementptr i16, ptr %buf16.i, i64 %26
  %29 = load i16, ptr %28, align 2, !noalias !303
  %30 = and i16 %29, -1024
  %spec.select.i.i = icmp eq i16 %30, -9216
  br i1 %spec.select.i.i, label %if.done2.i.i.i, label %if.then5.i.i.i

switch.done.i.i:                                  ; preds = %if.done.i.i
  %31 = zext i16 %23 to i32
  %32 = icmp ult i16 %23, 128
  br i1 %32, label %if.then.i.i.i, label %if.done.i.i.i

if.then.i.i.i:                                    ; preds = %switch.done.i.i
  %33 = trunc i16 %23 to i8
  br label %utf8.encode_rune.exit.i.i

if.done.i.i.i:                                    ; preds = %switch.done.i.i
  %34 = icmp ult i16 %23, 2048
  br i1 %34, label %if.then1.i.i.i, label %if.done2.i.thread.i.i

if.done2.i.thread.i.i:                            ; preds = %if.done.i.i.i
  %35 = and i32 %31, 63488
  %or.cond.i2112.i.i = icmp eq i32 %35, 55296
  %r.0.i14.i.i = select i1 %or.cond.i2112.i.i, i32 65533, i32 %31
  br label %if.then5.i.i.i

if.then1.i.i.i:                                   ; preds = %if.done.i.i.i
  %36 = lshr i16 %23, 6
  %37 = trunc i16 %36 to i8
  %38 = or i8 %37, -64
  %39 = trunc i16 %23 to i8
  %40 = and i8 %39, 63
  %41 = or i8 %40, -128
  br label %utf8.encode_rune.exit.i.i

if.done2.i.i.i:                                   ; preds = %cmp.and3.i.i
  %42 = zext i16 %23 to i32
  %43 = zext i16 %29 to i32
  %44 = shl nuw nsw i32 %42, 10
  %45 = add nsw i32 %44, -56623104
  %46 = add nsw i32 %43, -56320
  %47 = or i32 %46, %45
  %48 = add nuw nsw i32 %47, 65536
  %49 = and i32 %48, -2048
  %or.cond.i21.i.i = icmp eq i32 %49, 55296
  %r.0.i.i.i = select i1 %or.cond.i21.i.i, i32 65533, i32 %48
  %50 = lshr i32 %r.0.i.i.i, 18
  %51 = trunc i32 %50 to i8
  %52 = or i8 %51, -16
  %53 = lshr i32 %r.0.i.i.i, 12
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 63
  %56 = or i8 %55, -128
  %57 = lshr i32 %r.0.i.i.i, 6
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 63
  %60 = or i8 %59, -128
  %61 = trunc i32 %r.0.i.i.i to i8
  %62 = and i8 %61, 63
  %63 = or i8 %62, -128
  br label %utf8.encode_rune.exit.i.i

if.then5.i.i.i:                                   ; preds = %if.done2.i.thread.i.i, %cmp.and3.i.i, %cmp.and2.i.i, %cmp.and.i.i
  %r.0.i16.i.i = phi i32 [ %r.0.i14.i.i, %if.done2.i.thread.i.i ], [ 65533, %cmp.and.i.i ], [ 65533, %cmp.and2.i.i ], [ 65533, %cmp.and3.i.i ]
  %64 = lshr i32 %r.0.i16.i.i, 12
  %65 = trunc i32 %64 to i8
  %66 = or i8 %65, -32
  %67 = lshr i32 %r.0.i16.i.i, 6
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 63
  %70 = or i8 %69, -128
  %71 = trunc i32 %r.0.i16.i.i to i8
  %72 = and i8 %71, 63
  %73 = or i8 %72, -128
  br label %utf8.encode_rune.exit.i.i

utf8.encode_rune.exit.i.i:                        ; preds = %if.then5.i.i.i, %if.done2.i.i.i, %if.then1.i.i.i, %if.then.i.i.i
  %i.14.i.i = phi i64 [ %26, %if.done2.i.i.i ], [ %i.017.i.i, %if.then5.i.i.i ], [ %i.017.i.i, %if.then1.i.i.i ], [ %i.017.i.i, %if.then.i.i.i ]
  %.sink61.i.i.i = phi i8 [ %52, %if.done2.i.i.i ], [ %66, %if.then5.i.i.i ], [ %38, %if.then1.i.i.i ], [ %33, %if.then.i.i.i ]
  %.sink60.i.i.i = phi i8 [ %56, %if.done2.i.i.i ], [ %70, %if.then5.i.i.i ], [ %41, %if.then1.i.i.i ], [ 0, %if.then.i.i.i ]
  %.sink59.i.i.i = phi i8 [ %60, %if.done2.i.i.i ], [ %73, %if.then5.i.i.i ], [ 0, %if.then1.i.i.i ], [ 0, %if.then.i.i.i ]
  %.sink.i.i.i = phi i8 [ %63, %if.done2.i.i.i ], [ 0, %if.then5.i.i.i ], [ 0, %if.then1.i.i.i ], [ 0, %if.then.i.i.i ]
  %common.ret.op.i.i.i = phi i64 [ 4, %if.done2.i.i.i ], [ 3, %if.then5.i.i.i ], [ 2, %if.then1.i.i.i ], [ 1, %if.then.i.i.i ]
  store i8 %.sink61.i.i.i, ptr %b.i.i, align 1, !noalias !303
  store i8 %.sink60.i.i.i, ptr %b.repack15.i.i, align 1, !noalias !303
  store i8 %.sink59.i.i.i, ptr %b.repack17.i.i, align 1, !noalias !303
  store i8 %.sink.i.i.i, ptr %b.repack19.i.i, align 1, !noalias !303
  %74 = sub nuw nsw i64 1544, %n.018.i.i
  %75 = call i64 @llvm.smin.i64(i64 %74, i64 %common.ret.op.i.i.i)
  %76 = getelementptr i8, ptr %buf8.i, i64 %n.018.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %76, ptr nonnull align 1 %b.i.i, i64 %75, i1 false), !noalias !303
  %77 = add nuw nsw i64 %75, %n.018.i.i
  %78 = add nsw i64 %i.14.i.i, 1
  %79 = icmp slt i64 %78, %21
  br i1 %79, label %for.body.i.i, label %utf16.decode_to_utf8.exit.thread.i

utf16.decode_to_utf8.exit.thread.i:               ; preds = %utf8.encode_rune.exit.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %b.i.i), !noalias !303
  br label %cmp.and8.preheader.i

utf16.decode_to_utf8.exit.i:                      ; preds = %for.body.i.i
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %b.i.i), !noalias !303
  %80 = icmp sgt i64 %n.018.i.i, 0
  br i1 %80, label %cmp.and8.preheader.i, label %cmp.or.critedge.i

cmp.and8.preheader.i:                             ; preds = %utf16.decode_to_utf8.exit.i, %utf16.decode_to_utf8.exit.thread.i
  %n.0.lcssa.i71.i = phi i64 [ %77, %utf16.decode_to_utf8.exit.thread.i ], [ %n.018.i.i, %utf16.decode_to_utf8.exit.i ]
  br label %cmp.and8.i

cmp.and8.i:                                       ; preds = %if.done12.i, %cmp.and8.preheader.i
  %i.010.i = phi i64 [ %88, %if.done12.i ], [ 0, %cmp.and8.preheader.i ]
  %n.19.i = phi i64 [ %87, %if.done12.i ], [ %n.013.i, %cmp.and8.preheader.i ]
  %81 = add i64 %n.19.i, %i.010.i
  %82 = icmp slt i64 %81, %9
  br i1 %82, label %for.body9.i, label %cmp.or.critedge.loopexit.i

for.body9.i:                                      ; preds = %cmp.and8.i
  %83 = getelementptr i8, ptr %buf8.i, i64 %i.010.i
  %84 = load i8, ptr %83, align 1, !noalias !303
  %85 = icmp eq i8 %84, 26
  br i1 %85, label %os.read_console-826.exit, label %if.done12.i

if.done12.i:                                      ; preds = %for.body9.i
  %86 = getelementptr i8, ptr %10, i64 %n.19.i
  store i8 %84, ptr %86, align 1, !noalias !303
  %87 = add i64 %n.19.i, 1
  %88 = add nuw nsw i64 %i.010.i, 1
  %exitcond.not.i = icmp eq i64 %88, %n.0.lcssa.i71.i
  br i1 %exitcond.not.i, label %cmp.or.critedge.loopexit.i, label %cmp.and8.i

cmp.or.critedge.loopexit.i:                       ; preds = %if.done12.i, %cmp.and8.i
  %n.1.lcssa.ph.i = phi i64 [ %n.19.i, %cmp.and8.i ], [ %87, %if.done12.i ]
  %.pre.i = load i32, ptr %single_read_length.i, align 4, !noalias !303
  br label %cmp.or.critedge.i

cmp.or.critedge.i:                                ; preds = %cmp.or.critedge.loopexit.i, %utf16.decode_to_utf8.exit.i, %utf16.decode_to_utf8.exit.thread72.i
  %89 = phi i32 [ %20, %utf16.decode_to_utf8.exit.i ], [ %.pre.i, %cmp.or.critedge.loopexit.i ], [ 0, %utf16.decode_to_utf8.exit.thread72.i ]
  %n.1.lcssa.i = phi i64 [ %n.013.i, %utf16.decode_to_utf8.exit.i ], [ %n.1.lcssa.ph.i, %cmp.or.critedge.loopexit.i ], [ %n.013.i, %utf16.decode_to_utf8.exit.thread72.i ]
  %90 = icmp ult i32 %89, %16
  br i1 %90, label %os.read_console-826.exit, label %if.done15.i

if.done15.i:                                      ; preds = %cmp.or.critedge.i
  %91 = icmp sgt i64 %n.1.lcssa.i, 1
  %92 = icmp eq i32 %89, %16
  %or.cond33.i = and i1 %92, %91
  br i1 %or.cond33.i, label %if.done.i37.i, label %if.done20.i

if.done.i37.i:                                    ; preds = %if.done15.i
  %93 = add nsw i64 %n.1.lcssa.i, -2
  %94 = getelementptr i8, ptr %10, i64 %93
  %.not4.i = icmp eq ptr %94, @"csbs$10e"
  br i1 %.not4.i, label %os.read_console-826.exit, label %for.body.i.i.preheader.i

for.body.i.i.preheader.i:                         ; preds = %if.done.i37.i
  %95 = load i8, ptr %94, align 1, !noalias !303
  %.not.i.i38.i = icmp eq i8 %95, 13
  br i1 %.not.i.i38.i, label %for.loop.i.i.i, label %if.done20.i

for.loop.i.i.i:                                   ; preds = %for.body.i.i.preheader.i
  %96 = getelementptr i8, ptr %94, i64 1
  %97 = load i8, ptr %96, align 1, !noalias !303
  %.not.i.i38.1.i = icmp eq i8 %97, 10
  br i1 %.not.i.i38.1.i, label %os.read_console-826.exit, label %if.done20.i

if.done20.i:                                      ; preds = %for.loop.i.i.i, %for.body.i.i.preheader.i, %if.done15.i
  %98 = icmp slt i64 %n.1.lcssa.i, %9
  %99 = icmp eq i64 %err.1.i, 0
  %or.cond.i = select i1 %98, i1 %99, i1 false
  br i1 %or.cond.i, label %for.body.i, label %os.read_console-826.exit

os.read_console-826.exit.thread:                  ; preds = %if.then1, %if.done.i
  call void @llvm.lifetime.end.p0(i64 772, ptr nonnull %buf16.i)
  call void @llvm.lifetime.end.p0(i64 1544, ptr nonnull %buf8.i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_read_length.i)
  br label %if.done10

os.read_console-826.exit:                         ; preds = %cmp.or.critedge.i, %if.done.i37.i, %for.loop.i.i.i, %if.done20.i, %for.body9.i
  %storemerge.i = phi i64 [ %n.19.i, %for.body9.i ], [ %n.1.lcssa.i, %if.done20.i ], [ %n.1.lcssa.i, %for.loop.i.i.i ], [ %n.1.lcssa.i, %if.done.i37.i ], [ %n.1.lcssa.i, %cmp.or.critedge.i ]
  call void @llvm.lifetime.end.p0(i64 772, ptr nonnull %buf16.i)
  call void @llvm.lifetime.end.p0(i64 1544, ptr nonnull %buf8.i)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_read_length.i)
  %.not13 = icmp eq i64 %err.1.i, 0
  br i1 %.not13, label %if.done10, label %common.ret

if.else:                                          ; preds = %if.done
  store i32 0, ptr %bytes_read, align 4
  %100 = load ptr, ptr %1, align 8
  %101 = trunc i64 %9 to i32
  %102 = call x86_stdcallcc i32 @ReadFile(ptr %6, ptr %100, i32 %101, ptr nonnull %bytes_read, ptr null)
  %.not12 = icmp eq i32 %102, 0
  br i1 %.not12, label %if.else8, label %if.then4

if.then4:                                         ; preds = %if.else
  %103 = load i32, ptr %bytes_read, align 4
  %104 = icmp eq i32 %103, 0
  %105 = zext i32 %103 to i64
  %spec.select22 = select i1 %104, i64 38, i64 0
  br label %common.ret

if.else8:                                         ; preds = %if.else
  %106 = call x86_stdcallcc i32 @GetLastError()
  %107 = zext i32 %106 to i64
  br label %common.ret

if.done10:                                        ; preds = %os.read_console-826.exit.thread, %os.read_console-826.exit
  %storemerge.i4 = phi i64 [ 0, %os.read_console-826.exit.thread ], [ %storemerge.i, %os.read_console-826.exit ]
  br label %common.ret
}

define internal fastcc void @fmt.println(ptr nocapture readonly %0, ptr %1, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %2 = alloca i64, align 8
  %3 = alloca { ptr, i64 }, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %buf.i.i.i = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %fi.i.i = alloca %fmt.Info, align 8
  %s.i.i.i = alloca %io.Stream, align 8
  %s.i.i = alloca %io.Stream, align 8
  %buf.i = alloca [1024 x i8], align 1
  %b.i = alloca %bufio.Writer, align 8
  %8 = alloca %io.Stream, align 16
  %9 = alloca %io.Stream, align 8
  %10 = load i64, ptr @os.stdout, align 8
  call void @llvm.lifetime.start.p0(i64 1024, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %b.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(1024) %buf.i, i8 0, i64 1024, i1 false), !noalias !306
  %11 = getelementptr inbounds i8, ptr %b.i, i64 56
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(72) %11, i8 0, i64 16, i1 false), !noalias !306
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %s.i.i), !noalias !306
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %s.i.i, i8 0, i64 16, i1 false), !noalias !309
  %12 = getelementptr inbounds %io.Stream, ptr %s.i.i, i64 0, i32 1
  %13 = inttoptr i64 %10 to ptr
  store ptr %13, ptr %12, align 8, !noalias !309
  store ptr @os._file_stream_proc-875, ptr %s.i.i, align 8, !noalias !309
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %8, ptr nonnull align 8 %s.i.i, i64 16, i1 false), !noalias !306
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i.i), !noalias !306
  %14 = getelementptr inbounds %bufio.Writer, ptr %b.i, i64 0, i32 2
  %.repack3.i.i.i = getelementptr inbounds %bufio.Writer, ptr %b.i, i64 0, i32 2, i32 1
  %15 = load <2 x ptr>, ptr %8, align 16, !noalias !306
  store <2 x ptr> %15, ptr %14, align 8, !noalias !306
  %16 = getelementptr inbounds %bufio.Writer, ptr %b.i, i64 0, i32 3
  store i64 0, ptr %16, align 8, !noalias !306
  store i32 0, ptr %11, align 8, !noalias !306
  %17 = getelementptr inbounds %bufio.Writer, ptr %b.i, i64 0, i32 1
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %17, i8 0, i64 16, i1 false), !noalias !306
  store ptr %buf.i, ptr %b.i, align 8, !noalias !306
  %.repack4.i.i = getelementptr inbounds { ptr, i64 }, ptr %b.i, i64 0, i32 1
  store i64 1024, ptr %.repack4.i.i, align 8, !noalias !306
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %s.i.i.i), !noalias !312
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %s.i.i.i, i8 0, i64 16, i1 false), !noalias !315
  %18 = getelementptr inbounds %io.Stream, ptr %s.i.i.i, i64 0, i32 1
  store ptr %b.i, ptr %18, align 8, !noalias !315
  store ptr @bufio._writer_proc-3482, ptr %s.i.i.i, align 8, !noalias !315
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %9, ptr nonnull align 8 %s.i.i.i, i64 16, i1 false), !noalias !306
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i.i.i), !noalias !312
  %.unpack.i = load ptr, ptr %9, align 8, !noalias !306
  %.elt1.i = getelementptr inbounds %io.Stream, ptr %9, i64 0, i32 1
  %.unpack2.i = load ptr, ptr %.elt1.i, align 8, !noalias !306
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %fi.i.i), !noalias !306
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %fi.i.i, i8 0, i64 120, i1 false), !noalias !318
  %19 = getelementptr inbounds %fmt.Info, ptr %fi.i.i, i64 0, i32 16
  store ptr %.unpack.i, ptr %19, align 8, !noalias !318
  %.repack5.i.i = getelementptr inbounds %fmt.Info, ptr %fi.i.i, i64 0, i32 16, i32 1
  store ptr %.unpack2.i, ptr %.repack5.i.i, align 8, !noalias !318
  %20 = getelementptr inbounds { ptr, i64 }, ptr %0, i64 0, i32 1
  %21 = load i64, ptr %20, align 8, !noalias !318
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %for.index.body.lr.ph.i.i, label %for.index.done.i.i

for.index.body.lr.ph.i.i:                         ; preds = %decls
  %23 = getelementptr inbounds %fmt.Info, ptr %fi.i.i, i64 0, i32 23
  br label %for.index.body.i.i

for.index.body.i.i:                               ; preds = %if.done.i.i, %for.index.body.lr.ph.i.i
  %24 = phi i64 [ 0, %for.index.body.lr.ph.i.i ], [ %34, %if.done.i.i ]
  %.010.i.i = phi i64 [ -1, %for.index.body.lr.ph.i.i ], [ %24, %if.done.i.i ]
  %25 = icmp ult i64 %.010.i.i, 9223372036854775807
  br i1 %25, label %if.then.i.i, label %if.done.i.i

if.then.i.i:                                      ; preds = %for.index.body.i.i
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !321
  %26 = load ptr, ptr %19, align 8, !noalias !325
  %.not.i.i.i.i = icmp eq ptr %26, null
  br i1 %.not.i.i.i.i, label %io.write_string.exit.i.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %if.then.i.i
  %27 = load ptr, ptr %.repack5.i.i, align 8, !noalias !325
  store i64 0, ptr %7, align 8, !noalias !325
  %28 = call i32 %26(ptr %27, i64 4, ptr %1, i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !329
  %29 = load i64, ptr %7, align 8, !noalias !325
  %30 = load i64, ptr %23, align 8, !noalias !325
  %31 = add i64 %30, %29
  store i64 %31, ptr %23, align 8, !noalias !325
  br label %io.write_string.exit.i.i

io.write_string.exit.i.i:                         ; preds = %if.then.i.i.i.i, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !321
  br label %if.done.i.i

if.done.i.i:                                      ; preds = %io.write_string.exit.i.i, %for.index.body.i.i
  %32 = load ptr, ptr %0, align 8, !noalias !318
  %33 = getelementptr %..any, ptr %32, i64 %24
  call fastcc void @fmt.fmt_value(ptr nonnull %fi.i.i, ptr %33, i32 118, ptr %__.context_ptr)
  %34 = add nuw nsw i64 %24, 1
  %exitcond.not.i.i = icmp eq i64 %34, %21
  br i1 %exitcond.not.i.i, label %for.index.done.loopexit.i.i, label %for.index.body.i.i

for.index.done.loopexit.i.i:                      ; preds = %if.done.i.i
  %.pre.i.i = load ptr, ptr %19, align 8, !noalias !330
  br label %for.index.done.i.i

for.index.done.i.i:                               ; preds = %for.index.done.loopexit.i.i, %decls
  %35 = phi ptr [ %.pre.i.i, %for.index.done.loopexit.i.i ], [ %.unpack.i, %decls ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i.i), !noalias !318
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6), !noalias !318
  store i8 10, ptr %buf.i.i.i, align 1, !noalias !336
  store ptr %buf.i.i.i, ptr %6, align 8, !noalias !336
  %36 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %36, align 8, !noalias !336
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !336
  %.not.i.i7.i.i = icmp eq ptr %35, null
  br i1 %.not.i.i7.i.i, label %io.write_byte.exit.i.i, label %if.then.i.i8.i.i

if.then.i.i8.i.i:                                 ; preds = %for.index.done.i.i
  %37 = getelementptr inbounds %fmt.Info, ptr %fi.i.i, i64 0, i32 23
  %38 = load ptr, ptr %.repack5.i.i, align 8, !noalias !330
  store i64 0, ptr %5, align 8, !noalias !330
  %39 = call i32 %35(ptr %38, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !337
  %40 = load i64, ptr %5, align 8, !noalias !330
  %41 = load i64, ptr %37, align 8, !noalias !330
  %42 = add i64 %41, %40
  store i64 %42, ptr %37, align 8, !noalias !330
  br label %io.write_byte.exit.i.i

io.write_byte.exit.i.i:                           ; preds = %if.then.i.i8.i.i, %for.index.done.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !336
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i.i), !noalias !318
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !318
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !318
  %.not.i.i.i = icmp eq ptr %.unpack.i, null
  br i1 %.not.i.i.i, label %fmt.wprintln.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %io.write_byte.exit.i.i
  store i64 0, ptr %4, align 8, !noalias !338
  %43 = call i32 %.unpack.i(ptr %.unpack2.i, i64 1, ptr nonnull @"ggv$100", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr)
  br label %fmt.wprintln.exit.i

fmt.wprintln.exit.i:                              ; preds = %if.then.i.i.i, %io.write_byte.exit.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !318
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %fi.i.i), !noalias !306
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3), !noalias !306
  %44 = load i32, ptr %11, align 8, !noalias !341
  %.not.i.i = icmp eq i32 %44, 0
  br i1 %.not.i.i, label %if.done.i7.i, label %fmt.fprintln.exit

if.done.i7.i:                                     ; preds = %fmt.wprintln.exit.i
  %45 = load i64, ptr %16, align 8, !noalias !341
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %fmt.fprintln.exit, label %if.done2.i.i

if.done2.i.i:                                     ; preds = %if.done.i7.i
  %47 = load ptr, ptr %b.i, align 8, !noalias !341
  store ptr %47, ptr %3, align 8, !noalias !341
  %48 = getelementptr inbounds { ptr, i64 }, ptr %3, i64 0, i32 1
  store i64 %45, ptr %48, align 8, !noalias !341
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2), !noalias !341
  %49 = load ptr, ptr %14, align 8, !noalias !344
  %.not.i.i8.i = icmp eq ptr %49, null
  br i1 %.not.i.i8.i, label %if.then5.thread.i.i, label %io.write.exit.i.i

io.write.exit.i.i:                                ; preds = %if.done2.i.i
  %50 = load ptr, ptr %.repack3.i.i.i, align 8, !noalias !344
  store i64 0, ptr %2, align 8, !noalias !344
  %51 = call i32 %49(ptr %50, i64 4, ptr nonnull %3, i64 0, i64 0, ptr nonnull %2, ptr nonnull %__.context_ptr), !noalias !348
  %52 = load i64, ptr %2, align 8, !noalias !344
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2), !noalias !341
  %53 = load i64, ptr %16, align 8, !noalias !341
  %54 = icmp slt i64 %52, %53
  %55 = icmp sgt i64 %52, 0
  %brmerge.not.i.i = and i1 %55, %54
  br i1 %brmerge.not.i.i, label %if.then7.i.i, label %fmt.fprintln.exit

if.then5.thread.i.i:                              ; preds = %if.done2.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2), !noalias !341
  br label %fmt.fprintln.exit

if.then7.i.i:                                     ; preds = %io.write.exit.i.i
  %56 = sub i64 %53, %52
  %.not.i14.i.i = icmp slt i64 %56, 1
  br i1 %.not.i14.i.i, label %fmt.fprintln.exit, label %if.then.i15.i.i

if.then.i15.i.i:                                  ; preds = %if.then7.i.i
  %57 = load ptr, ptr %b.i, align 8, !noalias !341
  %58 = getelementptr i8, ptr %57, i64 %52
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %57, ptr align 1 %58, i64 %56, i1 false)
  br label %fmt.fprintln.exit

fmt.fprintln.exit:                                ; preds = %fmt.wprintln.exit.i, %if.done.i7.i, %io.write.exit.i.i, %if.then5.thread.i.i, %if.then7.i.i, %if.then.i15.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3), !noalias !306
  call void @llvm.lifetime.end.p0(i64 1024, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %b.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  ret void
}

define internal i32 @os._file_stream_proc-875(ptr %0, i64 %1, ptr nocapture readonly %2, i64 %3, i64 %4, ptr noalias nocapture nonnull writeonly %5, ptr noalias nocapture nonnull readnone %__.context_ptr) {
decls:
  %length.i = alloca i64, align 8
  %hi.i = alloca i32, align 4
  %o.i.i20 = alloca %sys_windows.OVERLAPPED, align 8
  %done.i.i21 = alloca i32, align 4
  %single_write_length.i = alloca i32, align 4
  %o.i.i = alloca %sys_windows.OVERLAPPED, align 8
  %done.i.i = alloca i32, align 4
  %6 = alloca i64, align 8
  switch i64 %1, label %if.done11 [
    i64 0, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 2, label %switch.case.body2
    i64 3, label %switch.case.body3
    i64 4, label %switch.case.body4
    i64 5, label %switch.case.body5
    i64 6, label %switch.case.body6
    i64 7, label %switch.case.body7
    i64 8, label %switch.case.body8
    i64 9, label %common.ret
  ]

switch.case.body:                                 ; preds = %decls
  %7 = tail call x86_stdcallcc i32 @CloseHandle(ptr %0)
  %.not.i = icmp eq i32 %7, 0
  br i1 %.not.i, label %if.then.i, label %if.done11

if.then.i:                                        ; preds = %switch.case.body
  %8 = tail call x86_stdcallcc i32 @GetLastError()
  br label %if.done11

switch.case.body1:                                ; preds = %decls
  %9 = tail call x86_stdcallcc i32 @FlushFileBuffers(ptr %0)
  %.not.i13 = icmp eq i32 %9, 0
  br i1 %.not.i13, label %if.then.i14, label %if.done11

if.then.i14:                                      ; preds = %switch.case.body1
  %10 = tail call x86_stdcallcc i32 @GetLastError()
  br label %if.done11

switch.case.body2:                                ; preds = %decls
  %11 = ptrtoint ptr %0 to i64
  store i64 0, ptr %6, align 8
  %12 = call fastcc i64 @os.read(i64 %11, ptr %2, ptr %6)
  %13 = load i64, ptr %6, align 8
  br label %switch.done

switch.case.body3:                                ; preds = %decls
  %14 = icmp slt i64 %3, 0
  br i1 %14, label %if.done11.fold.split, label %if.done.i

if.done.i:                                        ; preds = %switch.case.body3
  %.elt7.i = getelementptr inbounds { ptr, i64 }, ptr %2, i64 0, i32 1
  %.unpack8.i = load i64, ptr %.elt7.i, align 8, !noalias !349
  %15 = icmp sgt i64 %.unpack8.i, 0
  br i1 %15, label %for.body.lr.ph.i, label %if.done11

for.body.lr.ph.i:                                 ; preds = %if.done.i
  %.unpack.i = load ptr, ptr %2, align 8, !noalias !349
  %o.repack22.i.i = getelementptr inbounds %sys_windows.OVERLAPPED, ptr %o.i.i, i64 0, i32 2
  %o.repack24.i.i = getelementptr inbounds %sys_windows.OVERLAPPED, ptr %o.i.i, i64 0, i32 3
  %o.repack26.i.i = getelementptr inbounds %sys_windows.OVERLAPPED, ptr %o.i.i, i64 0, i32 4
  br label %for.body.i

for.body.i:                                       ; preds = %if.done5.i, %for.body.lr.ph.i
  %b.val1611.i = phi i64 [ %.unpack8.i, %for.body.lr.ph.i ], [ %27, %if.done5.i ]
  %offset.07.i = phi i64 [ %3, %for.body.lr.ph.i ], [ %28, %if.done5.i ]
  %n.06.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %25, %if.done5.i ]
  %b.val35.i = phi ptr [ %.unpack.i, %for.body.lr.ph.i ], [ %26, %if.done5.i ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %o.i.i), !noalias !349
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %done.i.i), !noalias !349
  %spec.store.select.i.i = call i64 @llvm.smin.i64(i64 %b.val1611.i, i64 1073741824)
  %16 = lshr i64 %offset.07.i, 32
  %17 = trunc i64 %16 to i32
  %18 = trunc i64 %offset.07.i to i32
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %o.i.i, i8 0, i64 16, i1 false), !noalias !352
  store i32 %18, ptr %o.repack22.i.i, align 8, !noalias !352
  store i32 %17, ptr %o.repack24.i.i, align 4, !noalias !352
  store ptr null, ptr %o.repack26.i.i, align 8, !noalias !352
  store i32 0, ptr %done.i.i, align 4, !noalias !352
  %19 = trunc i64 %spec.store.select.i.i to i32
  %20 = call x86_stdcallcc i32 @ReadFile(ptr %0, ptr %b.val35.i, i32 %19, ptr nonnull %done.i.i, ptr nonnull %o.i.i), !noalias !352
  %.not.i.i = icmp eq i32 %20, 0
  br i1 %.not.i.i, label %os.pread-848.exit.i, label %os.pread-848.exit.thread.i

os.pread-848.exit.thread.i:                       ; preds = %for.body.i
  %.pre.i.i = load i32, ptr %done.i.i, align 4, !noalias !352
  %21 = zext i32 %.pre.i.i to i64
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %o.i.i), !noalias !349
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %done.i.i), !noalias !349
  br label %if.done5.i

os.pread-848.exit.i:                              ; preds = %for.body.i
  %22 = call x86_stdcallcc i32 @GetLastError(), !noalias !352
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %o.i.i), !noalias !349
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %done.i.i), !noalias !349
  switch i32 %22, label %if.then3.i [
    i32 38, label %if.done11
    i32 0, label %if.done5.i
  ]

if.then3.i:                                       ; preds = %os.pread-848.exit.i
  %23 = zext i32 %22 to i64
  br label %switch.done

if.done5.i:                                       ; preds = %os.pread-848.exit.i, %os.pread-848.exit.thread.i
  %24 = phi i64 [ %21, %os.pread-848.exit.thread.i ], [ 0, %os.pread-848.exit.i ]
  %25 = add i64 %24, %n.06.i
  %26 = getelementptr i8, ptr %b.val35.i, i64 %24
  %27 = sub nsw i64 %b.val1611.i, %24
  %28 = add i64 %24, %offset.07.i
  %29 = icmp sgt i64 %27, 0
  br i1 %29, label %for.body.i, label %if.done11

switch.case.body4:                                ; preds = %decls
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %single_write_length.i)
  %30 = getelementptr inbounds { ptr, i64 }, ptr %2, i64 0, i32 1
  %31 = load i64, ptr %30, align 8, !noalias !355
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %os.write.exit, label %if.done.i16

if.done.i16:                                      ; preds = %switch.case.body4
  store i32 0, ptr %single_write_length.i, align 4, !noalias !355
  %33 = icmp sgt i64 %31, 0
  br i1 %33, label %for.body.i19, label %os.write.exit

for.loop.i:                                       ; preds = %for.body.i19
  %34 = zext i32 %43 to i64
  %35 = add i64 %total_write.02.i, %34
  %36 = icmp slt i64 %35, %31
  br i1 %36, label %for.body.i19, label %os.write.exit

for.body.i19:                                     ; preds = %if.done.i16, %for.loop.i
  %total_write.02.i = phi i64 [ %35, %for.loop.i ], [ 0, %if.done.i16 ]
  %37 = sub i64 %31, %total_write.02.i
  %38 = trunc i64 %37 to i32
  %39 = call i32 @llvm.smin.i32(i32 %38, i32 1073741824)
  %40 = load ptr, ptr %2, align 8, !noalias !355
  %41 = getelementptr i8, ptr %40, i64 %total_write.02.i
  %42 = call x86_stdcallcc i32 @WriteFile(ptr %0, ptr %41, i32 %39, ptr nonnull %single_write_length.i, ptr null), !noalias !355
  %43 = load i32, ptr %single_write_length.i, align 4, !noalias !355
  %44 = icmp ne i32 %43, 0
  %45 = icmp ne i32 %42, 0
  %or.cond.i = select i1 %44, i1 %45, i1 false
  br i1 %or.cond.i, label %for.loop.i, label %if.then1.i

if.then1.i:                                       ; preds = %for.body.i19
  %46 = call x86_stdcallcc i32 @GetLastError(), !noalias !355
  %47 = zext i32 %46 to i64
  br label %os.write.exit

os.write.exit:                                    ; preds = %for.loop.i, %switch.case.body4, %if.done.i16, %if.then1.i
  %total_write.0.lcssa.sink.i = phi i64 [ %total_write.02.i, %if.then1.i ], [ 0, %switch.case.body4 ], [ 0, %if.done.i16 ], [ %35, %for.loop.i ]
  %common.ret.op.i17 = phi i64 [ %47, %if.then1.i ], [ 0, %switch.case.body4 ], [ 0, %if.done.i16 ], [ 0, %for.loop.i ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %single_write_length.i)
  br label %switch.done

switch.case.body5:                                ; preds = %decls
  %48 = icmp slt i64 %3, 0
  br i1 %48, label %if.done11.fold.split, label %if.done.i22

common.ret.loopexit.split.loop.exit.i:            ; preds = %os.pwrite-853.exit.i
  %49 = zext i32 %57 to i64
  br label %switch.done

if.done.i22:                                      ; preds = %switch.case.body5
  %.elt4.i = getelementptr inbounds { ptr, i64 }, ptr %2, i64 0, i32 1
  %.unpack5.i = load i64, ptr %.elt4.i, align 8, !noalias !358
  %50 = icmp sgt i64 %.unpack5.i, 0
  br i1 %50, label %for.body.lr.ph.i25, label %if.done11

for.body.lr.ph.i25:                               ; preds = %if.done.i22
  %.unpack.i26 = load ptr, ptr %2, align 8, !noalias !358
  %o.repack22.i.i27 = getelementptr inbounds %sys_windows.OVERLAPPED, ptr %o.i.i20, i64 0, i32 2
  %o.repack24.i.i28 = getelementptr inbounds %sys_windows.OVERLAPPED, ptr %o.i.i20, i64 0, i32 3
  %o.repack26.i.i29 = getelementptr inbounds %sys_windows.OVERLAPPED, ptr %o.i.i20, i64 0, i32 4
  br label %for.body.i30

for.body.i30:                                     ; preds = %if.done2.i, %for.body.lr.ph.i25
  %b.val1313.i = phi i64 [ %.unpack5.i, %for.body.lr.ph.i25 ], [ %61, %if.done2.i ]
  %offset.010.i = phi i64 [ %3, %for.body.lr.ph.i25 ], [ %62, %if.done2.i ]
  %n.09.i = phi i64 [ 0, %for.body.lr.ph.i25 ], [ %59, %if.done2.i ]
  %b.val68.i = phi ptr [ %.unpack.i26, %for.body.lr.ph.i25 ], [ %60, %if.done2.i ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %o.i.i20), !noalias !358
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %done.i.i21), !noalias !358
  %spec.store.select.i.i31 = call i64 @llvm.smin.i64(i64 %b.val1313.i, i64 1073741824)
  %51 = lshr i64 %offset.010.i, 32
  %52 = trunc i64 %51 to i32
  %53 = trunc i64 %offset.010.i to i32
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %o.i.i20, i8 0, i64 16, i1 false), !noalias !361
  store i32 %53, ptr %o.repack22.i.i27, align 8, !noalias !361
  store i32 %52, ptr %o.repack24.i.i28, align 4, !noalias !361
  store ptr null, ptr %o.repack26.i.i29, align 8, !noalias !361
  store i32 0, ptr %done.i.i21, align 4, !noalias !361
  %54 = trunc i64 %spec.store.select.i.i31 to i32
  %55 = call x86_stdcallcc i32 @WriteFile(ptr %0, ptr %b.val68.i, i32 %54, ptr nonnull %done.i.i21, ptr nonnull %o.i.i20), !noalias !361
  %.not.i.i32 = icmp eq i32 %55, 0
  br i1 %.not.i.i32, label %os.pwrite-853.exit.i, label %os.pwrite-853.exit.thread.i

os.pwrite-853.exit.thread.i:                      ; preds = %for.body.i30
  %.pre.i.i33 = load i32, ptr %done.i.i21, align 4, !noalias !361
  %56 = zext i32 %.pre.i.i33 to i64
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %o.i.i20), !noalias !358
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %done.i.i21), !noalias !358
  br label %if.done2.i

os.pwrite-853.exit.i:                             ; preds = %for.body.i30
  %57 = call x86_stdcallcc i32 @GetLastError(), !noalias !361
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %o.i.i20), !noalias !358
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %done.i.i21), !noalias !358
  %.not.i34 = icmp eq i32 %57, 0
  br i1 %.not.i34, label %if.done2.i, label %common.ret.loopexit.split.loop.exit.i

if.done2.i:                                       ; preds = %os.pwrite-853.exit.i, %os.pwrite-853.exit.thread.i
  %58 = phi i64 [ %56, %os.pwrite-853.exit.thread.i ], [ 0, %os.pwrite-853.exit.i ]
  %59 = add i64 %58, %n.09.i
  %60 = getelementptr i8, ptr %b.val68.i, i64 %58
  %61 = sub nsw i64 %b.val1313.i, %58
  %62 = add i64 %58, %offset.010.i
  %63 = icmp sgt i64 %61, 0
  br i1 %63, label %for.body.i30, label %if.done11

switch.case.body6:                                ; preds = %decls
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %hi.i)
  %64 = lshr i64 %3, 32
  %65 = trunc i64 %64 to i32
  store i32 %65, ptr %hi.i, align 4, !noalias !364
  %66 = tail call x86_stdcallcc i32 @GetFileType(ptr %0), !noalias !364
  %67 = icmp eq i32 %66, 3
  br i1 %67, label %os.seek.exit, label %if.done.i35

if.done.i35:                                      ; preds = %switch.case.body6
  %switch.selectcmp5.i = icmp eq i64 %4, 2
  %switch.selectcmp.i = icmp eq i64 %4, 1
  %switch.select.i = zext i1 %switch.selectcmp.i to i32
  %switch.select6.i = select i1 %switch.selectcmp5.i, i32 2, i32 %switch.select.i
  %68 = trunc i64 %3 to i32
  %69 = call x86_stdcallcc i32 @SetFilePointer(ptr %0, i32 %68, ptr nonnull %hi.i, i32 %switch.select6.i), !noalias !364
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %if.then3.i37, label %if.done4.i

if.then3.i37:                                     ; preds = %if.done.i35
  %71 = call x86_stdcallcc i32 @GetLastError(), !noalias !364
  %72 = zext i32 %71 to i64
  br label %os.seek.exit

if.done4.i:                                       ; preds = %if.done.i35
  %73 = load i32, ptr %hi.i, align 4, !noalias !364
  %74 = sext i32 %73 to i64
  %75 = shl nsw i64 %74, 32
  %76 = zext i32 %69 to i64
  %77 = or i64 %75, %76
  br label %os.seek.exit

os.seek.exit:                                     ; preds = %switch.case.body6, %if.then3.i37, %if.done4.i
  %.sink.i = phi i64 [ %77, %if.done4.i ], [ 0, %if.then3.i37 ], [ 0, %switch.case.body6 ]
  %common.ret.op.i36 = phi i64 [ 0, %if.done4.i ], [ %72, %if.then3.i37 ], [ 536870912, %switch.case.body6 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %hi.i)
  br label %switch.done

switch.case.body7:                                ; preds = %decls
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %length.i)
  store i64 0, ptr %length.i, align 8, !noalias !367
  %78 = call x86_stdcallcc i32 @GetFileSizeEx(ptr %0, ptr nonnull %length.i), !noalias !367
  %.not.i38 = icmp eq i32 %78, 0
  br i1 %.not.i38, label %if.then.i41, label %os.file_size.exit

if.then.i41:                                      ; preds = %switch.case.body7
  %79 = call x86_stdcallcc i32 @GetLastError(), !noalias !367
  %80 = zext i32 %79 to i64
  br label %os.file_size.exit

os.file_size.exit:                                ; preds = %switch.case.body7, %if.then.i41
  %err.0.i40 = phi i64 [ 0, %switch.case.body7 ], [ %80, %if.then.i41 ]
  %81 = load i64, ptr %length.i, align 8, !noalias !367
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %length.i)
  br label %switch.done

switch.case.body8:                                ; preds = %decls
  br label %if.done11

common.ret:                                       ; preds = %switch.done, %decls, %if.done11
  %n.048.sink = phi i64 [ %n.048, %if.done11 ], [ 767, %decls ], [ %n.0, %switch.done ]
  %common.ret.op = phi i32 [ %err.1, %if.done11 ], [ 0, %decls ], [ 1, %switch.done ]
  store i64 %n.048.sink, ptr %5, align 8
  ret i32 %common.ret.op

switch.done:                                      ; preds = %common.ret.loopexit.split.loop.exit.i, %if.then3.i, %os.file_size.exit, %os.seek.exit, %os.write.exit, %switch.case.body2
  %n.0 = phi i64 [ %81, %os.file_size.exit ], [ %.sink.i, %os.seek.exit ], [ %total_write.0.lcssa.sink.i, %os.write.exit ], [ %13, %switch.case.body2 ], [ %n.06.i, %if.then3.i ], [ %n.09.i, %common.ret.loopexit.split.loop.exit.i ]
  %os_err.0 = phi i64 [ %err.0.i40, %os.file_size.exit ], [ %common.ret.op.i36, %os.seek.exit ], [ %common.ret.op.i17, %os.write.exit ], [ %12, %switch.case.body2 ], [ %23, %if.then3.i ], [ %49, %common.ret.loopexit.split.loop.exit.i ]
  switch i64 %os_err.0, label %if.done11.fold.split [
    i64 0, label %if.done11
    i64 38, label %common.ret
  ]

if.done11.fold.split:                             ; preds = %switch.case.body5, %switch.case.body3, %switch.done
  %n.069 = phi i64 [ %n.0, %switch.done ], [ 0, %switch.case.body3 ], [ 0, %switch.case.body5 ]
  br label %if.done11

if.done11:                                        ; preds = %if.done2.i, %if.done5.i, %os.pread-848.exit.i, %if.done.i22, %if.done.i, %switch.done, %if.done11.fold.split, %if.then.i14, %switch.case.body1, %if.then.i, %switch.case.body, %decls, %switch.case.body8
  %n.048 = phi i64 [ %n.0, %switch.done ], [ 0, %switch.case.body8 ], [ 0, %decls ], [ 0, %switch.case.body ], [ 0, %if.then.i ], [ 0, %switch.case.body1 ], [ 0, %if.then.i14 ], [ %n.069, %if.done11.fold.split ], [ 0, %if.done.i22 ], [ 0, %if.done.i ], [ %25, %if.done5.i ], [ %n.06.i, %os.pread-848.exit.i ], [ %59, %if.done2.i ]
  %err.1 = phi i32 [ 0, %switch.done ], [ -1, %switch.case.body8 ], [ 0, %decls ], [ 0, %switch.case.body ], [ 0, %if.then.i ], [ 0, %switch.case.body1 ], [ 0, %if.then.i14 ], [ 14, %if.done11.fold.split ], [ 0, %if.done.i22 ], [ 0, %if.done.i ], [ 0, %os.pread-848.exit.i ], [ 0, %if.done5.i ], [ 0, %if.done2.i ]
  br label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define internal fastcc void @runtime.map_kvh_data_dynamic(i64 %.0.val, ptr noalias nocapture readonly %0, ptr noalias nocapture nonnull writeonly %1, ptr noalias nocapture nonnull writeonly %2, ptr noalias nocapture nonnull writeonly %3, ptr noalias nocapture nonnull writeonly %4) unnamed_addr #8 {
decls:
  %5 = and i64 %.0.val, 63
  %6 = shl nuw i64 1, %5
  %7 = and i64 %.0.val, -64
  %8 = load ptr, ptr %0, align 8
  %9 = getelementptr inbounds %runtime.Map_Cell_Info, ptr %8, i64 0, i32 3
  %10 = load i64, ptr %9, align 8
  %11 = getelementptr inbounds %runtime.Map_Cell_Info, ptr %8, i64 0, i32 2
  %12 = load i64, ptr %11, align 8
  switch i64 %10, label %switch.default.body.i [
    i64 1, label %switch.case.body.i
    i64 2, label %switch.case.body1.i
  ]

switch.case.body.i:                               ; preds = %decls
  %13 = shl i64 %12, %5
  %14 = add i64 %13, %7
  br label %runtime.map_cell_index_dynamic.exit

switch.case.body1.i:                              ; preds = %decls
  %15 = lshr i64 %6, 1
  %16 = load i64, ptr %8, align 8, !alias.scope !370
  %17 = mul i64 %12, %15
  %18 = add i64 %17, %7
  %.not.i.not = icmp eq i64 %5, 0
  %19 = select i1 %.not.i.not, i64 %16, i64 0
  %20 = add i64 %18, %19
  br label %runtime.map_cell_index_dynamic.exit

switch.default.body.i:                            ; preds = %decls
  %21 = udiv i64 %6, %10
  %22 = urem i64 %6, %10
  %23 = load i64, ptr %8, align 8, !alias.scope !370
  %24 = mul i64 %21, %12
  %25 = add i64 %24, %7
  %26 = mul i64 %23, %22
  %27 = add i64 %25, %26
  br label %runtime.map_cell_index_dynamic.exit

runtime.map_cell_index_dynamic.exit:              ; preds = %switch.case.body.i, %switch.case.body1.i, %switch.default.body.i
  %common.ret.op.i = phi i64 [ %14, %switch.case.body.i ], [ %20, %switch.case.body1.i ], [ %27, %switch.default.body.i ]
  %28 = getelementptr inbounds %runtime.Map_Info, ptr %0, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr inbounds %runtime.Map_Cell_Info, ptr %29, i64 0, i32 3
  %31 = load i64, ptr %30, align 8, !alias.scope !373
  %32 = getelementptr inbounds %runtime.Map_Cell_Info, ptr %29, i64 0, i32 2
  %33 = load i64, ptr %32, align 8, !alias.scope !373
  switch i64 %31, label %switch.default.body.i6 [
    i64 1, label %switch.case.body.i5
    i64 2, label %switch.case.body1.i2
  ]

switch.case.body.i5:                              ; preds = %runtime.map_cell_index_dynamic.exit
  %34 = shl i64 %33, %5
  %35 = add i64 %34, %common.ret.op.i
  br label %runtime.map_cell_index_dynamic.exit7

switch.case.body1.i2:                             ; preds = %runtime.map_cell_index_dynamic.exit
  %36 = lshr i64 %6, 1
  %37 = load i64, ptr %29, align 8, !alias.scope !373
  %38 = mul i64 %33, %36
  %39 = add i64 %38, %common.ret.op.i
  %.not.i3.not = icmp eq i64 %5, 0
  %40 = select i1 %.not.i3.not, i64 %37, i64 0
  %41 = add i64 %39, %40
  br label %runtime.map_cell_index_dynamic.exit7

switch.default.body.i6:                           ; preds = %runtime.map_cell_index_dynamic.exit
  %42 = udiv i64 %6, %31
  %43 = urem i64 %6, %31
  %44 = load i64, ptr %29, align 8, !alias.scope !373
  %45 = mul i64 %42, %33
  %46 = add i64 %45, %common.ret.op.i
  %47 = mul i64 %44, %43
  %48 = add i64 %46, %47
  br label %runtime.map_cell_index_dynamic.exit7

runtime.map_cell_index_dynamic.exit7:             ; preds = %switch.case.body.i5, %switch.case.body1.i2, %switch.default.body.i6
  %common.ret.op.i4 = phi i64 [ %35, %switch.case.body.i5 ], [ %41, %switch.case.body1.i2 ], [ %48, %switch.default.body.i6 ]
  %49 = shl i64 8, %5
  %50 = add i64 %49, %common.ret.op.i4
  %51 = inttoptr i64 %common.ret.op.i4 to ptr
  store i64 %7, ptr %1, align 8
  store i64 %common.ret.op.i, ptr %2, align 8
  store ptr %51, ptr %3, align 8
  store i64 %50, ptr %4, align 8
  ret void
}

define internal fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %1, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %2 = alloca i64, align 8
  %buf.i15 = alloca [1 x i8], align 1
  %3 = alloca { ptr, i64 }, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %buf.i5 = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %9 = alloca { ptr, i64 }, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 14
  %13 = load i8, ptr %12, align 1
  store i8 1, ptr %12, align 1
  %14 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %15 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !376
  %16 = load ptr, ptr %14, align 8, !noalias !380
  %.not.i.i = icmp eq ptr %16, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %decls
  %17 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %18 = load ptr, ptr %17, align 8, !noalias !380
  store i64 0, ptr %10, align 8, !noalias !380
  %19 = call i32 %16(ptr %18, i64 4, ptr nonnull @"ggv$99", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !384
  %20 = load i64, ptr %10, align 8, !noalias !380
  %21 = load i64, ptr %15, align 8, !noalias !380
  %22 = add i64 %21, %20
  store i64 %22, ptr %15, align 8, !noalias !380
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %decls, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !376
  %23 = call fastcc i32 @io.write_rune(ptr nonnull %14, i32 %1, ptr nonnull %15, ptr %11, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  store i8 40, ptr %buf.i, align 1, !noalias !385
  store ptr %buf.i, ptr %9, align 8, !noalias !385
  %24 = getelementptr inbounds { ptr, i64 }, ptr %9, i64 0, i32 1
  store i64 1, ptr %24, align 8, !noalias !385
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !385
  %25 = load ptr, ptr %14, align 8, !noalias !388
  %.not.i.i1 = icmp eq ptr %25, null
  br i1 %.not.i.i1, label %io.write_byte.exit, label %if.then.i.i2

if.then.i.i2:                                     ; preds = %io.write_string.exit
  %26 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %27 = load ptr, ptr %26, align 8, !noalias !388
  store i64 0, ptr %8, align 8, !noalias !388
  %28 = call i32 %25(ptr %27, i64 4, ptr nonnull %9, i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !392
  %29 = load i64, ptr %8, align 8, !noalias !388
  %30 = load i64, ptr %15, align 8, !noalias !388
  %31 = add i64 %30, %29
  store i64 %31, ptr %15, align 8, !noalias !388
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %io.write_string.exit, %if.then.i.i2
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !385
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  %32 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 17, i32 1
  %33 = load i64, ptr %32, align 8
  %.not = icmp eq i64 %33, 0
  br i1 %.not, label %if.else, label %if.then

if.then:                                          ; preds = %io.write_byte.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %34 = and i64 %33, 72057594037927935
  %35 = icmp ugt i64 %34, 150
  %n.0.i.i4 = select i1 %35, i64 0, i64 %34
  %36 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i.i4
  store i64 0, ptr %7, align 8, !noalias !393
  %37 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %14, ptr %36, ptr nonnull %15, ptr %7, ptr %__.context_ptr), !noalias !397
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i5)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  store i8 61, ptr %buf.i5, align 1, !noalias !398
  store ptr %buf.i5, ptr %6, align 8, !noalias !398
  %38 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %38, align 8, !noalias !398
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !398
  %39 = load ptr, ptr %14, align 8, !noalias !401
  %.not.i.i6 = icmp eq ptr %39, null
  br i1 %.not.i.i6, label %io.write_byte.exit9, label %if.then.i.i7

if.then.i.i7:                                     ; preds = %if.then
  %40 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %41 = load ptr, ptr %40, align 8, !noalias !401
  store i64 0, ptr %5, align 8, !noalias !401
  %42 = call i32 %39(ptr %41, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !405
  %43 = load i64, ptr %5, align 8, !noalias !401
  %44 = load i64, ptr %15, align 8, !noalias !401
  %45 = add i64 %44, %43
  store i64 %45, ptr %15, align 8, !noalias !401
  br label %io.write_byte.exit9

io.write_byte.exit9:                              ; preds = %if.then, %if.then.i.i7
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !398
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i5)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  %46 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 17
  call fastcc void @fmt.fmt_value(ptr nonnull %0, ptr nonnull %46, i32 118, ptr %__.context_ptr)
  br label %if.done

if.else:                                          ; preds = %io.write_byte.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !406
  %47 = load ptr, ptr %14, align 8, !noalias !410
  %.not.i.i10 = icmp eq ptr %47, null
  br i1 %.not.i.i10, label %io.write_string.exit14, label %if.then.i.i11

if.then.i.i11:                                    ; preds = %if.else
  %48 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %49 = load ptr, ptr %48, align 8, !noalias !410
  store i64 0, ptr %4, align 8, !noalias !410
  %50 = call i32 %47(ptr %49, i64 4, ptr nonnull @"ggv$ea", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !414
  %51 = load i64, ptr %4, align 8, !noalias !410
  %52 = load i64, ptr %15, align 8, !noalias !410
  %53 = add i64 %52, %51
  store i64 %53, ptr %15, align 8, !noalias !410
  br label %io.write_string.exit14

io.write_string.exit14:                           ; preds = %if.else, %if.then.i.i11
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !406
  br label %if.done

if.done:                                          ; preds = %io.write_string.exit14, %io.write_byte.exit9
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i15)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3)
  store i8 41, ptr %buf.i15, align 1, !noalias !415
  store ptr %buf.i15, ptr %3, align 8, !noalias !415
  %54 = getelementptr inbounds { ptr, i64 }, ptr %3, i64 0, i32 1
  store i64 1, ptr %54, align 8, !noalias !415
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2), !noalias !415
  %55 = load ptr, ptr %14, align 8, !noalias !418
  %.not.i.i16 = icmp eq ptr %55, null
  br i1 %.not.i.i16, label %io.write_byte.exit19, label %if.then.i.i17

if.then.i.i17:                                    ; preds = %if.done
  %56 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %57 = load ptr, ptr %56, align 8, !noalias !418
  store i64 0, ptr %2, align 8, !noalias !418
  %58 = call i32 %55(ptr %57, i64 4, ptr nonnull %3, i64 0, i64 0, ptr nonnull %2, ptr nonnull %__.context_ptr), !noalias !422
  %59 = load i64, ptr %2, align 8, !noalias !418
  %60 = load i64, ptr %15, align 8, !noalias !418
  %61 = add i64 %60, %59
  store i64 %61, ptr %15, align 8, !noalias !418
  br label %io.write_byte.exit19

io.write_byte.exit19:                             ; preds = %if.done, %if.then.i.i17
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2), !noalias !415
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i15)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3)
  store i8 %13, ptr %12, align 1
  ret void
}

define internal fastcc void @fmt.fmt_bool(ptr %0, i1 zeroext %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca %..string, align 8
  switch i32 %2, label %switch.default.body [
    i32 116, label %switch.case.body
    i32 118, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %decls, %decls
  %. = select i1 %1, %..string { ptr @"csbs$114", i64 4 }, %..string { ptr @"csbs$115", i64 5 }
  %..elt = extractvalue %..string %., 0
  store ptr %..elt, ptr %3, align 8
  %.repack1 = getelementptr inbounds %..string, ptr %3, i64 0, i32 1
  %..elt2 = extractvalue %..string %., 1
  store i64 %..elt2, ptr %.repack1, align 8
  call fastcc void @fmt.fmt_string(ptr %0, ptr nonnull %3, i32 115, ptr %__.context_ptr)
  br label %switch.done

switch.default.body:                              ; preds = %decls
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %2, ptr %__.context_ptr)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body
  ret void
}

define internal fastcc void @fmt._fmt_int(ptr nocapture %0, i64 %1, i64 %2, i1 zeroext %3, i64 %4, ptr nocapture readonly %5, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %6 = alloca i64, align 8
  %buf.i51 = alloca [1 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %9 = alloca { ptr, i64 }, align 8
  %10 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %11 = alloca { ptr, i64 }, align 8
  %buf = alloca [256 x i8], align 1
  %12 = alloca { ptr, i64 }, align 8
  %13 = alloca %..string, align 8
  %s = alloca %..string, align 8
  br i1 %3, label %if.then.i, label %strconv.is_integer_negative.exit

if.then.i:                                        ; preds = %decls
  %14 = add nsw i64 %4, -8
  %15 = tail call i64 @llvm.fshl.i64(i64 %4, i64 %14, i64 61)
  switch i64 %15, label %switch.default.body.i [
    i64 0, label %strconv.is_integer_negative.exit
    i64 1, label %strconv.is_integer_negative.exit
    i64 3, label %strconv.is_integer_negative.exit
    i64 7, label %strconv.is_integer_negative.exit
  ]

switch.default.body.i:                            ; preds = %if.then.i
  %16 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !alias.scope !423, !noalias !428
  %18 = icmp eq ptr %17, null
  %spec.store.select.i.i = select i1 %18, ptr @runtime.default_assertion_failure_proc, ptr %17
  tail call void %spec.store.select.i.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$105", ptr nonnull @"ggv$104", ptr nonnull %__.context_ptr), !noalias !428
  unreachable

strconv.is_integer_negative.exit:                 ; preds = %if.then.i, %if.then.i, %if.then.i, %if.then.i, %decls
  %19 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 5
  %20 = load i8, ptr %19, align 1
  %.not = icmp eq i8 %20, 0
  br i1 %.not, label %cmp.or, label %if.then

cmp.or:                                           ; preds = %strconv.is_integer_negative.exit
  %21 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 6
  %22 = load i8, ptr %21, align 1
  %.not30 = icmp eq i8 %22, 0
  br i1 %.not30, label %if.done12, label %if.then

if.then:                                          ; preds = %cmp.or, %strconv.is_integer_negative.exit
  %23 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 8
  %24 = load i64, ptr %23, align 8
  %25 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 9
  %26 = load i64, ptr %25, align 8
  %27 = add i64 %24, 3
  %28 = add i64 %27, %26
  %29 = icmp sgt i64 %28, 256
  br i1 %29, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.then
  %30 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !alias.scope !430
  %32 = icmp eq ptr %31, null
  %spec.store.select.i = select i1 %32, ptr @runtime.default_assertion_failure_proc, ptr %31
  tail call void %spec.store.select.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$a0", ptr nonnull @"ggv$9b", ptr nonnull %__.context_ptr)
  unreachable

if.done2:                                         ; preds = %if.then
  %.phi.trans.insert = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 6
  %.pre = load i8, ptr %.phi.trans.insert, align 1
  %33 = icmp eq i8 %.pre, 0
  br i1 %33, label %if.done12, label %if.then3

if.then3:                                         ; preds = %if.done2
  %34 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 9
  %35 = load i64, ptr %34, align 8
  %36 = icmp eq i64 %35, 0
  %37 = icmp eq i64 %1, 0
  %or.cond = select i1 %36, i1 %37, i1 false
  br i1 %or.cond, label %if.then4, label %if.done12

common.ret:                                       ; preds = %if.done28, %fmt.fmt_write_padding.exit
  ret void

if.then4:                                         ; preds = %if.then3
  %38 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  %39 = load i8, ptr %38, align 1
  store i8 0, ptr %38, align 1
  %40 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 8
  %41 = load i64, ptr %40, align 8
  %42 = icmp slt i64 %41, 1
  br i1 %42, label %fmt.fmt_write_padding.exit, label %if.done.i

if.done.i:                                        ; preds = %if.then4
  %43 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 2
  %44 = load i8, ptr %43, align 1, !noalias !433
  %.not.i = icmp eq i8 %44, 0
  %spec.store.select.i48 = select i1 %.not.i, i8 48, i8 32
  %45 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %46 = getelementptr inbounds { ptr, i64 }, ptr %11, i64 0, i32 1
  %47 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %48 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %49 = load ptr, ptr %45, align 8, !noalias !436
  %50 = icmp eq ptr %49, null
  br i1 %50, label %fmt.fmt_write_padding.exit, label %for.body.i

for.body.i:                                       ; preds = %if.done.i, %io.write_byte.exit.i
  %i.03.i = phi i64 [ %57, %io.write_byte.exit.i ], [ 0, %if.done.i ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !433
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11), !noalias !433
  store i8 %spec.store.select.i48, ptr %buf.i.i, align 1, !noalias !442
  store ptr %buf.i.i, ptr %11, align 8, !noalias !442
  store i64 1, ptr %46, align 8, !noalias !442
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !442
  %51 = load ptr, ptr %45, align 8, !noalias !436
  %.not.i.i.i = icmp eq ptr %51, null
  br i1 %.not.i.i.i, label %io.write_byte.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.body.i
  %52 = load ptr, ptr %48, align 8, !noalias !436
  store i64 0, ptr %10, align 8, !noalias !436
  %53 = call i32 %51(ptr %52, i64 4, ptr nonnull %11, i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !443
  %54 = load i64, ptr %10, align 8, !noalias !436
  %55 = load i64, ptr %47, align 8, !noalias !436
  %56 = add i64 %55, %54
  store i64 %56, ptr %47, align 8, !noalias !436
  br label %io.write_byte.exit.i

io.write_byte.exit.i:                             ; preds = %if.then.i.i.i, %for.body.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !442
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !433
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11), !noalias !433
  %57 = add nuw nsw i64 %i.03.i, 1
  %exitcond.not.i = icmp eq i64 %57, %41
  br i1 %exitcond.not.i, label %fmt.fmt_write_padding.exit, label %for.body.i, !llvm.loop !444

fmt.fmt_write_padding.exit:                       ; preds = %io.write_byte.exit.i, %if.done.i, %if.then4
  store i8 %39, ptr %38, align 1
  br label %common.ret

if.done12:                                        ; preds = %cmp.or, %if.done2, %if.then3
  %58 = add nsw i64 %2, -2
  %59 = tail call i64 @llvm.fshl.i64(i64 %2, i64 %58, i64 63)
  switch i64 %59, label %switch.default.body [
    i64 0, label %switch.done
    i64 3, label %switch.done
    i64 4, label %switch.done
    i64 5, label %switch.done
    i64 7, label %switch.done
  ]

switch.default.body:                              ; preds = %if.done12
  %60 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %61 = load ptr, ptr %60, align 8, !alias.scope !446
  %62 = icmp eq ptr %61, null
  %spec.store.select.i49 = select i1 %62, ptr @runtime.default_assertion_failure_proc, ptr %61
  tail call void %spec.store.select.i49(ptr nonnull @"ggv$97", ptr nonnull @"ggv$a2", ptr nonnull @"ggv$9d", ptr nonnull %__.context_ptr)
  unreachable

switch.done:                                      ; preds = %if.done12, %if.done12, %if.done12, %if.done12, %if.done12
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(256) %buf, i8 0, i64 256, i1 false)
  %63 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  %64 = load i8, ptr %63, align 1
  %.not33 = icmp eq i8 %64, 0
  br i1 %.not33, label %if.done15, label %cmp.and13

cmp.and13:                                        ; preds = %switch.done
  %65 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  %66 = load i8, ptr %65, align 1
  %.not42 = icmp eq i8 %66, 0
  %spec.select = zext i1 %.not42 to i8
  br label %if.done15

if.done15:                                        ; preds = %cmp.and13, %switch.done
  %flags.0 = phi i8 [ 0, %switch.done ], [ %spec.select, %cmp.and13 ]
  %67 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 1
  %68 = load i8, ptr %67, align 1
  %.not34 = icmp eq i8 %68, 0
  %69 = or i8 %flags.0, 2
  %spec.select46 = select i1 %.not34, i8 %flags.0, i8 %69
  store ptr %buf, ptr %12, align 8
  %70 = getelementptr inbounds { ptr, i64 }, ptr %12, i64 0, i32 1
  store i64 256, ptr %70, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %13, i8 0, i64 16, i1 false)
  call fastcc void @strconv.append_bits(ptr noalias nonnull %13, ptr nonnull %12, i64 %1, i64 %2, i1 zeroext %3, i64 %4, ptr %5, i8 %spec.select46, ptr %__.context_ptr)
  %.unpack = load ptr, ptr %13, align 8
  %.elt35 = getelementptr inbounds %..string, ptr %13, i64 0, i32 1
  %.unpack36 = load i64, ptr %.elt35, align 8
  store ptr %.unpack, ptr %s, align 8
  %s.repack37 = getelementptr inbounds %..string, ptr %s, i64 0, i32 1
  store i64 %.unpack36, ptr %s.repack37, align 8
  %71 = load i8, ptr %63, align 1
  %.not39 = icmp eq i8 %71, 0
  br i1 %.not39, label %if.done28, label %cmp.and18

cmp.and18:                                        ; preds = %if.done15
  %72 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  %73 = load i8, ptr %72, align 1
  %.not40 = icmp eq i8 %73, 0
  br i1 %.not40, label %if.done28, label %cmp.and19

cmp.and19:                                        ; preds = %cmp.and18
  %74 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 10
  %75 = load i64, ptr %74, align 8
  %76 = icmp eq i64 %75, 0
  %77 = icmp ult i64 %59, 8
  %or.cond64 = and i1 %76, %77
  br i1 %or.cond64, label %switch.hole_check, label %if.done28

switch.hole_check:                                ; preds = %cmp.and19
  %switch.maskindex = trunc i64 %59 to i8
  %switch.shifted = lshr i8 -87, %switch.maskindex
  %78 = and i8 %switch.shifted, 1
  %switch.lobit.not = icmp eq i8 %78, 0
  br i1 %switch.lobit.not, label %if.done28, label %switch.lookup

switch.lookup:                                    ; preds = %switch.hole_check
  %79 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %80 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  store i8 48, ptr %buf.i, align 1, !noalias !449
  store ptr %buf.i, ptr %9, align 8, !noalias !449
  %81 = getelementptr inbounds { ptr, i64 }, ptr %9, i64 0, i32 1
  store i64 1, ptr %81, align 8, !noalias !449
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !449
  %82 = load ptr, ptr %79, align 8, !noalias !287
  %.not.i.i = icmp eq ptr %82, null
  br i1 %.not.i.i, label %io.write_byte.exit.thread, label %io.write_byte.exit

io.write_byte.exit.thread:                        ; preds = %switch.lookup
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !449
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i51)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !452
  br label %io.write_byte.exit55

io.write_byte.exit:                               ; preds = %switch.lookup
  %switch.shiftamt = shl nuw nsw i64 %59, 3
  %switch.downshift = lshr i64 8674630395463098978, %switch.shiftamt
  %switch.masked = trunc i64 %switch.downshift to i8
  %83 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %84 = load ptr, ptr %83, align 8, !noalias !455
  store i64 0, ptr %8, align 8, !noalias !455
  %85 = call i32 %82(ptr %84, i64 4, ptr nonnull %9, i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !459
  %86 = load i64, ptr %8, align 8, !noalias !455
  %87 = load i64, ptr %80, align 8, !noalias !455
  %88 = add i64 %87, %86
  store i64 %88, ptr %80, align 8, !noalias !455
  %.pre61 = load ptr, ptr %79, align 8, !noalias !460
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !449
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i51)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7)
  store i8 %switch.masked, ptr %buf.i51, align 1, !noalias !452
  store ptr %buf.i51, ptr %7, align 8, !noalias !452
  %89 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 1, ptr %89, align 8, !noalias !452
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !452
  %.not.i.i52 = icmp eq ptr %.pre61, null
  br i1 %.not.i.i52, label %io.write_byte.exit55, label %if.then.i.i53

if.then.i.i53:                                    ; preds = %io.write_byte.exit
  %90 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %91 = load ptr, ptr %90, align 8, !noalias !460
  store i64 0, ptr %6, align 8, !noalias !460
  %92 = call i32 %.pre61(ptr %91, i64 4, ptr nonnull %7, i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !464
  %93 = load i64, ptr %6, align 8, !noalias !460
  %94 = load i64, ptr %80, align 8, !noalias !460
  %95 = add i64 %94, %93
  store i64 %95, ptr %80, align 8, !noalias !460
  br label %io.write_byte.exit55

io.write_byte.exit55:                             ; preds = %io.write_byte.exit.thread, %io.write_byte.exit, %if.then.i.i53
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !452
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i51)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7)
  br label %if.done28

if.done28:                                        ; preds = %switch.hole_check, %io.write_byte.exit55, %cmp.and19, %cmp.and18, %if.done15
  %96 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  %97 = load i8, ptr %96, align 1
  store i8 0, ptr %96, align 1
  call fastcc void @fmt._pad(ptr nonnull %0, ptr nonnull %s, ptr %__.context_ptr)
  store i8 %97, ptr %96, align 1
  br label %common.ret
}

define internal fastcc void @fmt._fmt_int_128(ptr nocapture %0, i128 %.0.val, i64 %1, i1 zeroext %2, ptr nocapture readonly %.0.val1, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %buf.i55 = alloca [1 x i8], align 1
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  %a.i = alloca [140 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %9 = alloca { ptr, i64 }, align 8
  %buf = alloca [256 x i8], align 1
  %10 = alloca %..string, align 8
  %s = alloca %..string, align 8
  %11 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 5
  %12 = load i8, ptr %11, align 1
  %.not = icmp eq i8 %12, 0
  br i1 %.not, label %cmp.or, label %if.then

cmp.or:                                           ; preds = %decls
  %13 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 6
  %14 = load i8, ptr %13, align 1
  %.not30 = icmp eq i8 %14, 0
  br i1 %.not30, label %if.done12, label %if.then

if.then:                                          ; preds = %cmp.or, %decls
  %15 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 8
  %16 = load i64, ptr %15, align 8
  %17 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 9
  %18 = load i64, ptr %17, align 8
  %19 = add i64 %16, 3
  %20 = add i64 %19, %18
  %21 = icmp sgt i64 %20, 256
  br i1 %21, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.then
  %22 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %23 = load ptr, ptr %22, align 8, !alias.scope !465
  %24 = icmp eq ptr %23, null
  %spec.store.select.i = select i1 %24, ptr @runtime.default_assertion_failure_proc, ptr %23
  tail call void %spec.store.select.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$a0", ptr nonnull @"ggv$9f", ptr nonnull %__.context_ptr)
  unreachable

if.done2:                                         ; preds = %if.then
  %.phi.trans.insert = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 6
  %.pre = load i8, ptr %.phi.trans.insert, align 1
  %.not31 = icmp eq i8 %.pre, 0
  br i1 %.not31, label %if.done12, label %if.then3

if.then3:                                         ; preds = %if.done2
  %25 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 9
  %26 = load i64, ptr %25, align 8
  %27 = icmp eq i64 %26, 0
  %28 = icmp eq i128 %.0.val, 0
  %or.cond = select i1 %27, i1 %28, i1 false
  br i1 %or.cond, label %if.then4, label %if.done12

common.ret:                                       ; preds = %if.done28, %fmt.fmt_write_padding.exit
  ret void

if.then4:                                         ; preds = %if.then3
  %29 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  %30 = load i8, ptr %29, align 1
  store i8 0, ptr %29, align 1
  %31 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 8
  %32 = load i64, ptr %31, align 8
  %33 = icmp slt i64 %32, 1
  br i1 %33, label %fmt.fmt_write_padding.exit, label %if.done.i

if.done.i:                                        ; preds = %if.then4
  %34 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 2
  %35 = load i8, ptr %34, align 1, !noalias !468
  %.not.i = icmp eq i8 %35, 0
  %spec.store.select.i48 = select i1 %.not.i, i8 48, i8 32
  %36 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %37 = getelementptr inbounds { ptr, i64 }, ptr %9, i64 0, i32 1
  %38 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %39 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %40 = load ptr, ptr %36, align 8, !noalias !471
  %41 = icmp eq ptr %40, null
  br i1 %41, label %fmt.fmt_write_padding.exit, label %for.body.i

for.body.i:                                       ; preds = %if.done.i, %io.write_byte.exit.i
  %i.03.i = phi i64 [ %48, %io.write_byte.exit.i ], [ 0, %if.done.i ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !468
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9), !noalias !468
  store i8 %spec.store.select.i48, ptr %buf.i.i, align 1, !noalias !477
  store ptr %buf.i.i, ptr %9, align 8, !noalias !477
  store i64 1, ptr %37, align 8, !noalias !477
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !477
  %42 = load ptr, ptr %36, align 8, !noalias !471
  %.not.i.i.i = icmp eq ptr %42, null
  br i1 %.not.i.i.i, label %io.write_byte.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.body.i
  %43 = load ptr, ptr %39, align 8, !noalias !471
  store i64 0, ptr %8, align 8, !noalias !471
  %44 = call i32 %42(ptr %43, i64 4, ptr nonnull %9, i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !478
  %45 = load i64, ptr %8, align 8, !noalias !471
  %46 = load i64, ptr %38, align 8, !noalias !471
  %47 = add i64 %46, %45
  store i64 %47, ptr %38, align 8, !noalias !471
  br label %io.write_byte.exit.i

io.write_byte.exit.i:                             ; preds = %if.then.i.i.i, %for.body.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !477
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !468
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9), !noalias !468
  %48 = add nuw nsw i64 %i.03.i, 1
  %exitcond.not.i = icmp eq i64 %48, %32
  br i1 %exitcond.not.i, label %fmt.fmt_write_padding.exit, label %for.body.i, !llvm.loop !444

fmt.fmt_write_padding.exit:                       ; preds = %io.write_byte.exit.i, %if.done.i, %if.then4
  store i8 %30, ptr %29, align 1
  br label %common.ret

if.done12:                                        ; preds = %cmp.or, %if.done2, %if.then3
  %49 = add nsw i64 %1, -2
  %50 = tail call i64 @llvm.fshl.i64(i64 %1, i64 %49, i64 63)
  switch i64 %50, label %switch.default.body [
    i64 0, label %switch.done
    i64 3, label %switch.done
    i64 4, label %switch.done
    i64 5, label %switch.done
    i64 7, label %switch.done
  ]

switch.default.body:                              ; preds = %if.done12
  %51 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %52 = load ptr, ptr %51, align 8, !alias.scope !479
  %53 = icmp eq ptr %52, null
  %spec.store.select.i49 = select i1 %53, ptr @runtime.default_assertion_failure_proc, ptr %52
  tail call void %spec.store.select.i49(ptr nonnull @"ggv$97", ptr nonnull @"ggv$a2", ptr nonnull @"ggv$a1", ptr nonnull %__.context_ptr)
  unreachable

switch.done:                                      ; preds = %if.done12, %if.done12, %if.done12, %if.done12, %if.done12
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(256) %buf, i8 0, i64 256, i1 false)
  %54 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  %55 = load i8, ptr %54, align 1
  %.not33 = icmp eq i8 %55, 0
  br i1 %.not33, label %if.done15, label %cmp.and13

cmp.and13:                                        ; preds = %switch.done
  %56 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  %57 = load i8, ptr %56, align 1
  %.not42 = icmp eq i8 %57, 0
  %spec.select = zext i1 %.not42 to i8
  br label %if.done15

if.done15:                                        ; preds = %cmp.and13, %switch.done
  %flags.0 = phi i8 [ 0, %switch.done ], [ %spec.select, %cmp.and13 ]
  %58 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 1
  %59 = load i8, ptr %58, align 1
  %.not34 = icmp ne i8 %59, 0
  call void @llvm.lifetime.start.p0(i64 140, ptr nonnull %a.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(140) %a.i, i8 0, i64 140, i1 false), !noalias !482
  br i1 %2, label %switch.case.body7.i.i, label %strconv.is_integer_negative_128.exit.i

switch.case.body7.i.i:                            ; preds = %if.done15
  %.lobit.i.i = lshr i128 %.0.val, 127
  %60 = trunc i128 %.lobit.i.i to i8
  %61 = tail call i128 @llvm.abs.i128(i128 %.0.val, i1 false)
  br label %strconv.is_integer_negative_128.exit.i

strconv.is_integer_negative_128.exit.i:           ; preds = %switch.case.body7.i.i, %if.done15
  %u.0.i.i = phi i128 [ %61, %switch.case.body7.i.i ], [ %.0.val, %if.done15 ]
  %neg.0.i.i = phi i8 [ %60, %switch.case.body7.i.i ], [ 0, %if.done15 ]
  %62 = zext i64 %1 to i128
  %.not3.not.i = icmp ult i128 %u.0.i.i, %62
  br i1 %.not3.not.i, label %for.done.i, label %for.body.i51

for.body.i51:                                     ; preds = %strconv.is_integer_negative_128.exit.i, %for.body.i51
  %u.05.i = phi i128 [ %64, %for.body.i51 ], [ %u.0.i.i, %strconv.is_integer_negative_128.exit.i ]
  %i.04.i = phi i64 [ %63, %for.body.i51 ], [ 140, %strconv.is_integer_negative_128.exit.i ]
  %63 = add nsw i64 %i.04.i, -1
  %u.05.i.frozen = freeze i128 %u.05.i
  %.frozen = freeze i128 %62
  %64 = udiv i128 %u.05.i.frozen, %.frozen
  %65 = mul i128 %64, %.frozen
  %.decomposed = sub i128 %u.05.i.frozen, %65
  %66 = trunc i128 %.decomposed to i64
  %67 = getelementptr [140 x i8], ptr %a.i, i64 0, i64 %63
  %68 = and i64 %66, 4294967295
  %69 = getelementptr i8, ptr %.0.val1, i64 %68
  %70 = load i8, ptr %69, align 1, !noalias !482
  store i8 %70, ptr %67, align 1, !noalias !482
  %.not.i52 = icmp uge i128 %64, %62
  %71 = icmp ne i64 %i.04.i, 0
  %or.cond.i = and i1 %71, %.not.i52
  br i1 %or.cond.i, label %for.body.i51, label %for.done.i

for.done.i:                                       ; preds = %for.body.i51, %strconv.is_integer_negative_128.exit.i
  %i.0.lcssa.i = phi i64 [ 140, %strconv.is_integer_negative_128.exit.i ], [ %63, %for.body.i51 ]
  %u.0.lcssa.i = phi i128 [ %u.0.i.i, %strconv.is_integer_negative_128.exit.i ], [ %64, %for.body.i51 ]
  %72 = add nsw i64 %i.0.lcssa.i, -1
  %73 = getelementptr [140 x i8], ptr %a.i, i64 0, i64 %72
  %74 = urem i128 %u.0.lcssa.i, %62
  %75 = trunc i128 %74 to i64
  %76 = getelementptr i8, ptr %.0.val1, i64 %75
  %77 = load i8, ptr %76, align 1, !noalias !482
  store i8 %77, ptr %73, align 1, !noalias !482
  %.not14.i = icmp ne i8 %flags.0, 0
  %78 = icmp ult i64 %50, 8
  %or.cond2 = and i1 %.not14.i, %78
  br i1 %or.cond2, label %switch.hole_check, label %if.done8.i

switch.hole_check:                                ; preds = %for.done.i
  %switch.maskindex = trunc i64 %50 to i8
  %switch.shifted = lshr i8 -71, %switch.maskindex
  %79 = and i8 %switch.shifted, 1
  %switch.lobit.not = icmp eq i8 %79, 0
  br i1 %switch.lobit.not, label %if.done8.i, label %switch.lookup

switch.lookup:                                    ; preds = %switch.hole_check
  %switch.shiftamt = shl nuw nsw i64 %50, 3
  %switch.downshift = lshr i64 8674630404053033570, %switch.shiftamt
  %switch.masked = trunc i64 %switch.downshift to i8
  %.sink10.i = add nsw i64 %i.0.lcssa.i, -2
  %80 = getelementptr [140 x i8], ptr %a.i, i64 0, i64 %.sink10.i
  store i8 %switch.masked, ptr %80, align 1, !noalias !482
  %81 = add nsw i64 %i.0.lcssa.i, -3
  %82 = getelementptr [140 x i8], ptr %a.i, i64 0, i64 %81
  store i8 48, ptr %82, align 1, !noalias !482
  br label %if.done8.i

if.done8.i:                                       ; preds = %switch.hole_check, %switch.lookup, %for.done.i
  %i.2.i = phi i64 [ %81, %switch.lookup ], [ %72, %for.done.i ], [ %72, %switch.hole_check ]
  %83 = icmp eq i8 %neg.0.i.i, 1
  %brmerge = select i1 %83, i1 true, i1 %.not34
  br i1 %brmerge, label %switch.done12.sink.split.i, label %switch.done12.i

switch.done12.sink.split.i:                       ; preds = %if.done8.i
  %.mux = select i1 %83, i8 45, i8 43
  %84 = add nsw i64 %i.2.i, -1
  %85 = getelementptr [140 x i8], ptr %a.i, i64 0, i64 %84
  store i8 %.mux, ptr %85, align 1, !noalias !482
  br label %switch.done12.i

switch.done12.i:                                  ; preds = %if.done8.i, %switch.done12.sink.split.i
  %i.3.i = phi i64 [ %84, %switch.done12.sink.split.i ], [ %i.2.i, %if.done8.i ]
  %86 = sub nsw i64 140, %i.3.i
  %87 = tail call i64 @llvm.smin.i64(i64 %86, i64 256)
  %.not.i.i = icmp slt i64 %87, 1
  br i1 %.not.i.i, label %strconv.append_bits_128.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %switch.done12.i
  %88 = getelementptr i8, ptr %a.i, i64 %i.3.i
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %buf, ptr align 1 %88, i64 %87, i1 false), !noalias !482
  br label %strconv.append_bits_128.exit

strconv.append_bits_128.exit:                     ; preds = %switch.done12.i, %if.then.i.i
  store ptr %buf, ptr %7, align 8, !noalias !482
  %89 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 %86, ptr %89, align 8, !noalias !482
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %10, ptr nonnull align 8 %7, i64 16, i1 false)
  call void @llvm.lifetime.end.p0(i64 140, ptr nonnull %a.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7)
  %.unpack = load ptr, ptr %10, align 8
  %.elt35 = getelementptr inbounds %..string, ptr %10, i64 0, i32 1
  %.unpack36 = load i64, ptr %.elt35, align 8
  store ptr %.unpack, ptr %s, align 8
  %s.repack37 = getelementptr inbounds %..string, ptr %s, i64 0, i32 1
  store i64 %.unpack36, ptr %s.repack37, align 8
  br i1 %.not33, label %if.done28, label %cmp.and18

cmp.and18:                                        ; preds = %strconv.append_bits_128.exit
  %90 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  %91 = load i8, ptr %90, align 1
  %.not40 = icmp eq i8 %91, 0
  br i1 %.not40, label %if.done28, label %cmp.and19

cmp.and19:                                        ; preds = %cmp.and18
  %92 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 10
  %93 = load i64, ptr %92, align 8
  %94 = icmp eq i64 %93, 0
  %95 = icmp ult i64 %50, 8
  %or.cond12 = and i1 %94, %95
  br i1 %or.cond12, label %switch.hole_check4, label %if.done28

switch.hole_check4:                               ; preds = %cmp.and19
  %switch.maskindex6 = trunc i64 %50 to i8
  %switch.shifted7 = lshr i8 -87, %switch.maskindex6
  %96 = and i8 %switch.shifted7, 1
  %switch.lobit8.not = icmp eq i8 %96, 0
  br i1 %switch.lobit8.not, label %if.done28, label %switch.lookup5

switch.lookup5:                                   ; preds = %switch.hole_check4
  %97 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %98 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  store i8 48, ptr %buf.i, align 1, !noalias !485
  store ptr %buf.i, ptr %6, align 8, !noalias !485
  %99 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %99, align 8, !noalias !485
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !485
  %100 = load ptr, ptr %97, align 8, !noalias !287
  %.not.i.i53 = icmp eq ptr %100, null
  br i1 %.not.i.i53, label %io.write_byte.exit.thread, label %io.write_byte.exit

io.write_byte.exit.thread:                        ; preds = %switch.lookup5
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !485
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i55)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !488
  br label %io.write_byte.exit59

io.write_byte.exit:                               ; preds = %switch.lookup5
  %switch.shiftamt9 = shl nuw nsw i64 %50, 3
  %switch.downshift10 = lshr i64 8674630395463098978, %switch.shiftamt9
  %switch.masked11 = trunc i64 %switch.downshift10 to i8
  %101 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %102 = load ptr, ptr %101, align 8, !noalias !491
  store i64 0, ptr %5, align 8, !noalias !491
  %103 = call i32 %100(ptr %102, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !495
  %104 = load i64, ptr %5, align 8, !noalias !491
  %105 = load i64, ptr %98, align 8, !noalias !491
  %106 = add i64 %105, %104
  store i64 %106, ptr %98, align 8, !noalias !491
  %.pre10 = load ptr, ptr %97, align 8, !noalias !496
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !485
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i55)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4)
  store i8 %switch.masked11, ptr %buf.i55, align 1, !noalias !488
  store ptr %buf.i55, ptr %4, align 8, !noalias !488
  %107 = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  store i64 1, ptr %107, align 8, !noalias !488
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !488
  %.not.i.i56 = icmp eq ptr %.pre10, null
  br i1 %.not.i.i56, label %io.write_byte.exit59, label %if.then.i.i57

if.then.i.i57:                                    ; preds = %io.write_byte.exit
  %108 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %109 = load ptr, ptr %108, align 8, !noalias !496
  store i64 0, ptr %3, align 8, !noalias !496
  %110 = call i32 %.pre10(ptr %109, i64 4, ptr nonnull %4, i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !500
  %111 = load i64, ptr %3, align 8, !noalias !496
  %112 = load i64, ptr %98, align 8, !noalias !496
  %113 = add i64 %112, %111
  store i64 %113, ptr %98, align 8, !noalias !496
  br label %io.write_byte.exit59

io.write_byte.exit59:                             ; preds = %io.write_byte.exit.thread, %io.write_byte.exit, %if.then.i.i57
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !488
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i55)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4)
  br label %if.done28

if.done28:                                        ; preds = %switch.hole_check4, %io.write_byte.exit59, %cmp.and19, %cmp.and18, %strconv.append_bits_128.exit
  %114 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  %115 = load i8, ptr %114, align 1
  store i8 0, ptr %114, align 1
  call fastcc void @fmt._pad(ptr nonnull %0, ptr nonnull %s, ptr %__.context_ptr)
  store i8 %115, ptr %114, align 1
  br label %common.ret
}

define internal fastcc void @fmt._fmt_memory(ptr nocapture %0, i64 %1, i1 zeroext %2, i64 %3, ptr nocapture readonly %4, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %buf = alloca [256 x i8], align 1
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca %..string, align 8
  %str = alloca %..string, align 8
  br i1 %2, label %if.then.i, label %strconv.is_integer_negative.exit

if.then.i:                                        ; preds = %decls
  %7 = add nsw i64 %3, -8
  %8 = tail call i64 @llvm.fshl.i64(i64 %3, i64 %7, i64 61)
  switch i64 %8, label %switch.default.body.i [
    i64 0, label %if.done.thread56
    i64 1, label %switch.case.body1.i
    i64 3, label %switch.case.body3.i
    i64 7, label %switch.case.body5.i
  ]

if.done.thread56:                                 ; preds = %if.then.i
  %9 = and i64 %1, 128
  %10 = icmp ne i64 %9, 0
  %sext8.i = shl i64 %1, 56
  %11 = ashr exact i64 %sext8.i, 56
  %12 = tail call i64 @llvm.abs.i64(i64 %11, i1 true)
  %13 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 9
  %14 = load i64, ptr %13, align 8
  br label %for.done

switch.case.body1.i:                              ; preds = %if.then.i
  %15 = and i64 %1, 32768
  %16 = icmp ne i64 %15, 0
  %sext7.i = shl i64 %1, 48
  %17 = ashr exact i64 %sext7.i, 48
  %18 = tail call i64 @llvm.abs.i64(i64 %17, i1 true)
  br label %strconv.is_integer_negative.exit

switch.case.body3.i:                              ; preds = %if.then.i
  %19 = and i64 %1, 2147483648
  %20 = icmp ne i64 %19, 0
  %sext.i = shl i64 %1, 32
  %21 = ashr exact i64 %sext.i, 32
  %22 = tail call i64 @llvm.abs.i64(i64 %21, i1 true)
  br label %strconv.is_integer_negative.exit

switch.case.body5.i:                              ; preds = %if.then.i
  %23 = icmp slt i64 %1, 0
  %24 = tail call i64 @llvm.abs.i64(i64 %1, i1 false)
  br label %strconv.is_integer_negative.exit

switch.default.body.i:                            ; preds = %if.then.i
  %25 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !alias.scope !501, !noalias !506
  %27 = icmp eq ptr %26, null
  %spec.store.select.i.i = select i1 %27, ptr @runtime.default_assertion_failure_proc, ptr %26
  tail call void %spec.store.select.i.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$105", ptr nonnull @"ggv$104", ptr nonnull %__.context_ptr), !noalias !506
  unreachable

strconv.is_integer_negative.exit:                 ; preds = %decls, %switch.case.body1.i, %switch.case.body3.i, %switch.case.body5.i
  %u.0.i = phi i64 [ %24, %switch.case.body5.i ], [ %22, %switch.case.body3.i ], [ %18, %switch.case.body1.i ], [ %1, %decls ]
  %neg.0.shrunk.i = phi i1 [ %23, %switch.case.body5.i ], [ %20, %switch.case.body3.i ], [ %16, %switch.case.body1.i ], [ false, %decls ]
  %28 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 6
  %29 = load i8, ptr %28, align 1
  %.not = icmp ne i8 %29, 0
  %30 = icmp ult i64 %u.0.i, 1024
  %or.cond = select i1 %.not, i1 true, i1 %30
  br i1 %or.cond, label %if.done, label %for.body.preheader

if.done:                                          ; preds = %strconv.is_integer_negative.exit
  %31 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 9
  %32 = load i64, ptr %31, align 8
  %33 = icmp ugt i64 %u.0.i, 1023
  br i1 %33, label %for.body.preheader, label %for.done

for.body.preheader:                               ; preds = %strconv.is_integer_negative.exit, %if.done
  %34 = phi i64 [ %32, %if.done ], [ 2, %strconv.is_integer_negative.exit ]
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %n.047 = phi i64 [ %38, %for.body ], [ %u.0.i, %for.body.preheader ]
  %unit_len.046 = phi i64 [ %spec.select30, %for.body ], [ 1, %for.body.preheader ]
  %off.045 = phi i64 [ %spec.select, %for.body ], [ 0, %for.body.preheader ]
  %div.044 = phi i64 [ %35, %for.body ], [ 1, %for.body.preheader ]
  %35 = shl i64 %div.044, 10
  %36 = add i64 %off.045, 4
  %37 = icmp eq i64 %unit_len.046, 1
  %spec.select = select i1 %37, i64 2, i64 %36
  %spec.select30 = select i1 %37, i64 3, i64 %unit_len.046
  %38 = lshr i64 %n.047, 10
  %39 = icmp ugt i64 %n.047, 1048575
  br i1 %39, label %for.body, label %for.done.loopexit

for.done.loopexit:                                ; preds = %for.body
  %40 = sitofp i64 %35 to double
  br label %for.done

for.done:                                         ; preds = %if.done.thread56, %for.done.loopexit, %if.done
  %41 = phi i64 [ %32, %if.done ], [ %34, %for.done.loopexit ], [ %14, %if.done.thread56 ]
  %u.0.i3854 = phi i64 [ %u.0.i, %if.done ], [ %u.0.i, %for.done.loopexit ], [ %12, %if.done.thread56 ]
  %neg.0.i4052.in = phi i1 [ %neg.0.shrunk.i, %if.done ], [ %neg.0.shrunk.i, %for.done.loopexit ], [ %10, %if.done.thread56 ]
  %div.0.lcssa = phi double [ 1.000000e+00, %if.done ], [ %40, %for.done.loopexit ], [ 1.000000e+00, %if.done.thread56 ]
  %off.0.lcssa = phi i64 [ 0, %if.done ], [ %spec.select, %for.done.loopexit ], [ 0, %if.done.thread56 ]
  %unit_len.0.lcssa = phi i64 [ 1, %if.done ], [ %spec.select30, %for.done.loopexit ], [ 1, %if.done.thread56 ]
  %42 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  %43 = load i8, ptr %42, align 1
  %.not12 = icmp eq i8 %43, 0
  %not..not12 = xor i1 %.not12, true
  %44 = zext i1 %not..not12 to i64
  %unit_len.2 = add nuw nsw i64 %unit_len.0.lcssa, %44
  %45 = uitofp i64 %u.0.i3854 to double
  %46 = fdiv double %45, %div.0.lcssa
  %47 = fneg double %46
  %amt.0 = select i1 %neg.0.i4052.in, double %47, double %46
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(256) %buf, i8 0, i64 256, i1 false)
  store ptr %buf, ptr %5, align 8
  %48 = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  store i64 256, ptr %48, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %6, i8 0, i64 16, i1 false)
  call fastcc void @strconv.append_float(ptr noalias nonnull %6, ptr nonnull %5, double %amt.0, i8 102, i64 %41, i64 64, ptr %__.context_ptr)
  %.elt14 = getelementptr inbounds %..string, ptr %6, i64 0, i32 1
  %.unpack15 = load i64, ptr %.elt14, align 8
  %str.repack16 = getelementptr inbounds %..string, ptr %str, i64 0, i32 1
  %49 = sub i64 256, %.unpack15
  %50 = call i64 @llvm.smin.i64(i64 %49, i64 %unit_len.2)
  %.not.i = icmp slt i64 %50, 1
  br i1 %.not.i, label %runtime.copy_from_string-21865.exit, label %if.then.i32

if.then.i32:                                      ; preds = %for.done
  %51 = load ptr, ptr %4, align 8
  %52 = zext i1 %.not12 to i64
  %off.2 = add i64 %off.0.lcssa, %52
  %53 = getelementptr i8, ptr %51, i64 %off.2
  %54 = getelementptr i8, ptr %buf, i64 %.unpack15
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %54, ptr align 1 %53, i64 %50, i1 false)
  br label %runtime.copy_from_string-21865.exit

runtime.copy_from_string-21865.exit:              ; preds = %for.done, %if.then.i32
  %55 = add i64 %.unpack15, %unit_len.2
  store ptr %buf, ptr %str, align 8
  store i64 %55, ptr %str.repack16, align 8
  %56 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 1
  %57 = load i8, ptr %56, align 1
  %.not23 = icmp eq i8 %57, 0
  %58 = load i8, ptr %buf, align 1
  %59 = icmp eq i8 %58, 43
  %or.cond43 = select i1 %.not23, i1 %59, i1 false
  br i1 %or.cond43, label %cmp.and, label %if.done11

cmp.and:                                          ; preds = %runtime.copy_from_string-21865.exit
  %60 = getelementptr inbounds i8, ptr %buf, i64 1
  %61 = load i8, ptr %60, align 1
  %.not24 = icmp eq i8 %61, 73
  br i1 %.not24, label %if.done11, label %if.then9

if.then9:                                         ; preds = %cmp.and
  %62 = add i64 %55, -1
  store ptr %60, ptr %str, align 8
  store i64 %62, ptr %str.repack16, align 8
  br label %if.done11

if.done11:                                        ; preds = %cmp.and, %if.then9, %runtime.copy_from_string-21865.exit
  call fastcc void @fmt._pad(ptr nonnull %0, ptr nonnull %str, ptr %__.context_ptr)
  ret void
}

define internal fastcc void @fmt.fmt_rune(ptr %0, i32 %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %buf.i.i33.i = alloca [1 x i8], align 1
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %buf.i.i.i = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  switch i32 %2, label %switch.default.body [
    i32 99, label %switch.case.body
    i32 114, label %switch.case.body
    i32 118, label %switch.case.body
    i32 113, label %switch.case.body1
  ]

switch.case.body:                                 ; preds = %decls, %decls, %decls
  %9 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %10 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %11 = call fastcc i32 @io.write_rune(ptr nonnull %9, i32 %1, ptr nonnull %10, ptr %8, ptr %__.context_ptr)
  br label %switch.done

switch.case.body1:                                ; preds = %decls
  %12 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %13 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i.i), !noalias !508
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6), !noalias !508
  store i8 39, ptr %buf.i.i.i, align 1, !noalias !513
  store ptr %buf.i.i.i, ptr %6, align 8, !noalias !513
  %14 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %14, align 8, !noalias !513
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !513
  %15 = load ptr, ptr %13, align 8, !noalias !516
  %.not.i.i.i.i = icmp eq ptr %15, null
  br i1 %.not.i.i.i.i, label %io.write_quoted_rune._write_byte-0.exit.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %switch.case.body1
  %16 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %17 = load ptr, ptr %16, align 8, !noalias !516
  store i64 0, ptr %5, align 8, !noalias !516
  %18 = call i32 %15(ptr %17, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !520
  %19 = icmp eq i32 %18, 0
  %20 = zext i1 %19 to i64
  br label %io.write_quoted_rune._write_byte-0.exit.i

io.write_quoted_rune._write_byte-0.exit.i:        ; preds = %if.then.i.i.i.i, %switch.case.body1
  %err.0.i.i.i.i = phi i64 [ %20, %if.then.i.i.i.i ], [ 0, %switch.case.body1 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !513
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i.i), !noalias !508
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !508
  store i64 0, ptr %7, align 8, !noalias !521
  %21 = call fastcc i32 @io.write_escaped_rune(ptr nonnull %13, i32 %1, i8 39, ptr %7, ptr %__.context_ptr)
  %22 = load i64, ptr %7, align 8, !noalias !521
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i33.i), !noalias !522
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4), !noalias !522
  store i8 39, ptr %buf.i.i33.i, align 1, !noalias !525
  store ptr %buf.i.i33.i, ptr %4, align 8, !noalias !525
  %23 = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  store i64 1, ptr %23, align 8, !noalias !525
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !525
  %24 = load ptr, ptr %13, align 8, !noalias !528
  %.not.i.i.i34.i = icmp eq ptr %24, null
  br i1 %.not.i.i.i34.i, label %io.write_quoted_rune.exit, label %if.then.i.i.i35.i

if.then.i.i.i35.i:                                ; preds = %io.write_quoted_rune._write_byte-0.exit.i
  %25 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %26 = load ptr, ptr %25, align 8, !noalias !528
  store i64 0, ptr %3, align 8, !noalias !528
  %27 = call i32 %24(ptr %26, i64 4, ptr nonnull %4, i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !532
  %28 = icmp eq i32 %27, 0
  %29 = zext i1 %28 to i64
  br label %io.write_quoted_rune.exit

io.write_quoted_rune.exit:                        ; preds = %io.write_quoted_rune._write_byte-0.exit.i, %if.then.i.i.i35.i
  %err.0.i.i.i36.i = phi i64 [ %29, %if.then.i.i.i35.i ], [ 0, %io.write_quoted_rune._write_byte-0.exit.i ]
  %30 = add i64 %22, %err.0.i.i.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !525
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i33.i), !noalias !522
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !522
  %31 = add i64 %30, %err.0.i.i.i36.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  %32 = load i64, ptr %12, align 8
  %33 = add i64 %31, %32
  store i64 %33, ptr %12, align 8
  br label %switch.done

switch.default.body:                              ; preds = %decls
  %34 = sext i32 %1 to i64
  tail call fastcc void @fmt.fmt_int(ptr %0, i64 %34, i1 zeroext false, i64 32, i32 %2, ptr %__.context_ptr)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %io.write_quoted_rune.exit, %switch.case.body
  ret void
}

define internal fastcc void @fmt.fmt_int(ptr %0, i64 %1, i1 zeroext %2, i64 %3, i32 %4, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %5 = alloca i64, align 8
  switch i32 %4, label %switch.default.body [
    i32 118, label %switch.case.body
    i32 98, label %switch.case.body1
    i32 111, label %switch.case.body2
    i32 105, label %switch.case.body3
    i32 100, label %switch.case.body3
    i32 122, label %switch.case.body4
    i32 120, label %switch.case.body5
    i32 88, label %switch.case.body6
    i32 99, label %switch.case.body7
    i32 114, label %switch.case.body7
    i32 85, label %switch.case.body8
    i32 109, label %switch.case.body9
    i32 77, label %switch.case.body10
  ]

switch.case.body:                                 ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %1, i64 10, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__DIGITS_LOWER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body1:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %1, i64 2, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__DIGITS_LOWER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body2:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %1, i64 8, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__DIGITS_LOWER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body3:                                ; preds = %decls, %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %1, i64 10, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__DIGITS_LOWER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body4:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %1, i64 12, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__DIGITS_LOWER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body5:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %1, i64 16, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__DIGITS_LOWER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body6:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %1, i64 16, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body7:                                ; preds = %decls, %decls
  %6 = trunc i64 %1 to i32
  tail call fastcc void @fmt.fmt_rune(ptr %0, i32 %6, i32 %4, ptr %__.context_ptr)
  br label %switch.done

switch.case.body8:                                ; preds = %decls
  %7 = trunc i64 %1 to i32
  %or.cond = icmp ugt i32 %7, 1114111
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %switch.case.body8
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 85, ptr %__.context_ptr)
  br label %switch.done

if.else:                                          ; preds = %switch.case.body8
  %8 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !533
  %9 = load ptr, ptr %8, align 8, !noalias !537
  %.not.i.i = icmp eq ptr %9, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.else
  %10 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %11 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %12 = load ptr, ptr %11, align 8, !noalias !537
  store i64 0, ptr %5, align 8, !noalias !537
  %13 = call i32 %9(ptr %12, i64 4, ptr nonnull @"ggv$a4", i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !541
  %14 = load i64, ptr %5, align 8, !noalias !537
  %15 = load i64, ptr %10, align 8, !noalias !537
  %16 = add i64 %15, %14
  store i64 %16, ptr %10, align 8, !noalias !537
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.else, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !533
  call fastcc void @fmt._fmt_int(ptr nonnull %0, i64 %1, i64 16, i1 zeroext false, i64 %3, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body9:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_memory(ptr %0, i64 %1, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__MEMORY_LOWER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body10:                               ; preds = %decls
  tail call fastcc void @fmt._fmt_memory(ptr %0, i64 %1, i1 zeroext %2, i64 %3, ptr nonnull @fmt.__MEMORY_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.default.body:                              ; preds = %decls
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %4, ptr %__.context_ptr)
  br label %switch.done

switch.done:                                      ; preds = %if.then, %io.write_string.exit, %switch.default.body, %switch.case.body10, %switch.case.body9, %switch.case.body7, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %switch.case.body
  ret void
}

define internal fastcc void @fmt.fmt_int_128(ptr %0, ptr nocapture readonly %1, i1 zeroext %2, i32 %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  switch i32 %3, label %switch.default.body [
    i32 118, label %switch.case.body
    i32 98, label %switch.case.body1
    i32 111, label %switch.case.body2
    i32 105, label %switch.case.body3
    i32 100, label %switch.case.body3
    i32 122, label %switch.case.body4
    i32 120, label %switch.case.body5
    i32 88, label %switch.case.body6
    i32 99, label %switch.case.body7
    i32 114, label %switch.case.body7
    i32 85, label %switch.case.body8
  ]

switch.case.body:                                 ; preds = %decls
  %.val21 = load i128, ptr %1, align 8
  %fmt.__DIGITS_LOWER.val22 = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  tail call fastcc void @fmt._fmt_int_128(ptr %0, i128 %.val21, i64 10, i1 zeroext %2, ptr %fmt.__DIGITS_LOWER.val22, ptr %__.context_ptr)
  br label %switch.done

switch.case.body1:                                ; preds = %decls
  %.val19 = load i128, ptr %1, align 8
  %fmt.__DIGITS_LOWER.val20 = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  tail call fastcc void @fmt._fmt_int_128(ptr %0, i128 %.val19, i64 2, i1 zeroext %2, ptr %fmt.__DIGITS_LOWER.val20, ptr %__.context_ptr)
  br label %switch.done

switch.case.body2:                                ; preds = %decls
  %.val17 = load i128, ptr %1, align 8
  %fmt.__DIGITS_LOWER.val18 = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  tail call fastcc void @fmt._fmt_int_128(ptr %0, i128 %.val17, i64 8, i1 zeroext %2, ptr %fmt.__DIGITS_LOWER.val18, ptr %__.context_ptr)
  br label %switch.done

switch.case.body3:                                ; preds = %decls, %decls
  %.val15 = load i128, ptr %1, align 8
  %fmt.__DIGITS_LOWER.val16 = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  tail call fastcc void @fmt._fmt_int_128(ptr %0, i128 %.val15, i64 10, i1 zeroext %2, ptr %fmt.__DIGITS_LOWER.val16, ptr %__.context_ptr)
  br label %switch.done

switch.case.body4:                                ; preds = %decls
  %.val13 = load i128, ptr %1, align 8
  %fmt.__DIGITS_LOWER.val14 = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  tail call fastcc void @fmt._fmt_int_128(ptr %0, i128 %.val13, i64 12, i1 zeroext %2, ptr %fmt.__DIGITS_LOWER.val14, ptr %__.context_ptr)
  br label %switch.done

switch.case.body5:                                ; preds = %decls
  %.val12 = load i128, ptr %1, align 8
  %fmt.__DIGITS_LOWER.val = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  tail call fastcc void @fmt._fmt_int_128(ptr %0, i128 %.val12, i64 16, i1 zeroext %2, ptr %fmt.__DIGITS_LOWER.val, ptr %__.context_ptr)
  br label %switch.done

switch.case.body6:                                ; preds = %decls
  %.val10 = load i128, ptr %1, align 8
  %fmt.__DIGITS_UPPER.val11 = load ptr, ptr @fmt.__DIGITS_UPPER, align 8
  tail call fastcc void @fmt._fmt_int_128(ptr %0, i128 %.val10, i64 16, i1 zeroext %2, ptr %fmt.__DIGITS_UPPER.val11, ptr %__.context_ptr)
  br label %switch.done

switch.case.body7:                                ; preds = %decls, %decls
  %5 = load i128, ptr %1, align 8
  %6 = trunc i128 %5 to i32
  tail call fastcc void @fmt.fmt_rune(ptr %0, i32 %6, i32 %3, ptr %__.context_ptr)
  br label %switch.done

switch.case.body8:                                ; preds = %decls
  %7 = load i128, ptr %1, align 8
  %8 = trunc i128 %7 to i32
  %or.cond = icmp ugt i32 %8, 1114111
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %switch.case.body8
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 85, ptr %__.context_ptr)
  br label %switch.done

if.else:                                          ; preds = %switch.case.body8
  %9 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !542
  %10 = load ptr, ptr %9, align 8, !noalias !546
  %.not.i.i = icmp eq ptr %10, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.else
  %11 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %12 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %13 = load ptr, ptr %12, align 8, !noalias !546
  store i64 0, ptr %4, align 8, !noalias !546
  %14 = call i32 %10(ptr %13, i64 4, ptr nonnull @"ggv$a4", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !550
  %15 = load i64, ptr %4, align 8, !noalias !546
  %16 = load i64, ptr %11, align 8, !noalias !546
  %17 = add i64 %16, %15
  store i64 %17, ptr %11, align 8, !noalias !546
  %.val.pre = load i128, ptr %1, align 8
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.else, %if.then.i.i
  %.val = phi i128 [ %7, %if.else ], [ %.val.pre, %if.then.i.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !542
  %fmt.__DIGITS_UPPER.val = load ptr, ptr @fmt.__DIGITS_UPPER, align 8
  call fastcc void @fmt._fmt_int_128(ptr nonnull %0, i128 %.val, i64 16, i1 zeroext false, ptr %fmt.__DIGITS_UPPER.val, ptr %__.context_ptr)
  br label %switch.done

switch.default.body:                              ; preds = %decls
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %3, ptr %__.context_ptr)
  br label %switch.done

switch.done:                                      ; preds = %if.then, %io.write_string.exit, %switch.default.body, %switch.case.body7, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %switch.case.body
  ret void
}

define internal fastcc void @fmt._pad(ptr nocapture %0, ptr %1, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %buf.i.i42 = alloca [1 x i8], align 1
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %buf.i.i22 = alloca [1 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %9 = alloca { ptr, i64 }, align 8
  %10 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %11 = alloca { ptr, i64 }, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %..string, align 8
  %15 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 5
  %16 = load i8, ptr %15, align 1
  %.not = icmp eq i8 %16, 0
  br i1 %.not, label %if.then, label %if.done

common.ret:                                       ; preds = %io.write_byte.exit.i, %if.done.i, %io.write_string.exit17, %io.write_string.exit61, %io.write_string.exit41, %io.write_string.exit
  ret void

if.then:                                          ; preds = %decls
  %17 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13), !noalias !551
  %18 = load ptr, ptr %17, align 8, !noalias !555
  %.not.i.i = icmp eq ptr %18, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i10

if.then.i.i10:                                    ; preds = %if.then
  %19 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %20 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %21 = load ptr, ptr %20, align 8, !noalias !555
  store i64 0, ptr %13, align 8, !noalias !555
  %22 = call i32 %18(ptr %21, i64 4, ptr %1, i64 0, i64 0, ptr nonnull %13, ptr nonnull %__.context_ptr), !noalias !559
  %23 = load i64, ptr %13, align 8, !noalias !555
  %24 = load i64, ptr %19, align 8, !noalias !555
  %25 = add i64 %24, %23
  store i64 %25, ptr %19, align 8, !noalias !555
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then, %if.then.i.i10
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !551
  br label %common.ret

if.done:                                          ; preds = %decls
  %26 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 8
  %27 = load i64, ptr %26, align 8
  %28 = getelementptr inbounds { ptr, i64 }, ptr %1, i64 0, i32 1
  %29 = load i64, ptr %28, align 8
  %30 = icmp sgt i64 %29, 0
  br i1 %30, label %for.body.lr.ph.i.i, label %utf8.rune_count_in_string.exit

for.body.lr.ph.i.i:                               ; preds = %if.done
  %31 = load ptr, ptr %1, align 8
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.loop.backedge.i.i, %for.body.lr.ph.i.i
  %count.041.i.i = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %count.0.be.i.i, %for.loop.backedge.i.i ]
  %i.040.i.i = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %i.0.be.i.i, %for.loop.backedge.i.i ]
  %32 = getelementptr i8, ptr %31, i64 %i.040.i.i
  %33 = load i8, ptr %32, align 1
  %34 = icmp sgt i8 %33, -1
  br i1 %34, label %if.then.i.i, label %if.done.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %35 = add nsw i64 %i.040.i.i, 1
  br label %for.loop.backedge.i.i

for.loop.backedge.i.i:                            ; preds = %if.init18.i.i, %if.else15.i.i, %if.init12.i.i, %if.else.i.i, %if.done8.i.i, %if.then5.i.i, %if.then1.i.i, %if.then.i.i
  %i.0.be.i.i = phi i64 [ %35, %if.then.i.i ], [ %41, %if.then1.i.i ], [ %46, %if.then5.i.i ], [ %.pre.i.i, %if.init18.i.i ], [ %50, %if.init12.i.i ], [ %50, %if.done8.i.i ], [ %44, %if.else.i.i ], [ %44, %if.else15.i.i ]
  %count.0.be.i.i = add i64 %count.041.i.i, 1
  %36 = icmp slt i64 %i.0.be.i.i, %29
  br i1 %36, label %for.body.i.i, label %utf8.rune_count_in_string.exit

if.done.i.i:                                      ; preds = %for.body.i.i
  %37 = zext i8 %33 to i64
  %38 = getelementptr [256 x i8], ptr @runtime.string_decode_rune-.accept_sizes-22666, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1
  %40 = icmp eq i8 %39, -15
  br i1 %40, label %if.then1.i.i, label %if.done4.i.i

if.then1.i.i:                                     ; preds = %if.done.i.i
  %41 = add nsw i64 %i.040.i.i, 1
  br label %for.loop.backedge.i.i

if.done4.i.i:                                     ; preds = %if.done.i.i
  %42 = and i8 %39, 7
  %43 = zext i8 %42 to i64
  %44 = add i64 %i.040.i.i, %43
  %45 = icmp sgt i64 %44, %29
  br i1 %45, label %if.then5.i.i, label %if.done8.i.i

if.then5.i.i:                                     ; preds = %if.done4.i.i
  %46 = add nsw i64 %i.040.i.i, 1
  br label %for.loop.backedge.i.i

if.done8.i.i:                                     ; preds = %if.done4.i.i
  %47 = lshr i8 %39, 4
  %48 = zext i8 %47 to i64
  %49 = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %48
  %.unpack.i.i = load i8, ptr %49, align 2
  %.elt32.i.i = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %48, i32 1
  %.unpack33.i.i = load i8, ptr %.elt32.i.i, align 1
  %50 = add nsw i64 %i.040.i.i, 1
  %51 = getelementptr i8, ptr %31, i64 %50
  %52 = load i8, ptr %51, align 1
  %53 = icmp ult i8 %52, %.unpack.i.i
  %54 = icmp ult i8 %.unpack33.i.i, %52
  %or.cond.i.i = select i1 %53, i1 true, i1 %54
  br i1 %or.cond.i.i, label %for.loop.backedge.i.i, label %if.else.i.i

if.else.i.i:                                      ; preds = %if.done8.i.i
  %55 = add nsw i64 %37, -194
  %56 = icmp ult i64 %55, 30
  br i1 %56, label %for.loop.backedge.i.i, label %if.init12.i.i

if.init12.i.i:                                    ; preds = %if.else.i.i
  %57 = add i64 %i.040.i.i, 2
  %58 = getelementptr i8, ptr %31, i64 %57
  %59 = load i8, ptr %58, align 1
  %or.cond38.i.i = icmp sgt i8 %59, -65
  br i1 %or.cond38.i.i, label %for.loop.backedge.i.i, label %if.else15.i.i

if.else15.i.i:                                    ; preds = %if.init12.i.i
  %60 = and i64 %37, 240
  %61 = icmp eq i64 %60, 224
  br i1 %61, label %for.loop.backedge.i.i, label %if.init18.i.i

if.init18.i.i:                                    ; preds = %if.else15.i.i
  %62 = add i64 %i.040.i.i, 3
  %63 = getelementptr i8, ptr %31, i64 %62
  %64 = load i8, ptr %63, align 1
  %or.cond39.i.i = icmp sgt i8 %64, -65
  %spec.select.i.i = select i1 %or.cond39.i.i, i64 1, i64 %43
  %.pre.i.i = add i64 %spec.select.i.i, %i.040.i.i
  br label %for.loop.backedge.i.i

utf8.rune_count_in_string.exit:                   ; preds = %for.loop.backedge.i.i, %if.done
  %count.0.lcssa.i.i = phi i64 [ 0, %if.done ], [ %count.0.be.i.i, %for.loop.backedge.i.i ]
  %65 = sub i64 %27, %count.0.lcssa.i.i
  %66 = load i8, ptr %0, align 1
  %.not7 = icmp eq i8 %66, 0
  br i1 %.not7, label %if.else, label %if.then1

if.then1:                                         ; preds = %utf8.rune_count_in_string.exit
  %67 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %68 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !560
  %69 = load ptr, ptr %67, align 8, !noalias !564
  %.not.i.i12 = icmp eq ptr %69, null
  br i1 %.not.i.i12, label %io.write_string.exit17, label %if.then.i.i13

if.then.i.i13:                                    ; preds = %if.then1
  %70 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %71 = load ptr, ptr %70, align 8, !noalias !564
  store i64 0, ptr %12, align 8, !noalias !564
  %72 = call i32 %69(ptr %71, i64 4, ptr %1, i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !568
  %73 = load i64, ptr %12, align 8, !noalias !564
  %74 = load i64, ptr %68, align 8, !noalias !564
  %75 = add i64 %74, %73
  store i64 %75, ptr %68, align 8, !noalias !564
  br label %io.write_string.exit17

io.write_string.exit17:                           ; preds = %if.then1, %if.then.i.i13
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !560
  %76 = icmp slt i64 %65, 1
  br i1 %76, label %common.ret, label %if.done.i

if.done.i:                                        ; preds = %io.write_string.exit17
  %77 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 2
  %78 = load i8, ptr %77, align 1, !noalias !569
  %.not.i = icmp eq i8 %78, 0
  %spec.store.select.i = select i1 %.not.i, i8 48, i8 32
  %79 = getelementptr inbounds { ptr, i64 }, ptr %11, i64 0, i32 1
  %80 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %81 = load ptr, ptr %67, align 8, !noalias !572
  %82 = icmp eq ptr %81, null
  br i1 %82, label %common.ret, label %for.body.i

for.body.i:                                       ; preds = %if.done.i, %io.write_byte.exit.i
  %i.03.i = phi i64 [ %89, %io.write_byte.exit.i ], [ 0, %if.done.i ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !569
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11), !noalias !569
  store i8 %spec.store.select.i, ptr %buf.i.i, align 1, !noalias !578
  store ptr %buf.i.i, ptr %11, align 8, !noalias !578
  store i64 1, ptr %79, align 8, !noalias !578
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !578
  %83 = load ptr, ptr %67, align 8, !noalias !572
  %.not.i.i.i = icmp eq ptr %83, null
  br i1 %.not.i.i.i, label %io.write_byte.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.body.i
  %84 = load ptr, ptr %80, align 8, !noalias !572
  store i64 0, ptr %10, align 8, !noalias !572
  %85 = call i32 %83(ptr %84, i64 4, ptr nonnull %11, i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !579
  %86 = load i64, ptr %10, align 8, !noalias !572
  %87 = load i64, ptr %68, align 8, !noalias !572
  %88 = add i64 %87, %86
  store i64 %88, ptr %68, align 8, !noalias !572
  br label %io.write_byte.exit.i

io.write_byte.exit.i:                             ; preds = %if.then.i.i.i, %for.body.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !578
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !569
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11), !noalias !569
  %89 = add nuw nsw i64 %i.03.i, 1
  %exitcond.not.i = icmp eq i64 %89, %65
  br i1 %exitcond.not.i, label %common.ret, label %for.body.i, !llvm.loop !444

if.else:                                          ; preds = %utf8.rune_count_in_string.exit
  %90 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 2
  %91 = load i8, ptr %90, align 1
  %.not8 = icmp ne i8 %91, 0
  %.not9 = icmp eq i64 %29, 0
  %or.cond = or i1 %.not8, %.not9
  br i1 %or.cond, label %if.else4, label %cmp.and2

cmp.and2:                                         ; preds = %if.else
  %92 = load ptr, ptr %1, align 8
  %93 = load i8, ptr %92, align 1
  %94 = icmp eq i8 %93, 45
  br i1 %94, label %if.then3, label %if.else4

if.then3:                                         ; preds = %cmp.and2
  %95 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %96 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  store i8 45, ptr %buf.i, align 1, !noalias !580
  store ptr %buf.i, ptr %9, align 8, !noalias !580
  %97 = getelementptr inbounds { ptr, i64 }, ptr %9, i64 0, i32 1
  store i64 1, ptr %97, align 8, !noalias !580
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !580
  %98 = load ptr, ptr %95, align 8, !noalias !287
  %.not.i.i18 = icmp eq ptr %98, null
  br i1 %.not.i.i18, label %io.write_byte.exit.thread, label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %if.then3
  %99 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %100 = load ptr, ptr %99, align 8, !noalias !583
  store i64 0, ptr %8, align 8, !noalias !583
  %101 = call i32 %98(ptr %100, i64 4, ptr nonnull %9, i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !587
  %102 = load i64, ptr %8, align 8, !noalias !583
  %103 = load i64, ptr %96, align 8, !noalias !583
  %104 = add i64 %103, %102
  store i64 %104, ptr %96, align 8, !noalias !583
  %.pre68.pre = load ptr, ptr %95, align 8, !noalias !287
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !580
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  %105 = icmp slt i64 %65, 1
  br i1 %105, label %fmt.fmt_write_padding.exit35, label %if.done.i23

io.write_byte.exit.thread:                        ; preds = %if.then3
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !580
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  br label %fmt.fmt_write_padding.exit35.thread

if.done.i23:                                      ; preds = %io.write_byte.exit
  %106 = load i8, ptr %90, align 1, !noalias !588
  %.not.i24 = icmp eq i8 %106, 0
  %spec.store.select.i25 = select i1 %.not.i24, i8 48, i8 32
  %107 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  %108 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %109 = icmp eq ptr %.pre68.pre, null
  br i1 %109, label %fmt.fmt_write_padding.exit35.thread, label %for.body.i26

for.body.i26:                                     ; preds = %if.done.i23, %io.write_byte.exit.i30
  %i.03.i27 = phi i64 [ %116, %io.write_byte.exit.i30 ], [ 0, %if.done.i23 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i22), !noalias !588
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7), !noalias !588
  store i8 %spec.store.select.i25, ptr %buf.i.i22, align 1, !noalias !591
  store ptr %buf.i.i22, ptr %7, align 8, !noalias !591
  store i64 1, ptr %107, align 8, !noalias !591
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !591
  %110 = load ptr, ptr %95, align 8, !noalias !287
  %.not.i.i.i28 = icmp eq ptr %110, null
  br i1 %.not.i.i.i28, label %io.write_byte.exit.i30, label %if.then.i.i.i29

if.then.i.i.i29:                                  ; preds = %for.body.i26
  %111 = load ptr, ptr %108, align 8, !noalias !594
  store i64 0, ptr %6, align 8, !noalias !594
  %112 = call i32 %110(ptr %111, i64 4, ptr nonnull %7, i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !598
  %113 = load i64, ptr %6, align 8, !noalias !594
  %114 = load i64, ptr %96, align 8, !noalias !594
  %115 = add i64 %114, %113
  store i64 %115, ptr %96, align 8, !noalias !594
  br label %io.write_byte.exit.i30

io.write_byte.exit.i30:                           ; preds = %if.then.i.i.i29, %for.body.i26
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !591
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i22), !noalias !588
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7), !noalias !588
  %116 = add nuw nsw i64 %i.03.i27, 1
  %exitcond.not.i31 = icmp eq i64 %116, %65
  br i1 %exitcond.not.i31, label %fmt.fmt_write_padding.exit35.loopexit66, label %for.body.i26, !llvm.loop !444

fmt.fmt_write_padding.exit35.loopexit66:          ; preds = %io.write_byte.exit.i30
  %.pre = load ptr, ptr %95, align 8, !noalias !599
  br label %fmt.fmt_write_padding.exit35

fmt.fmt_write_padding.exit35.thread:              ; preds = %io.write_byte.exit.thread, %if.done.i23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !606
  br label %io.write_string.exit41

fmt.fmt_write_padding.exit35:                     ; preds = %fmt.fmt_write_padding.exit35.loopexit66, %io.write_byte.exit
  %117 = phi ptr [ %.pre, %fmt.fmt_write_padding.exit35.loopexit66 ], [ %.pre68.pre, %io.write_byte.exit ]
  %118 = load i64, ptr %28, align 8
  %119 = load ptr, ptr %1, align 8
  %120 = getelementptr i8, ptr %119, i64 1
  %121 = add i64 %118, -1
  store ptr %120, ptr %14, align 8
  %122 = getelementptr inbounds %..string, ptr %14, i64 0, i32 1
  store i64 %121, ptr %122, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !606
  %.not.i.i36 = icmp eq ptr %117, null
  br i1 %.not.i.i36, label %io.write_string.exit41, label %if.then.i.i37

if.then.i.i37:                                    ; preds = %fmt.fmt_write_padding.exit35
  %123 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %124 = load ptr, ptr %123, align 8, !noalias !599
  store i64 0, ptr %5, align 8, !noalias !599
  %125 = call i32 %117(ptr %124, i64 4, ptr nonnull %14, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !607
  %126 = load i64, ptr %5, align 8, !noalias !599
  %127 = load i64, ptr %96, align 8, !noalias !599
  %128 = add i64 %127, %126
  store i64 %128, ptr %96, align 8, !noalias !599
  br label %io.write_string.exit41

io.write_string.exit41:                           ; preds = %fmt.fmt_write_padding.exit35.thread, %fmt.fmt_write_padding.exit35, %if.then.i.i37
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !606
  br label %common.ret

if.else4:                                         ; preds = %cmp.and2, %if.else
  %129 = icmp slt i64 %65, 1
  br i1 %129, label %fmt.fmt_write_padding.exit55, label %if.done.i43

if.done.i43:                                      ; preds = %if.else4
  %spec.store.select.i45 = select i1 %.not8, i8 32, i8 48
  %130 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %131 = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  %132 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %133 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %134 = load ptr, ptr %130, align 8, !noalias !608
  %135 = icmp eq ptr %134, null
  br i1 %135, label %fmt.fmt_write_padding.exit55, label %for.body.i46

for.body.i46:                                     ; preds = %if.done.i43, %io.write_byte.exit.i50
  %i.03.i47 = phi i64 [ %142, %io.write_byte.exit.i50 ], [ 0, %if.done.i43 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i42), !noalias !616
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4), !noalias !616
  store i8 %spec.store.select.i45, ptr %buf.i.i42, align 1, !noalias !617
  store ptr %buf.i.i42, ptr %4, align 8, !noalias !617
  store i64 1, ptr %131, align 8, !noalias !617
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !617
  %136 = load ptr, ptr %130, align 8, !noalias !608
  %.not.i.i.i48 = icmp eq ptr %136, null
  br i1 %.not.i.i.i48, label %io.write_byte.exit.i50, label %if.then.i.i.i49

if.then.i.i.i49:                                  ; preds = %for.body.i46
  %137 = load ptr, ptr %133, align 8, !noalias !608
  store i64 0, ptr %3, align 8, !noalias !608
  %138 = call i32 %136(ptr %137, i64 4, ptr nonnull %4, i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !618
  %139 = load i64, ptr %3, align 8, !noalias !608
  %140 = load i64, ptr %132, align 8, !noalias !608
  %141 = add i64 %140, %139
  store i64 %141, ptr %132, align 8, !noalias !608
  br label %io.write_byte.exit.i50

io.write_byte.exit.i50:                           ; preds = %if.then.i.i.i49, %for.body.i46
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !617
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i42), !noalias !616
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !616
  %142 = add nuw nsw i64 %i.03.i47, 1
  %exitcond.not.i51 = icmp eq i64 %142, %65
  br i1 %exitcond.not.i51, label %fmt.fmt_write_padding.exit55, label %for.body.i46, !llvm.loop !444

fmt.fmt_write_padding.exit55:                     ; preds = %io.write_byte.exit.i50, %if.done.i43, %if.else4
  %143 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2), !noalias !619
  %144 = load ptr, ptr %143, align 8, !noalias !623
  %.not.i.i56 = icmp eq ptr %144, null
  br i1 %.not.i.i56, label %io.write_string.exit61, label %if.then.i.i57

if.then.i.i57:                                    ; preds = %fmt.fmt_write_padding.exit55
  %145 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %146 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %147 = load ptr, ptr %146, align 8, !noalias !623
  store i64 0, ptr %2, align 8, !noalias !623
  %148 = call i32 %144(ptr %147, i64 4, ptr %1, i64 0, i64 0, ptr nonnull %2, ptr nonnull %__.context_ptr), !noalias !627
  %149 = load i64, ptr %2, align 8, !noalias !623
  %150 = load i64, ptr %145, align 8, !noalias !623
  %151 = add i64 %150, %149
  store i64 %151, ptr %145, align 8, !noalias !623
  br label %io.write_string.exit61

io.write_string.exit61:                           ; preds = %fmt.fmt_write_padding.exit55, %if.then.i.i57
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2), !noalias !619
  br label %common.ret
}

define internal fastcc void @fmt.fmt_float(ptr %0, double %1, i64 %2, i32 %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %buf.i15 = alloca [386 x i8], align 1
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca %..string, align 8
  %str.i16 = alloca %..string, align 8
  %buf.i = alloca [386 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca %..string, align 8
  %str.i = alloca %..string, align 8
  %prev_fi = alloca %fmt.Info, align 8
  %9 = alloca %..string, align 8
  switch i32 %3, label %switch.default.body6 [
    i32 102, label %switch.case.body
    i32 70, label %switch.case.body
    i32 103, label %switch.case.body
    i32 71, label %switch.case.body
    i32 118, label %switch.case.body
    i32 101, label %switch.case.body1
    i32 69, label %switch.case.body1
    i32 104, label %switch.case.body2
    i32 72, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %decls, %decls, %decls, %decls, %decls
  call void @llvm.lifetime.start.p0(i64 386, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %str.i)
  %10 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 6
  %11 = load i8, ptr %10, align 1, !noalias !628
  %.not.i = icmp eq i8 %11, 0
  br i1 %.not.i, label %if.done.i, label %if.then.i

if.then.i:                                        ; preds = %switch.case.body
  %12 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 9
  %13 = load i64, ptr %12, align 8, !noalias !628
  br label %if.done.i

if.done.i:                                        ; preds = %if.then.i, %switch.case.body
  %14 = phi i64 [ %13, %if.then.i ], [ 3, %switch.case.body ]
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(386) %buf.i, i8 0, i64 386, i1 false), !noalias !628
  store ptr %buf.i, ptr %7, align 8, !noalias !628
  %15 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 386, ptr %15, align 8, !noalias !628
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %8, i8 0, i64 16, i1 false), !noalias !628
  call fastcc void @strconv.append_float(ptr noalias nonnull %8, ptr nonnull %7, double %1, i8 102, i64 %14, i64 %2, ptr %__.context_ptr)
  %.unpack.i = load ptr, ptr %8, align 8, !noalias !628
  %.elt5.i = getelementptr inbounds %..string, ptr %8, i64 0, i32 1
  %.unpack6.i = load i64, ptr %.elt5.i, align 8, !noalias !628
  store ptr %.unpack.i, ptr %str.i, align 8, !noalias !628
  %str.repack7.i = getelementptr inbounds %..string, ptr %str.i, i64 0, i32 1
  store i64 %.unpack6.i, ptr %str.repack7.i, align 8, !noalias !628
  %16 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 1
  %17 = load i8, ptr %16, align 1, !noalias !628
  %.not9.i = icmp eq i8 %17, 0
  br i1 %.not9.i, label %if.then1.i, label %fmt._fmt_float_as.exit

if.then1.i:                                       ; preds = %if.done.i
  %18 = load i8, ptr %.unpack.i, align 1, !noalias !628
  %19 = icmp eq i8 %18, 43
  br i1 %19, label %cmp.and.i, label %fmt._fmt_float_as.exit

cmp.and.i:                                        ; preds = %if.then1.i
  %20 = getelementptr i8, ptr %.unpack.i, i64 1
  %21 = load i8, ptr %20, align 1, !noalias !628
  %.not10.i = icmp eq i8 %21, 73
  br i1 %.not10.i, label %fmt._fmt_float_as.exit, label %if.then2.i

if.then2.i:                                       ; preds = %cmp.and.i
  %22 = add i64 %.unpack6.i, -1
  store ptr %20, ptr %str.i, align 8, !noalias !628
  store i64 %22, ptr %str.repack7.i, align 8, !noalias !628
  br label %fmt._fmt_float_as.exit

fmt._fmt_float_as.exit:                           ; preds = %if.done.i, %if.then1.i, %cmp.and.i, %if.then2.i
  call fastcc void @fmt._pad(ptr nonnull %0, ptr nonnull %str.i, ptr %__.context_ptr)
  call void @llvm.lifetime.end.p0(i64 386, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %str.i)
  br label %switch.done7

switch.case.body1:                                ; preds = %decls, %decls
  call void @llvm.lifetime.start.p0(i64 386, ptr nonnull %buf.i15)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %str.i16)
  %23 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 6
  %24 = load i8, ptr %23, align 1, !noalias !631
  %.not.i17 = icmp eq i8 %24, 0
  br i1 %.not.i17, label %if.done.i19, label %if.then.i18

if.then.i18:                                      ; preds = %switch.case.body1
  %25 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 9
  %26 = load i64, ptr %25, align 8, !noalias !631
  br label %if.done.i19

if.done.i19:                                      ; preds = %if.then.i18, %switch.case.body1
  %27 = phi i64 [ %26, %if.then.i18 ], [ 3, %switch.case.body1 ]
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(386) %buf.i15, i8 0, i64 386, i1 false), !noalias !631
  store ptr %buf.i15, ptr %5, align 8, !noalias !631
  %28 = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  store i64 386, ptr %28, align 8, !noalias !631
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %6, i8 0, i64 16, i1 false), !noalias !631
  call fastcc void @strconv.append_float(ptr noalias nonnull %6, ptr nonnull %5, double %1, i8 101, i64 %27, i64 %2, ptr %__.context_ptr)
  %.unpack.i20 = load ptr, ptr %6, align 8, !noalias !631
  %.elt5.i21 = getelementptr inbounds %..string, ptr %6, i64 0, i32 1
  %.unpack6.i22 = load i64, ptr %.elt5.i21, align 8, !noalias !631
  store ptr %.unpack.i20, ptr %str.i16, align 8, !noalias !631
  %str.repack7.i23 = getelementptr inbounds %..string, ptr %str.i16, i64 0, i32 1
  store i64 %.unpack6.i22, ptr %str.repack7.i23, align 8, !noalias !631
  %29 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 1
  %30 = load i8, ptr %29, align 1, !noalias !631
  %.not9.i24 = icmp eq i8 %30, 0
  br i1 %.not9.i24, label %if.then1.i25, label %fmt._fmt_float_as.exit29

if.then1.i25:                                     ; preds = %if.done.i19
  %31 = load i8, ptr %.unpack.i20, align 1, !noalias !631
  %32 = icmp eq i8 %31, 43
  br i1 %32, label %cmp.and.i26, label %fmt._fmt_float_as.exit29

cmp.and.i26:                                      ; preds = %if.then1.i25
  %33 = getelementptr i8, ptr %.unpack.i20, i64 1
  %34 = load i8, ptr %33, align 1, !noalias !631
  %.not10.i27 = icmp eq i8 %34, 73
  br i1 %.not10.i27, label %fmt._fmt_float_as.exit29, label %if.then2.i28

if.then2.i28:                                     ; preds = %cmp.and.i26
  %35 = add i64 %.unpack6.i22, -1
  store ptr %33, ptr %str.i16, align 8, !noalias !631
  store i64 %35, ptr %str.repack7.i23, align 8, !noalias !631
  br label %fmt._fmt_float_as.exit29

fmt._fmt_float_as.exit29:                         ; preds = %if.done.i19, %if.then1.i25, %cmp.and.i26, %if.then2.i28
  call fastcc void @fmt._pad(ptr nonnull %0, ptr nonnull %str.i16, ptr %__.context_ptr)
  call void @llvm.lifetime.end.p0(i64 386, ptr nonnull %buf.i15)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %str.i16)
  br label %switch.done7

switch.case.body2:                                ; preds = %decls, %decls
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %prev_fi, ptr noundef nonnull align 1 dereferenceable(120) %0, i64 120, i1 false)
  %36 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  store i8 0, ptr %36, align 1
  %37 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 8
  store i64 %2, ptr %37, align 8
  %38 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 3
  store i8 1, ptr %38, align 1
  %39 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 1
  store i8 0, ptr %39, align 1
  switch i64 %2, label %switch.default.body [
    i64 16, label %switch.case.body3
    i64 32, label %switch.case.body4
    i64 64, label %switch.case.body5
  ]

switch.case.body3:                                ; preds = %switch.case.body2
  %40 = fptrunc double %1 to half
  %.cast14 = bitcast half %40 to i16
  %41 = zext i16 %.cast14 to i64
  br label %switch.done

switch.case.body4:                                ; preds = %switch.case.body2
  %42 = fptrunc double %1 to float
  %.cast13 = bitcast float %42 to i32
  %43 = zext i32 %.cast13 to i64
  br label %switch.done

switch.case.body5:                                ; preds = %switch.case.body2
  %.cast = bitcast double %1 to i64
  br label %switch.done

switch.default.body:                              ; preds = %switch.case.body2
  %44 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !alias.scope !634
  %46 = icmp eq ptr %45, null
  %spec.store.select.i = select i1 %46, ptr @runtime.default_assertion_failure_proc, ptr %45
  tail call void %spec.store.select.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$a6", ptr nonnull @"ggv$a5", ptr nonnull %__.context_ptr)
  unreachable

switch.done:                                      ; preds = %switch.case.body5, %switch.case.body4, %switch.case.body3
  %u.0 = phi i64 [ %.cast, %switch.case.body5 ], [ %43, %switch.case.body4 ], [ %41, %switch.case.body3 ]
  %47 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !637
  %48 = load ptr, ptr %47, align 8, !noalias !641
  %.not.i.i = icmp eq ptr %48, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %switch.done
  %49 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %50 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %51 = load ptr, ptr %50, align 8, !noalias !641
  store i64 0, ptr %4, align 8, !noalias !641
  %52 = call i32 %48(ptr %51, i64 4, ptr nonnull @"ggv$a7", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !645
  %53 = load i64, ptr %4, align 8, !noalias !641
  %54 = load i64, ptr %49, align 8, !noalias !641
  %55 = add i64 %54, %53
  store i64 %55, ptr %49, align 8, !noalias !641
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %switch.done, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !637
  %56 = icmp eq i32 %3, 104
  %.unpack = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  %57 = insertvalue %..string poison, ptr %.unpack, 0
  %.unpack8 = load i64, ptr getelementptr inbounds (%..string, ptr @fmt.__DIGITS_LOWER, i64 0, i32 1), align 8
  %58 = insertvalue %..string %57, i64 %.unpack8, 1
  %.unpack9 = load ptr, ptr @fmt.__DIGITS_UPPER, align 8
  %59 = insertvalue %..string poison, ptr %.unpack9, 0
  %.unpack10 = load i64, ptr getelementptr inbounds (%..string, ptr @fmt.__DIGITS_UPPER, i64 0, i32 1), align 8
  %60 = insertvalue %..string %59, i64 %.unpack10, 1
  %61 = select i1 %56, %..string %58, %..string %60
  %.elt = extractvalue %..string %61, 0
  store ptr %.elt, ptr %9, align 8
  %.repack11 = getelementptr inbounds %..string, ptr %9, i64 0, i32 1
  %.elt12 = extractvalue %..string %61, 1
  store i64 %.elt12, ptr %.repack11, align 8
  call fastcc void @fmt._fmt_int(ptr nonnull %0, i64 %u.0, i64 16, i1 zeroext false, i64 %2, ptr nonnull %9, ptr %__.context_ptr)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(120) %0, ptr noundef nonnull align 8 dereferenceable(120) %prev_fi, i64 120, i1 false)
  br label %switch.done7

switch.default.body6:                             ; preds = %decls
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %3, ptr %__.context_ptr)
  br label %switch.done7

switch.done7:                                     ; preds = %switch.default.body6, %io.write_string.exit, %fmt._fmt_float_as.exit29, %fmt._fmt_float_as.exit
  ret void
}

define internal fastcc void @fmt.fmt_string(ptr %0, ptr nocapture readonly %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %buf.i67 = alloca [1 x i8], align 1
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %buf.i87.i = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %buf.i81.i = alloca [1 x i8], align 1
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca i64, align 8
  %buf.i75.i = alloca [1 x i8], align 1
  %10 = alloca { ptr, i64 }, align 8
  %11 = alloca i64, align 8
  %buf.i69.i = alloca [1 x i8], align 1
  %12 = alloca { ptr, i64 }, align 8
  %13 = alloca i64, align 8
  %buf.i63.i = alloca [1 x i8], align 1
  %14 = alloca { ptr, i64 }, align 8
  %15 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %16 = alloca { ptr, i64 }, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %22 = alloca { ptr, i64 }, align 8
  %23 = alloca i64, align 8
  %s = alloca %..string, align 8
  %24 = alloca { i64, i8 }, align 8
  %char_set = alloca %..string, align 8
  %.unpack = load ptr, ptr %1, align 8
  %.elt28 = getelementptr inbounds %..string, ptr %1, i64 0, i32 1
  %.unpack29 = load i64, ptr %.elt28, align 8
  store ptr %.unpack, ptr %s, align 8
  %s.repack30 = getelementptr inbounds %..string, ptr %s, i64 0, i32 1
  store i64 %.unpack29, ptr %s.repack30, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %24, i8 0, i64 16, i1 false)
  %25 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20, i32 1
  %26 = load i64, ptr %25, align 8
  %27 = icmp eq i64 %26, 1
  br i1 %27, label %if.then, label %if.done

if.then:                                          ; preds = %decls
  %28 = getelementptr inbounds { i64, i8 }, ptr %24, i64 0, i32 1
  %29 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20
  %30 = load i64, ptr %29, align 8
  store i64 %30, ptr %24, align 8
  store i8 1, ptr %28, align 8
  %31 = tail call i64 @llvm.smax.i64(i64 %30, i64 0)
  %32 = tail call i64 @llvm.smin.i64(i64 %31, i64 %.unpack29)
  store i64 %32, ptr %s.repack30, align 8
  br label %if.done

if.done:                                          ; preds = %decls, %if.then
  %33 = phi i64 [ %32, %if.then ], [ %.unpack29, %decls ]
  %34 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 14
  %35 = load i8, ptr %34, align 1
  %.not32 = icmp eq i8 %35, 0
  br i1 %.not32, label %cmp.and, label %if.done3

cmp.and:                                          ; preds = %if.done
  %36 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 19
  %37 = load i64, ptr %36, align 8
  %38 = icmp sgt i64 %37, 0
  %39 = icmp eq i32 %2, 118
  %40 = select i1 %38, i1 %39, i1 false
  br i1 %40, label %switch.case.body13, label %if.done3

if.done3:                                         ; preds = %cmp.and, %if.done
  switch i32 %2, label %switch.default.body [
    i32 115, label %switch.case.body
    i32 118, label %switch.case.body
    i32 113, label %switch.case.body13
    i32 120, label %switch.case.body14
    i32 88, label %switch.case.body14
  ]

switch.case.body:                                 ; preds = %if.done3, %if.done3
  %41 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 5
  %42 = load i8, ptr %41, align 1
  %.not41 = icmp eq i8 %42, 0
  br i1 %.not41, label %if.else11, label %if.then4

if.then4:                                         ; preds = %switch.case.body
  %43 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 8
  %44 = load i64, ptr %43, align 8
  %45 = icmp sgt i64 %44, %33
  br i1 %45, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then4
  %46 = load i8, ptr %0, align 1
  %.not42 = icmp eq i8 %46, 0
  br i1 %.not42, label %if.done7, label %if.then6

if.then6:                                         ; preds = %if.then5
  %47 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23), !noalias !646
  %48 = load ptr, ptr %47, align 8, !noalias !650
  %.not.i.i = icmp eq ptr %48, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then6
  %49 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %50 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %51 = load ptr, ptr %50, align 8, !noalias !650
  store i64 0, ptr %23, align 8, !noalias !650
  %52 = call i32 %48(ptr %51, i64 4, ptr nonnull %s, i64 0, i64 0, ptr nonnull %23, ptr nonnull %__.context_ptr), !noalias !654
  %53 = load i64, ptr %23, align 8, !noalias !650
  %54 = load i64, ptr %49, align 8, !noalias !650
  %55 = add i64 %54, %53
  store i64 %55, ptr %49, align 8, !noalias !650
  %.pre.pre = load i64, ptr %43, align 8
  %.pre106.pre = load i64, ptr %s.repack30, align 8
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then6, %if.then.i.i
  %.pre106 = phi i64 [ %33, %if.then6 ], [ %.pre106.pre, %if.then.i.i ]
  %.pre = phi i64 [ %44, %if.then6 ], [ %.pre.pre, %if.then.i.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23), !noalias !646
  br label %if.done7

if.done7:                                         ; preds = %io.write_string.exit, %if.then5
  %56 = phi i64 [ %.pre106, %io.write_string.exit ], [ %33, %if.then5 ]
  %57 = phi i64 [ %.pre, %io.write_string.exit ], [ %44, %if.then5 ]
  %58 = sub i64 %57, %56
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %for.interval.body.lr.ph, label %for.interval.done

for.interval.body.lr.ph:                          ; preds = %if.done7
  %60 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %61 = getelementptr inbounds { ptr, i64 }, ptr %22, i64 0, i32 1
  %62 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %63 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %64 = load ptr, ptr %60, align 8, !noalias !655
  %65 = icmp eq ptr %64, null
  br i1 %65, label %for.interval.done, label %for.interval.body

for.interval.body:                                ; preds = %for.interval.body.lr.ph, %io.write_byte.exit
  %66 = phi i64 [ %74, %io.write_byte.exit ], [ %56, %for.interval.body.lr.ph ]
  %67 = phi i64 [ %75, %io.write_byte.exit ], [ %57, %for.interval.body.lr.ph ]
  %.02786 = phi i64 [ %76, %io.write_byte.exit ], [ 0, %for.interval.body.lr.ph ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22)
  store i8 32, ptr %buf.i, align 1, !noalias !661
  store ptr %buf.i, ptr %22, align 8, !noalias !661
  store i64 1, ptr %61, align 8, !noalias !661
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21), !noalias !661
  %68 = load ptr, ptr %60, align 8, !noalias !655
  %.not.i.i49 = icmp eq ptr %68, null
  br i1 %.not.i.i49, label %io.write_byte.exit, label %if.then.i.i50

if.then.i.i50:                                    ; preds = %for.interval.body
  %69 = load ptr, ptr %63, align 8, !noalias !655
  store i64 0, ptr %21, align 8, !noalias !655
  %70 = call i32 %68(ptr %69, i64 4, ptr nonnull %22, i64 0, i64 0, ptr nonnull %21, ptr nonnull %__.context_ptr), !noalias !662
  %71 = load i64, ptr %21, align 8, !noalias !655
  %72 = load i64, ptr %62, align 8, !noalias !655
  %73 = add i64 %72, %71
  store i64 %73, ptr %62, align 8, !noalias !655
  %.pre107 = load i64, ptr %43, align 8
  %.pre108 = load i64, ptr %s.repack30, align 8
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %for.interval.body, %if.then.i.i50
  %74 = phi i64 [ %66, %for.interval.body ], [ %.pre108, %if.then.i.i50 ]
  %75 = phi i64 [ %67, %for.interval.body ], [ %.pre107, %if.then.i.i50 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21), !noalias !661
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  %76 = add nuw nsw i64 %.02786, 1
  %77 = sub i64 %75, %74
  %78 = icmp slt i64 %76, %77
  br i1 %78, label %for.interval.body, label %for.interval.done, !llvm.loop !663

for.interval.done:                                ; preds = %io.write_byte.exit, %for.interval.body.lr.ph, %if.done7
  %79 = load i8, ptr %0, align 1
  %.not43 = icmp eq i8 %79, 0
  br i1 %.not43, label %if.then8, label %switch.done

if.then8:                                         ; preds = %for.interval.done
  %80 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20), !noalias !664
  %81 = load ptr, ptr %80, align 8, !noalias !668
  %.not.i.i52 = icmp eq ptr %81, null
  br i1 %.not.i.i52, label %io.write_string.exit56, label %if.then.i.i53

if.then.i.i53:                                    ; preds = %if.then8
  %82 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %83 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %84 = load ptr, ptr %83, align 8, !noalias !668
  store i64 0, ptr %20, align 8, !noalias !668
  %85 = call i32 %81(ptr %84, i64 4, ptr nonnull %s, i64 0, i64 0, ptr nonnull %20, ptr nonnull %__.context_ptr), !noalias !672
  %86 = load i64, ptr %20, align 8, !noalias !668
  %87 = load i64, ptr %82, align 8, !noalias !668
  %88 = add i64 %87, %86
  store i64 %88, ptr %82, align 8, !noalias !668
  br label %io.write_string.exit56

io.write_string.exit56:                           ; preds = %if.then8, %if.then.i.i53
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20), !noalias !664
  br label %switch.done

if.else:                                          ; preds = %if.then4
  %89 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19), !noalias !673
  %90 = load ptr, ptr %89, align 8, !noalias !677
  %.not.i.i57 = icmp eq ptr %90, null
  br i1 %.not.i.i57, label %io.write_string.exit61, label %if.then.i.i58

if.then.i.i58:                                    ; preds = %if.else
  %91 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %92 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %93 = load ptr, ptr %92, align 8, !noalias !677
  store i64 0, ptr %19, align 8, !noalias !677
  %94 = call i32 %90(ptr %93, i64 4, ptr nonnull %s, i64 0, i64 0, ptr nonnull %19, ptr nonnull %__.context_ptr), !noalias !681
  %95 = load i64, ptr %19, align 8, !noalias !677
  %96 = load i64, ptr %91, align 8, !noalias !677
  %97 = add i64 %96, %95
  store i64 %97, ptr %91, align 8, !noalias !677
  br label %io.write_string.exit61

io.write_string.exit61:                           ; preds = %if.else, %if.then.i.i58
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19), !noalias !673
  br label %switch.done

if.else11:                                        ; preds = %switch.case.body
  %98 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18), !noalias !682
  %99 = load ptr, ptr %98, align 8, !noalias !686
  %.not.i.i62 = icmp eq ptr %99, null
  br i1 %.not.i.i62, label %io.write_string.exit66, label %if.then.i.i63

if.then.i.i63:                                    ; preds = %if.else11
  %100 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %101 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %102 = load ptr, ptr %101, align 8, !noalias !686
  store i64 0, ptr %18, align 8, !noalias !686
  %103 = call i32 %99(ptr %102, i64 4, ptr nonnull %s, i64 0, i64 0, ptr nonnull %18, ptr nonnull %__.context_ptr), !noalias !690
  %104 = load i64, ptr %18, align 8, !noalias !686
  %105 = load i64, ptr %100, align 8, !noalias !686
  %106 = add i64 %105, %104
  store i64 %106, ptr %100, align 8, !noalias !686
  br label %io.write_string.exit66

io.write_string.exit66:                           ; preds = %if.else11, %if.then.i.i63
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18), !noalias !682
  br label %switch.done

switch.case.body13:                               ; preds = %cmp.and, %if.done3
  %107 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %108 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !691
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %16), !noalias !691
  store i8 34, ptr %buf.i.i, align 1, !noalias !695
  store ptr %buf.i.i, ptr %16, align 8, !noalias !695
  %109 = getelementptr inbounds { ptr, i64 }, ptr %16, i64 0, i32 1
  store i64 1, ptr %109, align 8, !noalias !695
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15), !noalias !695
  %110 = load ptr, ptr %107, align 8, !noalias !698
  %.not.i.i.i = icmp eq ptr %110, null
  br i1 %.not.i.i.i, label %io.write_byte.exit.thread.i, label %io.write_byte.exit.i

io.write_byte.exit.thread.i:                      ; preds = %switch.case.body13
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15), !noalias !695
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %16), !noalias !691
  br label %io.write_quoted_string.exit

io.write_byte.exit.i:                             ; preds = %switch.case.body13
  %111 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %112 = load ptr, ptr %111, align 8, !noalias !698
  store i64 0, ptr %15, align 8, !noalias !698
  %113 = call i32 %110(ptr %112, i64 4, ptr nonnull %16, i64 0, i64 0, ptr nonnull %15, ptr nonnull %__.context_ptr), !noalias !702
  %114 = load i64, ptr %15, align 8, !noalias !698
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15), !noalias !695
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %16), !noalias !691
  %115 = icmp eq i32 %113, 0
  br i1 %115, label %for.init.i, label %io.write_quoted_string.exit

for.init.i:                                       ; preds = %io.write_byte.exit.i
  %116 = icmp sgt i64 %33, 0
  br i1 %116, label %for.body.lr.ph.i, label %for.done.i

for.body.lr.ph.i:                                 ; preds = %for.init.i
  %117 = getelementptr inbounds { ptr, i64 }, ptr %14, i64 0, i32 1
  %118 = getelementptr inbounds { ptr, i64 }, ptr %12, i64 0, i32 1
  %119 = getelementptr inbounds { ptr, i64 }, ptr %10, i64 0, i32 1
  %120 = getelementptr inbounds { ptr, i64 }, ptr %8, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %for.post.i, %for.body.lr.ph.i
  %s.val61154.i = phi i64 [ %33, %for.body.lr.ph.i ], [ %227, %for.post.i ]
  %121 = phi ptr [ %.unpack, %for.body.lr.ph.i ], [ %226, %for.post.i ]
  %122 = phi i64 [ %114, %for.body.lr.ph.i ], [ %225, %for.post.i ]
  %123 = load i8, ptr %121, align 1, !noalias !703
  %124 = zext i8 %123 to i32
  %125 = icmp slt i8 %123, 0
  br i1 %125, label %if.done.i.i.i, label %if.done24.i

if.done.i.i.i:                                    ; preds = %for.body.i
  %126 = zext i8 %123 to i64
  %127 = getelementptr [256 x i8], ptr @runtime.string_decode_rune-.accept_sizes-22666, i64 0, i64 %126
  %128 = load i8, ptr %127, align 1, !noalias !704
  %129 = add nsw i64 %126, -245
  %130 = icmp ult i64 %129, -51
  br i1 %130, label %if.done2.i, label %if.done2.i.i.i

if.done2.i.i.i:                                   ; preds = %if.done.i.i.i
  %131 = and i8 %128, 7
  %132 = zext i8 %131 to i64
  %133 = icmp ult i64 %s.val61154.i, %132
  br i1 %133, label %if.then3.i, label %if.done4.i.i.i

if.done4.i.i.i:                                   ; preds = %if.done2.i.i.i
  %134 = lshr i8 %128, 4
  %135 = zext i8 %134 to i64
  %.elt20.i.i.i = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %135, i32 1
  %.unpack21.i.i.i = load i8, ptr %.elt20.i.i.i, align 1, !noalias !704
  %136 = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %135
  %.unpack.i.i.i = load i8, ptr %136, align 2, !noalias !704
  %137 = getelementptr i8, ptr %121, i64 1
  %138 = load i8, ptr %137, align 1, !noalias !709
  %139 = icmp ult i8 %138, %.unpack.i.i.i
  %140 = icmp ult i8 %.unpack21.i.i.i, %138
  %or.cond.i.i.i = select i1 %139, i1 true, i1 %140
  br i1 %or.cond.i.i.i, label %if.then3.i, label %if.done6.i.i.i

if.done6.i.i.i:                                   ; preds = %if.done4.i.i.i
  %141 = add nsw i64 %126, -194
  %142 = icmp ult i64 %141, 30
  br i1 %142, label %if.then7.i.i.i, label %if.done8.i.i.i

if.then7.i.i.i:                                   ; preds = %if.done6.i.i.i
  %143 = and i8 %123, 31
  %144 = zext i8 %143 to i32
  %145 = shl nuw nsw i32 %144, 6
  %146 = and i8 %138, 63
  %147 = zext i8 %146 to i32
  %148 = or i32 %145, %147
  br label %if.done24.i

if.done8.i.i.i:                                   ; preds = %if.done6.i.i.i
  %149 = getelementptr i8, ptr %121, i64 2
  %150 = load i8, ptr %149, align 1, !noalias !709
  %or.cond26.i.i.i = icmp sgt i8 %150, -65
  br i1 %or.cond26.i.i.i, label %if.then3.i, label %if.done11.i.i.i

if.done11.i.i.i:                                  ; preds = %if.done8.i.i.i
  %151 = and i64 %126, 240
  %152 = icmp eq i64 %151, 224
  br i1 %152, label %if.then12.i.i.i, label %if.done13.i.i.i

if.then12.i.i.i:                                  ; preds = %if.done11.i.i.i
  %153 = and i8 %123, 15
  %154 = zext i8 %153 to i32
  %155 = shl nuw nsw i32 %154, 12
  %156 = and i8 %138, 63
  %157 = zext i8 %156 to i32
  %158 = shl nuw nsw i32 %157, 6
  %159 = or i32 %158, %155
  %160 = and i8 %150, 63
  %161 = zext i8 %160 to i32
  %162 = or i32 %159, %161
  br label %if.done24.i

if.done13.i.i.i:                                  ; preds = %if.done11.i.i.i
  %163 = getelementptr i8, ptr %121, i64 3
  %164 = load i8, ptr %163, align 1, !noalias !709
  %or.cond27.i.i.i = icmp sgt i8 %164, -65
  br i1 %or.cond27.i.i.i, label %if.then3.i, label %if.done16.i.i.i

if.done16.i.i.i:                                  ; preds = %if.done13.i.i.i
  %165 = and i8 %123, 7
  %166 = zext i8 %165 to i32
  %167 = shl nuw nsw i32 %166, 18
  %168 = and i8 %138, 63
  %169 = zext i8 %168 to i32
  %170 = shl nuw nsw i32 %169, 12
  %171 = or i32 %170, %167
  %172 = and i8 %150, 63
  %173 = zext i8 %172 to i32
  %174 = shl nuw nsw i32 %173, 6
  %175 = or i32 %174, %171
  %176 = and i8 %164, 63
  %177 = zext i8 %176 to i32
  %178 = or i32 %175, %177
  br label %if.done24.i

if.done2.i:                                       ; preds = %if.done.i.i.i
  %179 = and i8 %128, 1
  %180 = zext i8 %179 to i32
  %181 = sub nsw i32 0, %180
  %182 = add nuw nsw i32 %180, 255
  %183 = and i32 %182, %124
  %184 = and i32 %181, 65533
  %185 = or i32 %183, %184
  %186 = icmp eq i32 %185, 65533
  br i1 %186, label %if.then3.i, label %if.done24.i

if.then3.i:                                       ; preds = %if.done2.i, %if.done13.i.i.i, %if.done8.i.i.i, %if.done4.i.i.i, %if.done2.i.i.i
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i63.i), !noalias !691
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14), !noalias !691
  store i8 92, ptr %buf.i63.i, align 1, !noalias !710
  store ptr %buf.i63.i, ptr %14, align 8, !noalias !710
  store i64 1, ptr %117, align 8, !noalias !710
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13), !noalias !710
  %187 = load ptr, ptr %107, align 8, !noalias !713
  %.not.i.i64.i = icmp eq ptr %187, null
  br i1 %.not.i.i64.i, label %io.write_byte.exit68.thread.i, label %io.write_byte.exit68.i

io.write_byte.exit68.thread.i:                    ; preds = %if.then3.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !710
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i63.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14), !noalias !691
  br label %io.write_quoted_string.exit

io.write_byte.exit68.i:                           ; preds = %if.then3.i
  %188 = load ptr, ptr %111, align 8, !noalias !713
  store i64 0, ptr %13, align 8, !noalias !713
  %189 = call i32 %187(ptr %188, i64 4, ptr nonnull %14, i64 0, i64 0, ptr nonnull %13, ptr nonnull %__.context_ptr), !noalias !717
  %190 = load i64, ptr %13, align 8, !noalias !713
  %191 = add i64 %190, %122
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !710
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i63.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14), !noalias !691
  %192 = icmp eq i32 %189, 0
  br i1 %192, label %or_return.continue8.i, label %io.write_quoted_string.exit

or_return.continue8.i:                            ; preds = %io.write_byte.exit68.i
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i69.i), !noalias !691
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12), !noalias !691
  store i8 120, ptr %buf.i69.i, align 1, !noalias !718
  store ptr %buf.i69.i, ptr %12, align 8, !noalias !718
  store i64 1, ptr %118, align 8, !noalias !718
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11), !noalias !718
  %193 = load ptr, ptr %107, align 8, !noalias !721
  %.not.i.i70.i = icmp eq ptr %193, null
  br i1 %.not.i.i70.i, label %io.write_byte.exit74.thread.i, label %io.write_byte.exit74.i

io.write_byte.exit74.thread.i:                    ; preds = %or_return.continue8.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !718
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i69.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12), !noalias !691
  br label %io.write_quoted_string.exit

io.write_byte.exit74.i:                           ; preds = %or_return.continue8.i
  %194 = load ptr, ptr %111, align 8, !noalias !721
  store i64 0, ptr %11, align 8, !noalias !721
  %195 = call i32 %193(ptr %194, i64 4, ptr nonnull %12, i64 0, i64 0, ptr nonnull %11, ptr nonnull %__.context_ptr), !noalias !725
  %196 = load i64, ptr %11, align 8, !noalias !721
  %197 = add i64 %196, %191
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !718
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i69.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12), !noalias !691
  %198 = icmp eq i32 %195, 0
  br i1 %198, label %or_return.continue13.i, label %io.write_quoted_string.exit

or_return.continue13.i:                           ; preds = %io.write_byte.exit74.i
  %199 = load i8, ptr %121, align 1, !noalias !703
  %200 = lshr i8 %199, 4
  %201 = zext i8 %200 to i64
  %202 = getelementptr i8, ptr @"csbs$2", i64 %201
  %203 = load i8, ptr %202, align 1, !noalias !691
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i75.i), !noalias !691
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %10), !noalias !691
  store i8 %203, ptr %buf.i75.i, align 1, !noalias !726
  store ptr %buf.i75.i, ptr %10, align 8, !noalias !726
  store i64 1, ptr %119, align 8, !noalias !726
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !726
  %204 = load ptr, ptr %107, align 8, !noalias !729
  %.not.i.i76.i = icmp eq ptr %204, null
  br i1 %.not.i.i76.i, label %io.write_byte.exit80.thread.i, label %io.write_byte.exit80.i

io.write_byte.exit80.thread.i:                    ; preds = %or_return.continue13.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !726
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i75.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %10), !noalias !691
  br label %io.write_quoted_string.exit

io.write_byte.exit80.i:                           ; preds = %or_return.continue13.i
  %205 = load ptr, ptr %111, align 8, !noalias !729
  store i64 0, ptr %9, align 8, !noalias !729
  %206 = call i32 %204(ptr %205, i64 4, ptr nonnull %10, i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !733
  %207 = load i64, ptr %9, align 8, !noalias !729
  %208 = add i64 %207, %197
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !726
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i75.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %10), !noalias !691
  %209 = icmp eq i32 %206, 0
  br i1 %209, label %or_return.continue18.i, label %io.write_quoted_string.exit

or_return.continue18.i:                           ; preds = %io.write_byte.exit80.i
  %210 = load i8, ptr %121, align 1, !noalias !703
  %211 = and i8 %210, 15
  %212 = zext i8 %211 to i64
  %213 = getelementptr i8, ptr @"csbs$2", i64 %212
  %214 = load i8, ptr %213, align 1, !noalias !691
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i81.i), !noalias !691
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8), !noalias !691
  store i8 %214, ptr %buf.i81.i, align 1, !noalias !734
  store ptr %buf.i81.i, ptr %8, align 8, !noalias !734
  store i64 1, ptr %120, align 8, !noalias !734
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !734
  %215 = load ptr, ptr %107, align 8, !noalias !737
  %.not.i.i82.i = icmp eq ptr %215, null
  br i1 %.not.i.i82.i, label %io.write_byte.exit86.thread.i, label %io.write_byte.exit86.i

io.write_byte.exit86.thread.i:                    ; preds = %or_return.continue18.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !734
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i81.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8), !noalias !691
  br label %io.write_quoted_string.exit

io.write_byte.exit86.i:                           ; preds = %or_return.continue18.i
  %216 = load ptr, ptr %111, align 8, !noalias !737
  store i64 0, ptr %7, align 8, !noalias !737
  %217 = call i32 %215(ptr %216, i64 4, ptr nonnull %8, i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !741
  %218 = load i64, ptr %7, align 8, !noalias !737
  %219 = add i64 %218, %208
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !734
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i81.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8), !noalias !691
  %220 = icmp eq i32 %217, 0
  br i1 %220, label %for.post.i, label %io.write_quoted_string.exit

if.done24.i:                                      ; preds = %if.done2.i, %if.done16.i.i.i, %if.then12.i.i.i, %if.then7.i.i.i, %for.body.i
  %r.0100.i = phi i32 [ %185, %if.done2.i ], [ %124, %for.body.i ], [ %148, %if.then7.i.i.i ], [ %162, %if.then12.i.i.i ], [ %178, %if.done16.i.i.i ]
  %width.099.i = phi i64 [ 1, %if.done2.i ], [ 1, %for.body.i ], [ 2, %if.then7.i.i.i ], [ 3, %if.then12.i.i.i ], [ 4, %if.done16.i.i.i ]
  store i64 0, ptr %17, align 8, !noalias !691
  %221 = call fastcc i32 @io.write_escaped_rune(ptr nonnull %107, i32 %r.0100.i, i8 34, ptr %17, ptr %__.context_ptr)
  %222 = load i64, ptr %17, align 8, !noalias !691
  %223 = add i64 %222, %122
  %224 = icmp eq i32 %221, 0
  br i1 %224, label %for.post.i, label %io.write_quoted_string.exit

for.post.i:                                       ; preds = %if.done24.i, %io.write_byte.exit86.i
  %225 = phi i64 [ %223, %if.done24.i ], [ %219, %io.write_byte.exit86.i ]
  %width.098.i = phi i64 [ %width.099.i, %if.done24.i ], [ 1, %io.write_byte.exit86.i ]
  %226 = getelementptr i8, ptr %121, i64 %width.098.i
  %227 = sub nsw i64 %s.val61154.i, %width.098.i
  %228 = icmp sgt i64 %227, 0
  br i1 %228, label %for.body.i, label %for.done.i

for.done.i:                                       ; preds = %for.post.i, %for.init.i
  %229 = phi i64 [ %114, %for.init.i ], [ %225, %for.post.i ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i87.i), !noalias !691
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6), !noalias !691
  store i8 34, ptr %buf.i87.i, align 1, !noalias !742
  store ptr %buf.i87.i, ptr %6, align 8, !noalias !742
  %230 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %230, align 8, !noalias !742
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !742
  %231 = load ptr, ptr %107, align 8, !noalias !745
  %.not.i.i88.i = icmp eq ptr %231, null
  br i1 %.not.i.i88.i, label %io.write_byte.exit92.thread.i, label %io.write_byte.exit92.i

io.write_byte.exit92.thread.i:                    ; preds = %for.done.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !742
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i87.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !691
  br label %io.write_quoted_string.exit

io.write_byte.exit92.i:                           ; preds = %for.done.i
  %232 = load ptr, ptr %111, align 8, !noalias !745
  store i64 0, ptr %5, align 8, !noalias !745
  %233 = call i32 %231(ptr %232, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !749
  %234 = load i64, ptr %5, align 8, !noalias !745
  %235 = add i64 %234, %229
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !742
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i87.i), !noalias !691
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !691
  br label %io.write_quoted_string.exit

io.write_quoted_string.exit:                      ; preds = %if.done24.i, %io.write_byte.exit86.i, %io.write_byte.exit80.i, %io.write_byte.exit74.i, %io.write_byte.exit68.i, %io.write_byte.exit92.i, %io.write_byte.exit92.thread.i, %io.write_byte.exit86.thread.i, %io.write_byte.exit80.thread.i, %io.write_byte.exit74.thread.i, %io.write_byte.exit68.thread.i, %io.write_byte.exit.thread.i, %io.write_byte.exit.i
  %.sink275.i = phi i64 [ 0, %io.write_byte.exit.thread.i ], [ %114, %io.write_byte.exit.i ], [ %122, %io.write_byte.exit68.thread.i ], [ %191, %io.write_byte.exit74.thread.i ], [ %197, %io.write_byte.exit80.thread.i ], [ %208, %io.write_byte.exit86.thread.i ], [ %229, %io.write_byte.exit92.thread.i ], [ %235, %io.write_byte.exit92.i ], [ %223, %if.done24.i ], [ %219, %io.write_byte.exit86.i ], [ %208, %io.write_byte.exit80.i ], [ %197, %io.write_byte.exit74.i ], [ %191, %io.write_byte.exit68.i ]
  %236 = load i64, ptr %108, align 8, !noalias !691
  %237 = add i64 %236, %.sink275.i
  store i64 %237, ptr %108, align 8, !noalias !691
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17)
  br label %switch.done

switch.case.body14:                               ; preds = %if.done3, %if.done3
  %238 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 2
  %239 = load i8, ptr %238, align 1
  %.fr87 = freeze i8 %239
  store i8 0, ptr %238, align 1
  %240 = icmp sgt i64 %33, 0
  br i1 %240, label %for.interval.body16.lr.ph, label %defer

for.interval.body16.lr.ph:                        ; preds = %switch.case.body14
  %.not88 = icmp eq i8 %.fr87, 0
  %241 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %242 = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  %243 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %244 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %char_set.repack35 = getelementptr inbounds %..string, ptr %char_set, i64 0, i32 1
  %245 = icmp eq i32 %2, 120
  br i1 %.not88, label %for.interval.body16.lr.ph.split.us, label %if.done20.peel

if.done20.peel:                                   ; preds = %for.interval.body16.lr.ph
  %.unpack33.peel = load ptr, ptr @fmt.__DIGITS_UPPER, align 8
  %.unpack34.peel = load i64, ptr getelementptr inbounds (%..string, ptr @fmt.__DIGITS_UPPER, i64 0, i32 1), align 8
  store ptr %.unpack33.peel, ptr %char_set, align 8
  store i64 %.unpack34.peel, ptr %char_set.repack35, align 8
  br i1 %245, label %if.then21.peel, label %if.done22.peel

if.then21.peel:                                   ; preds = %if.done20.peel
  %.unpack37.peel = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  %.unpack38.peel = load i64, ptr getelementptr inbounds (%..string, ptr @fmt.__DIGITS_LOWER, i64 0, i32 1), align 8
  store ptr %.unpack37.peel, ptr %char_set, align 8
  store i64 %.unpack38.peel, ptr %char_set.repack35, align 8
  br label %if.done22.peel

if.done22.peel:                                   ; preds = %if.then21.peel, %if.done20.peel
  %246 = load i8, ptr %.unpack, align 1
  %247 = zext i8 %246 to i64
  call fastcc void @fmt._fmt_int(ptr nonnull %0, i64 %247, i64 16, i1 zeroext false, i64 8, ptr nonnull %char_set, ptr %__.context_ptr)
  %248 = icmp ugt i64 %33, 1
  br i1 %248, label %if.then19, label %defer

for.interval.body16.lr.ph.split.us:               ; preds = %for.interval.body16.lr.ph
  br i1 %245, label %for.interval.body16.us.us, label %for.interval.body16.us

for.interval.body16.us.us:                        ; preds = %for.interval.body16.lr.ph.split.us, %for.interval.body16.us.us
  %i.085.us.us = phi i64 [ %252, %for.interval.body16.us.us ], [ 0, %for.interval.body16.lr.ph.split.us ]
  %.unpack37.us.us = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  %.unpack38.us.us = load i64, ptr getelementptr inbounds (%..string, ptr @fmt.__DIGITS_LOWER, i64 0, i32 1), align 8
  store ptr %.unpack37.us.us, ptr %char_set, align 8
  store i64 %.unpack38.us.us, ptr %char_set.repack35, align 8
  %249 = getelementptr i8, ptr %.unpack, i64 %i.085.us.us
  %250 = load i8, ptr %249, align 1
  %251 = zext i8 %250 to i64
  call fastcc void @fmt._fmt_int(ptr %0, i64 %251, i64 16, i1 zeroext false, i64 8, ptr nonnull %char_set, ptr %__.context_ptr)
  %252 = add nuw nsw i64 %i.085.us.us, 1
  %253 = icmp slt i64 %252, %33
  br i1 %253, label %for.interval.body16.us.us, label %defer

for.interval.body16.us:                           ; preds = %for.interval.body16.lr.ph.split.us, %for.interval.body16.us
  %i.085.us = phi i64 [ %257, %for.interval.body16.us ], [ 0, %for.interval.body16.lr.ph.split.us ]
  %.unpack33.us = load ptr, ptr @fmt.__DIGITS_UPPER, align 8
  %.unpack34.us = load i64, ptr getelementptr inbounds (%..string, ptr @fmt.__DIGITS_UPPER, i64 0, i32 1), align 8
  store ptr %.unpack33.us, ptr %char_set, align 8
  store i64 %.unpack34.us, ptr %char_set.repack35, align 8
  %254 = getelementptr i8, ptr %.unpack, i64 %i.085.us
  %255 = load i8, ptr %254, align 1
  %256 = zext i8 %255 to i64
  call fastcc void @fmt._fmt_int(ptr %0, i64 %256, i64 16, i1 zeroext false, i64 8, ptr nonnull %char_set, ptr %__.context_ptr)
  %257 = add nuw nsw i64 %i.085.us, 1
  %258 = icmp slt i64 %257, %33
  br i1 %258, label %for.interval.body16.us, label %defer

if.then19:                                        ; preds = %if.done22.peel, %if.done22
  %i.085 = phi i64 [ %268, %if.done22 ], [ 1, %if.done22.peel ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i67)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4)
  store i8 32, ptr %buf.i67, align 1, !noalias !750
  store ptr %buf.i67, ptr %4, align 8, !noalias !750
  store i64 1, ptr %242, align 8, !noalias !750
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !750
  %259 = load ptr, ptr %241, align 8, !noalias !753
  %.not.i.i68 = icmp eq ptr %259, null
  br i1 %.not.i.i68, label %if.done20, label %if.then.i.i69

if.then.i.i69:                                    ; preds = %if.then19
  %260 = load ptr, ptr %244, align 8, !noalias !753
  store i64 0, ptr %3, align 8, !noalias !753
  %261 = call i32 %259(ptr %260, i64 4, ptr nonnull %4, i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !757
  %262 = load i64, ptr %3, align 8, !noalias !753
  %263 = load i64, ptr %243, align 8, !noalias !753
  %264 = add i64 %263, %262
  store i64 %264, ptr %243, align 8, !noalias !753
  br label %if.done20

if.done20:                                        ; preds = %if.then.i.i69, %if.then19
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !750
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i67)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4)
  %.unpack33 = load ptr, ptr @fmt.__DIGITS_UPPER, align 8
  %.unpack34 = load i64, ptr getelementptr inbounds (%..string, ptr @fmt.__DIGITS_UPPER, i64 0, i32 1), align 8
  store ptr %.unpack33, ptr %char_set, align 8
  store i64 %.unpack34, ptr %char_set.repack35, align 8
  br i1 %245, label %if.then21, label %if.done22

if.then21:                                        ; preds = %if.done20
  %.unpack37 = load ptr, ptr @fmt.__DIGITS_LOWER, align 8
  %.unpack38 = load i64, ptr getelementptr inbounds (%..string, ptr @fmt.__DIGITS_LOWER, i64 0, i32 1), align 8
  store ptr %.unpack37, ptr %char_set, align 8
  store i64 %.unpack38, ptr %char_set.repack35, align 8
  br label %if.done22

if.done22:                                        ; preds = %if.then21, %if.done20
  %265 = getelementptr i8, ptr %.unpack, i64 %i.085
  %266 = load i8, ptr %265, align 1
  %267 = zext i8 %266 to i64
  call fastcc void @fmt._fmt_int(ptr nonnull %0, i64 %267, i64 16, i1 zeroext false, i64 8, ptr nonnull %char_set, ptr %__.context_ptr)
  %268 = add nuw nsw i64 %i.085, 1
  %269 = icmp slt i64 %268, %33
  br i1 %269, label %if.then19, label %defer, !llvm.loop !758

defer:                                            ; preds = %if.done22, %for.interval.body16.us, %for.interval.body16.us.us, %if.done22.peel, %switch.case.body14
  store i8 %.fr87, ptr %238, align 1
  br label %switch.done

switch.default.body:                              ; preds = %if.done3
  tail call fastcc void @fmt.fmt_bad_verb(ptr nonnull %0, i32 %2, ptr %__.context_ptr)
  br label %switch.done

switch.done:                                      ; preds = %io.write_string.exit66, %for.interval.done, %io.write_string.exit56, %io.write_string.exit61, %switch.default.body, %defer, %io.write_quoted_string.exit
  ret void
}

define internal fastcc void @fmt.fmt_cstring(ptr %0, ptr %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca %runtime.Raw_String, align 8
  %4 = alloca %..string, align 8
  tail call void @llvm.experimental.noalias.scope.decl(metadata !760)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3)
  %5 = icmp eq ptr %1, null
  br i1 %5, label %if.then.i, label %if.done.i

if.then.i:                                        ; preds = %decls
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false), !alias.scope !760
  br label %runtime.cstring_to_string.exit

if.done.i:                                        ; preds = %decls
  %6 = ptrtoint ptr %1 to i64
  br label %cmp.and.i.i

cmp.and.i.i:                                      ; preds = %for.body.i.i, %if.done.i
  %p.03.i.i = phi i64 [ %9, %for.body.i.i ], [ %6, %if.done.i ]
  %7 = inttoptr i64 %p.03.i.i to ptr
  %8 = load i8, ptr %7, align 1, !noalias !760
  %.not1.i.i = icmp eq i8 %8, 0
  br i1 %.not1.i.i, label %runtime.cstring_len.exit.i, label %for.body.i.i

for.body.i.i:                                     ; preds = %cmp.and.i.i
  %9 = add i64 %p.03.i.i, 1
  %.not.i.i = icmp eq i64 %9, 0
  br i1 %.not.i.i, label %runtime.cstring_len.exit.i, label %cmp.and.i.i

runtime.cstring_len.exit.i:                       ; preds = %for.body.i.i, %cmp.and.i.i
  %p.0.lcssa.i.i = phi i64 [ %p.03.i.i, %cmp.and.i.i ], [ 0, %for.body.i.i ]
  %10 = sub i64 %p.0.lcssa.i.i, %6
  %.repack1.i = getelementptr inbounds %runtime.Raw_String, ptr %3, i64 0, i32 1
  store ptr %1, ptr %3, align 8, !noalias !760
  store i64 %10, ptr %.repack1.i, align 8, !noalias !760
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %4, ptr nonnull align 8 %3, i64 16, i1 false)
  br label %runtime.cstring_to_string.exit

runtime.cstring_to_string.exit:                   ; preds = %if.then.i, %runtime.cstring_len.exit.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3)
  call fastcc void @fmt.fmt_string(ptr %0, ptr nonnull %4, i32 %2, ptr %__.context_ptr)
  ret void
}

define internal fastcc void @fmt.fmt_pointer(ptr %0, ptr %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %4 = ptrtoint ptr %1 to i64
  switch i32 %2, label %switch.default.body [
    i32 112, label %switch.case.body
    i32 118, label %switch.case.body
    i32 98, label %switch.case.body1
    i32 111, label %switch.case.body2
    i32 105, label %switch.case.body3
    i32 100, label %switch.case.body3
    i32 122, label %switch.case.body4
    i32 120, label %switch.case.body5
    i32 88, label %switch.case.body6
  ]

switch.case.body:                                 ; preds = %decls, %decls
  %5 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  %6 = load i8, ptr %5, align 1
  %.not = icmp eq i8 %6, 0
  %7 = icmp eq i32 %2, 118
  %or.cond = and i1 %7, %.not
  br i1 %or.cond, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body
  %8 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !763
  %9 = load ptr, ptr %8, align 8, !noalias !767
  %.not.i.i = icmp eq ptr %9, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then
  %10 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %11 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %12 = load ptr, ptr %11, align 8, !noalias !767
  store i64 0, ptr %3, align 8, !noalias !767
  %13 = call i32 %9(ptr %12, i64 4, ptr nonnull @"ggv$a8", i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !771
  %14 = load i64, ptr %3, align 8, !noalias !767
  %15 = load i64, ptr %10, align 8, !noalias !767
  %16 = add i64 %15, %14
  store i64 %16, ptr %10, align 8, !noalias !767
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !763
  br label %if.done

if.done:                                          ; preds = %io.write_string.exit, %switch.case.body
  call fastcc void @fmt._fmt_int(ptr nonnull %0, i64 %4, i64 16, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body1:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %4, i64 2, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body2:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %4, i64 8, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body3:                                ; preds = %decls, %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %4, i64 10, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body4:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %4, i64 12, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body5:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %4, i64 16, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.case.body6:                                ; preds = %decls
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %4, i64 16, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %switch.done

switch.default.body:                              ; preds = %decls
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %2, ptr %__.context_ptr)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %if.done
  ret void
}

declare x86_stdcallcc ptr @GetStdHandle(i32) local_unnamed_addr

define internal fastcc void @fmt.fmt_soa_pointer(ptr nocapture %0, ptr nocapture readonly %1, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %6 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !772
  %7 = load ptr, ptr %5, align 8, !noalias !776
  %.not.i.i = icmp eq ptr %7, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %decls
  %8 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %9 = load ptr, ptr %8, align 8, !noalias !776
  store i64 0, ptr %4, align 8, !noalias !776
  %10 = call i32 %7(ptr %9, i64 4, ptr nonnull @"ggv$a9", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !780
  %11 = load i64, ptr %4, align 8, !noalias !776
  %12 = load i64, ptr %6, align 8, !noalias !776
  %13 = add i64 %12, %11
  store i64 %13, ptr %6, align 8, !noalias !776
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %decls, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !772
  %14 = load ptr, ptr %1, align 8
  %15 = ptrtoint ptr %14 to i64
  call fastcc void @fmt._fmt_int(ptr nonnull %0, i64 %15, i64 16, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !781
  %16 = load ptr, ptr %5, align 8, !noalias !785
  %.not.i.i1 = icmp eq ptr %16, null
  br i1 %.not.i.i1, label %io.write_string.exit5, label %if.then.i.i2

if.then.i.i2:                                     ; preds = %io.write_string.exit
  %17 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %18 = load ptr, ptr %17, align 8, !noalias !785
  store i64 0, ptr %3, align 8, !noalias !785
  %19 = call i32 %16(ptr %18, i64 4, ptr nonnull @"ggv$aa", i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !789
  %20 = load i64, ptr %3, align 8, !noalias !785
  %21 = load i64, ptr %6, align 8, !noalias !785
  %22 = add i64 %21, %20
  store i64 %22, ptr %6, align 8, !noalias !785
  br label %io.write_string.exit5

io.write_string.exit5:                            ; preds = %io.write_string.exit, %if.then.i.i2
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !781
  %23 = getelementptr inbounds %runtime.Raw_Soa_Pointer, ptr %1, i64 0, i32 1
  %24 = load i64, ptr %23, align 8
  call fastcc void @fmt._fmt_int(ptr nonnull %0, i64 %24, i64 10, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2), !noalias !790
  %25 = load ptr, ptr %5, align 8, !noalias !794
  %.not.i.i6 = icmp eq ptr %25, null
  br i1 %.not.i.i6, label %io.write_string.exit10, label %if.then.i.i7

if.then.i.i7:                                     ; preds = %io.write_string.exit5
  %26 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %27 = load ptr, ptr %26, align 8, !noalias !794
  store i64 0, ptr %2, align 8, !noalias !794
  %28 = call i32 %25(ptr %27, i64 4, ptr nonnull @"ggv$ab", i64 0, i64 0, ptr nonnull %2, ptr nonnull %__.context_ptr), !noalias !798
  %29 = load i64, ptr %2, align 8, !noalias !794
  %30 = load i64, ptr %6, align 8, !noalias !794
  %31 = add i64 %30, %29
  store i64 %31, ptr %6, align 8, !noalias !794
  br label %io.write_string.exit10

io.write_string.exit10:                           ; preds = %io.write_string.exit5, %if.then.i.i7
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2), !noalias !790
  ret void
}

declare x86_stdcallcc i32 @SetHandleInformation(ptr, i32, i32) local_unnamed_addr

declare x86_stdcallcc i32 @WriteFile(ptr, ptr, i32, ptr, ptr) local_unnamed_addr

define internal fastcc void @fmt.fmt_enum(ptr %0, ptr nocapture readonly %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %4 = alloca [80 x i8], align 8
  %5 = alloca i64, align 8
  %6 = alloca [40 x i8], align 8
  %7 = alloca i64, align 8
  %8 = alloca [80 x i8], align 8
  %9 = alloca i64, align 8
  %10 = alloca [40 x i8], align 8
  %11 = alloca %..any, align 8
  %str = alloca %..string, align 8
  %12 = alloca %..any, align 8
  %13 = getelementptr inbounds %..any, ptr %1, i64 0, i32 1
  %14 = load i64, ptr %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %decls
  %16 = load ptr, ptr %1, align 8
  %17 = icmp eq ptr %16, null
  br i1 %17, label %if.then, label %if.done

common.ret:                                       ; preds = %typeswitch.default.body, %if.then2, %io.write_string.exit31, %switch.default.body, %runtime.type_info_base.exit, %io.write_string.exit
  ret void

if.then:                                          ; preds = %cmp.or, %decls
  %18 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !799
  %19 = load ptr, ptr %18, align 8, !noalias !803
  %.not.i.i = icmp eq ptr %19, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then
  %20 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %21 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %22 = load ptr, ptr %21, align 8, !noalias !803
  store i64 0, ptr %9, align 8, !noalias !803
  %23 = call i32 %19(ptr %22, i64 4, ptr nonnull @"ggv$ea", i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !807
  %24 = load i64, ptr %9, align 8, !noalias !803
  %25 = load i64, ptr %20, align 8, !noalias !803
  %26 = add i64 %25, %24
  store i64 %26, ptr %20, align 8, !noalias !803
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !799
  br label %common.ret

if.done:                                          ; preds = %cmp.or
  %27 = and i64 %14, 72057594037927935
  %28 = icmp ugt i64 %27, 150
  %n.0.i = select i1 %28, i64 0, i64 %27
  %29 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i
  %30 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5, i32 1
  %31 = load i64, ptr %30, align 8
  %cond = icmp eq i64 %31, 21
  br i1 %cond, label %typeswitch.body, label %typeswitch.default.body

typeswitch.default.body:                          ; preds = %if.done
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body:                                  ; preds = %if.done
  %32 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %10, ptr noundef nonnull align 16 dereferenceable(40) %32, i64 40, i1 false)
  switch i32 %2, label %switch.default.body [
    i32 105, label %switch.case.body
    i32 100, label %switch.case.body
    i32 102, label %switch.case.body
    i32 115, label %runtime.typeid_base.exit.i
    i32 118, label %runtime.typeid_base.exit.i
    i32 113, label %runtime.typeid_base.exit.i
  ]

switch.case.body:                                 ; preds = %typeswitch.body, %typeswitch.body, %typeswitch.body
  %.repack9 = getelementptr inbounds %..any, ptr %11, i64 0, i32 1
  store ptr %16, ptr %11, align 8
  %33 = load ptr, ptr %10, align 8, !nonnull !287, !noundef !287
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %8)
  %34 = getelementptr inbounds %runtime.Type_Info, ptr %33, i64 0, i32 5, i32 1
  %35 = load i64, ptr %34, align 8
  %cond1.i = icmp eq i64 %35, 1
  br i1 %cond1.i, label %typeswitch.body.lr.ph.i, label %runtime.type_info_base.exit

typeswitch.body.lr.ph.i:                          ; preds = %switch.case.body
  %36 = getelementptr inbounds %runtime.Type_Info_Named, ptr %8, i64 0, i32 1
  br label %typeswitch.body.i

typeswitch.body.i:                                ; preds = %typeswitch.body.i, %typeswitch.body.lr.ph.i
  %base.02.i = phi ptr [ %33, %typeswitch.body.lr.ph.i ], [ %38, %typeswitch.body.i ]
  %37 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %8, ptr noundef nonnull align 1 dereferenceable(80) %37, i64 80, i1 false)
  %38 = load ptr, ptr %36, align 8
  %39 = getelementptr inbounds %runtime.Type_Info, ptr %38, i64 0, i32 5, i32 1
  %40 = load i64, ptr %39, align 8
  %cond.i = icmp eq i64 %40, 1
  br i1 %cond.i, label %typeswitch.body.i, label %runtime.type_info_base.exit

runtime.type_info_base.exit:                      ; preds = %typeswitch.body.i, %switch.case.body
  %common.ret.op.i = phi ptr [ %33, %switch.case.body ], [ %38, %typeswitch.body.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %8)
  %41 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i, i64 0, i32 4
  %42 = load i64, ptr %41, align 8
  store i64 %42, ptr %.repack9, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %11, i32 %2, ptr %__.context_ptr)
  br label %common.ret

runtime.typeid_base.exit.i:                       ; preds = %typeswitch.body, %typeswitch.body, %typeswitch.body
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  %43 = icmp ne ptr %29, null
  tail call void @llvm.assume(i1 %43)
  %44 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 4
  %45 = load i64, ptr %44, align 8, !noalias !808
  %46 = and i64 %45, 72057594037927935
  %47 = icmp ugt i64 %46, 150
  %n.0.i.i10 = select i1 %47, i64 0, i64 %46
  %48 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i.i10, i32 5, i32 1
  %49 = load i64, ptr %48, align 8, !noalias !808
  %cond.i11 = icmp eq i64 %49, 21
  br i1 %cond.i11, label %typeswitch.body.i13, label %if.else

typeswitch.body.i13:                              ; preds = %runtime.typeid_base.exit.i
  %50 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i.i10, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %6, ptr noundef nonnull align 16 dereferenceable(40) %50, i64 40, i1 false), !noalias !808
  store i64 0, ptr %7, align 8, !noalias !808
  %51 = call fastcc i8 @reflect.as_i64(ptr nonnull %16, i64 %14, ptr %7), !noalias !808
  %52 = load i64, ptr %7, align 8, !noalias !808
  %.not.i = icmp eq i8 %51, 0
  br i1 %.not.i, label %if.else, label %if.then.i

if.then.i:                                        ; preds = %typeswitch.body.i13
  %53 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 2, i32 1
  %54 = load i64, ptr %53, align 8, !noalias !808
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %if.then2, label %for.index.loop.preheader.i

for.index.loop.preheader.i:                       ; preds = %if.then.i
  %56 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8, !noalias !808
  %smax.i = tail call i64 @llvm.smax.i64(i64 %54, i64 0)
  %58 = add nsw i64 %smax.i, -1
  br label %for.index.loop.i

for.index.loop.i:                                 ; preds = %for.index.body.i, %for.index.loop.preheader.i
  %.0.i = phi i64 [ %59, %for.index.body.i ], [ -1, %for.index.loop.preheader.i ]
  %exitcond.not.i = icmp eq i64 %.0.i, %58
  br i1 %exitcond.not.i, label %if.else, label %for.index.body.i

for.index.body.i:                                 ; preds = %for.index.loop.i
  %59 = add nsw i64 %.0.i, 1
  %60 = getelementptr i64, ptr %57, i64 %59
  %61 = load i64, ptr %60, align 8, !noalias !808
  %62 = icmp eq i64 %61, %52
  br i1 %62, label %if.then2.i, label %for.index.loop.i

if.then2.i:                                       ; preds = %for.index.body.i
  %63 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 1
  %64 = load ptr, ptr %63, align 8, !noalias !808
  %65 = getelementptr %..string, ptr %64, i64 %59
  %.unpack13.i = load ptr, ptr %65, align 8, !noalias !808
  %.elt14.i = getelementptr %..string, ptr %64, i64 %59, i32 1
  %.unpack15.i = load i64, ptr %.elt14.i, align 8, !noalias !808
  br label %if.then2

if.then2:                                         ; preds = %if.then.i, %if.then2.i
  %.unpack5 = phi i64 [ %.unpack15.i, %if.then2.i ], [ 0, %if.then.i ]
  %.unpack = phi ptr [ %.unpack13.i, %if.then2.i ], [ null, %if.then.i ]
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  store ptr %.unpack, ptr %str, align 8
  %str.repack6 = getelementptr inbounds %..string, ptr %str, i64 0, i32 1
  store i64 %.unpack5, ptr %str.repack6, align 8
  call fastcc void @fmt.fmt_string(ptr %0, ptr nonnull %str, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.else:                                          ; preds = %for.index.loop.i, %typeswitch.body.i13, %runtime.typeid_base.exit.i
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  %66 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %67 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !811
  %68 = load ptr, ptr %66, align 8, !noalias !815
  %.not.i.i14 = icmp eq ptr %68, null
  br i1 %.not.i.i14, label %io.write_string.exit18, label %if.then.i.i15

if.then.i.i15:                                    ; preds = %if.else
  %69 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %70 = load ptr, ptr %69, align 8, !noalias !815
  store i64 0, ptr %5, align 8, !noalias !815
  %71 = call i32 %68(ptr %70, i64 4, ptr nonnull @"ggv$ad", i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !819
  %72 = load i64, ptr %5, align 8, !noalias !815
  %73 = load i64, ptr %67, align 8, !noalias !815
  %74 = add i64 %73, %72
  store i64 %74, ptr %67, align 8, !noalias !815
  br label %io.write_string.exit18

io.write_string.exit18:                           ; preds = %if.else, %if.then.i.i15
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !811
  %.repack8 = getelementptr inbounds %..any, ptr %12, i64 0, i32 1
  %75 = load ptr, ptr %1, align 8
  store ptr %75, ptr %12, align 8
  %76 = load ptr, ptr %10, align 8, !nonnull !287, !noundef !287
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %4)
  %77 = getelementptr inbounds %runtime.Type_Info, ptr %76, i64 0, i32 5, i32 1
  %78 = load i64, ptr %77, align 8
  %cond1.i20 = icmp eq i64 %78, 1
  br i1 %cond1.i20, label %typeswitch.body.lr.ph.i22, label %runtime.type_info_base.exit26

typeswitch.body.lr.ph.i22:                        ; preds = %io.write_string.exit18
  %79 = getelementptr inbounds %runtime.Type_Info_Named, ptr %4, i64 0, i32 1
  br label %typeswitch.body.i23

typeswitch.body.i23:                              ; preds = %typeswitch.body.i23, %typeswitch.body.lr.ph.i22
  %base.02.i24 = phi ptr [ %76, %typeswitch.body.lr.ph.i22 ], [ %81, %typeswitch.body.i23 ]
  %80 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i24, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %4, ptr noundef nonnull align 1 dereferenceable(80) %80, i64 80, i1 false)
  %81 = load ptr, ptr %79, align 8
  %82 = getelementptr inbounds %runtime.Type_Info, ptr %81, i64 0, i32 5, i32 1
  %83 = load i64, ptr %82, align 8
  %cond.i25 = icmp eq i64 %83, 1
  br i1 %cond.i25, label %typeswitch.body.i23, label %runtime.type_info_base.exit26

runtime.type_info_base.exit26:                    ; preds = %typeswitch.body.i23, %io.write_string.exit18
  %common.ret.op.i21 = phi ptr [ %76, %io.write_string.exit18 ], [ %81, %typeswitch.body.i23 ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %4)
  %84 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i21, i64 0, i32 4
  %85 = load i64, ptr %84, align 8
  store i64 %85, ptr %.repack8, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %12, i32 105, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !820
  %86 = load ptr, ptr %66, align 8, !noalias !824
  %.not.i.i27 = icmp eq ptr %86, null
  br i1 %.not.i.i27, label %io.write_string.exit31, label %if.then.i.i28

if.then.i.i28:                                    ; preds = %runtime.type_info_base.exit26
  %87 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %88 = load ptr, ptr %87, align 8, !noalias !824
  store i64 0, ptr %3, align 8, !noalias !824
  %89 = call i32 %86(ptr %88, i64 4, ptr nonnull @"ggv$12a", i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !828
  %90 = load i64, ptr %3, align 8, !noalias !824
  %91 = load i64, ptr %67, align 8, !noalias !824
  %92 = add i64 %91, %90
  store i64 %92, ptr %67, align 8, !noalias !824
  br label %io.write_string.exit31

io.write_string.exit31:                           ; preds = %runtime.type_info_base.exit26, %if.then.i.i28
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !820
  br label %common.ret

switch.default.body:                              ; preds = %typeswitch.body
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %2, ptr %__.context_ptr)
  br label %common.ret
}

declare x86_stdcallcc i32 @GetLastError() local_unnamed_addr

; Function Attrs: nofree nosync nounwind memory(readwrite, inaccessiblemem: none)
define internal fastcc i8 @fmt.stored_enum_value_to_string(ptr readonly %0, i64 %1, i64 %2, ptr noalias nocapture nonnull writeonly %3) unnamed_addr #9 {
decls:
  %4 = alloca [80 x i8], align 8
  %5 = alloca [80 x i8], align 8
  %6 = alloca [40 x i8], align 8
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %5)
  %7 = icmp eq ptr %0, null
  br i1 %7, label %decls.runtime.type_info_base.exit_crit_edge, label %for.body.preheader.i

decls.runtime.type_info_base.exit_crit_edge:      ; preds = %decls
  %.pre = load i64, ptr inttoptr (i64 152 to ptr), align 8
  br label %runtime.type_info_base.exit

for.body.preheader.i:                             ; preds = %decls
  %8 = getelementptr inbounds %runtime.Type_Info, ptr %0, i64 0, i32 5, i32 1
  %9 = load i64, ptr %8, align 8
  %cond1.i = icmp eq i64 %9, 1
  br i1 %cond1.i, label %typeswitch.body.lr.ph.i, label %runtime.type_info_base.exit

typeswitch.body.lr.ph.i:                          ; preds = %for.body.preheader.i
  %10 = getelementptr inbounds %runtime.Type_Info_Named, ptr %5, i64 0, i32 1
  br label %typeswitch.body.i

typeswitch.body.i:                                ; preds = %typeswitch.body.i, %typeswitch.body.lr.ph.i
  %base.02.i = phi ptr [ %0, %typeswitch.body.lr.ph.i ], [ %12, %typeswitch.body.i ]
  %11 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %5, ptr noundef nonnull align 1 dereferenceable(80) %11, i64 80, i1 false)
  %12 = load ptr, ptr %10, align 8
  %13 = getelementptr inbounds %runtime.Type_Info, ptr %12, i64 0, i32 5, i32 1
  %14 = load i64, ptr %13, align 8
  %cond.i = icmp eq i64 %14, 1
  br i1 %cond.i, label %typeswitch.body.i, label %runtime.type_info_base.exit

runtime.type_info_base.exit:                      ; preds = %typeswitch.body.i, %decls.runtime.type_info_base.exit_crit_edge, %for.body.preheader.i
  %15 = phi i64 [ %.pre, %decls.runtime.type_info_base.exit_crit_edge ], [ %9, %for.body.preheader.i ], [ %14, %typeswitch.body.i ]
  %common.ret.op.i = phi ptr [ null, %decls.runtime.type_info_base.exit_crit_edge ], [ %0, %for.body.preheader.i ], [ %12, %typeswitch.body.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %5)
  %16 = add i64 %2, %1
  %cond = icmp eq i64 %15, 21
  br i1 %cond, label %typeswitch.body, label %typeswitch.default.body

common.ret:                                       ; preds = %if.done12, %if.then8, %if.then2, %if.then1, %typeswitch.default.body
  %common.ret.op = phi i8 [ 0, %typeswitch.default.body ], [ 1, %if.then1 ], [ 1, %if.then2 ], [ 1, %if.then8 ], [ 0, %if.done12 ]
  ret i8 %common.ret.op

typeswitch.default.body:                          ; preds = %runtime.type_info_base.exit
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  br label %common.ret

typeswitch.body:                                  ; preds = %runtime.type_info_base.exit
  %17 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %6, ptr noundef nonnull align 1 dereferenceable(40) %17, i64 40, i1 false)
  %18 = load ptr, ptr %6, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %if.else, label %for.body.preheader.i.i

for.body.preheader.i.i:                           ; preds = %typeswitch.body
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %4)
  %20 = getelementptr inbounds %runtime.Type_Info, ptr %18, i64 0, i32 5, i32 1
  %21 = load i64, ptr %20, align 8
  %cond1.i.i = icmp eq i64 %21, 1
  br i1 %cond1.i.i, label %typeswitch.body.lr.ph.i.i, label %reflect.is_string.exit

typeswitch.body.lr.ph.i.i:                        ; preds = %for.body.preheader.i.i
  %22 = getelementptr inbounds %runtime.Type_Info_Named, ptr %4, i64 0, i32 1
  br label %typeswitch.body.i.i

typeswitch.body.i.i:                              ; preds = %typeswitch.body.i.i, %typeswitch.body.lr.ph.i.i
  %base.02.i.i = phi ptr [ %18, %typeswitch.body.lr.ph.i.i ], [ %24, %typeswitch.body.i.i ]
  %23 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %4, ptr noundef nonnull align 1 dereferenceable(80) %23, i64 80, i1 false)
  %24 = load ptr, ptr %22, align 8
  %25 = getelementptr inbounds %runtime.Type_Info, ptr %24, i64 0, i32 5, i32 1
  %26 = load i64, ptr %25, align 8
  %cond.i.i = icmp eq i64 %26, 1
  br i1 %cond.i.i, label %typeswitch.body.i.i, label %reflect.is_string.exit

reflect.is_string.exit:                           ; preds = %typeswitch.body.i.i, %for.body.preheader.i.i
  %27 = phi i64 [ %21, %for.body.preheader.i.i ], [ %26, %typeswitch.body.i.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %4)
  %.not = icmp eq i64 %27, 7
  br i1 %.not, label %if.then, label %if.else

if.then:                                          ; preds = %reflect.is_string.exit
  %28 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 2
  %29 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 2, i32 1
  %30 = load i64, ptr %29, align 8
  %31 = load ptr, ptr %28, align 8
  %smax = tail call i64 @llvm.smax.i64(i64 %30, i64 0)
  %32 = add nsw i64 %smax, -1
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %if.then
  %.015 = phi i64 [ -1, %if.then ], [ %33, %for.index.body ]
  %exitcond.not = icmp eq i64 %.015, %32
  br i1 %exitcond.not, label %if.done12, label %for.index.body

for.index.body:                                   ; preds = %for.index.loop
  %33 = add nsw i64 %.015, 1
  %34 = getelementptr i64, ptr %31, i64 %33
  %35 = load i64, ptr %34, align 8
  %36 = icmp eq i64 %35, %16
  br i1 %36, label %if.then1, label %for.index.loop

if.then1:                                         ; preds = %for.index.body
  %37 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr %..string, ptr %38, i64 %33
  %.unpack23 = load ptr, ptr %39, align 8
  %.elt24 = getelementptr %..string, ptr %38, i64 %33, i32 1
  %.unpack25 = load i64, ptr %.elt24, align 8
  store ptr %.unpack23, ptr %3, align 8
  %.repack26 = getelementptr inbounds %..string, ptr %3, i64 0, i32 1
  store i64 %.unpack25, ptr %.repack26, align 8
  br label %common.ret

if.else:                                          ; preds = %typeswitch.body, %reflect.is_string.exit
  %40 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 2, i32 1
  %41 = load i64, ptr %40, align 8
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %if.then2, label %for.index.loop4.preheader

for.index.loop4.preheader:                        ; preds = %if.else
  %43 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8
  %smax11 = tail call i64 @llvm.smax.i64(i64 %41, i64 0)
  %45 = add nsw i64 %smax11, -1
  br label %for.index.loop4

if.then2:                                         ; preds = %if.else
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  br label %common.ret

for.index.loop4:                                  ; preds = %for.index.loop4.preheader, %for.index.body5
  %.0 = phi i64 [ %46, %for.index.body5 ], [ -1, %for.index.loop4.preheader ]
  %exitcond12.not = icmp eq i64 %.0, %45
  br i1 %exitcond12.not, label %if.done12, label %for.index.body5

for.index.body5:                                  ; preds = %for.index.loop4
  %46 = add nsw i64 %.0, 1
  %47 = getelementptr i64, ptr %44, i64 %46
  %48 = load i64, ptr %47, align 8
  %49 = icmp eq i64 %48, %16
  br i1 %49, label %if.then8, label %for.index.loop4

if.then8:                                         ; preds = %for.index.body5
  %50 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %6, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8
  %52 = getelementptr %..string, ptr %51, i64 %46
  %.unpack = load ptr, ptr %52, align 8
  %.elt18 = getelementptr %..string, ptr %51, i64 %46, i32 1
  %.unpack19 = load i64, ptr %.elt18, align 8
  store ptr %.unpack, ptr %3, align 8
  %.repack20 = getelementptr inbounds %..string, ptr %3, i64 0, i32 1
  store i64 %.unpack19, ptr %.repack20, align 8
  br label %common.ret

if.done12:                                        ; preds = %for.index.loop, %for.index.loop4
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  br label %common.ret
}

define internal fastcc void @fmt.fmt_bit_set(ptr %0, ptr nocapture readonly %1, ptr %2, i32 %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %buf.i120 = alloca [1 x i8], align 1
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca i64, align 8
  %a.i.i = alloca [129 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %buf.i118 = alloca [32 x i8], align 1
  %8 = alloca %..string, align 8
  %s.i = alloca %..string, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %12 = alloca { ptr, i64 }, align 8
  %13 = alloca i64, align 8
  %14 = alloca [80 x i8], align 8
  %15 = alloca [80 x i8], align 8
  %16 = alloca [80 x i8], align 8
  %val = alloca %..any, align 8
  %x = alloca i8, align 1
  %17 = alloca %..any, align 8
  %x10 = alloca i16, align 2
  %18 = alloca %..any, align 8
  %x16 = alloca i32, align 4
  %19 = alloca %..any, align 8
  %x22 = alloca i64, align 8
  %20 = alloca %..any, align 8
  %x28 = alloca i128, align 8
  %21 = alloca %..any, align 8
  %22 = alloca i64, align 8
  %23 = getelementptr inbounds %..any, ptr %1, i64 0, i32 1
  %24 = load i64, ptr %23, align 8
  %25 = and i64 %24, 72057594037927935
  %26 = icmp ugt i64 %25, 150
  %n.0.i = select i1 %26, i64 0, i64 %25
  %27 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i
  %28 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5
  %29 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5, i32 1
  %30 = load i64, ptr %29, align 8
  switch i64 %30, label %common.ret [
    i64 1, label %typeswitch.body
    i64 23, label %typeswitch.body1
  ]

typeswitch.body:                                  ; preds = %decls
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %16, ptr noundef nonnull align 16 dereferenceable(80) %28, i64 80, i1 false)
  %.unpack95 = load ptr, ptr %1, align 8
  store ptr %.unpack95, ptr %val, align 8
  %val.repack98 = getelementptr inbounds %..any, ptr %val, i64 0, i32 1
  %31 = getelementptr inbounds %runtime.Type_Info_Named, ptr %16, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr inbounds %runtime.Type_Info, ptr %32, i64 0, i32 4
  %34 = load i64, ptr %33, align 8
  store i64 %34, ptr %val.repack98, align 8
  call fastcc void @fmt.fmt_bit_set(ptr %0, ptr nonnull %val, ptr nonnull %16, i32 %3, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body1:                                 ; preds = %decls
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %16, ptr nonnull align 16 %28, i64 32, i1 false)
  %35 = load i64, ptr %27, align 16
  %36 = shl i64 %35, 3
  %37 = sext i64 %36 to i128
  %38 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %16, i64 0, i32 1
  %39 = load ptr, ptr %38, align 8
  %40 = icmp eq ptr %39, null
  br i1 %40, label %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit, label %for.body.preheader.i.i

for.body.preheader.i.i:                           ; preds = %typeswitch.body1
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %15)
  %41 = getelementptr inbounds %runtime.Type_Info, ptr %39, i64 0, i32 5, i32 1
  %42 = load i64, ptr %41, align 8
  %cond1.i.i = icmp eq i64 %42, 1
  br i1 %cond1.i.i, label %typeswitch.body.lr.ph.i.i, label %runtime.type_info_base.exit.i

typeswitch.body.lr.ph.i.i:                        ; preds = %for.body.preheader.i.i
  %43 = getelementptr inbounds %runtime.Type_Info_Named, ptr %15, i64 0, i32 1
  br label %typeswitch.body.i.i

typeswitch.body.i.i:                              ; preds = %typeswitch.body.i.i, %typeswitch.body.lr.ph.i.i
  %base.02.i.i = phi ptr [ %39, %typeswitch.body.lr.ph.i.i ], [ %45, %typeswitch.body.i.i ]
  %44 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %15, ptr noundef nonnull align 1 dereferenceable(80) %44, i64 80, i1 false)
  %45 = load ptr, ptr %43, align 8
  %46 = getelementptr inbounds %runtime.Type_Info, ptr %45, i64 0, i32 5, i32 1
  %47 = load i64, ptr %46, align 8
  %cond.i.i = icmp eq i64 %47, 1
  br i1 %cond.i.i, label %typeswitch.body.i.i, label %runtime.type_info_base.exit.i

runtime.type_info_base.exit.i:                    ; preds = %typeswitch.body.i.i, %for.body.preheader.i.i
  %48 = phi i64 [ %42, %for.body.preheader.i.i ], [ %47, %typeswitch.body.i.i ]
  %common.ret.op.i.i = phi ptr [ %39, %for.body.preheader.i.i ], [ %45, %typeswitch.body.i.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %15)
  %cond.i = icmp eq i64 %48, 2
  br i1 %cond.i, label %typeswitch.body.i, label %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit

typeswitch.body.i:                                ; preds = %runtime.type_info_base.exit.i
  %49 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i.i, i64 0, i32 5
  %50 = load i16, ptr %49, align 1
  %.mask.i = and i16 %50, -256
  %cond3.i = icmp eq i16 %.mask.i, 512
  %spec.select.i = zext i1 %cond3.i to i8
  br label %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit

fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit: ; preds = %typeswitch.body1, %runtime.type_info_base.exit.i, %typeswitch.body.i
  %common.ret.op.i = phi i8 [ 0, %typeswitch.body1 ], [ 0, %runtime.type_info_base.exit.i ], [ %spec.select.i, %typeswitch.body.i ]
  switch i32 %3, label %if.done [
    i32 98, label %cmp.and
    i32 111, label %cmp.and
    i32 100, label %cmp.and
    i32 105, label %cmp.and
    i32 122, label %cmp.and
    i32 120, label %cmp.and
    i32 88, label %cmp.and
  ]

cmp.and:                                          ; preds = %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit, %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit, %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit, %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit, %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit, %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit, %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit
  %51 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 5
  %52 = load i8, ptr %51, align 1
  %.not94 = icmp eq i8 %52, 0
  br i1 %.not94, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  %53 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 8
  store i8 1, ptr %51, align 1
  store i64 %36, ptr %53, align 8
  br label %if.done

if.done:                                          ; preds = %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit, %if.then, %cmp.and
  %54 = phi i1 [ true, %if.then ], [ true, %cmp.and ], [ false, %fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0.exit ]
  switch i128 %37, label %switch.default.body [
    i128 0, label %switch.done
    i128 8, label %switch.case.body6
    i128 16, label %switch.case.body9
    i128 32, label %switch.case.body15
    i128 64, label %switch.case.body21
    i128 128, label %switch.case.body27
  ]

switch.case.body6:                                ; preds = %if.done
  %55 = load ptr, ptr %1, align 8
  %56 = load i8, ptr %55, align 1
  store i8 %56, ptr %x, align 1
  br i1 %54, label %if.then7, label %if.done8

common.ret:                                       ; preds = %decls, %typeswitch.body, %io.write_byte.exit124, %if.then31, %if.then25, %if.then19, %if.then13, %if.then7
  ret void

if.then7:                                         ; preds = %switch.case.body6
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %17, i8 0, i64 16, i1 false)
  %57 = getelementptr inbounds %..any, ptr %17, i64 0, i32 1
  store ptr %x, ptr %17, align 8
  store i64 72057594037927945, ptr %57, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %17, i32 %3, ptr %__.context_ptr)
  br label %common.ret

if.done8:                                         ; preds = %switch.case.body6
  %58 = zext i8 %56 to i128
  br label %switch.done

switch.case.body9:                                ; preds = %if.done
  %59 = load ptr, ptr %1, align 8
  %60 = load i16, ptr %59, align 2
  %.not92 = icmp eq i8 %common.ret.op.i, 0
  %61 = tail call i16 @llvm.bswap.i16(i16 %60)
  %spec.select = select i1 %.not92, i16 %60, i16 %61
  store i16 %spec.select, ptr %x10, align 2
  br i1 %54, label %if.then13, label %if.done14

if.then13:                                        ; preds = %switch.case.body9
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %18, i8 0, i64 16, i1 false)
  %62 = getelementptr inbounds %..any, ptr %18, i64 0, i32 1
  store ptr %x10, ptr %18, align 8
  store i64 72057594037928041, ptr %62, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %18, i32 %3, ptr %__.context_ptr)
  br label %common.ret

if.done14:                                        ; preds = %switch.case.body9
  %63 = zext i16 %spec.select to i128
  br label %switch.done

switch.case.body15:                               ; preds = %if.done
  %64 = load ptr, ptr %1, align 8
  %65 = load i32, ptr %64, align 4
  %.not90 = icmp eq i8 %common.ret.op.i, 0
  %66 = tail call i32 @llvm.bswap.i32(i32 %65)
  %spec.select100 = select i1 %.not90, i32 %65, i32 %66
  store i32 %spec.select100, ptr %x16, align 4
  br i1 %54, label %if.then19, label %if.done20

if.then19:                                        ; preds = %switch.case.body15
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %19, i8 0, i64 16, i1 false)
  %67 = getelementptr inbounds %..any, ptr %19, i64 0, i32 1
  store ptr %x16, ptr %19, align 8
  store i64 72057594037927955, ptr %67, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %19, i32 %3, ptr %__.context_ptr)
  br label %common.ret

if.done20:                                        ; preds = %switch.case.body15
  %68 = zext i32 %spec.select100 to i128
  br label %switch.done

switch.case.body21:                               ; preds = %if.done
  %69 = load ptr, ptr %1, align 8
  %70 = load i64, ptr %69, align 8
  %.not88 = icmp eq i8 %common.ret.op.i, 0
  %71 = tail call i64 @llvm.bswap.i64(i64 %70)
  %spec.select101 = select i1 %.not88, i64 %70, i64 %71
  store i64 %spec.select101, ptr %x22, align 8
  br i1 %54, label %if.then25, label %if.done26

if.then25:                                        ; preds = %switch.case.body21
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %20, i8 0, i64 16, i1 false)
  %72 = getelementptr inbounds %..any, ptr %20, i64 0, i32 1
  store ptr %x22, ptr %20, align 8
  store i64 72057594037927943, ptr %72, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %20, i32 %3, ptr %__.context_ptr)
  br label %common.ret

if.done26:                                        ; preds = %switch.case.body21
  %73 = zext i64 %spec.select101 to i128
  br label %switch.done

switch.case.body27:                               ; preds = %if.done
  %74 = load ptr, ptr %1, align 8
  %75 = load i128, ptr %74, align 8
  %.not = icmp eq i8 %common.ret.op.i, 0
  %76 = tail call i128 @llvm.bswap.i128(i128 %75)
  %storemerge = select i1 %.not, i128 %75, i128 %76
  store i128 %storemerge, ptr %x28, align 8
  br i1 %54, label %if.then31, label %switch.done

if.then31:                                        ; preds = %switch.case.body27
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %21, i8 0, i64 16, i1 false)
  %77 = getelementptr inbounds %..any, ptr %21, i64 0, i32 1
  store ptr %x28, ptr %21, align 8
  store i64 72057594037928044, ptr %77, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %21, i32 %3, ptr %__.context_ptr)
  br label %common.ret

switch.default.body:                              ; preds = %if.done
  %78 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %79 = load ptr, ptr %78, align 8, !alias.scope !829
  %80 = icmp eq ptr %79, null
  %spec.store.select.i = select i1 %80, ptr @runtime.default_assertion_failure_proc, ptr %79
  tail call void %spec.store.select.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$b0", ptr nonnull @"ggv$af", ptr nonnull %__.context_ptr)
  unreachable

switch.done:                                      ; preds = %switch.case.body27, %if.done, %if.done26, %if.done20, %if.done14, %if.done8
  %bits.0 = phi i128 [ %73, %if.done26 ], [ %68, %if.done20 ], [ %63, %if.done14 ], [ %58, %if.done8 ], [ %37, %if.done ], [ %storemerge, %switch.case.body27 ]
  %81 = load ptr, ptr %16, align 8
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %14)
  %82 = icmp eq ptr %81, null
  br i1 %82, label %runtime.type_info_base.exit, label %for.body.preheader.i

for.body.preheader.i:                             ; preds = %switch.done
  %83 = getelementptr inbounds %runtime.Type_Info, ptr %81, i64 0, i32 5, i32 1
  %84 = load i64, ptr %83, align 8
  %cond1.i = icmp eq i64 %84, 1
  br i1 %cond1.i, label %typeswitch.body.lr.ph.i, label %runtime.type_info_base.exit

typeswitch.body.lr.ph.i:                          ; preds = %for.body.preheader.i
  %85 = getelementptr inbounds %runtime.Type_Info_Named, ptr %14, i64 0, i32 1
  br label %typeswitch.body.i103

typeswitch.body.i103:                             ; preds = %typeswitch.body.i103, %typeswitch.body.lr.ph.i
  %base.02.i = phi ptr [ %81, %typeswitch.body.lr.ph.i ], [ %87, %typeswitch.body.i103 ]
  %86 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %14, ptr noundef nonnull align 1 dereferenceable(80) %86, i64 80, i1 false)
  %87 = load ptr, ptr %85, align 8
  %88 = getelementptr inbounds %runtime.Type_Info, ptr %87, i64 0, i32 5, i32 1
  %89 = load i64, ptr %88, align 8
  %cond.i104 = icmp eq i64 %89, 1
  br i1 %cond.i104, label %typeswitch.body.i103, label %runtime.type_info_base.exit

runtime.type_info_base.exit:                      ; preds = %typeswitch.body.i103, %switch.done, %for.body.preheader.i
  %common.ret.op.i102 = phi ptr [ null, %switch.done ], [ %81, %for.body.preheader.i ], [ %87, %typeswitch.body.i103 ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %14)
  %90 = getelementptr inbounds %..string, ptr %2, i64 0, i32 1
  %91 = load i64, ptr %90, align 8
  %.not49 = icmp eq i64 %91, 0
  %92 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  br i1 %.not49, label %if.else, label %if.then33

if.then33:                                        ; preds = %runtime.type_info_base.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13), !noalias !832
  %93 = load ptr, ptr %92, align 8, !noalias !836
  %.not.i.i = icmp eq ptr %93, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then33
  %94 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %95 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %96 = load ptr, ptr %95, align 8, !noalias !836
  store i64 0, ptr %13, align 8, !noalias !836
  %97 = call i32 %93(ptr %96, i64 4, ptr nonnull %2, i64 0, i64 0, ptr nonnull %13, ptr nonnull %__.context_ptr), !noalias !840
  %98 = load i64, ptr %13, align 8, !noalias !836
  %99 = load i64, ptr %94, align 8, !noalias !836
  %100 = add i64 %99, %98
  store i64 %100, ptr %94, align 8, !noalias !836
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then33, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !832
  br label %if.done34

if.else:                                          ; preds = %runtime.type_info_base.exit
  %101 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  store i64 0, ptr %22, align 8
  %102 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %92, ptr nonnull %27, ptr nonnull %101, ptr %22, ptr %__.context_ptr)
  br label %if.done34

if.done34:                                        ; preds = %if.else, %io.write_string.exit
  %103 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %104 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12)
  store i8 123, ptr %buf.i, align 1, !noalias !841
  store ptr %buf.i, ptr %12, align 8, !noalias !841
  %105 = getelementptr inbounds { ptr, i64 }, ptr %12, i64 0, i32 1
  store i64 1, ptr %105, align 8, !noalias !841
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11), !noalias !841
  %106 = load ptr, ptr %103, align 8, !noalias !844
  %.not.i.i105 = icmp eq ptr %106, null
  br i1 %.not.i.i105, label %io.write_byte.exit, label %if.then.i.i106

if.then.i.i106:                                   ; preds = %if.done34
  %107 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %108 = load ptr, ptr %107, align 8, !noalias !844
  store i64 0, ptr %11, align 8, !noalias !844
  %109 = call i32 %106(ptr %108, i64 4, ptr nonnull %12, i64 0, i64 0, ptr nonnull %11, ptr nonnull %__.context_ptr), !noalias !848
  %110 = load i64, ptr %11, align 8, !noalias !844
  %111 = load i64, ptr %104, align 8, !noalias !844
  %112 = add i64 %111, %110
  store i64 %112, ptr %104, align 8, !noalias !844
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %if.done34, %if.then.i.i106
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !841
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12)
  %113 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i102, i64 0, i32 5, i32 1
  %114 = load i64, ptr %113, align 8
  %.not141 = icmp eq i64 %114, 21
  br i1 %.not141, label %union_cast.ok, label %union_cast.end

union_cast.ok:                                    ; preds = %io.write_byte.exit
  %.elt70 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i102, i64 0, i32 5, i32 0, i64 1
  %.unpack71.unpack = load ptr, ptr %.elt70, align 8
  %.elt72 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i102, i64 0, i32 5, i32 0, i64 3
  %.unpack73.unpack = load ptr, ptr %.elt72, align 8
  %.unpack73.elt77 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i102, i64 0, i32 5, i32 0, i64 4
  %.unpack73.unpack78 = load i64, ptr %.unpack73.elt77, align 8
  br label %union_cast.end

union_cast.end:                                   ; preds = %union_cast.ok, %io.write_byte.exit
  %.unpack53.unpack58 = phi i64 [ %.unpack73.unpack78, %union_cast.ok ], [ 0, %io.write_byte.exit ]
  %.unpack53.unpack = phi ptr [ %.unpack73.unpack, %union_cast.ok ], [ null, %io.write_byte.exit ]
  %.unpack51.unpack = phi ptr [ %.unpack71.unpack, %union_cast.ok ], [ null, %io.write_byte.exit ]
  %.not132 = icmp eq i64 %36, 0
  br i1 %.not132, label %defer, label %for.interval.body.lr.ph

for.interval.body.lr.ph:                          ; preds = %union_cast.end
  %115 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %116 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %16, i64 0, i32 2
  %117 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  %.elt1.i = getelementptr inbounds %..string, ptr %8, i64 0, i32 1
  %s.repack3.i = getelementptr inbounds %..string, ptr %s.i, i64 0, i32 1
  %smax = call i64 @llvm.smax.i64(i64 %.unpack53.unpack58, i64 0)
  %118 = add nsw i64 %smax, -1
  br label %for.interval.body

for.interval.body:                                ; preds = %for.interval.body.lr.ph, %for.interval.post
  %i.0131 = phi i128 [ 0, %for.interval.body.lr.ph ], [ %170, %for.interval.post ]
  %commas.0130 = phi i64 [ 0, %for.interval.body.lr.ph ], [ %commas.1, %for.interval.post ]
  %119 = icmp ult i128 %i.0131, 128
  %120 = shl nuw i128 1, %i.0131
  %121 = select i1 %119, i128 %120, i128 0
  %122 = and i128 %121, %bits.0
  %123 = icmp eq i128 %122, 0
  br i1 %123, label %for.interval.post, label %if.done37

if.done37:                                        ; preds = %for.interval.body
  %124 = icmp sgt i64 %commas.0130, 0
  br i1 %124, label %if.then38, label %if.done39

if.then38:                                        ; preds = %if.done37
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !849
  %125 = load ptr, ptr %103, align 8, !noalias !853
  %.not.i.i108 = icmp eq ptr %125, null
  br i1 %.not.i.i108, label %io.write_string.exit112, label %if.then.i.i109

if.then.i.i109:                                   ; preds = %if.then38
  %126 = load ptr, ptr %115, align 8, !noalias !853
  store i64 0, ptr %10, align 8, !noalias !853
  %127 = call i32 %125(ptr %126, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !857
  %128 = load i64, ptr %10, align 8, !noalias !853
  %129 = load i64, ptr %104, align 8, !noalias !853
  %130 = add i64 %129, %128
  store i64 %130, ptr %104, align 8, !noalias !853
  br label %io.write_string.exit112

io.write_string.exit112:                          ; preds = %if.then38, %if.then.i.i109
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !849
  br label %if.done39

if.done39:                                        ; preds = %io.write_string.exit112, %if.done37
  %131 = trunc i128 %i.0131 to i64
  br i1 %.not141, label %for.index.loop, label %if.done44

for.index.loop:                                   ; preds = %if.done39, %for.index.body
  %.0 = phi i64 [ %132, %for.index.body ], [ -1, %if.done39 ]
  %exitcond.not = icmp eq i64 %.0, %118
  br i1 %exitcond.not, label %if.done44, label %for.index.body

for.index.body:                                   ; preds = %for.index.loop
  %132 = add nsw i64 %.0, 1
  %133 = getelementptr i64, ptr %.unpack53.unpack, i64 %132
  %134 = load i64, ptr %133, align 8
  %135 = icmp eq i64 %134, %131
  br i1 %135, label %if.then41, label %for.index.loop

if.then41:                                        ; preds = %for.index.body
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !858
  %136 = load ptr, ptr %103, align 8, !noalias !862
  %.not.i.i113 = icmp eq ptr %136, null
  br i1 %.not.i.i113, label %io.write_string.exit117, label %if.then.i.i114

if.then.i.i114:                                   ; preds = %if.then41
  %137 = getelementptr %..string, ptr %.unpack51.unpack, i64 %132
  %138 = load ptr, ptr %115, align 8, !noalias !862
  store i64 0, ptr %9, align 8, !noalias !862
  %139 = call i32 %136(ptr %138, i64 4, ptr %137, i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !866
  %140 = load i64, ptr %9, align 8, !noalias !862
  %141 = load i64, ptr %104, align 8, !noalias !862
  %142 = add i64 %141, %140
  store i64 %142, ptr %104, align 8, !noalias !862
  br label %io.write_string.exit117

io.write_string.exit117:                          ; preds = %if.then41, %if.then.i.i114
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !858
  %143 = add i64 %commas.0130, 1
  br label %for.interval.post

if.done44:                                        ; preds = %for.index.loop, %if.done39
  %144 = load i64, ptr %116, align 8
  %145 = add i64 %144, %131
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %buf.i118)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %s.i)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %buf.i118, i8 0, i64 32, i1 false), !noalias !867
  call void @llvm.lifetime.start.p0(i64 129, ptr nonnull %a.i.i), !noalias !867
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7), !noalias !867
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a.i.i, i8 0, i64 129, i1 false), !noalias !871
  %146 = icmp slt i64 %145, 0
  %147 = call i64 @llvm.abs.i64(i64 %145, i1 false)
  %.not22.i.i = icmp ult i64 %147, 10
  %.pre.i.i = load ptr, ptr @strconv.digits, align 8, !noalias !871
  br i1 %.not22.i.i, label %for.done.i.i, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.done44, %for.body.i.i
  %u.024.i.i = phi i64 [ %153, %for.body.i.i ], [ %147, %if.done44 ]
  %i.023.i.i = phi i64 [ %148, %for.body.i.i ], [ 129, %if.done44 ]
  %148 = add i64 %i.023.i.i, -1
  %149 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %148
  %150 = urem i64 %u.024.i.i, 10
  %151 = getelementptr i8, ptr %.pre.i.i, i64 %150
  %152 = load i8, ptr %151, align 1, !noalias !871
  store i8 %152, ptr %149, align 1, !noalias !871
  %153 = udiv i64 %u.024.i.i, 10
  %.not.i.i119 = icmp ult i64 %u.024.i.i, 100
  br i1 %.not.i.i119, label %for.done.i.i, label %for.body.i.i

for.done.i.i:                                     ; preds = %for.body.i.i, %if.done44
  %i.0.lcssa.i.i = phi i64 [ 129, %if.done44 ], [ %148, %for.body.i.i ]
  %u.0.lcssa.i.i = phi i64 [ %147, %if.done44 ], [ %153, %for.body.i.i ]
  %154 = add i64 %i.0.lcssa.i.i, -1
  %155 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %154
  %156 = getelementptr i8, ptr %.pre.i.i, i64 %u.0.lcssa.i.i
  %157 = load i8, ptr %156, align 1, !noalias !871
  store i8 %157, ptr %155, align 1, !noalias !871
  br i1 %146, label %switch.done11.sink.split.i.i, label %switch.done11.i.i

switch.done11.sink.split.i.i:                     ; preds = %for.done.i.i
  %158 = add i64 %i.0.lcssa.i.i, -2
  %159 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %158
  store i8 45, ptr %159, align 1, !noalias !871
  br label %switch.done11.i.i

switch.done11.i.i:                                ; preds = %switch.done11.sink.split.i.i, %for.done.i.i
  %i.3.i.i = phi i64 [ %158, %switch.done11.sink.split.i.i ], [ %154, %for.done.i.i ]
  %160 = sub i64 129, %i.3.i.i
  %161 = call i64 @llvm.smin.i64(i64 %160, i64 32)
  %.not.i.i.i = icmp slt i64 %161, 1
  br i1 %.not.i.i.i, label %strconv.append_bits.exit.i, label %if.then.i19.i.i

if.then.i19.i.i:                                  ; preds = %switch.done11.i.i
  %162 = getelementptr i8, ptr %a.i.i, i64 %i.3.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %buf.i118, ptr align 1 %162, i64 %161, i1 false), !noalias !871
  br label %strconv.append_bits.exit.i

strconv.append_bits.exit.i:                       ; preds = %if.then.i19.i.i, %switch.done11.i.i
  store ptr %buf.i118, ptr %7, align 8, !noalias !871
  store i64 %160, ptr %117, align 8, !noalias !871
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %8, ptr nonnull align 8 %7, i64 16, i1 false), !noalias !875
  call void @llvm.lifetime.end.p0(i64 129, ptr nonnull %a.i.i), !noalias !867
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7), !noalias !867
  %.unpack.i = load ptr, ptr %8, align 8, !noalias !867
  %.unpack2.i = load i64, ptr %.elt1.i, align 8, !noalias !867
  store ptr %.unpack.i, ptr %s.i, align 8, !noalias !867
  store i64 %.unpack2.i, ptr %s.repack3.i, align 8, !noalias !867
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !876
  %163 = load ptr, ptr %103, align 8, !noalias !880
  %.not.i.i5.i = icmp eq ptr %163, null
  br i1 %.not.i.i5.i, label %io.write_i64.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %strconv.append_bits.exit.i
  %164 = load ptr, ptr %115, align 8, !noalias !880
  store i64 0, ptr %6, align 8, !noalias !880
  %165 = call i32 %163(ptr %164, i64 4, ptr nonnull %s.i, i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !884
  %166 = load i64, ptr %6, align 8, !noalias !880
  %167 = load i64, ptr %104, align 8, !noalias !880
  %168 = add i64 %167, %166
  store i64 %168, ptr %104, align 8, !noalias !880
  br label %io.write_i64.exit

io.write_i64.exit:                                ; preds = %strconv.append_bits.exit.i, %if.then.i.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !876
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %buf.i118)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i)
  %169 = add i64 %commas.0130, 1
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body, %io.write_i64.exit, %io.write_string.exit117
  %commas.1 = phi i64 [ %commas.0130, %for.interval.body ], [ %143, %io.write_string.exit117 ], [ %169, %io.write_i64.exit ]
  %170 = add nuw i128 %i.0131, 1
  %171 = icmp ult i128 %170, %37
  br i1 %171, label %for.interval.body, label %defer

defer:                                            ; preds = %for.interval.post, %union_cast.end
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i120)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  store i8 125, ptr %buf.i120, align 1, !noalias !885
  store ptr %buf.i120, ptr %5, align 8, !noalias !885
  %172 = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  store i64 1, ptr %172, align 8, !noalias !885
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !885
  %173 = load ptr, ptr %103, align 8, !noalias !888
  %.not.i.i121 = icmp eq ptr %173, null
  br i1 %.not.i.i121, label %io.write_byte.exit124, label %if.then.i.i122

if.then.i.i122:                                   ; preds = %defer
  %174 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %175 = load ptr, ptr %174, align 8, !noalias !888
  store i64 0, ptr %4, align 8, !noalias !888
  %176 = call i32 %173(ptr %175, i64 4, ptr nonnull %5, i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !892
  %177 = load i64, ptr %4, align 8, !noalias !888
  %178 = load i64, ptr %104, align 8, !noalias !888
  %179 = add i64 %178, %177
  store i64 %179, ptr %104, align 8, !noalias !888
  br label %io.write_byte.exit124

io.write_byte.exit124:                            ; preds = %defer, %if.then.i.i122
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !885
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i120)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  br label %common.ret
}

declare x86_stdcallcc ptr @GetProcessHeap() local_unnamed_addr

define internal fastcc void @fmt.fmt_write_indent(ptr nocapture %0, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %1 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %2 = alloca { ptr, i64 }, align 8
  %3 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 10
  %4 = load i64, ptr %3, align 8
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %for.interval.body.lr.ph, label %for.interval.done

for.interval.body.lr.ph:                          ; preds = %decls
  %6 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %7 = getelementptr inbounds { ptr, i64 }, ptr %2, i64 0, i32 1
  %8 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %9 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %10 = load ptr, ptr %6, align 8, !noalias !893
  %11 = icmp eq ptr %10, null
  br i1 %11, label %for.interval.done, label %for.interval.body

for.interval.body:                                ; preds = %for.interval.body.lr.ph, %io.write_byte.exit
  %12 = phi i64 [ %19, %io.write_byte.exit ], [ %4, %for.interval.body.lr.ph ]
  %.012 = phi i64 [ %20, %io.write_byte.exit ], [ 0, %for.interval.body.lr.ph ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2)
  store i8 9, ptr %buf.i, align 1, !noalias !899
  store ptr %buf.i, ptr %2, align 8, !noalias !899
  store i64 1, ptr %7, align 8, !noalias !899
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1), !noalias !899
  %13 = load ptr, ptr %6, align 8, !noalias !893
  %.not.i.i = icmp eq ptr %13, null
  br i1 %.not.i.i, label %io.write_byte.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.interval.body
  %14 = load ptr, ptr %9, align 8, !noalias !893
  store i64 0, ptr %1, align 8, !noalias !893
  %15 = call i32 %13(ptr %14, i64 4, ptr nonnull %2, i64 0, i64 0, ptr nonnull %1, ptr nonnull %__.context_ptr), !noalias !900
  %16 = load i64, ptr %1, align 8, !noalias !893
  %17 = load i64, ptr %8, align 8, !noalias !893
  %18 = add i64 %17, %16
  store i64 %18, ptr %8, align 8, !noalias !893
  %.pre = load i64, ptr %3, align 8
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %for.interval.body, %if.then.i.i
  %19 = phi i64 [ %12, %for.interval.body ], [ %.pre, %if.then.i.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1), !noalias !899
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2)
  %20 = add nuw nsw i64 %.012, 1
  %21 = icmp slt i64 %20, %19
  br i1 %21, label %for.interval.body, label %for.interval.done, !llvm.loop !901

for.interval.done:                                ; preds = %io.write_byte.exit, %for.interval.body.lr.ph, %decls
  ret void
}

declare x86_stdcallcc ptr @HeapAlloc(ptr, i32, i64) local_unnamed_addr

declare x86_stdcallcc ptr @HeapReAlloc(ptr, i32, ptr, i64) local_unnamed_addr

declare x86_stdcallcc i32 @HeapFree(ptr, i32, ptr) local_unnamed_addr

define internal fastcc void @fmt.fmt_struct(ptr %0, ptr nocapture readonly %1, i32 %2, ptr nocapture readonly %3, ptr %4, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %5 = alloca i64, align 8
  %buf.i305 = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %buf.i300 = alloca [1 x i8], align 1
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca [80 x i8], align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %buf.i.i259 = alloca [1 x i8], align 1
  %15 = alloca { ptr, i64 }, align 8
  %16 = alloca i64, align 8
  %17 = alloca %..string, align 8
  %18 = alloca %..string, align 8
  %19 = alloca %..string, align 8
  %20 = alloca %..string, align 8
  %value.i.i = alloca %..string, align 8
  %21 = alloca %..string, align 8
  %22 = alloca %..string, align 8
  %23 = alloca i64, align 8
  %buf.i246 = alloca [1 x i8], align 1
  %24 = alloca { ptr, i64 }, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca [80 x i8], align 8
  %28 = alloca i64, align 8
  %29 = alloca [80 x i8], align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %33 = alloca { ptr, i64 }, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %buf.i200 = alloca [1 x i8], align 1
  %36 = alloca { ptr, i64 }, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %buf.i185 = alloca [1 x i8], align 1
  %40 = alloca { ptr, i64 }, align 8
  %41 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %42 = alloca { ptr, i64 }, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %base_type_name = alloca %..string, align 8
  %v = alloca %runtime.Type_Info_Named, align 8
  %name = alloca %..string, align 8
  %47 = alloca { %runtime.Type_Info_Array, i8 }, align 8
  %48 = alloca %..any, align 8
  %49 = alloca { %runtime.Type_Info_Pointer, i8 }, align 8
  %50 = alloca %..any, align 8
  %name56 = alloca %..string, align 8
  %optional_len = alloca i64, align 8
  %51 = alloca %"runtime.Maybe($T=int)-8047", align 8
  %52 = alloca %..any, align 8
  %.not = icmp eq i32 %2, 118
  br i1 %.not, label %if.done, label %if.then

common.ret:                                       ; preds = %io.write_string.exit, %io.write_string.exit176, %io.write_byte.exit309, %if.then
  ret void

if.then:                                          ; preds = %decls
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.done:                                          ; preds = %decls
  %53 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 6
  %54 = load i8, ptr %53, align 1
  %.not104 = icmp eq i8 %54, 0
  %55 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  br i1 %.not104, label %if.done4, label %if.then1

if.then1:                                         ; preds = %if.done
  %56 = getelementptr inbounds %..string, ptr %4, i64 0, i32 1
  %57 = load i64, ptr %56, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %46), !noalias !902
  %59 = load ptr, ptr %55, align 8, !noalias !906
  %.not.i.i = icmp eq ptr %59, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then2
  %60 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %61 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %62 = load ptr, ptr %61, align 8, !noalias !906
  store i64 0, ptr %46, align 8, !noalias !906
  %63 = call i32 %59(ptr %62, i64 4, ptr nonnull @"ggv$b8", i64 0, i64 0, ptr nonnull %46, ptr nonnull %__.context_ptr), !noalias !910
  %64 = load i64, ptr %46, align 8, !noalias !906
  %65 = load i64, ptr %60, align 8, !noalias !906
  %66 = add i64 %65, %64
  store i64 %66, ptr %60, align 8, !noalias !906
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then2, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %46), !noalias !902
  br label %common.ret

if.else:                                          ; preds = %if.then1
  %67 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %45), !noalias !911
  %68 = load ptr, ptr %55, align 8, !noalias !287
  %.not.i.i167 = icmp eq ptr %68, null
  br i1 %.not.i.i167, label %io.write_string.exit171.thread, label %io.write_string.exit171

io.write_string.exit171.thread:                   ; preds = %if.else
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %45), !noalias !911
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44), !noalias !915
  br label %io.write_string.exit176

io.write_string.exit171:                          ; preds = %if.else
  %69 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %70 = load ptr, ptr %69, align 8, !noalias !919
  store i64 0, ptr %45, align 8, !noalias !919
  %71 = call i32 %68(ptr %70, i64 4, ptr nonnull %4, i64 0, i64 0, ptr nonnull %45, ptr nonnull %__.context_ptr), !noalias !923
  %72 = load i64, ptr %45, align 8, !noalias !919
  %73 = load i64, ptr %67, align 8, !noalias !919
  %74 = add i64 %73, %72
  store i64 %74, ptr %67, align 8, !noalias !919
  %.pre = load ptr, ptr %55, align 8, !noalias !924
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %45), !noalias !911
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44), !noalias !915
  %.not.i.i172 = icmp eq ptr %.pre, null
  br i1 %.not.i.i172, label %io.write_string.exit176, label %if.then.i.i173

if.then.i.i173:                                   ; preds = %io.write_string.exit171
  %75 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %76 = load ptr, ptr %75, align 8, !noalias !924
  store i64 0, ptr %44, align 8, !noalias !924
  %77 = call i32 %.pre(ptr %76, i64 4, ptr nonnull @"ggv$b9", i64 0, i64 0, ptr nonnull %44, ptr nonnull %__.context_ptr), !noalias !928
  %78 = load i64, ptr %44, align 8, !noalias !924
  %79 = load i64, ptr %67, align 8, !noalias !924
  %80 = add i64 %79, %78
  store i64 %80, ptr %67, align 8, !noalias !924
  br label %io.write_string.exit176

io.write_string.exit176:                          ; preds = %io.write_string.exit171.thread, %io.write_string.exit171, %if.then.i.i173
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44), !noalias !915
  br label %common.ret

if.done4:                                         ; preds = %if.done
  %81 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 11
  %82 = load i8, ptr %81, align 1
  %.not107 = icmp eq i8 %82, 0
  %83 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %43), !noalias !929
  %84 = load ptr, ptr %55, align 8, !noalias !287
  %.not.i.i177 = icmp eq ptr %84, null
  br i1 %.not.i.i177, label %io.write_string.exit181.thread, label %io.write_string.exit181

io.write_string.exit181.thread:                   ; preds = %if.done4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43), !noalias !929
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %42)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %41), !noalias !933
  br label %io.write_byte.exit

io.write_string.exit181:                          ; preds = %if.done4
  %85 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %86 = load ptr, ptr %85, align 8, !noalias !936
  store i64 0, ptr %43, align 8, !noalias !936
  %87 = call i32 %84(ptr %86, i64 4, ptr %4, i64 0, i64 0, ptr nonnull %43, ptr nonnull %__.context_ptr), !noalias !940
  %88 = load i64, ptr %43, align 8, !noalias !936
  %89 = load i64, ptr %83, align 8, !noalias !936
  %90 = add i64 %89, %88
  store i64 %90, ptr %83, align 8, !noalias !936
  %.pre406 = load ptr, ptr %55, align 8, !noalias !287
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43), !noalias !929
  %. = select i1 %.not107, i8 123, i8 91
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %42)
  store i8 %., ptr %buf.i, align 1, !noalias !933
  store ptr %buf.i, ptr %42, align 8, !noalias !933
  %91 = getelementptr inbounds { ptr, i64 }, ptr %42, i64 0, i32 1
  store i64 1, ptr %91, align 8, !noalias !933
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %41), !noalias !933
  %.not.i.i182 = icmp eq ptr %.pre406, null
  br i1 %.not.i.i182, label %io.write_byte.exit, label %if.then.i.i183

if.then.i.i183:                                   ; preds = %io.write_string.exit181
  %92 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %93 = load ptr, ptr %92, align 8, !noalias !941
  store i64 0, ptr %41, align 8, !noalias !941
  %94 = call i32 %.pre406(ptr %93, i64 4, ptr nonnull %42, i64 0, i64 0, ptr nonnull %41, ptr nonnull %__.context_ptr), !noalias !945
  %95 = load i64, ptr %41, align 8, !noalias !941
  %96 = load i64, ptr %83, align 8, !noalias !941
  %97 = add i64 %96, %95
  store i64 %97, ptr %83, align 8, !noalias !941
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %io.write_string.exit181.thread, %io.write_string.exit181, %if.then.i.i183
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %41), !noalias !933
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %42)
  %98 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 19
  %99 = load i64, ptr %98, align 8
  %100 = add i64 %99, 1
  store i64 %100, ptr %98, align 8
  %101 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  %102 = load i8, ptr %101, align 1
  %103 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 10
  %104 = load i64, ptr %103, align 8
  %105 = add i64 %104, 1
  store i64 %105, ptr %103, align 8
  %.not105 = icmp eq i8 %102, 0
  br i1 %.not105, label %if.done9, label %if.then8

if.then8:                                         ; preds = %io.write_byte.exit
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i185)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %40)
  store i8 10, ptr %buf.i185, align 1, !noalias !946
  store ptr %buf.i185, ptr %40, align 8, !noalias !946
  %106 = getelementptr inbounds { ptr, i64 }, ptr %40, i64 0, i32 1
  store i64 1, ptr %106, align 8, !noalias !946
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %39), !noalias !946
  %107 = load ptr, ptr %55, align 8, !noalias !287
  %.not.i.i186 = icmp eq ptr %107, null
  br i1 %.not.i.i186, label %io.write_byte.exit189, label %if.then.i.i187

if.then.i.i187:                                   ; preds = %if.then8
  %108 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %109 = load ptr, ptr %108, align 8, !noalias !949
  store i64 0, ptr %39, align 8, !noalias !949
  %110 = call i32 %107(ptr %109, i64 4, ptr nonnull %40, i64 0, i64 0, ptr nonnull %39, ptr nonnull %__.context_ptr), !noalias !953
  %111 = load i64, ptr %39, align 8, !noalias !949
  %112 = load i64, ptr %83, align 8, !noalias !949
  %113 = add i64 %112, %111
  store i64 %113, ptr %83, align 8, !noalias !949
  br label %io.write_byte.exit189

io.write_byte.exit189:                            ; preds = %if.then8, %if.then.i.i187
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %39), !noalias !946
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i185)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %40)
  br label %if.done9

if.done9:                                         ; preds = %io.write_byte.exit189, %io.write_byte.exit
  br i1 %.not107, label %if.else54, label %if.then10

if.then10:                                        ; preds = %if.done9
  %114 = load i64, ptr %103, align 8
  %115 = add i64 %114, 1
  store i64 %115, ptr %103, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %base_type_name, i8 0, i64 16, i1 false)
  %116 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 13
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr inbounds %runtime.Type_Info, ptr %117, i64 0, i32 5, i32 1
  %119 = load i64, ptr %118, align 8
  %120 = icmp eq i64 %119, 1
  br i1 %120, label %if.then11, label %union_cast.end

union_cast.end:                                   ; preds = %if.then10
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %v, i8 0, i64 80, i1 false)
  br label %if.done12

if.then11:                                        ; preds = %if.then10
  %121 = getelementptr inbounds %runtime.Type_Info, ptr %117, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %v, ptr noundef nonnull align 1 dereferenceable(80) %121, i64 80, i1 false)
  %base_type_name.repack163312 = getelementptr inbounds %..string, ptr %base_type_name, i64 0, i32 1
  %.elt161311 = getelementptr inbounds %..string, ptr %v, i64 0, i32 1
  %.unpack160 = load ptr, ptr %v, align 8
  %.unpack162 = load i64, ptr %.elt161311, align 8
  store ptr %.unpack160, ptr %base_type_name, align 8
  store i64 %.unpack162, ptr %base_type_name.repack163312, align 8
  br label %if.done12

if.done12:                                        ; preds = %union_cast.end, %if.then11
  %122 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 1
  %123 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 1, i32 1
  %124 = load i8, ptr %81, align 1
  %125 = icmp eq i8 %124, 2
  br i1 %125, label %if.then13, label %if.else14

if.then13:                                        ; preds = %if.done12
  %126 = load i64, ptr %123, align 8
  %127 = add i64 %126, -1
  br label %if.done17.sink.split

if.else14:                                        ; preds = %if.done12
  %128 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 14
  %129 = load i64, ptr %123, align 8
  %130 = icmp eq i8 %124, 3
  br i1 %130, label %if.then15, label %if.done17

if.then15:                                        ; preds = %if.else14
  %131 = add i64 %129, -3
  br label %if.done17.sink.split

if.done17.sink.split:                             ; preds = %if.then13, %if.then15
  %.sink465 = phi i64 [ %131, %if.then15 ], [ %127, %if.then13 ]
  %132 = load ptr, ptr %1, align 8
  %133 = ptrtoint ptr %132 to i64
  %134 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 2
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr i64, ptr %135, i64 %.sink465
  %137 = load i64, ptr %136, align 8
  %138 = add i64 %137, %133
  %139 = inttoptr i64 %138 to ptr
  br label %if.done17

if.done17:                                        ; preds = %if.done17.sink.split, %if.else14
  %n.0.in = phi ptr [ %128, %if.else14 ], [ %139, %if.done17.sink.split ]
  %actual_field_count.0 = phi i64 [ %129, %if.else14 ], [ %.sink465, %if.done17.sink.split ]
  %n.0 = load i64, ptr %n.0.in, align 8
  %.not368 = icmp eq i64 %n.0, 0
  br i1 %.not368, label %defer53, label %for.interval.body.lr.ph

for.interval.body.lr.ph:                          ; preds = %if.done17
  %.not125 = icmp ne i8 %102, 0
  %140 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %141 = getelementptr inbounds { ptr, i64 }, ptr %36, i64 0, i32 1
  %142 = icmp sgt i64 %actual_field_count.0, 0
  %name.repack131 = getelementptr inbounds %..string, ptr %name, i64 0, i32 1
  %143 = getelementptr inbounds { ptr, i64 }, ptr %33, i64 0, i32 1
  %144 = getelementptr inbounds { %runtime.Type_Info_Pointer, i8 }, ptr %49, i64 0, i32 1
  %145 = getelementptr inbounds %runtime.Type_Info_Named, ptr %27, i64 0, i32 1
  %146 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 2
  %.repack137 = getelementptr inbounds %..any, ptr %50, i64 0, i32 1
  %147 = getelementptr inbounds { %runtime.Type_Info_Array, i8 }, ptr %47, i64 0, i32 1
  %.repack156 = getelementptr inbounds %runtime.Type_Info_Array, ptr %47, i64 0, i32 1
  %148 = getelementptr inbounds %runtime.Type_Info_Named, ptr %29, i64 0, i32 1
  %.repack150 = getelementptr inbounds %..any, ptr %48, i64 0, i32 1
  %149 = getelementptr inbounds { ptr, i64 }, ptr %24, i64 0, i32 1
  br label %for.interval.body

for.interval.body:                                ; preds = %for.interval.body.lr.ph, %io.write_byte.exit250
  %index.0363 = phi i64 [ 0, %for.interval.body.lr.ph ], [ %282, %io.write_byte.exit250 ]
  %.not126 = icmp eq i64 %index.0363, 0
  %or.cond = or i1 %.not125, %.not126
  %.pre408 = load ptr, ptr %55, align 8, !noalias !287
  br i1 %or.cond, label %if.done20, label %if.then19

if.then19:                                        ; preds = %for.interval.body
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %38), !noalias !954
  %.not.i.i190 = icmp eq ptr %.pre408, null
  br i1 %.not.i.i190, label %io.write_string.exit194, label %if.then.i.i191

if.then.i.i191:                                   ; preds = %if.then19
  %150 = load ptr, ptr %140, align 8, !noalias !958
  store i64 0, ptr %38, align 8, !noalias !958
  %151 = call i32 %.pre408(ptr %150, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %38, ptr nonnull %__.context_ptr), !noalias !962
  %152 = load i64, ptr %38, align 8, !noalias !958
  %153 = load i64, ptr %83, align 8, !noalias !958
  %154 = add i64 %153, %152
  store i64 %154, ptr %83, align 8, !noalias !958
  %.pre407.pre = load ptr, ptr %55, align 8, !noalias !287
  br label %io.write_string.exit194

io.write_string.exit194:                          ; preds = %if.then19, %if.then.i.i191
  %.pre407 = phi ptr [ null, %if.then19 ], [ %.pre407.pre, %if.then.i.i191 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %38), !noalias !954
  br label %if.done20

if.done20:                                        ; preds = %io.write_string.exit194, %for.interval.body
  %155 = phi ptr [ %.pre407, %io.write_string.exit194 ], [ %.pre408, %for.interval.body ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %37), !noalias !963
  %.not.i.i195 = icmp eq ptr %155, null
  br i1 %.not.i.i195, label %io.write_string.exit199.thread, label %io.write_string.exit199

io.write_string.exit199.thread:                   ; preds = %if.done20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %37), !noalias !963
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i200)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %36)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35), !noalias !967
  br label %io.write_byte.exit204

io.write_string.exit199:                          ; preds = %if.done20
  %156 = load ptr, ptr %140, align 8, !noalias !970
  store i64 0, ptr %37, align 8, !noalias !970
  %157 = call i32 %155(ptr %156, i64 4, ptr nonnull %base_type_name, i64 0, i64 0, ptr nonnull %37, ptr nonnull %__.context_ptr), !noalias !974
  %158 = load i64, ptr %37, align 8, !noalias !970
  %159 = load i64, ptr %83, align 8, !noalias !970
  %160 = add i64 %159, %158
  store i64 %160, ptr %83, align 8, !noalias !970
  %.pre409 = load ptr, ptr %55, align 8, !noalias !975
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %37), !noalias !963
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i200)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %36)
  store i8 123, ptr %buf.i200, align 1, !noalias !967
  store ptr %buf.i200, ptr %36, align 8, !noalias !967
  store i64 1, ptr %141, align 8, !noalias !967
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35), !noalias !967
  %.not.i.i201 = icmp eq ptr %.pre409, null
  br i1 %.not.i.i201, label %io.write_byte.exit204, label %if.then.i.i202

if.then.i.i202:                                   ; preds = %io.write_string.exit199
  %161 = load ptr, ptr %140, align 8, !noalias !975
  store i64 0, ptr %35, align 8, !noalias !975
  %162 = call i32 %.pre409(ptr %161, i64 4, ptr nonnull %36, i64 0, i64 0, ptr nonnull %35, ptr nonnull %__.context_ptr), !noalias !979
  %163 = load i64, ptr %35, align 8, !noalias !975
  %164 = load i64, ptr %83, align 8, !noalias !975
  %165 = add i64 %164, %163
  store i64 %165, ptr %83, align 8, !noalias !975
  br label %io.write_byte.exit204

io.write_byte.exit204:                            ; preds = %io.write_string.exit199.thread, %io.write_string.exit199, %if.then.i.i202
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35), !noalias !967
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i200)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %36)
  %166 = load i64, ptr %98, align 8
  %167 = add i64 %166, 1
  store i64 %167, ptr %98, align 8
  br i1 %142, label %for.interval.body25, label %defer

for.interval.body25:                              ; preds = %io.write_byte.exit204, %for.interval.post
  %i.0362 = phi i64 [ %273, %for.interval.post ], [ 0, %io.write_byte.exit204 ]
  %field_count.0361 = phi i64 [ %170, %for.interval.post ], [ -1, %io.write_byte.exit204 ]
  %168 = load ptr, ptr %122, align 8
  %169 = getelementptr %..string, ptr %168, i64 %i.0362
  %.unpack128 = load ptr, ptr %169, align 8
  %.elt129 = getelementptr %..string, ptr %168, i64 %i.0362, i32 1
  %.unpack130 = load i64, ptr %.elt129, align 8
  store ptr %.unpack128, ptr %name, align 8
  store i64 %.unpack130, ptr %name.repack131, align 8
  %170 = add nsw i64 %field_count.0361, 1
  %171 = icmp ult i64 %field_count.0361, 9223372036854775807
  %or.cond165 = select i1 %.not105, i1 %171, i1 false
  br i1 %or.cond165, label %if.then28, label %if.done29

if.then28:                                        ; preds = %for.interval.body25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %34), !noalias !980
  %172 = load ptr, ptr %55, align 8, !noalias !984
  %.not.i.i205 = icmp eq ptr %172, null
  br i1 %.not.i.i205, label %if.done29.thread, label %if.then.i.i206

if.then.i.i206:                                   ; preds = %if.then28
  %173 = load ptr, ptr %140, align 8, !noalias !984
  store i64 0, ptr %34, align 8, !noalias !984
  %174 = call i32 %172(ptr %173, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %34, ptr nonnull %__.context_ptr), !noalias !988
  %175 = load i64, ptr %34, align 8, !noalias !984
  %176 = load i64, ptr %83, align 8, !noalias !984
  %177 = add i64 %176, %175
  store i64 %177, ptr %83, align 8, !noalias !984
  br label %if.done29.thread

if.done29.thread:                                 ; preds = %if.then.i.i206, %if.then28
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %34), !noalias !980
  br label %if.done31

if.done29:                                        ; preds = %for.interval.body25
  br i1 %.not105, label %if.done31, label %if.then30

if.then30:                                        ; preds = %if.done29
  %178 = load i64, ptr %103, align 8
  %179 = icmp sgt i64 %178, 0
  br i1 %179, label %for.interval.body.lr.ph.i, label %if.done31

for.interval.body.lr.ph.i:                        ; preds = %if.then30
  %180 = load ptr, ptr %55, align 8, !noalias !287
  %181 = icmp eq ptr %180, null
  br i1 %181, label %if.done31.thread, label %for.interval.body.i

if.done31.thread:                                 ; preds = %for.interval.body.lr.ph.i
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %31), !noalias !989
  br label %io.write_string.exit214.thread

for.interval.body.i:                              ; preds = %for.interval.body.lr.ph.i, %io.write_byte.exit.i
  %182 = phi i64 [ %189, %io.write_byte.exit.i ], [ %178, %for.interval.body.lr.ph.i ]
  %.012.i = phi i64 [ %190, %io.write_byte.exit.i ], [ 0, %for.interval.body.lr.ph.i ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !993
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %33), !noalias !993
  store i8 9, ptr %buf.i.i, align 1, !noalias !996
  store ptr %buf.i.i, ptr %33, align 8, !noalias !996
  store i64 1, ptr %143, align 8, !noalias !996
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %32), !noalias !996
  %183 = load ptr, ptr %55, align 8, !noalias !999
  %.not.i.i.i = icmp eq ptr %183, null
  br i1 %.not.i.i.i, label %io.write_byte.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.interval.body.i
  %184 = load ptr, ptr %140, align 8, !noalias !999
  store i64 0, ptr %32, align 8, !noalias !999
  %185 = call i32 %183(ptr %184, i64 4, ptr nonnull %33, i64 0, i64 0, ptr nonnull %32, ptr nonnull %__.context_ptr), !noalias !1003
  %186 = load i64, ptr %32, align 8, !noalias !999
  %187 = load i64, ptr %83, align 8, !noalias !999
  %188 = add i64 %187, %186
  store i64 %188, ptr %83, align 8, !noalias !999
  %.pre.i = load i64, ptr %103, align 8
  br label %io.write_byte.exit.i

io.write_byte.exit.i:                             ; preds = %if.then.i.i.i, %for.interval.body.i
  %189 = phi i64 [ %182, %for.interval.body.i ], [ %.pre.i, %if.then.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32), !noalias !996
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !993
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %33), !noalias !993
  %190 = add nuw nsw i64 %.012.i, 1
  %191 = icmp slt i64 %190, %189
  br i1 %191, label %for.interval.body.i, label %if.done31, !llvm.loop !901

if.done31:                                        ; preds = %io.write_byte.exit.i, %if.then30, %if.done29.thread, %if.done29
  %.pr = load ptr, ptr %55, align 8, !noalias !287
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %31), !noalias !989
  %.not.i.i210 = icmp eq ptr %.pr, null
  br i1 %.not.i.i210, label %io.write_string.exit214.thread, label %io.write_string.exit214

io.write_string.exit214.thread:                   ; preds = %if.done31, %if.done31.thread
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31), !noalias !989
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %30), !noalias !1004
  br label %io.write_string.exit219

io.write_string.exit214:                          ; preds = %if.done31
  %192 = load ptr, ptr %140, align 8, !noalias !1008
  store i64 0, ptr %31, align 8, !noalias !1008
  %193 = call i32 %.pr(ptr %192, i64 4, ptr nonnull %name, i64 0, i64 0, ptr nonnull %31, ptr nonnull %__.context_ptr), !noalias !1012
  %194 = load i64, ptr %31, align 8, !noalias !1008
  %195 = load i64, ptr %83, align 8, !noalias !1008
  %196 = add i64 %195, %194
  store i64 %196, ptr %83, align 8, !noalias !1008
  %.pre410 = load ptr, ptr %55, align 8, !noalias !1013
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31), !noalias !989
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %30), !noalias !1004
  %.not.i.i215 = icmp eq ptr %.pre410, null
  br i1 %.not.i.i215, label %io.write_string.exit219, label %if.then.i.i216

if.then.i.i216:                                   ; preds = %io.write_string.exit214
  %197 = load ptr, ptr %140, align 8, !noalias !1013
  store i64 0, ptr %30, align 8, !noalias !1013
  %198 = call i32 %.pre410(ptr %197, i64 4, ptr nonnull @"ggv$e1", i64 0, i64 0, ptr nonnull %30, ptr nonnull %__.context_ptr), !noalias !1017
  %199 = load i64, ptr %30, align 8, !noalias !1013
  %200 = load i64, ptr %83, align 8, !noalias !1013
  %201 = add i64 %200, %199
  store i64 %201, ptr %83, align 8, !noalias !1013
  br label %io.write_string.exit219

io.write_string.exit219:                          ; preds = %io.write_string.exit214.thread, %io.write_string.exit214, %if.then.i.i216
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %30), !noalias !1004
  %202 = load i8, ptr %81, align 1
  %203 = icmp eq i8 %202, 1
  %204 = load ptr, ptr %3, align 8
  %205 = getelementptr ptr, ptr %204, i64 %i.0362
  %206 = load ptr, ptr %205, align 8
  %207 = getelementptr inbounds %runtime.Type_Info, ptr %206, i64 0, i32 5
  %208 = getelementptr inbounds %runtime.Type_Info, ptr %206, i64 0, i32 5, i32 1
  br i1 %203, label %if.then32, label %if.else38

if.then32:                                        ; preds = %io.write_string.exit219
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %47, i8 0, i64 32, i1 false)
  %209 = load i64, ptr %208, align 8
  %210 = icmp eq i64 %209, 14
  br i1 %210, label %for.body.preheader.i.i, label %if.done.i

if.done.i:                                        ; preds = %if.then32
  call fastcc void @runtime.type_assertion_check2.handle_error-1(ptr nonnull @"ggv$c0", i32 1877, i32 11, i64 1369094286720630804, i64 3602879701896396851, ptr nonnull %207)
  unreachable

for.body.preheader.i.i:                           ; preds = %if.then32
  %.unpack151 = load ptr, ptr %207, align 8
  %.elt152 = getelementptr inbounds %runtime.Type_Info, ptr %206, i64 0, i32 5, i32 0, i64 1
  store ptr %.unpack151, ptr %47, align 8
  %211 = load <2 x i64>, ptr %.elt152, align 8
  store <2 x i64> %211, ptr %.repack156, align 8
  store i8 1, ptr %147, align 8
  %212 = load i64, ptr %.unpack151, align 8
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %29)
  %213 = getelementptr inbounds %runtime.Type_Info, ptr %.unpack151, i64 0, i32 5, i32 1
  %214 = load i64, ptr %213, align 8
  %cond1.i.i = icmp eq i64 %214, 1
  br i1 %cond1.i.i, label %typeswitch.body.i.i, label %reflect.is_any.exit

typeswitch.body.i.i:                              ; preds = %for.body.preheader.i.i, %typeswitch.body.i.i
  %base.02.i.i = phi ptr [ %216, %typeswitch.body.i.i ], [ %.unpack151, %for.body.preheader.i.i ]
  %215 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %29, ptr noundef nonnull align 1 dereferenceable(80) %215, i64 80, i1 false)
  %216 = load ptr, ptr %148, align 8
  %217 = getelementptr inbounds %runtime.Type_Info, ptr %216, i64 0, i32 5, i32 1
  %218 = load i64, ptr %217, align 8
  %cond.i.i = icmp eq i64 %218, 1
  br i1 %cond.i.i, label %typeswitch.body.i.i, label %reflect.is_any.exit

reflect.is_any.exit:                              ; preds = %typeswitch.body.i.i, %for.body.preheader.i.i
  %219 = phi i64 [ %214, %for.body.preheader.i.i ], [ %218, %typeswitch.body.i.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %29)
  %.not324 = icmp eq i64 %219, 9
  br i1 %.not324, label %if.then35, label %if.else36

if.then35:                                        ; preds = %reflect.is_any.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %28), !noalias !1018
  %220 = load ptr, ptr %55, align 8, !noalias !1022
  %.not.i.i220 = icmp eq ptr %220, null
  br i1 %.not.i.i220, label %io.write_string.exit224, label %if.then.i.i221

if.then.i.i221:                                   ; preds = %if.then35
  %221 = load ptr, ptr %140, align 8, !noalias !1022
  store i64 0, ptr %28, align 8, !noalias !1022
  %222 = call i32 %220(ptr %221, i64 4, ptr nonnull @"ggv$c5", i64 0, i64 0, ptr nonnull %28, ptr nonnull %__.context_ptr), !noalias !1026
  %223 = load i64, ptr %28, align 8, !noalias !1022
  %224 = load i64, ptr %83, align 8, !noalias !1022
  %225 = add i64 %224, %223
  store i64 %225, ptr %83, align 8, !noalias !1022
  br label %io.write_string.exit224

io.write_string.exit224:                          ; preds = %if.then35, %if.then.i.i221
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28), !noalias !1018
  br label %if.done47

if.else36:                                        ; preds = %reflect.is_any.exit
  %226 = load ptr, ptr %1, align 8
  %227 = ptrtoint ptr %226 to i64
  %228 = load ptr, ptr %146, align 8
  %229 = getelementptr i64, ptr %228, i64 %i.0362
  %230 = load i64, ptr %229, align 8
  %231 = mul i64 %212, %index.0363
  %232 = add i64 %231, %227
  %233 = add i64 %232, %230
  %234 = inttoptr i64 %233 to ptr
  store ptr %234, ptr %48, align 8
  %235 = getelementptr inbounds %runtime.Type_Info, ptr %.unpack151, i64 0, i32 4
  %236 = load i64, ptr %235, align 8
  store i64 %236, ptr %.repack150, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %48, i32 118, ptr %__.context_ptr)
  br label %if.done47

if.else38:                                        ; preds = %io.write_string.exit219
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %49, i8 0, i64 16, i1 false)
  %237 = load i64, ptr %208, align 8
  %238 = icmp eq i64 %237, 11
  br i1 %238, label %for.body.preheader.i.i227, label %if.done.i225

if.done.i225:                                     ; preds = %if.else38
  call fastcc void @runtime.type_assertion_check2.handle_error-1(ptr nonnull @"ggv$c0", i32 1886, i32 11, i64 1369094286720630804, i64 3602879701896396844, ptr nonnull %207)
  unreachable

for.body.preheader.i.i227:                        ; preds = %if.else38
  %.unpack139 = load ptr, ptr %207, align 8
  store ptr %.unpack139, ptr %49, align 8
  store i8 1, ptr %144, align 8
  %239 = load i64, ptr %.unpack139, align 8
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %27)
  %240 = getelementptr inbounds %runtime.Type_Info, ptr %.unpack139, i64 0, i32 5, i32 1
  %241 = load i64, ptr %240, align 8
  %cond1.i.i228 = icmp eq i64 %241, 1
  br i1 %cond1.i.i228, label %typeswitch.body.i.i232, label %reflect.is_any.exit235

typeswitch.body.i.i232:                           ; preds = %for.body.preheader.i.i227, %typeswitch.body.i.i232
  %base.02.i.i233 = phi ptr [ %243, %typeswitch.body.i.i232 ], [ %.unpack139, %for.body.preheader.i.i227 ]
  %242 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i233, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %27, ptr noundef nonnull align 1 dereferenceable(80) %242, i64 80, i1 false)
  %243 = load ptr, ptr %145, align 8
  %244 = getelementptr inbounds %runtime.Type_Info, ptr %243, i64 0, i32 5, i32 1
  %245 = load i64, ptr %244, align 8
  %cond.i.i234 = icmp eq i64 %245, 1
  br i1 %cond.i.i234, label %typeswitch.body.i.i232, label %reflect.is_any.exit235

reflect.is_any.exit235:                           ; preds = %typeswitch.body.i.i232, %for.body.preheader.i.i227
  %246 = phi i64 [ %241, %for.body.preheader.i.i227 ], [ %245, %typeswitch.body.i.i232 ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %27)
  %.not322 = icmp eq i64 %246, 9
  br i1 %.not322, label %if.then43, label %if.else44

if.then43:                                        ; preds = %reflect.is_any.exit235
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26), !noalias !1027
  %247 = load ptr, ptr %55, align 8, !noalias !1031
  %.not.i.i236 = icmp eq ptr %247, null
  br i1 %.not.i.i236, label %io.write_string.exit240, label %if.then.i.i237

if.then.i.i237:                                   ; preds = %if.then43
  %248 = load ptr, ptr %140, align 8, !noalias !1031
  store i64 0, ptr %26, align 8, !noalias !1031
  %249 = call i32 %247(ptr %248, i64 4, ptr nonnull @"ggv$c5", i64 0, i64 0, ptr nonnull %26, ptr nonnull %__.context_ptr), !noalias !1035
  %250 = load i64, ptr %26, align 8, !noalias !1031
  %251 = load i64, ptr %83, align 8, !noalias !1031
  %252 = add i64 %251, %250
  store i64 %252, ptr %83, align 8, !noalias !1031
  br label %io.write_string.exit240

io.write_string.exit240:                          ; preds = %if.then43, %if.then.i.i237
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26), !noalias !1027
  br label %if.done47

if.else44:                                        ; preds = %reflect.is_any.exit235
  %253 = load ptr, ptr %1, align 8
  %254 = ptrtoint ptr %253 to i64
  %255 = load ptr, ptr %146, align 8
  %256 = getelementptr i64, ptr %255, i64 %i.0362
  %257 = load i64, ptr %256, align 8
  %258 = add i64 %257, %254
  %259 = inttoptr i64 %258 to ptr
  %260 = load ptr, ptr %259, align 8
  %261 = ptrtoint ptr %260 to i64
  %262 = mul i64 %239, %index.0363
  %263 = add i64 %262, %261
  %264 = inttoptr i64 %263 to ptr
  store ptr %264, ptr %50, align 8
  %265 = getelementptr inbounds %runtime.Type_Info, ptr %.unpack139, i64 0, i32 4
  %266 = load i64, ptr %265, align 8
  store i64 %266, ptr %.repack137, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %50, i32 118, ptr %__.context_ptr)
  br label %if.done47

if.done47:                                        ; preds = %io.write_string.exit240, %if.else44, %io.write_string.exit224, %if.else36
  br i1 %.not105, label %for.interval.post, label %if.then48

if.then48:                                        ; preds = %if.done47
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25), !noalias !1036
  %267 = load ptr, ptr %55, align 8, !noalias !1040
  %.not.i.i241 = icmp eq ptr %267, null
  br i1 %.not.i.i241, label %io.write_string.exit245, label %if.then.i.i242

if.then.i.i242:                                   ; preds = %if.then48
  %268 = load ptr, ptr %140, align 8, !noalias !1040
  store i64 0, ptr %25, align 8, !noalias !1040
  %269 = call i32 %267(ptr %268, i64 4, ptr nonnull @"ggv$df", i64 0, i64 0, ptr nonnull %25, ptr nonnull %__.context_ptr), !noalias !1044
  %270 = load i64, ptr %25, align 8, !noalias !1040
  %271 = load i64, ptr %83, align 8, !noalias !1040
  %272 = add i64 %271, %270
  store i64 %272, ptr %83, align 8, !noalias !1040
  br label %io.write_string.exit245

io.write_string.exit245:                          ; preds = %if.then48, %if.then.i.i242
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25), !noalias !1036
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done47, %io.write_string.exit245
  %273 = add nuw nsw i64 %i.0362, 1
  %exitcond.not = icmp eq i64 %273, %actual_field_count.0
  br i1 %exitcond.not, label %defer.loopexit, label %for.interval.body25

defer.loopexit:                                   ; preds = %for.interval.post
  %.pre413 = load i64, ptr %98, align 8
  br label %defer

defer:                                            ; preds = %defer.loopexit, %io.write_byte.exit204
  %274 = phi i64 [ %.pre413, %defer.loopexit ], [ %167, %io.write_byte.exit204 ]
  %275 = add i64 %274, -1
  store i64 %275, ptr %98, align 8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i246)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %24)
  store i8 125, ptr %buf.i246, align 1, !noalias !1045
  store ptr %buf.i246, ptr %24, align 8, !noalias !1045
  store i64 1, ptr %149, align 8, !noalias !1045
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23), !noalias !1045
  %276 = load ptr, ptr %55, align 8, !noalias !287
  %.not.i.i247 = icmp eq ptr %276, null
  br i1 %.not.i.i247, label %io.write_byte.exit250, label %if.then.i.i248

if.then.i.i248:                                   ; preds = %defer
  %277 = load ptr, ptr %140, align 8, !noalias !1048
  store i64 0, ptr %23, align 8, !noalias !1048
  %278 = call i32 %276(ptr %277, i64 4, ptr nonnull %24, i64 0, i64 0, ptr nonnull %23, ptr nonnull %__.context_ptr), !noalias !1052
  %279 = load i64, ptr %23, align 8, !noalias !1048
  %280 = load i64, ptr %83, align 8, !noalias !1048
  %281 = add i64 %280, %279
  store i64 %281, ptr %83, align 8, !noalias !1048
  br label %io.write_byte.exit250

io.write_byte.exit250:                            ; preds = %defer, %if.then.i.i248
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23), !noalias !1045
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i246)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %24)
  %282 = add nuw i64 %index.0363, 1
  %exitcond403.not = icmp eq i64 %282, %n.0
  br i1 %exitcond403.not, label %defer53.loopexit, label %for.interval.body

defer53.loopexit:                                 ; preds = %io.write_byte.exit250
  %.pre414 = load i64, ptr %103, align 8
  %283 = add i64 %.pre414, -1
  br label %defer53

defer53:                                          ; preds = %defer53.loopexit, %if.done17
  %284 = phi i64 [ %283, %defer53.loopexit ], [ %114, %if.done17 ]
  store i64 %284, ptr %103, align 8
  br label %defer81

if.else54:                                        ; preds = %if.done9
  %285 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 1
  %286 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 1, i32 1
  %287 = load i64, ptr %286, align 8
  %288 = icmp sgt i64 %287, 0
  br i1 %288, label %for.index.body.lr.ph.lr.ph, label %defer81

for.index.body.lr.ph.lr.ph:                       ; preds = %if.else54
  %name56.repack110 = getelementptr inbounds %..string, ptr %name56, i64 0, i32 1
  %289 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 4
  %.repack83.i.i = getelementptr inbounds %..string, ptr %21, i64 0, i32 1
  %290 = getelementptr inbounds %..string, ptr %18, i64 0, i32 1
  %291 = getelementptr inbounds i8, ptr %20, i64 8
  %292 = getelementptr inbounds %..string, ptr %17, i64 0, i32 1
  %.elt27.i = getelementptr inbounds %..string, ptr %22, i64 0, i32 1
  %293 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20
  %294 = getelementptr inbounds %"runtime.Maybe($T=int)-8047", ptr %51, i64 0, i32 1
  %.repack122 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20, i32 1
  %295 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 21
  %296 = getelementptr inbounds { ptr, i64 }, ptr %15, i64 0, i32 1
  %297 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %298 = getelementptr inbounds %runtime.Type_Info_Named, ptr %11, i64 0, i32 1
  %299 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %3, i64 0, i32 2
  %.repack116 = getelementptr inbounds %..any, ptr %52, i64 0, i32 1
  br label %for.index.body.lr.ph

for.index.body.lr.ph:                             ; preds = %for.index.body.lr.ph.lr.ph, %if.done79
  %300 = phi i64 [ 0, %for.index.body.lr.ph.lr.ph ], [ %690, %if.done79 ]
  %field_count55.0.ph365 = phi i64 [ -1, %for.index.body.lr.ph.lr.ph ], [ %625, %if.done79 ]
  %301 = load ptr, ptr %285, align 8
  %302 = load ptr, ptr %1, align 8
  %303 = load ptr, ptr %289, align 8
  br label %for.index.body

for.index.body:                                   ; preds = %for.index.body.lr.ph, %fmt.handle_tag-1276.exit
  %304 = phi i64 [ %300, %for.index.body.lr.ph ], [ %622, %fmt.handle_tag-1276.exit ]
  %305 = getelementptr %..string, ptr %301, i64 %304
  %.unpack = load ptr, ptr %305, align 8
  %.elt108 = getelementptr %..string, ptr %301, i64 %304, i32 1
  %.unpack109 = load i64, ptr %.elt108, align 8
  store ptr %.unpack, ptr %name56, align 8
  store i64 %.unpack109, ptr %name56.repack110, align 8
  store i64 -1, ptr %optional_len, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22)
  %306 = getelementptr %..string, ptr %303, i64 %304
  %.unpack.i = load ptr, ptr %306, align 8
  %.elt17.i = getelementptr %..string, ptr %303, i64 %304, i32 1
  %.unpack18.i = load i64, ptr %.elt17.i, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %21, i8 0, i64 16, i1 false)
  call void @llvm.experimental.noalias.scope.decl(metadata !1053)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %value.i.i)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %value.i.i, i8 0, i64 16, i1 false), !noalias !1053
  %.not34.i.i = icmp eq i64 %.unpack18.i, 0
  br i1 %.not34.i.i, label %reflect.struct_tag_lookup.exit.thread.i, label %for.loop1.preheader.i.i

for.loopthread-pre-split.i.i:                     ; preds = %for.loop.i.i.1.i.i, %for.loop.i.i.i.i, %for.body.i.i.preheader.i.i, %if.done29.i.i
  %.not.i.i253 = icmp eq i64 %339, 0
  br i1 %.not.i.i253, label %reflect.struct_tag_lookup.exit.thread.i, label %for.loop1.preheader.i.i

for.loop1.preheader.i.i:                          ; preds = %for.index.body, %for.loopthread-pre-split.i.i
  %307 = phi i64 [ %339, %for.loopthread-pre-split.i.i ], [ %.unpack18.i, %for.index.body ]
  %308 = phi ptr [ %338, %for.loopthread-pre-split.i.i ], [ %.unpack.i, %for.index.body ]
  %309 = icmp sgt i64 %307, 0
  br i1 %309, label %cmp.and.i.i, label %for.done.i.i

cmp.and.i.i:                                      ; preds = %for.loop1.preheader.i.i, %for.body2.i.i
  %i.011.i.i = phi i64 [ %313, %for.body2.i.i ], [ 0, %for.loop1.preheader.i.i ]
  %310 = getelementptr i8, ptr %308, i64 %i.011.i.i
  %311 = load i8, ptr %310, align 1, !noalias !1053
  %312 = icmp eq i8 %311, 32
  br i1 %312, label %for.body2.i.i, label %for.done.i.i

for.body2.i.i:                                    ; preds = %cmp.and.i.i
  %313 = add nuw nsw i64 %i.011.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %313, %307
  br i1 %exitcond.not.i.i, label %for.done.i.i, label %cmp.and.i.i

for.done.i.i:                                     ; preds = %for.body2.i.i, %cmp.and.i.i, %for.loop1.preheader.i.i
  %i.0.lcssa.i.i = phi i64 [ 0, %for.loop1.preheader.i.i ], [ %i.011.i.i, %cmp.and.i.i ], [ %307, %for.body2.i.i ]
  %314 = getelementptr i8, ptr %308, i64 %i.0.lcssa.i.i
  %315 = sub i64 %307, %i.0.lcssa.i.i
  %316 = icmp ne i64 %307, %i.0.lcssa.i.i
  %317 = icmp sgt i64 %315, 0
  %or.cond141.i.i = and i1 %316, %317
  br i1 %or.cond141.i.i, label %for.body4.i.i, label %reflect.struct_tag_lookup.exit.thread.i

for.body4.i.i:                                    ; preds = %for.done.i.i, %switch.done.i.i
  %i.113.i.i = phi i64 [ %323, %switch.done.i.i ], [ 0, %for.done.i.i ]
  %318 = getelementptr i8, ptr %314, i64 %i.113.i.i
  %319 = load i8, ptr %318, align 1, !noalias !1053
  switch i8 %319, label %switch.case.next5.i.i [
    i8 58, label %for.done11.i.i
    i8 34, label %for.done11.i.i
  ]

switch.case.next5.i.i:                            ; preds = %for.body4.i.i
  %320 = icmp ult i8 %319, 32
  %321 = add i8 %319, -127
  %322 = icmp ult i8 %321, 33
  %or.cond.i.i = or i1 %320, %322
  br i1 %or.cond.i.i, label %for.done11.i.i, label %switch.done.i.i

switch.done.i.i:                                  ; preds = %switch.case.next5.i.i
  %323 = add nuw nsw i64 %i.113.i.i, 1
  %exitcond109.not.i.i = icmp eq i64 %323, %315
  br i1 %exitcond109.not.i.i, label %for.done11.i.i, label %for.body4.i.i

for.done11.i.i:                                   ; preds = %switch.done.i.i, %switch.case.next5.i.i, %for.body4.i.i, %for.body4.i.i
  %i.1.lcssa.i.i = phi i64 [ %315, %switch.done.i.i ], [ %i.113.i.i, %for.body4.i.i ], [ %i.113.i.i, %for.body4.i.i ], [ %i.113.i.i, %switch.case.next5.i.i ]
  %324 = icmp eq i64 %i.1.lcssa.i.i, 0
  br i1 %324, label %reflect.struct_tag_lookup.exit.thread.i, label %if.done14.i.i

if.done14.i.i:                                    ; preds = %for.done11.i.i
  %325 = add i64 %i.1.lcssa.i.i, 1
  %.not53.i.i = icmp slt i64 %325, %315
  br i1 %.not53.i.i, label %if.done17.i.i, label %reflect.struct_tag_lookup.exit.thread.i

if.done17.i.i:                                    ; preds = %if.done14.i.i
  %326 = getelementptr i8, ptr %314, i64 %i.1.lcssa.i.i
  %327 = load i8, ptr %326, align 1, !noalias !1053
  %.not54.i.i = icmp eq i8 %327, 58
  br i1 %.not54.i.i, label %cmp.or.i.i, label %reflect.struct_tag_lookup.exit.thread.i

cmp.or.i.i:                                       ; preds = %if.done17.i.i
  %328 = getelementptr i8, ptr %314, i64 %325
  %329 = load i8, ptr %328, align 1, !noalias !1053
  %.not55.i.i = icmp eq i8 %329, 34
  br i1 %.not55.i.i, label %if.done20.i.i, label %reflect.struct_tag_lookup.exit.thread.i

if.done20.i.i:                                    ; preds = %cmp.or.i.i
  %330 = sub i64 %315, %325
  %331 = icmp sgt i64 %330, 1
  br i1 %331, label %cmp.and22.i.i, label %reflect.struct_tag_lookup.exit.thread.i

cmp.and22.i.i:                                    ; preds = %if.done20.i.i, %if.done25.i.i
  %i.219.i.i = phi i64 [ %335, %if.done25.i.i ], [ 1, %if.done20.i.i ]
  %332 = getelementptr i8, ptr %328, i64 %i.219.i.i
  %333 = load i8, ptr %332, align 1, !noalias !1053
  switch i8 %333, label %if.done25.i.i [
    i8 34, label %if.done29.i.i
    i8 92, label %if.then24.i.i
  ]

if.then24.i.i:                                    ; preds = %cmp.and22.i.i
  %334 = add nsw i64 %i.219.i.i, 1
  br label %if.done25.i.i

if.done25.i.i:                                    ; preds = %if.then24.i.i, %cmp.and22.i.i
  %i.3.i.i = phi i64 [ %334, %if.then24.i.i ], [ %i.219.i.i, %cmp.and22.i.i ]
  %335 = add i64 %i.3.i.i, 1
  %336 = icmp slt i64 %335, %330
  br i1 %336, label %cmp.and22.i.i, label %reflect.struct_tag_lookup.exit.thread.i

if.done29.i.i:                                    ; preds = %cmp.and22.i.i
  %337 = add nsw i64 %i.219.i.i, 1
  %338 = getelementptr i8, ptr %328, i64 %337
  %339 = sub i64 %330, %337
  %.not.i.i.i252 = icmp eq i64 %i.1.lcssa.i.i, 3
  br i1 %.not.i.i.i252, label %if.done.i.i60.i, label %for.loopthread-pre-split.i.i

if.done.i.i60.i:                                  ; preds = %if.done29.i.i
  %.not3.i.i = icmp eq ptr %314, @"csbs$126"
  br i1 %.not3.i.i, label %if.then.i, label %for.body.i.i.preheader.i.i

for.body.i.i.preheader.i.i:                       ; preds = %if.done.i.i60.i
  %340 = load i8, ptr %314, align 1, !noalias !1053
  %.not.i.i.i.i = icmp eq i8 %340, 102
  br i1 %.not.i.i.i.i, label %for.loop.i.i.i.i, label %for.loopthread-pre-split.i.i

for.loop.i.i.i.i:                                 ; preds = %for.body.i.i.preheader.i.i
  %341 = getelementptr i8, ptr %314, i64 1
  %342 = load i8, ptr %341, align 1, !noalias !1053
  %.not.i.i.1.i.i = icmp eq i8 %342, 109
  br i1 %.not.i.i.1.i.i, label %for.loop.i.i.1.i.i, label %for.loopthread-pre-split.i.i

for.loop.i.i.1.i.i:                               ; preds = %for.loop.i.i.i.i
  %343 = getelementptr i8, ptr %314, i64 2
  %344 = load i8, ptr %343, align 1, !noalias !1053
  %.not.i.i.2.i.i = icmp eq i8 %344, 116
  br i1 %.not.i.i.2.i.i, label %if.then.i, label %for.loopthread-pre-split.i.i

reflect.struct_tag_lookup.exit.thread.i:          ; preds = %for.index.body, %if.done20.i.i, %cmp.or.i.i, %if.done17.i.i, %if.done14.i.i, %for.done11.i.i, %for.done.i.i, %for.loopthread-pre-split.i.i, %if.done25.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %value.i.i)
  br label %if.done60

if.then.i:                                        ; preds = %for.loop.i.i.1.i.i, %if.done.i.i60.i
  %345 = getelementptr i8, ptr %328, i64 1
  %346 = add i64 %i.219.i.i, -1
  store ptr %345, ptr %21, align 8, !alias.scope !1053
  store i64 %346, ptr %.repack83.i.i, align 8, !alias.scope !1053
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %value.i.i)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %22, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19), !noalias !1056
  call void @llvm.experimental.noalias.scope.decl(metadata !1059)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %18), !noalias !1062
  %347 = icmp sgt i64 %346, 0
  br i1 %347, label %for.string.body.i.i.i.i.i, label %if.then.i.i.i.i

for.string.body.i.i.i.i.i:                        ; preds = %if.then.i, %strings.is_space.exit.i.i.i.i.i
  %.012.i.i.i.i.i = phi i64 [ %418, %strings.is_space.exit.i.i.i.i.i ], [ 0, %if.then.i ]
  %348 = getelementptr i8, ptr %345, i64 %.012.i.i.i.i.i
  %349 = sub i64 %346, %.012.i.i.i.i.i
  %350 = icmp slt i64 %349, 1
  br i1 %350, label %strings.index_proc.exit.i.i.i.i, label %if.done.i.i.i.i.i.i

if.done.i.i.i.i.i.i:                              ; preds = %for.string.body.i.i.i.i.i
  %351 = load i8, ptr %348, align 1, !noalias !1065
  %352 = zext i8 %351 to i64
  %353 = getelementptr [256 x i8], ptr @runtime.string_decode_rune-.accept_sizes-22666, i64 0, i64 %352
  %354 = load i8, ptr %353, align 1, !noalias !1065
  %355 = add nsw i64 %352, -245
  %356 = icmp ult i64 %355, -51
  br i1 %356, label %if.then1.i.i.i.i.i.i, label %if.done2.i.i.i.i.i.i

if.then1.i.i.i.i.i.i:                             ; preds = %if.done.i.i.i.i.i.i
  %357 = and i8 %354, 1
  %358 = zext i8 %357 to i32
  %359 = sub nsw i32 0, %358
  %360 = zext i8 %351 to i32
  %361 = add nuw nsw i32 %358, 255
  %362 = and i32 %361, %360
  %363 = and i32 %359, 65533
  %364 = or i32 %362, %363
  br label %runtime.string_decode_rune.exit.i.i.i.i.i

if.done2.i.i.i.i.i.i:                             ; preds = %if.done.i.i.i.i.i.i
  %365 = and i8 %354, 7
  %366 = zext i8 %365 to i64
  %367 = icmp ult i64 %349, %366
  br i1 %367, label %strings.index_proc.exit.i.i.i.i, label %if.done4.i.i.i.i.i.i

if.done4.i.i.i.i.i.i:                             ; preds = %if.done2.i.i.i.i.i.i
  %368 = lshr i8 %354, 4
  %369 = zext i8 %368 to i64
  %.elt20.i.i.i.i.i.i = getelementptr [5 x %runtime.string_decode_rune.Accept_Range-2], ptr @runtime.string_decode_rune-.accept_ranges-22895, i64 0, i64 %369, i32 1
  %.unpack21.i.i.i.i.i.i = load i8, ptr %.elt20.i.i.i.i.i.i, align 1, !noalias !1065
  %370 = getelementptr [5 x %runtime.string_decode_rune.Accept_Range-2], ptr @runtime.string_decode_rune-.accept_ranges-22895, i64 0, i64 %369
  %.unpack.i.i.i.i.i.i = load i8, ptr %370, align 2, !noalias !1065
  %371 = getelementptr i8, ptr %348, i64 1
  %372 = load i8, ptr %371, align 1, !noalias !1065
  %373 = icmp ult i8 %372, %.unpack.i.i.i.i.i.i
  %374 = icmp ult i8 %.unpack21.i.i.i.i.i.i, %372
  %or.cond.i.i.i.i.i.i = select i1 %373, i1 true, i1 %374
  br i1 %or.cond.i.i.i.i.i.i, label %strings.index_proc.exit.i.i.i.i, label %if.done6.i.i.i.i.i.i

if.done6.i.i.i.i.i.i:                             ; preds = %if.done4.i.i.i.i.i.i
  %375 = add nsw i64 %352, -194
  %376 = icmp ult i64 %375, 30
  br i1 %376, label %runtime.string_decode_rune.exit.thread4.i.i.i.i.i, label %if.done8.i.i.i.i.i.i

runtime.string_decode_rune.exit.thread4.i.i.i.i.i: ; preds = %if.done6.i.i.i.i.i.i
  %377 = and i8 %351, 31
  %378 = zext i8 %377 to i32
  %379 = shl nuw nsw i32 %378, 6
  %380 = and i8 %372, 63
  %381 = zext i8 %380 to i32
  %382 = or i32 %379, %381
  %383 = add i64 %.012.i.i.i.i.i, 2
  br label %if.then.i.i.i.i.i.i

if.done8.i.i.i.i.i.i:                             ; preds = %if.done6.i.i.i.i.i.i
  %384 = getelementptr i8, ptr %348, i64 2
  %385 = load i8, ptr %384, align 1, !noalias !1065
  %or.cond26.i.i.i.i.i.i = icmp sgt i8 %385, -65
  br i1 %or.cond26.i.i.i.i.i.i, label %strings.index_proc.exit.i.i.i.i, label %if.done11.i.i.i.i.i.i

if.done11.i.i.i.i.i.i:                            ; preds = %if.done8.i.i.i.i.i.i
  %386 = and i64 %352, 240
  %387 = icmp eq i64 %386, 224
  br i1 %387, label %if.then12.i.i.i.i.i.i, label %if.done13.i.i.i.i.i.i

if.then12.i.i.i.i.i.i:                            ; preds = %if.done11.i.i.i.i.i.i
  %388 = and i8 %351, 15
  %389 = zext i8 %388 to i32
  %390 = shl nuw nsw i32 %389, 12
  %391 = and i8 %372, 63
  %392 = zext i8 %391 to i32
  %393 = shl nuw nsw i32 %392, 6
  %394 = or i32 %393, %390
  %395 = and i8 %385, 63
  %396 = zext i8 %395 to i32
  %397 = or i32 %394, %396
  br label %runtime.string_decode_rune.exit.i.i.i.i.i

if.done13.i.i.i.i.i.i:                            ; preds = %if.done11.i.i.i.i.i.i
  %398 = getelementptr i8, ptr %348, i64 3
  %399 = load i8, ptr %398, align 1, !noalias !1065
  %or.cond27.i.i.i.i.i.i = icmp sgt i8 %399, -65
  br i1 %or.cond27.i.i.i.i.i.i, label %strings.index_proc.exit.i.i.i.i, label %if.done16.i.i.i.i.i.i

if.done16.i.i.i.i.i.i:                            ; preds = %if.done13.i.i.i.i.i.i
  %400 = and i8 %351, 7
  %401 = zext i8 %400 to i32
  %402 = shl nuw nsw i32 %401, 18
  %403 = and i8 %372, 63
  %404 = zext i8 %403 to i32
  %405 = shl nuw nsw i32 %404, 12
  %406 = or i32 %405, %402
  %407 = and i8 %385, 63
  %408 = zext i8 %407 to i32
  %409 = shl nuw nsw i32 %408, 6
  %410 = or i32 %409, %406
  %411 = and i8 %399, 63
  %412 = zext i8 %411 to i32
  %413 = or i32 %410, %412
  br label %runtime.string_decode_rune.exit.i.i.i.i.i

runtime.string_decode_rune.exit.i.i.i.i.i:        ; preds = %if.done16.i.i.i.i.i.i, %if.then12.i.i.i.i.i.i, %if.then1.i.i.i.i.i.i
  %.sink.i.i.i.i.i.i = phi i32 [ %413, %if.done16.i.i.i.i.i.i ], [ %397, %if.then12.i.i.i.i.i.i ], [ %364, %if.then1.i.i.i.i.i.i ]
  %common.ret.op.i.i.i.i.i.i = phi i64 [ 4, %if.done16.i.i.i.i.i.i ], [ 3, %if.then12.i.i.i.i.i.i ], [ 1, %if.then1.i.i.i.i.i.i ]
  %414 = add i64 %common.ret.op.i.i.i.i.i.i, %.012.i.i.i.i.i
  %415 = icmp ult i32 %.sink.i.i.i.i.i.i, 8192
  br i1 %415, label %if.then.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i

if.then.i.i.i.i.i.i:                              ; preds = %runtime.string_decode_rune.exit.i.i.i.i.i, %runtime.string_decode_rune.exit.thread4.i.i.i.i.i
  %416 = phi i64 [ %383, %runtime.string_decode_rune.exit.thread4.i.i.i.i.i ], [ %414, %runtime.string_decode_rune.exit.i.i.i.i.i ]
  %.sink.i7.i.i.i.i.i = phi i32 [ %382, %runtime.string_decode_rune.exit.thread4.i.i.i.i.i ], [ %.sink.i.i.i.i.i.i, %runtime.string_decode_rune.exit.i.i.i.i.i ]
  switch i32 %.sink.i7.i.i.i.i.i, label %strings.index_proc.exit.i.i.i.i [
    i32 9, label %strings.is_space.exit.i.i.i.i.i
    i32 10, label %strings.is_space.exit.i.i.i.i.i
    i32 11, label %strings.is_space.exit.i.i.i.i.i
    i32 12, label %strings.is_space.exit.i.i.i.i.i
    i32 13, label %strings.is_space.exit.i.i.i.i.i
    i32 32, label %strings.is_space.exit.i.i.i.i.i
    i32 133, label %strings.is_space.exit.i.i.i.i.i
    i32 160, label %strings.is_space.exit.i.i.i.i.i
    i32 5760, label %strings.is_space.exit.i.i.i.i.i
  ]

if.else.i.i.i.i.i.i:                              ; preds = %runtime.string_decode_rune.exit.i.i.i.i.i
  %417 = icmp ult i32 %.sink.i.i.i.i.i.i, 8203
  br i1 %417, label %strings.is_space.exit.i.i.i.i.i, label %if.done.i3.i.i.i.i.i

if.done.i3.i.i.i.i.i:                             ; preds = %if.else.i.i.i.i.i.i
  switch i32 %.sink.i.i.i.i.i.i, label %strings.index_proc.exit.i.i.i.i [
    i32 8232, label %strings.is_space.exit.i.i.i.i.i
    i32 8233, label %strings.is_space.exit.i.i.i.i.i
    i32 8239, label %strings.is_space.exit.i.i.i.i.i
    i32 8287, label %strings.is_space.exit.i.i.i.i.i
    i32 12288, label %strings.is_space.exit.i.i.i.i.i
  ]

strings.is_space.exit.i.i.i.i.i:                  ; preds = %if.done.i3.i.i.i.i.i, %if.done.i3.i.i.i.i.i, %if.done.i3.i.i.i.i.i, %if.done.i3.i.i.i.i.i, %if.done.i3.i.i.i.i.i, %if.else.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.then.i.i.i.i.i.i
  %418 = phi i64 [ %416, %if.then.i.i.i.i.i.i ], [ %416, %if.then.i.i.i.i.i.i ], [ %416, %if.then.i.i.i.i.i.i ], [ %416, %if.then.i.i.i.i.i.i ], [ %416, %if.then.i.i.i.i.i.i ], [ %416, %if.then.i.i.i.i.i.i ], [ %416, %if.then.i.i.i.i.i.i ], [ %416, %if.then.i.i.i.i.i.i ], [ %416, %if.then.i.i.i.i.i.i ], [ %414, %if.else.i.i.i.i.i.i ], [ %414, %if.done.i3.i.i.i.i.i ], [ %414, %if.done.i3.i.i.i.i.i ], [ %414, %if.done.i3.i.i.i.i.i ], [ %414, %if.done.i3.i.i.i.i.i ], [ %414, %if.done.i3.i.i.i.i.i ]
  %419 = icmp slt i64 %418, %346
  br i1 %419, label %for.string.body.i.i.i.i.i, label %if.then.i.i.i.i

strings.index_proc.exit.i.i.i.i:                  ; preds = %if.done.i3.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.done13.i.i.i.i.i.i, %if.done8.i.i.i.i.i.i, %if.done4.i.i.i.i.i.i, %if.done2.i.i.i.i.i.i, %for.string.body.i.i.i.i.i
  %420 = icmp eq i64 %.012.i.i.i.i.i, -1
  br i1 %420, label %if.then.i.i.i.i, label %if.done.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %strings.is_space.exit.i.i.i.i.i, %strings.index_proc.exit.i.i.i.i, %if.then.i
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %19, i8 0, i64 16, i1 false), !alias.scope !1059, !noalias !1062
  br label %strings.trim_left_space.exit.i.i

if.done.i.i.i.i:                                  ; preds = %strings.index_proc.exit.i.i.i.i
  store ptr %348, ptr %18, align 8, !noalias !1068
  store i64 %349, ptr %290, align 8, !noalias !1068
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %19, ptr nonnull align 8 %18, i64 16, i1 false), !noalias !1062
  br label %strings.trim_left_space.exit.i.i

strings.trim_left_space.exit.i.i:                 ; preds = %if.done.i.i.i.i, %if.then.i.i.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %18), !noalias !1062
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %20, ptr nonnull align 8 %19, i64 16, i1 false), !noalias !1056
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19), !noalias !1056
  %.val.i.i = load ptr, ptr %20, align 8, !noalias !1069
  %.val5.i.i = load i64, ptr %291, align 8, !noalias !1069
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %17), !noalias !1072
  %421 = icmp sgt i64 %.val5.i.i, 0
  br i1 %421, label %if.done.i.i.i.i.i.i.i, label %strings.trim_space.exit.i

if.done.i.i.i.i.i.i.i:                            ; preds = %strings.trim_left_space.exit.i.i, %strings.is_space.exit.i.i.i21.i.i
  %i.013.i.i.i.i.i = phi i64 [ %506, %strings.is_space.exit.i.i.i21.i.i ], [ %.val5.i.i, %strings.trim_left_space.exit.i.i ]
  %422 = add nsw i64 %i.013.i.i.i.i.i, -1
  %423 = getelementptr i8, ptr %.val.i.i, i64 %422
  %424 = load i8, ptr %423, align 1, !noalias !1075
  %425 = icmp sgt i8 %424, -1
  br i1 %425, label %utf8.decode_last_rune_in_string.exit.thread4.i.i.i.i.i, label %if.done2.i.i.i.i.i.i.i

utf8.decode_last_rune_in_string.exit.thread4.i.i.i.i.i: ; preds = %if.done.i.i.i.i.i.i.i
  %426 = zext i8 %424 to i32
  br label %if.then.i.i.i.i22.i.i

if.done2.i.i.i.i.i.i.i:                           ; preds = %if.done.i.i.i.i.i.i.i
  %427 = call i64 @llvm.smax.i64(i64 %i.013.i.i.i.i.i, i64 4)
  %428 = add nsw i64 %427, -4
  %429 = add nsw i64 %i.013.i.i.i.i.i, -2
  %.not12.i.i.i.i.i.i.i = icmp slt i64 %429, %428
  br i1 %.not12.i.i.i.i.i.i.i, label %for.done.i.i.i.i.i.i.i, label %for.body.preheader.i.i.i.i.i.i.i

for.body.preheader.i.i.i.i.i.i.i:                 ; preds = %if.done2.i.i.i.i.i.i.i
  %430 = add nsw i64 %427, -5
  br label %for.body.i.i.i.i.i.i.i

for.body.i.i.i.i.i.i.i:                           ; preds = %for.post.i.i.i.i.i.i.i, %for.body.preheader.i.i.i.i.i.i.i
  %start.013.i.i.i.i.i.i.i = phi i64 [ %434, %for.post.i.i.i.i.i.i.i ], [ %429, %for.body.preheader.i.i.i.i.i.i.i ]
  %431 = getelementptr i8, ptr %.val.i.i, i64 %start.013.i.i.i.i.i.i.i
  %432 = load i8, ptr %431, align 1, !noalias !1075
  %433 = and i8 %432, -64
  %.not11.i.i.i.i.i.i.i = icmp eq i8 %433, -128
  br i1 %.not11.i.i.i.i.i.i.i, label %for.post.i.i.i.i.i.i.i, label %for.done.i.i.i.i.i.i.i

for.post.i.i.i.i.i.i.i:                           ; preds = %for.body.i.i.i.i.i.i.i
  %434 = add nsw i64 %start.013.i.i.i.i.i.i.i, -1
  %.not.not.i.i.i.i.i.i.i = icmp sgt i64 %start.013.i.i.i.i.i.i.i, %428
  br i1 %.not.not.i.i.i.i.i.i.i, label %for.body.i.i.i.i.i.i.i, label %for.done.i.i.i.i.i.i.i

for.done.i.i.i.i.i.i.i:                           ; preds = %for.post.i.i.i.i.i.i.i, %for.body.i.i.i.i.i.i.i, %if.done2.i.i.i.i.i.i.i
  %start.0.lcssa.i.i.i.i.i.i.i = phi i64 [ %429, %if.done2.i.i.i.i.i.i.i ], [ %430, %for.post.i.i.i.i.i.i.i ], [ %start.013.i.i.i.i.i.i.i, %for.body.i.i.i.i.i.i.i ]
  %435 = call i64 @llvm.smax.i64(i64 %start.0.lcssa.i.i.i.i.i.i.i, i64 0)
  %436 = getelementptr i8, ptr %.val.i.i, i64 %435
  %437 = sub i64 %i.013.i.i.i.i.i, %435
  %438 = icmp slt i64 %437, 1
  br i1 %438, label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i, label %if.done.i.i.i.i.i.i.i.i

if.done.i.i.i.i.i.i.i.i:                          ; preds = %for.done.i.i.i.i.i.i.i
  %439 = load i8, ptr %436, align 1, !noalias !1082
  %440 = zext i8 %439 to i64
  %441 = getelementptr [256 x i8], ptr @runtime.string_decode_rune-.accept_sizes-22666, i64 0, i64 %440
  %442 = load i8, ptr %441, align 1, !noalias !1082
  %443 = add nsw i64 %440, -245
  %444 = icmp ult i64 %443, -51
  br i1 %444, label %if.then1.i.i.i.i.i.i.i.i, label %if.done2.i.i.i.i.i.i.i.i

if.then1.i.i.i.i.i.i.i.i:                         ; preds = %if.done.i.i.i.i.i.i.i.i
  %445 = and i8 %442, 1
  %446 = zext i8 %445 to i32
  %447 = sub nsw i32 0, %446
  %448 = zext i8 %439 to i32
  %449 = add nuw nsw i32 %446, 255
  %450 = and i32 %449, %448
  %451 = and i32 %447, 65533
  %452 = or i32 %450, %451
  br label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i

if.done2.i.i.i.i.i.i.i.i:                         ; preds = %if.done.i.i.i.i.i.i.i.i
  %453 = and i8 %442, 7
  %454 = zext i8 %453 to i64
  %455 = icmp ult i64 %437, %454
  br i1 %455, label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i, label %if.done4.i.i.i.i.i.i.i.i

if.done4.i.i.i.i.i.i.i.i:                         ; preds = %if.done2.i.i.i.i.i.i.i.i
  %456 = lshr i8 %442, 4
  %457 = zext i8 %456 to i64
  %.elt20.i.i.i.i.i.i.i.i = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %457, i32 1
  %.unpack21.i.i.i.i.i.i.i.i = load i8, ptr %.elt20.i.i.i.i.i.i.i.i, align 1, !noalias !1082
  %458 = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %457
  %.unpack.i.i.i.i.i.i.i.i = load i8, ptr %458, align 2, !noalias !1082
  %459 = getelementptr i8, ptr %436, i64 1
  %460 = load i8, ptr %459, align 1, !noalias !1082
  %461 = icmp ult i8 %460, %.unpack.i.i.i.i.i.i.i.i
  %462 = icmp ult i8 %.unpack21.i.i.i.i.i.i.i.i, %460
  %or.cond.i.i.i.i.i.i.i.i = select i1 %461, i1 true, i1 %462
  br i1 %or.cond.i.i.i.i.i.i.i.i, label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i, label %if.done6.i.i.i.i.i.i.i.i

if.done6.i.i.i.i.i.i.i.i:                         ; preds = %if.done4.i.i.i.i.i.i.i.i
  %463 = add nsw i64 %440, -194
  %464 = icmp ult i64 %463, 30
  br i1 %464, label %if.then7.i.i.i.i.i.i.i.i, label %if.done8.i.i.i.i.i.i.i.i

if.then7.i.i.i.i.i.i.i.i:                         ; preds = %if.done6.i.i.i.i.i.i.i.i
  %465 = and i8 %439, 31
  %466 = zext i8 %465 to i32
  %467 = shl nuw nsw i32 %466, 6
  %468 = and i8 %460, 63
  %469 = zext i8 %468 to i32
  %470 = or i32 %467, %469
  br label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i

if.done8.i.i.i.i.i.i.i.i:                         ; preds = %if.done6.i.i.i.i.i.i.i.i
  %471 = getelementptr i8, ptr %436, i64 2
  %472 = load i8, ptr %471, align 1, !noalias !1082
  %or.cond26.i.i.i.i.i.i.i.i = icmp sgt i8 %472, -65
  br i1 %or.cond26.i.i.i.i.i.i.i.i, label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i, label %if.done11.i.i.i.i.i.i.i.i

if.done11.i.i.i.i.i.i.i.i:                        ; preds = %if.done8.i.i.i.i.i.i.i.i
  %473 = and i64 %440, 240
  %474 = icmp eq i64 %473, 224
  br i1 %474, label %if.then12.i.i.i.i.i.i.i.i, label %if.done13.i.i.i.i.i.i.i.i

if.then12.i.i.i.i.i.i.i.i:                        ; preds = %if.done11.i.i.i.i.i.i.i.i
  %475 = and i8 %439, 15
  %476 = zext i8 %475 to i32
  %477 = shl nuw nsw i32 %476, 12
  %478 = and i8 %460, 63
  %479 = zext i8 %478 to i32
  %480 = shl nuw nsw i32 %479, 6
  %481 = or i32 %480, %477
  %482 = and i8 %472, 63
  %483 = zext i8 %482 to i32
  %484 = or i32 %481, %483
  br label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i

if.done13.i.i.i.i.i.i.i.i:                        ; preds = %if.done11.i.i.i.i.i.i.i.i
  %485 = getelementptr i8, ptr %436, i64 3
  %486 = load i8, ptr %485, align 1, !noalias !1082
  %or.cond27.i.i.i.i.i.i.i.i = icmp sgt i8 %486, -65
  br i1 %or.cond27.i.i.i.i.i.i.i.i, label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i, label %if.done16.i.i.i.i.i.i.i.i

if.done16.i.i.i.i.i.i.i.i:                        ; preds = %if.done13.i.i.i.i.i.i.i.i
  %487 = and i8 %439, 7
  %488 = zext i8 %487 to i32
  %489 = shl nuw nsw i32 %488, 18
  %490 = and i8 %460, 63
  %491 = zext i8 %490 to i32
  %492 = shl nuw nsw i32 %491, 12
  %493 = or i32 %492, %489
  %494 = and i8 %472, 63
  %495 = zext i8 %494 to i32
  %496 = shl nuw nsw i32 %495, 6
  %497 = or i32 %496, %493
  %498 = and i8 %486, 63
  %499 = zext i8 %498 to i32
  %500 = or i32 %497, %499
  br label %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i

utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i:     ; preds = %if.done16.i.i.i.i.i.i.i.i, %if.done13.i.i.i.i.i.i.i.i, %if.then12.i.i.i.i.i.i.i.i, %if.done8.i.i.i.i.i.i.i.i, %if.then7.i.i.i.i.i.i.i.i, %if.done4.i.i.i.i.i.i.i.i, %if.done2.i.i.i.i.i.i.i.i, %if.then1.i.i.i.i.i.i.i.i, %for.done.i.i.i.i.i.i.i
  %.sink.i.i.i.i.i.i.i.i = phi i32 [ %500, %if.done16.i.i.i.i.i.i.i.i ], [ %484, %if.then12.i.i.i.i.i.i.i.i ], [ %470, %if.then7.i.i.i.i.i.i.i.i ], [ %452, %if.then1.i.i.i.i.i.i.i.i ], [ 65533, %for.done.i.i.i.i.i.i.i ], [ 65533, %if.done2.i.i.i.i.i.i.i.i ], [ 65533, %if.done4.i.i.i.i.i.i.i.i ], [ 65533, %if.done8.i.i.i.i.i.i.i.i ], [ 65533, %if.done13.i.i.i.i.i.i.i.i ]
  %common.ret.op.i.i.i.i.i.i.i.i = phi i64 [ 4, %if.done16.i.i.i.i.i.i.i.i ], [ 3, %if.then12.i.i.i.i.i.i.i.i ], [ 2, %if.then7.i.i.i.i.i.i.i.i ], [ 1, %if.then1.i.i.i.i.i.i.i.i ], [ 0, %for.done.i.i.i.i.i.i.i ], [ 1, %if.done2.i.i.i.i.i.i.i.i ], [ 1, %if.done4.i.i.i.i.i.i.i.i ], [ 1, %if.done8.i.i.i.i.i.i.i.i ], [ 1, %if.done13.i.i.i.i.i.i.i.i ]
  %501 = add nuw i64 %common.ret.op.i.i.i.i.i.i.i.i, %435
  %.not9.i.i.i.i.i.i.i = icmp eq i64 %501, %i.013.i.i.i.i.i
  br i1 %.not9.i.i.i.i.i.i.i, label %utf8.decode_last_rune_in_string.exit.i.i.i.i.i, label %strings.last_index_proc.exit.i.i.i.i

utf8.decode_last_rune_in_string.exit.i.i.i.i.i:   ; preds = %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i
  %502 = sub i64 %i.013.i.i.i.i.i, %common.ret.op.i.i.i.i.i.i.i.i
  %503 = icmp ult i32 %.sink.i.i.i.i.i.i.i.i, 8192
  br i1 %503, label %if.then.i.i.i.i22.i.i, label %if.else.i.i.i.i20.i.i

if.then.i.i.i.i22.i.i:                            ; preds = %utf8.decode_last_rune_in_string.exit.i.i.i.i.i, %utf8.decode_last_rune_in_string.exit.thread4.i.i.i.i.i
  %504 = phi i64 [ %422, %utf8.decode_last_rune_in_string.exit.thread4.i.i.i.i.i ], [ %502, %utf8.decode_last_rune_in_string.exit.i.i.i.i.i ]
  %.sink.i.sink.i.i7.i.i.i.i.i = phi i32 [ %426, %utf8.decode_last_rune_in_string.exit.thread4.i.i.i.i.i ], [ %.sink.i.i.i.i.i.i.i.i, %utf8.decode_last_rune_in_string.exit.i.i.i.i.i ]
  switch i32 %.sink.i.sink.i.i7.i.i.i.i.i, label %strings.last_index_proc.exit.i.i.i.i [
    i32 9, label %strings.is_space.exit.i.i.i21.i.i
    i32 10, label %strings.is_space.exit.i.i.i21.i.i
    i32 11, label %strings.is_space.exit.i.i.i21.i.i
    i32 12, label %strings.is_space.exit.i.i.i21.i.i
    i32 13, label %strings.is_space.exit.i.i.i21.i.i
    i32 32, label %strings.is_space.exit.i.i.i21.i.i
    i32 133, label %strings.is_space.exit.i.i.i21.i.i
    i32 160, label %strings.is_space.exit.i.i.i21.i.i
    i32 5760, label %strings.is_space.exit.i.i.i21.i.i
  ]

if.else.i.i.i.i20.i.i:                            ; preds = %utf8.decode_last_rune_in_string.exit.i.i.i.i.i
  %505 = icmp ult i32 %.sink.i.i.i.i.i.i.i.i, 8203
  br i1 %505, label %strings.is_space.exit.i.i.i21.i.i, label %if.done.i.i6.i.i.i.i

if.done.i.i6.i.i.i.i:                             ; preds = %if.else.i.i.i.i20.i.i
  switch i32 %.sink.i.i.i.i.i.i.i.i, label %strings.last_index_proc.exit.i.i.i.i [
    i32 8232, label %strings.is_space.exit.i.i.i21.i.i
    i32 8233, label %strings.is_space.exit.i.i.i21.i.i
    i32 8239, label %strings.is_space.exit.i.i.i21.i.i
    i32 8287, label %strings.is_space.exit.i.i.i21.i.i
    i32 12288, label %strings.is_space.exit.i.i.i21.i.i
  ]

strings.is_space.exit.i.i.i21.i.i:                ; preds = %if.done.i.i6.i.i.i.i, %if.done.i.i6.i.i.i.i, %if.done.i.i6.i.i.i.i, %if.done.i.i6.i.i.i.i, %if.done.i.i6.i.i.i.i, %if.else.i.i.i.i20.i.i, %if.then.i.i.i.i22.i.i, %if.then.i.i.i.i22.i.i, %if.then.i.i.i.i22.i.i, %if.then.i.i.i.i22.i.i, %if.then.i.i.i.i22.i.i, %if.then.i.i.i.i22.i.i, %if.then.i.i.i.i22.i.i, %if.then.i.i.i.i22.i.i, %if.then.i.i.i.i22.i.i
  %506 = phi i64 [ %504, %if.then.i.i.i.i22.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %502, %if.else.i.i.i.i20.i.i ], [ %502, %if.done.i.i6.i.i.i.i ], [ %502, %if.done.i.i6.i.i.i.i ], [ %502, %if.done.i.i6.i.i.i.i ], [ %502, %if.done.i.i6.i.i.i.i ], [ %502, %if.done.i.i6.i.i.i.i ]
  %507 = icmp sgt i64 %506, 0
  br i1 %507, label %if.done.i.i.i.i.i.i.i, label %strings.trim_space.exit.i

strings.last_index_proc.exit.i.i.i.i:             ; preds = %if.done.i.i6.i.i.i.i, %if.then.i.i.i.i22.i.i, %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i
  %common.ret.op.i.i.i.i.i = phi i64 [ %502, %if.done.i.i6.i.i.i.i ], [ %504, %if.then.i.i.i.i22.i.i ], [ %422, %utf8.decode_rune_in_bytes.exit.i.i.i.i.i.i.i ]
  %508 = icmp sgt i64 %common.ret.op.i.i.i.i.i, -1
  br i1 %508, label %cmp.and.i.i.i.i, label %strings.trim_space.exit.i

cmp.and.i.i.i.i:                                  ; preds = %strings.last_index_proc.exit.i.i.i.i
  %509 = getelementptr i8, ptr %.val.i.i, i64 %common.ret.op.i.i.i.i.i
  %510 = load i8, ptr %509, align 1, !noalias !1085
  %511 = icmp slt i8 %510, 0
  br i1 %511, label %if.then.i.i6.i.i, label %strings.trim_space.exit.i

if.then.i.i6.i.i:                                 ; preds = %cmp.and.i.i.i.i
  %512 = sub i64 %.val5.i.i, %common.ret.op.i.i.i.i.i
  %513 = icmp slt i64 %512, 1
  br i1 %513, label %strings.trim_space.exit.i, label %if.done.i.i.i.i7.i.i

if.done.i.i.i.i7.i.i:                             ; preds = %if.then.i.i6.i.i
  %514 = zext i8 %510 to i64
  %515 = getelementptr [256 x i8], ptr @runtime.string_decode_rune-.accept_sizes-22666, i64 0, i64 %514
  %516 = load i8, ptr %515, align 1, !noalias !1086
  %517 = add nsw i64 %514, -245
  %518 = icmp ult i64 %517, -51
  br i1 %518, label %strings.trim_space.exit.i, label %if.done2.i.i.i.i8.i.i

if.done2.i.i.i.i8.i.i:                            ; preds = %if.done.i.i.i.i7.i.i
  %519 = and i8 %516, 7
  %520 = zext i8 %519 to i64
  %521 = icmp ult i64 %512, %520
  br i1 %521, label %strings.trim_space.exit.i, label %if.done4.i.i.i.i9.i.i

if.done4.i.i.i.i9.i.i:                            ; preds = %if.done2.i.i.i.i8.i.i
  %522 = lshr i8 %516, 4
  %523 = zext i8 %522 to i64
  %.elt20.i.i.i.i10.i.i = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %523, i32 1
  %.unpack21.i.i.i.i11.i.i = load i8, ptr %.elt20.i.i.i.i10.i.i, align 1, !noalias !1086
  %524 = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %523
  %.unpack.i.i.i.i12.i.i = load i8, ptr %524, align 2, !noalias !1086
  %525 = getelementptr i8, ptr %509, i64 1
  %526 = load i8, ptr %525, align 1, !noalias !1086
  %527 = icmp ult i8 %526, %.unpack.i.i.i.i12.i.i
  %528 = icmp ult i8 %.unpack21.i.i.i.i11.i.i, %526
  %or.cond.i.i.i.i13.i.i = select i1 %527, i1 true, i1 %528
  br i1 %or.cond.i.i.i.i13.i.i, label %strings.trim_space.exit.i, label %if.done6.i.i.i.i14.i.i

if.done6.i.i.i.i14.i.i:                           ; preds = %if.done4.i.i.i.i9.i.i
  %529 = add nsw i64 %514, -194
  %530 = icmp ult i64 %529, 30
  br i1 %530, label %strings.trim_space.exit.i, label %if.done8.i.i.i.i15.i.i

if.done8.i.i.i.i15.i.i:                           ; preds = %if.done6.i.i.i.i14.i.i
  %531 = getelementptr i8, ptr %509, i64 2
  %532 = load i8, ptr %531, align 1, !noalias !1086
  %or.cond26.i.i.i.i16.i.i = icmp sgt i8 %532, -65
  br i1 %or.cond26.i.i.i.i16.i.i, label %strings.trim_space.exit.i, label %if.done11.i.i.i.i17.i.i

if.done11.i.i.i.i17.i.i:                          ; preds = %if.done8.i.i.i.i15.i.i
  %533 = and i64 %514, 240
  %534 = icmp eq i64 %533, 224
  br i1 %534, label %strings.trim_space.exit.i, label %if.done13.i.i.i.i18.i.i

if.done13.i.i.i.i18.i.i:                          ; preds = %if.done11.i.i.i.i17.i.i
  %535 = getelementptr i8, ptr %509, i64 3
  %536 = load i8, ptr %535, align 1, !noalias !1086
  %or.cond27.i.i.i.i19.i.i = icmp sgt i8 %536, -65
  %spec.select.i.i.i.i = select i1 %or.cond27.i.i.i.i19.i.i, i64 1, i64 4
  br label %strings.trim_space.exit.i

strings.trim_space.exit.i:                        ; preds = %strings.is_space.exit.i.i.i21.i.i, %if.done13.i.i.i.i18.i.i, %if.done11.i.i.i.i17.i.i, %if.done8.i.i.i.i15.i.i, %if.done6.i.i.i.i14.i.i, %if.done4.i.i.i.i9.i.i, %if.done2.i.i.i.i8.i.i, %if.done.i.i.i.i7.i.i, %if.then.i.i6.i.i, %cmp.and.i.i.i.i, %strings.last_index_proc.exit.i.i.i.i, %strings.trim_left_space.exit.i.i
  %common.ret.op.i2.i.i.i.i = phi i64 [ %common.ret.op.i.i.i.i.i, %cmp.and.i.i.i.i ], [ %common.ret.op.i.i.i.i.i, %strings.last_index_proc.exit.i.i.i.i ], [ -1, %strings.trim_left_space.exit.i.i ], [ %common.ret.op.i.i.i.i.i, %if.done11.i.i.i.i17.i.i ], [ %common.ret.op.i.i.i.i.i, %if.done6.i.i.i.i14.i.i ], [ %common.ret.op.i.i.i.i.i, %if.done.i.i.i.i7.i.i ], [ %common.ret.op.i.i.i.i.i, %if.then.i.i6.i.i ], [ %common.ret.op.i.i.i.i.i, %if.done2.i.i.i.i8.i.i ], [ %common.ret.op.i.i.i.i.i, %if.done4.i.i.i.i9.i.i ], [ %common.ret.op.i.i.i.i.i, %if.done8.i.i.i.i15.i.i ], [ %common.ret.op.i.i.i.i.i, %if.done13.i.i.i.i18.i.i ], [ -1, %strings.is_space.exit.i.i.i21.i.i ]
  %.pn.i.i.i.i = phi i64 [ 1, %cmp.and.i.i.i.i ], [ 1, %strings.last_index_proc.exit.i.i.i.i ], [ 1, %strings.trim_left_space.exit.i.i ], [ 3, %if.done11.i.i.i.i17.i.i ], [ 2, %if.done6.i.i.i.i14.i.i ], [ 1, %if.done.i.i.i.i7.i.i ], [ 0, %if.then.i.i6.i.i ], [ 1, %if.done2.i.i.i.i8.i.i ], [ 1, %if.done4.i.i.i.i9.i.i ], [ 1, %if.done8.i.i.i.i15.i.i ], [ %spec.select.i.i.i.i, %if.done13.i.i.i.i18.i.i ], [ 1, %strings.is_space.exit.i.i.i21.i.i ]
  %i.0.i.i.i.i = add i64 %.pn.i.i.i.i, %common.ret.op.i2.i.i.i.i
  store ptr %.val.i.i, ptr %17, align 8, !noalias !1085
  store i64 %i.0.i.i.i.i, ptr %292, align 8, !noalias !1085
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %22, ptr nonnull align 8 %17, i64 16, i1 false)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %17), !noalias !1072
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %20)
  %.unpack26.i = load ptr, ptr %22, align 8
  %.unpack28.i = load i64, ptr %.elt27.i, align 8
  switch i64 %.unpack28.i, label %switch.done.i [
    i64 0, label %if.done60
    i64 1, label %if.done.i66.i
  ]

if.done.i66.i:                                    ; preds = %strings.trim_space.exit.i
  %.not.i = icmp eq ptr %.unpack26.i, @"csbs$127"
  br i1 %.not.i, label %fmt.handle_tag-1276.exit, label %for.body.i.i68.i

for.body.i.i68.i:                                 ; preds = %if.done.i66.i
  %537 = load i8, ptr %.unpack26.i, align 1
  %.not.i.i70.i = icmp eq i8 %537, 45
  br i1 %.not.i.i70.i, label %fmt.handle_tag-1276.exit, label %if.done.i.i.i

switch.done.i:                                    ; preds = %strings.trim_space.exit.i
  %538 = icmp slt i64 %.unpack28.i, 1
  br i1 %538, label %cmp.or.i, label %switch.done.i.if.done.i.i.i_crit_edge

switch.done.i.if.done.i.i.i_crit_edge:            ; preds = %switch.done.i
  %.pre415 = load i8, ptr %.unpack26.i, align 1, !noalias !1091
  br label %if.done.i.i.i

if.done.i.i.i:                                    ; preds = %for.body.i.i68.i, %switch.done.i.if.done.i.i.i_crit_edge
  %539 = phi i8 [ %.pre415, %switch.done.i.if.done.i.i.i_crit_edge ], [ %537, %for.body.i.i68.i ]
  %540 = zext i8 %539 to i64
  %541 = getelementptr [256 x i8], ptr @runtime.string_decode_rune-.accept_sizes-22666, i64 0, i64 %540
  %542 = load i8, ptr %541, align 1, !noalias !1091
  %543 = add nsw i64 %540, -245
  %544 = icmp ult i64 %543, -51
  br i1 %544, label %if.then1.i.i.i, label %if.done2.i.i.i

if.then1.i.i.i:                                   ; preds = %if.done.i.i.i
  %545 = and i8 %542, 1
  %546 = zext i8 %545 to i32
  %547 = sub nsw i32 0, %546
  %548 = zext i8 %539 to i32
  %549 = add nuw nsw i32 %546, 255
  %550 = and i32 %549, %548
  %551 = and i32 %547, 65533
  %552 = or i32 %550, %551
  br label %utf8.decode_rune_in_string.exit.i

if.done2.i.i.i:                                   ; preds = %if.done.i.i.i
  %553 = and i8 %542, 7
  %554 = zext i8 %553 to i64
  %555 = icmp ult i64 %.unpack28.i, %554
  br i1 %555, label %utf8.decode_rune_in_string.exit.i, label %if.done4.i.i.i

if.done4.i.i.i:                                   ; preds = %if.done2.i.i.i
  %556 = lshr i8 %542, 4
  %557 = zext i8 %556 to i64
  %.elt20.i.i.i = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %557, i32 1
  %.unpack21.i.i.i = load i8, ptr %.elt20.i.i.i, align 1, !noalias !1091
  %558 = getelementptr [5 x %utf8.Accept_Range], ptr @utf8.accept_ranges, i64 0, i64 %557
  %.unpack.i.i.i = load i8, ptr %558, align 2, !noalias !1091
  %559 = getelementptr i8, ptr %.unpack26.i, i64 1
  %560 = load i8, ptr %559, align 1, !noalias !1091
  %561 = icmp ult i8 %560, %.unpack.i.i.i
  %562 = icmp ult i8 %.unpack21.i.i.i, %560
  %or.cond.i.i.i = select i1 %561, i1 true, i1 %562
  br i1 %or.cond.i.i.i, label %utf8.decode_rune_in_string.exit.i, label %if.done6.i.i.i

if.done6.i.i.i:                                   ; preds = %if.done4.i.i.i
  %563 = add nsw i64 %540, -194
  %564 = icmp ult i64 %563, 30
  br i1 %564, label %if.then7.i.i.i, label %if.done8.i.i.i

if.then7.i.i.i:                                   ; preds = %if.done6.i.i.i
  %565 = and i8 %539, 31
  %566 = zext i8 %565 to i32
  %567 = shl nuw nsw i32 %566, 6
  %568 = and i8 %560, 63
  %569 = zext i8 %568 to i32
  %570 = or i32 %567, %569
  br label %utf8.decode_rune_in_string.exit.i

if.done8.i.i.i:                                   ; preds = %if.done6.i.i.i
  %571 = getelementptr i8, ptr %.unpack26.i, i64 2
  %572 = load i8, ptr %571, align 1, !noalias !1091
  %or.cond26.i.i.i = icmp sgt i8 %572, -65
  br i1 %or.cond26.i.i.i, label %utf8.decode_rune_in_string.exit.i, label %if.done11.i.i.i

if.done11.i.i.i:                                  ; preds = %if.done8.i.i.i
  %573 = and i64 %540, 240
  %574 = icmp eq i64 %573, 224
  br i1 %574, label %if.then12.i.i.i, label %if.done13.i.i.i

if.then12.i.i.i:                                  ; preds = %if.done11.i.i.i
  %575 = and i8 %539, 15
  %576 = zext i8 %575 to i32
  %577 = shl nuw nsw i32 %576, 12
  %578 = and i8 %560, 63
  %579 = zext i8 %578 to i32
  %580 = shl nuw nsw i32 %579, 6
  %581 = or i32 %580, %577
  %582 = and i8 %572, 63
  %583 = zext i8 %582 to i32
  %584 = or i32 %581, %583
  br label %utf8.decode_rune_in_string.exit.i

if.done13.i.i.i:                                  ; preds = %if.done11.i.i.i
  %585 = getelementptr i8, ptr %.unpack26.i, i64 3
  %586 = load i8, ptr %585, align 1, !noalias !1091
  %or.cond27.i.i.i = icmp sgt i8 %586, -65
  br i1 %or.cond27.i.i.i, label %utf8.decode_rune_in_string.exit.i, label %if.done16.i.i.i

if.done16.i.i.i:                                  ; preds = %if.done13.i.i.i
  %587 = and i8 %539, 7
  %588 = zext i8 %587 to i32
  %589 = shl nuw nsw i32 %588, 18
  %590 = and i8 %560, 63
  %591 = zext i8 %590 to i32
  %592 = shl nuw nsw i32 %591, 12
  %593 = or i32 %592, %589
  %594 = and i8 %572, 63
  %595 = zext i8 %594 to i32
  %596 = shl nuw nsw i32 %595, 6
  %597 = or i32 %596, %593
  %598 = and i8 %586, 63
  %599 = zext i8 %598 to i32
  %600 = or i32 %597, %599
  br label %utf8.decode_rune_in_string.exit.i

utf8.decode_rune_in_string.exit.i:                ; preds = %if.done16.i.i.i, %if.done13.i.i.i, %if.then12.i.i.i, %if.done8.i.i.i, %if.then7.i.i.i, %if.done4.i.i.i, %if.done2.i.i.i, %if.then1.i.i.i
  %.sink.i.i.i = phi i32 [ %600, %if.done16.i.i.i ], [ %584, %if.then12.i.i.i ], [ %570, %if.then7.i.i.i ], [ %552, %if.then1.i.i.i ], [ 65533, %if.done2.i.i.i ], [ 65533, %if.done4.i.i.i ], [ 65533, %if.done8.i.i.i ], [ 65533, %if.done13.i.i.i ]
  %common.ret.op.i.i.i = phi i64 [ 4, %if.done16.i.i.i ], [ 3, %if.then12.i.i.i ], [ 2, %if.then7.i.i.i ], [ 1, %if.then1.i.i.i ], [ 1, %if.done2.i.i.i ], [ 1, %if.done4.i.i.i ], [ 1, %if.done8.i.i.i ], [ 1, %if.done13.i.i.i ]
  %601 = getelementptr i8, ptr %.unpack26.i, i64 %common.ret.op.i.i.i
  %602 = sub nsw i64 %.unpack28.i, %common.ret.op.i.i.i
  %603 = icmp eq i64 %.unpack28.i, %common.ret.op.i.i.i
  br i1 %603, label %if.then3.i, label %cmp.or.i

cmp.or.i:                                         ; preds = %utf8.decode_rune_in_string.exit.i, %switch.done.i
  %604 = phi i64 [ %602, %utf8.decode_rune_in_string.exit.i ], [ %.unpack28.i, %switch.done.i ]
  %605 = phi ptr [ %601, %utf8.decode_rune_in_string.exit.i ], [ %.unpack26.i, %switch.done.i ]
  %.sink.i.i32.i = phi i32 [ %.sink.i.i.i, %utf8.decode_rune_in_string.exit.i ], [ 65533, %switch.done.i ]
  %606 = load i8, ptr %605, align 1
  %607 = icmp eq i8 %606, 44
  br i1 %607, label %if.then3.i, label %if.done60

if.then3.i:                                       ; preds = %cmp.or.i, %utf8.decode_rune_in_string.exit.i
  %608 = phi i64 [ %604, %cmp.or.i ], [ %602, %utf8.decode_rune_in_string.exit.i ]
  %609 = phi ptr [ %605, %cmp.or.i ], [ %601, %utf8.decode_rune_in_string.exit.i ]
  %.sink.i.i33.i = phi i32 [ %.sink.i.i32.i, %cmp.or.i ], [ %.sink.i.i.i, %utf8.decode_rune_in_string.exit.i ]
  %610 = icmp sgt i64 %608, 0
  br i1 %610, label %cmp.and.i, label %if.done60

cmp.and.i:                                        ; preds = %if.then3.i
  %611 = load i8, ptr %609, align 1
  %612 = icmp eq i8 %611, 44
  br i1 %612, label %if.then4.i, label %if.done60

if.then4.i:                                       ; preds = %cmp.and.i
  %613 = getelementptr i8, ptr %609, i64 1
  %614 = add nsw i64 %608, -1
  %.not.i74.i = icmp eq i64 %614, 1
  br i1 %.not.i74.i, label %if.done.i76.i, label %if.else.i

if.done.i76.i:                                    ; preds = %if.then4.i
  %.not13.i = icmp eq ptr %613, @"csbs$128"
  br i1 %.not13.i, label %if.done60, label %for.body.i.i78.preheader.i

for.body.i.i78.preheader.i:                       ; preds = %if.done.i76.i
  %615 = load i8, ptr %613, align 1
  %.not.i.i80.i = icmp eq i8 %615, 48
  br i1 %.not.i.i80.i, label %if.done60, label %if.else.i

if.else.i:                                        ; preds = %for.body.i.i78.preheader.i, %if.then4.i
  switch i32 %.sink.i.i33.i, label %if.done60 [
    i32 115, label %switch.case.body7.i
    i32 113, label %switch.case.body7.i
    i32 118, label %switch.case.body8.i
  ]

switch.case.body7.i:                              ; preds = %if.else.i, %if.else.i
  call fastcc void @fmt.handle_tag-1276.handle_optional_len-0(ptr %302, ptr %3, ptr %613, i64 %614, ptr nonnull %optional_len)
  br label %if.done60

switch.case.body8.i:                              ; preds = %if.else.i
  %616 = load ptr, ptr %3, align 8
  %617 = getelementptr ptr, ptr %616, i64 %304
  %618 = load ptr, ptr %617, align 8
  %619 = getelementptr inbounds %runtime.Type_Info, ptr %618, i64 0, i32 4
  %620 = load i64, ptr %619, align 8
  %621 = call fastcc i64 @reflect.type_kind(i64 %620)
  switch i64 %621, label %if.done60 [
    i64 7, label %switch.case.body9.i
    i64 12, label %switch.case.body9.i
    i64 14, label %switch.case.body9.i
    i64 17, label %switch.case.body9.i
    i64 16, label %switch.case.body9.i
  ]

switch.case.body9.i:                              ; preds = %switch.case.body8.i, %switch.case.body8.i, %switch.case.body8.i, %switch.case.body8.i, %switch.case.body8.i
  call fastcc void @fmt.handle_tag-1276.handle_optional_len-0(ptr %302, ptr nonnull %3, ptr %613, i64 %614, ptr nonnull %optional_len)
  br label %if.done60

fmt.handle_tag-1276.exit:                         ; preds = %if.done.i66.i, %for.body.i.i68.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  %622 = add i64 %304, 1
  %623 = icmp slt i64 %622, %287
  br i1 %623, label %for.index.body, label %defer81

if.done60:                                        ; preds = %strings.trim_space.exit.i, %if.done.i76.i, %for.body.i.i78.preheader.i, %cmp.or.i, %switch.case.body8.i, %switch.case.body9.i, %switch.case.body7.i, %if.else.i, %cmp.and.i, %if.then3.i, %reflect.struct_tag_lookup.exit.thread.i
  %.sink.i.i33.i364 = phi i32 [ 118, %cmp.or.i ], [ 118, %switch.case.body8.i ], [ 118, %switch.case.body9.i ], [ %.sink.i.i33.i, %switch.case.body7.i ], [ %.sink.i.i33.i, %if.else.i ], [ %.sink.i.i33.i, %cmp.and.i ], [ %.sink.i.i33.i, %if.then3.i ], [ 118, %reflect.struct_tag_lookup.exit.thread.i ], [ %.sink.i.i33.i, %for.body.i.i78.preheader.i ], [ %.sink.i.i33.i, %if.done.i76.i ], [ 118, %strings.trim_space.exit.i ]
  %624 = phi i8 [ 0, %cmp.or.i ], [ 0, %switch.case.body8.i ], [ 0, %switch.case.body9.i ], [ 0, %switch.case.body7.i ], [ 0, %if.else.i ], [ 0, %cmp.and.i ], [ 0, %if.then3.i ], [ 0, %reflect.struct_tag_lookup.exit.thread.i ], [ 1, %for.body.i.i78.preheader.i ], [ 1, %if.done.i76.i ], [ 0, %strings.trim_space.exit.i ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %21)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  %625 = add i64 %field_count55.0.ph365, 1
  %626 = load i64, ptr %optional_len, align 8
  %627 = icmp sgt i64 %626, -1
  br i1 %627, label %if.then61, label %if.done62

if.then61:                                        ; preds = %if.done60
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %51, i8 0, i64 16, i1 false)
  store i64 %626, ptr %51, align 8
  store i64 1, ptr %294, align 8
  store i64 %626, ptr %293, align 8
  store i64 1, ptr %.repack122, align 8
  br label %if.done62

if.done62:                                        ; preds = %if.then61, %if.done60
  store i8 %624, ptr %295, align 1
  %628 = icmp ult i64 %field_count55.0.ph365, 9223372036854775807
  %or.cond166 = select i1 %.not105, i1 %628, i1 false
  br i1 %or.cond166, label %if.then64, label %if.done65

if.then64:                                        ; preds = %if.done62
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16), !noalias !1096
  %629 = load ptr, ptr %55, align 8, !noalias !1100
  %.not.i.i254 = icmp eq ptr %629, null
  br i1 %.not.i.i254, label %if.done65.thread, label %if.then.i.i255

if.then.i.i255:                                   ; preds = %if.then64
  %630 = load ptr, ptr %297, align 8, !noalias !1100
  store i64 0, ptr %16, align 8, !noalias !1100
  %631 = call i32 %629(ptr %630, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %16, ptr nonnull %__.context_ptr), !noalias !1104
  br label %if.done65.thread

if.done65.thread:                                 ; preds = %if.then.i.i255, %if.then64
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16), !noalias !1096
  br label %if.done67

if.done65:                                        ; preds = %if.done62
  br i1 %.not105, label %if.done67, label %if.then66

if.then66:                                        ; preds = %if.done65
  %632 = load i64, ptr %103, align 8, !noalias !1105
  %633 = icmp sgt i64 %632, 0
  br i1 %633, label %for.interval.body.lr.ph.i260, label %if.done67

for.interval.body.lr.ph.i260:                     ; preds = %if.then66
  %634 = load ptr, ptr %55, align 8, !noalias !287
  %635 = icmp eq ptr %634, null
  br i1 %635, label %if.done67.thread, label %for.interval.body.i261

if.done67.thread:                                 ; preds = %for.interval.body.lr.ph.i260
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13), !noalias !1108
  br label %io.write_string.exit275.thread

for.interval.body.i261:                           ; preds = %for.interval.body.lr.ph.i260, %io.write_byte.exit.i266
  %636 = phi i64 [ %643, %io.write_byte.exit.i266 ], [ %632, %for.interval.body.lr.ph.i260 ]
  %.012.i262 = phi i64 [ %644, %io.write_byte.exit.i266 ], [ 0, %for.interval.body.lr.ph.i260 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i259), !noalias !1105
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %15), !noalias !1105
  store i8 9, ptr %buf.i.i259, align 1, !noalias !1112
  store ptr %buf.i.i259, ptr %15, align 8, !noalias !1112
  store i64 1, ptr %296, align 8, !noalias !1112
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14), !noalias !1112
  %637 = load ptr, ptr %55, align 8, !noalias !1115
  %.not.i.i.i263 = icmp eq ptr %637, null
  br i1 %.not.i.i.i263, label %io.write_byte.exit.i266, label %if.then.i.i.i264

if.then.i.i.i264:                                 ; preds = %for.interval.body.i261
  %638 = load ptr, ptr %297, align 8, !noalias !1115
  store i64 0, ptr %14, align 8, !noalias !1115
  %639 = call i32 %637(ptr %638, i64 4, ptr nonnull %15, i64 0, i64 0, ptr nonnull %14, ptr nonnull %__.context_ptr), !noalias !1119
  %640 = load i64, ptr %14, align 8, !noalias !1115
  %641 = load i64, ptr %83, align 8, !noalias !1115
  %642 = add i64 %641, %640
  store i64 %642, ptr %83, align 8, !noalias !1115
  %.pre.i265 = load i64, ptr %103, align 8, !noalias !1105
  br label %io.write_byte.exit.i266

io.write_byte.exit.i266:                          ; preds = %if.then.i.i.i264, %for.interval.body.i261
  %643 = phi i64 [ %636, %for.interval.body.i261 ], [ %.pre.i265, %if.then.i.i.i264 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !1112
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i259), !noalias !1105
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15), !noalias !1105
  %644 = add nuw nsw i64 %.012.i262, 1
  %645 = icmp slt i64 %644, %643
  br i1 %645, label %for.interval.body.i261, label %if.done67, !llvm.loop !901

if.done67:                                        ; preds = %io.write_byte.exit.i266, %if.then66, %if.done65.thread, %if.done65
  %.pr426 = load ptr, ptr %55, align 8, !noalias !287
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13), !noalias !1108
  %.not.i.i271 = icmp eq ptr %.pr426, null
  br i1 %.not.i.i271, label %io.write_string.exit275.thread, label %io.write_string.exit275

io.write_string.exit275.thread:                   ; preds = %if.done67, %if.done67.thread
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !1108
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !1120
  br label %io.write_string.exit280

io.write_string.exit275:                          ; preds = %if.done67
  %646 = load ptr, ptr %297, align 8, !noalias !1124
  store i64 0, ptr %13, align 8, !noalias !1124
  %647 = call i32 %.pr426(ptr %646, i64 4, ptr nonnull %name56, i64 0, i64 0, ptr nonnull %13, ptr nonnull %__.context_ptr), !noalias !1128
  %648 = load i64, ptr %13, align 8, !noalias !1124
  %649 = load i64, ptr %83, align 8, !noalias !1124
  %650 = add i64 %649, %648
  store i64 %650, ptr %83, align 8, !noalias !1124
  %.pre416 = load ptr, ptr %55, align 8, !noalias !1129
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !1108
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !1120
  %.not.i.i276 = icmp eq ptr %.pre416, null
  br i1 %.not.i.i276, label %io.write_string.exit280, label %if.then.i.i277

if.then.i.i277:                                   ; preds = %io.write_string.exit275
  %651 = load ptr, ptr %297, align 8, !noalias !1129
  store i64 0, ptr %12, align 8, !noalias !1129
  %652 = call i32 %.pre416(ptr %651, i64 4, ptr nonnull @"ggv$e1", i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !1133
  %653 = load i64, ptr %12, align 8, !noalias !1129
  %654 = load i64, ptr %83, align 8, !noalias !1129
  %655 = add i64 %654, %653
  store i64 %655, ptr %83, align 8, !noalias !1129
  br label %io.write_string.exit280

io.write_string.exit280:                          ; preds = %io.write_string.exit275.thread, %io.write_string.exit275, %if.then.i.i277
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !1120
  %656 = load ptr, ptr %3, align 8
  %657 = getelementptr ptr, ptr %656, i64 %304
  %658 = load ptr, ptr %657, align 8
  %659 = icmp eq ptr %658, null
  br i1 %659, label %if.else71, label %for.body.preheader.i.i281

for.body.preheader.i.i281:                        ; preds = %io.write_string.exit280
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %11)
  %660 = getelementptr inbounds %runtime.Type_Info, ptr %658, i64 0, i32 5, i32 1
  %661 = load i64, ptr %660, align 8
  %cond1.i.i282 = icmp eq i64 %661, 1
  br i1 %cond1.i.i282, label %typeswitch.body.i.i286, label %reflect.is_any.exit289

typeswitch.body.i.i286:                           ; preds = %for.body.preheader.i.i281, %typeswitch.body.i.i286
  %base.02.i.i287 = phi ptr [ %663, %typeswitch.body.i.i286 ], [ %658, %for.body.preheader.i.i281 ]
  %662 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i287, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %11, ptr noundef nonnull align 1 dereferenceable(80) %662, i64 80, i1 false)
  %663 = load ptr, ptr %298, align 8
  %664 = getelementptr inbounds %runtime.Type_Info, ptr %663, i64 0, i32 5, i32 1
  %665 = load i64, ptr %664, align 8
  %cond.i.i288 = icmp eq i64 %665, 1
  br i1 %cond.i.i288, label %typeswitch.body.i.i286, label %reflect.is_any.exit289

reflect.is_any.exit289:                           ; preds = %typeswitch.body.i.i286, %for.body.preheader.i.i281
  %666 = phi i64 [ %661, %for.body.preheader.i.i281 ], [ %665, %typeswitch.body.i.i286 ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %11)
  %.not325 = icmp eq i64 %666, 9
  br i1 %.not325, label %if.then70, label %if.else71

if.then70:                                        ; preds = %reflect.is_any.exit289
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !1134
  %667 = load ptr, ptr %55, align 8, !noalias !287
  %.not.i.i290 = icmp eq ptr %667, null
  br i1 %.not.i.i290, label %io.write_string.exit294, label %if.then.i.i291

if.then.i.i291:                                   ; preds = %if.then70
  %668 = load ptr, ptr %297, align 8, !noalias !1138
  store i64 0, ptr %10, align 8, !noalias !1138
  %669 = call i32 %667(ptr %668, i64 4, ptr nonnull @"ggv$c5", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !1142
  %670 = load i64, ptr %10, align 8, !noalias !1138
  %671 = load i64, ptr %83, align 8, !noalias !1138
  %672 = add i64 %671, %670
  store i64 %672, ptr %83, align 8, !noalias !1138
  br label %io.write_string.exit294

io.write_string.exit294:                          ; preds = %if.then70, %if.then.i.i291
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !1134
  br label %if.done73

if.else71:                                        ; preds = %io.write_string.exit280, %reflect.is_any.exit289
  %673 = load ptr, ptr %1, align 8
  %674 = ptrtoint ptr %673 to i64
  %675 = load ptr, ptr %299, align 8
  %676 = getelementptr i64, ptr %675, i64 %304
  %677 = load i64, ptr %676, align 8
  %678 = add i64 %677, %674
  %679 = inttoptr i64 %678 to ptr
  store ptr %679, ptr %52, align 8
  %680 = getelementptr inbounds %runtime.Type_Info, ptr %658, i64 0, i32 4
  %681 = load i64, ptr %680, align 8
  store i64 %681, ptr %.repack116, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %52, i32 %.sink.i.i33.i364, ptr %__.context_ptr)
  br label %if.done73

if.done73:                                        ; preds = %if.else71, %io.write_string.exit294
  br i1 %.not105, label %defer76, label %if.then74

if.then74:                                        ; preds = %if.done73
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !1143
  %682 = load ptr, ptr %55, align 8, !noalias !287
  %.not.i.i295 = icmp eq ptr %682, null
  br i1 %.not.i.i295, label %io.write_string.exit299, label %if.then.i.i296

if.then.i.i296:                                   ; preds = %if.then74
  %683 = load ptr, ptr %297, align 8, !noalias !1147
  store i64 0, ptr %9, align 8, !noalias !1147
  %684 = call i32 %682(ptr %683, i64 4, ptr nonnull @"ggv$df", i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !1151
  %685 = load i64, ptr %9, align 8, !noalias !1147
  %686 = load i64, ptr %83, align 8, !noalias !1147
  %687 = add i64 %686, %685
  store i64 %687, ptr %83, align 8, !noalias !1147
  br label %io.write_string.exit299

io.write_string.exit299:                          ; preds = %if.then74, %if.then.i.i296
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !1143
  br label %defer76

defer76:                                          ; preds = %if.done73, %io.write_string.exit299
  store i8 0, ptr %295, align 1
  %688 = load i64, ptr %optional_len, align 8
  %689 = icmp sgt i64 %688, -1
  br i1 %689, label %if.then78, label %if.done79

if.then78:                                        ; preds = %defer76
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %293, i8 0, i64 16, i1 false)
  br label %if.done79

if.done79:                                        ; preds = %if.then78, %defer76
  %690 = add i64 %304, 1
  %691 = icmp slt i64 %690, %287
  br i1 %691, label %for.index.body.lr.ph, label %defer81

defer81:                                          ; preds = %if.done79, %fmt.handle_tag-1276.exit, %if.else54, %defer53
  %692 = icmp slt i64 %104, 1
  %or.cond367.not = select i1 %.not105, i1 true, i1 %692
  %.pre418 = load ptr, ptr %55, align 8, !noalias !287
  br i1 %or.cond367.not, label %if.done87, label %for.interval.body84.lr.ph

for.interval.body84.lr.ph:                        ; preds = %defer81
  %693 = getelementptr inbounds { ptr, i64 }, ptr %8, i64 0, i32 1
  %694 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %695 = icmp eq ptr %.pre418, null
  br i1 %695, label %if.done87.thread, label %for.interval.body84

if.done87.thread:                                 ; preds = %for.interval.body84.lr.ph
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i305)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !1152
  br label %io.write_byte.exit309

for.interval.body84:                              ; preds = %for.interval.body84.lr.ph, %io.write_byte.exit304
  %.0100366 = phi i64 [ %702, %io.write_byte.exit304 ], [ 0, %for.interval.body84.lr.ph ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i300)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8)
  store i8 9, ptr %buf.i300, align 1, !noalias !1155
  store ptr %buf.i300, ptr %8, align 8, !noalias !1155
  store i64 1, ptr %693, align 8, !noalias !1155
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !1155
  %696 = load ptr, ptr %55, align 8, !noalias !287
  %.not.i.i301 = icmp eq ptr %696, null
  br i1 %.not.i.i301, label %io.write_byte.exit304, label %if.then.i.i302

if.then.i.i302:                                   ; preds = %for.interval.body84
  %697 = load ptr, ptr %694, align 8, !noalias !1158
  store i64 0, ptr %7, align 8, !noalias !1158
  %698 = call i32 %696(ptr %697, i64 4, ptr nonnull %8, i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !1162
  %699 = load i64, ptr %7, align 8, !noalias !1158
  %700 = load i64, ptr %83, align 8, !noalias !1158
  %701 = add i64 %700, %699
  store i64 %701, ptr %83, align 8, !noalias !1158
  br label %io.write_byte.exit304

io.write_byte.exit304:                            ; preds = %for.interval.body84, %if.then.i.i302
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !1155
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i300)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8)
  %702 = add nuw nsw i64 %.0100366, 1
  %exitcond404.not = icmp eq i64 %702, %104
  br i1 %exitcond404.not, label %if.done87.loopexit370, label %for.interval.body84, !llvm.loop !1163

if.done87.loopexit370:                            ; preds = %io.write_byte.exit304
  %.pre417 = load ptr, ptr %55, align 8, !noalias !1164
  br label %if.done87

if.done87:                                        ; preds = %if.done87.loopexit370, %defer81
  %703 = phi ptr [ %.pre417, %if.done87.loopexit370 ], [ %.pre418, %defer81 ]
  %.94 = select i1 %.not107, i8 125, i8 93
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i305)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  store i8 %.94, ptr %buf.i305, align 1, !noalias !1152
  store ptr %buf.i305, ptr %6, align 8, !noalias !1152
  %704 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %704, align 8, !noalias !1152
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !1152
  %.not.i.i306 = icmp eq ptr %703, null
  br i1 %.not.i.i306, label %io.write_byte.exit309, label %if.then.i.i307

if.then.i.i307:                                   ; preds = %if.done87
  %705 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %706 = load ptr, ptr %705, align 8, !noalias !1164
  store i64 0, ptr %5, align 8, !noalias !1164
  %707 = call i32 %703(ptr %706, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !1168
  %708 = load i64, ptr %5, align 8, !noalias !1164
  %709 = load i64, ptr %83, align 8, !noalias !1164
  %710 = add i64 %709, %708
  store i64 %710, ptr %83, align 8, !noalias !1164
  br label %io.write_byte.exit309

io.write_byte.exit309:                            ; preds = %if.done87.thread, %if.done87, %if.then.i.i307
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !1152
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i305)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  %711 = load i64, ptr %103, align 8
  %712 = add i64 %711, -1
  store i64 %712, ptr %103, align 8
  store i8 %102, ptr %101, align 1
  %713 = load i64, ptr %98, align 8
  %714 = add i64 %713, -1
  store i64 %714, ptr %98, align 8
  br label %common.ret
}

; Function Attrs: nofree norecurse nosync nounwind memory(read, inaccessiblemem: none)
define internal fastcc i64 @fmt.search_nul_termination-1301(ptr %0, i64 %1, i64 %2) unnamed_addr #2 {
decls:
  %.fr = freeze i64 %2
  %.fr111 = freeze i64 %1
  %3 = ptrtoint ptr %0 to i64
  %4 = icmp slt i64 %.fr, 0
  %or.cond14.not = icmp eq i64 %.fr, 0
  %5 = icmp slt i64 %.fr111, 1
  %or.cond = or i1 %or.cond14.not, %5
  br i1 %or.cond, label %for.done, label %for.body.lr.ph.split

for.body.lr.ph.split:                             ; preds = %decls
  switch i64 %.fr111, label %for.body.lr.ph.split.split [
    i64 1, label %for.body.lr.ph.split.split.us
    i64 2, label %for.body.lr.ph.split.split.us28
    i64 4, label %for.body.lr.ph.split.split.us43
    i64 8, label %for.body.lr.ph.split.split.us58
  ]

for.body.lr.ph.split.split.us:                    ; preds = %for.body.lr.ph.split
  br i1 %4, label %for.body.lr.ph.split.split.us.split.us, label %for.body.us21

for.body.lr.ph.split.split.us.split.us:           ; preds = %for.body.lr.ph.split.split.us
  %6 = icmp eq ptr %0, null
  br i1 %6, label %for.done, label %switch.done.i.us.us

switch.done.i.us.us:                              ; preds = %for.body.lr.ph.split.split.us.split.us, %if.done.us.us
  %7 = phi ptr [ %12, %if.done.us.us ], [ %0, %for.body.lr.ph.split.split.us.split.us ]
  %n.015.us23.us91 = phi i64 [ %10, %if.done.us.us ], [ 0, %for.body.lr.ph.split.split.us.split.us ]
  %p.016.us22.us90 = phi i64 [ %11, %if.done.us.us ], [ %3, %for.body.lr.ph.split.split.us.split.us ]
  %8 = load i8, ptr %7, align 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %for.done, label %if.done.us.us

if.done.us.us:                                    ; preds = %switch.done.i.us.us
  %10 = add i64 %n.015.us23.us91, 1
  %11 = add i64 %p.016.us22.us90, 1
  %12 = inttoptr i64 %11 to ptr
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %for.done, label %switch.done.i.us.us

for.body.us21:                                    ; preds = %for.body.lr.ph.split.split.us, %if.done.us
  %p.016.us22 = phi i64 [ %19, %if.done.us ], [ %3, %for.body.lr.ph.split.split.us ]
  %n.015.us23 = phi i64 [ %18, %if.done.us ], [ 0, %for.body.lr.ph.split.split.us ]
  %14 = icmp eq i64 %p.016.us22, 0
  br i1 %14, label %for.done, label %switch.done.i.us

switch.done.i.us:                                 ; preds = %for.body.us21
  %15 = inttoptr i64 %p.016.us22 to ptr
  %16 = load i8, ptr %15, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %for.done, label %if.done.us

if.done.us:                                       ; preds = %switch.done.i.us
  %18 = add nuw nsw i64 %n.015.us23, 1
  %19 = add i64 %p.016.us22, 1
  %exitcond140.not = icmp eq i64 %18, %.fr
  br i1 %exitcond140.not, label %for.done, label %for.body.us21

for.body.lr.ph.split.split.us28:                  ; preds = %for.body.lr.ph.split
  br i1 %4, label %for.body.lr.ph.split.split.us28.split.us, label %for.body.us29

for.body.lr.ph.split.split.us28.split.us:         ; preds = %for.body.lr.ph.split.split.us28
  %20 = icmp eq ptr %0, null
  br i1 %20, label %for.done, label %switch.done.i.us32.us

switch.done.i.us32.us:                            ; preds = %for.body.lr.ph.split.split.us28.split.us, %if.done.us35.us
  %21 = phi ptr [ %26, %if.done.us35.us ], [ %0, %for.body.lr.ph.split.split.us28.split.us ]
  %n.015.us31.us97 = phi i64 [ %24, %if.done.us35.us ], [ 0, %for.body.lr.ph.split.split.us28.split.us ]
  %p.016.us30.us96 = phi i64 [ %25, %if.done.us35.us ], [ %3, %for.body.lr.ph.split.split.us28.split.us ]
  %22 = load i16, ptr %21, align 1
  %23 = icmp eq i16 %22, 0
  br i1 %23, label %for.done, label %if.done.us35.us

if.done.us35.us:                                  ; preds = %switch.done.i.us32.us
  %24 = add i64 %n.015.us31.us97, 1
  %25 = add i64 %p.016.us30.us96, 2
  %26 = inttoptr i64 %25 to ptr
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %for.done, label %switch.done.i.us32.us

for.body.us29:                                    ; preds = %for.body.lr.ph.split.split.us28, %if.done.us35
  %p.016.us30 = phi i64 [ %33, %if.done.us35 ], [ %3, %for.body.lr.ph.split.split.us28 ]
  %n.015.us31 = phi i64 [ %32, %if.done.us35 ], [ 0, %for.body.lr.ph.split.split.us28 ]
  %28 = icmp eq i64 %p.016.us30, 0
  br i1 %28, label %for.done, label %switch.done.i.us32

switch.done.i.us32:                               ; preds = %for.body.us29
  %29 = inttoptr i64 %p.016.us30 to ptr
  %30 = load i16, ptr %29, align 1
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %for.done, label %if.done.us35

if.done.us35:                                     ; preds = %switch.done.i.us32
  %32 = add nuw nsw i64 %n.015.us31, 1
  %33 = add i64 %p.016.us30, 2
  %exitcond139.not = icmp eq i64 %32, %.fr
  br i1 %exitcond139.not, label %for.done, label %for.body.us29

for.body.lr.ph.split.split.us43:                  ; preds = %for.body.lr.ph.split
  br i1 %4, label %for.body.lr.ph.split.split.us43.split.us, label %for.body.us44

for.body.lr.ph.split.split.us43.split.us:         ; preds = %for.body.lr.ph.split.split.us43
  %34 = icmp eq ptr %0, null
  br i1 %34, label %for.done, label %switch.done.i.us47.us

switch.done.i.us47.us:                            ; preds = %for.body.lr.ph.split.split.us43.split.us, %if.done.us50.us
  %35 = phi ptr [ %40, %if.done.us50.us ], [ %0, %for.body.lr.ph.split.split.us43.split.us ]
  %n.015.us46.us103 = phi i64 [ %38, %if.done.us50.us ], [ 0, %for.body.lr.ph.split.split.us43.split.us ]
  %p.016.us45.us102 = phi i64 [ %39, %if.done.us50.us ], [ %3, %for.body.lr.ph.split.split.us43.split.us ]
  %36 = load i32, ptr %35, align 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %for.done, label %if.done.us50.us

if.done.us50.us:                                  ; preds = %switch.done.i.us47.us
  %38 = add i64 %n.015.us46.us103, 1
  %39 = add i64 %p.016.us45.us102, 4
  %40 = inttoptr i64 %39 to ptr
  %41 = icmp eq i64 %39, 0
  br i1 %41, label %for.done, label %switch.done.i.us47.us

for.body.us44:                                    ; preds = %for.body.lr.ph.split.split.us43, %if.done.us50
  %p.016.us45 = phi i64 [ %47, %if.done.us50 ], [ %3, %for.body.lr.ph.split.split.us43 ]
  %n.015.us46 = phi i64 [ %46, %if.done.us50 ], [ 0, %for.body.lr.ph.split.split.us43 ]
  %42 = icmp eq i64 %p.016.us45, 0
  br i1 %42, label %for.done, label %switch.done.i.us47

switch.done.i.us47:                               ; preds = %for.body.us44
  %43 = inttoptr i64 %p.016.us45 to ptr
  %44 = load i32, ptr %43, align 1
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %for.done, label %if.done.us50

if.done.us50:                                     ; preds = %switch.done.i.us47
  %46 = add nuw nsw i64 %n.015.us46, 1
  %47 = add i64 %p.016.us45, 4
  %exitcond138.not = icmp eq i64 %46, %.fr
  br i1 %exitcond138.not, label %for.done, label %for.body.us44

for.body.lr.ph.split.split.us58:                  ; preds = %for.body.lr.ph.split
  br i1 %4, label %for.body.lr.ph.split.split.us58.split.us, label %for.body.us59

for.body.lr.ph.split.split.us58.split.us:         ; preds = %for.body.lr.ph.split.split.us58
  %48 = icmp eq ptr %0, null
  br i1 %48, label %for.done, label %switch.done.i.us62.us

switch.done.i.us62.us:                            ; preds = %for.body.lr.ph.split.split.us58.split.us, %if.done.us65.us
  %49 = phi ptr [ %54, %if.done.us65.us ], [ %0, %for.body.lr.ph.split.split.us58.split.us ]
  %n.015.us61.us109 = phi i64 [ %52, %if.done.us65.us ], [ 0, %for.body.lr.ph.split.split.us58.split.us ]
  %p.016.us60.us108 = phi i64 [ %53, %if.done.us65.us ], [ %3, %for.body.lr.ph.split.split.us58.split.us ]
  %50 = load i64, ptr %49, align 1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %for.done, label %if.done.us65.us

if.done.us65.us:                                  ; preds = %switch.done.i.us62.us
  %52 = add i64 %n.015.us61.us109, 1
  %53 = add i64 %p.016.us60.us108, 8
  %54 = inttoptr i64 %53 to ptr
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %for.done, label %switch.done.i.us62.us

for.body.us59:                                    ; preds = %for.body.lr.ph.split.split.us58, %if.done.us65
  %p.016.us60 = phi i64 [ %61, %if.done.us65 ], [ %3, %for.body.lr.ph.split.split.us58 ]
  %n.015.us61 = phi i64 [ %60, %if.done.us65 ], [ 0, %for.body.lr.ph.split.split.us58 ]
  %56 = icmp eq i64 %p.016.us60, 0
  br i1 %56, label %for.done, label %switch.done.i.us62

switch.done.i.us62:                               ; preds = %for.body.us59
  %57 = inttoptr i64 %p.016.us60 to ptr
  %58 = load i64, ptr %57, align 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %for.done, label %if.done.us65

if.done.us65:                                     ; preds = %switch.done.i.us62
  %60 = add nuw nsw i64 %n.015.us61, 1
  %61 = add i64 %p.016.us60, 8
  %exitcond.not = icmp eq i64 %60, %.fr
  br i1 %exitcond.not, label %for.done, label %for.body.us59

for.body.lr.ph.split.split:                       ; preds = %for.body.lr.ph.split
  br i1 %4, label %for.body.lr.ph.split.split.split.us, label %for.body

for.body.lr.ph.split.split.split.us:              ; preds = %for.body.lr.ph.split.split
  %62 = icmp eq ptr %0, null
  br i1 %62, label %for.done, label %switch.done.i.us77

switch.done.i.us77:                               ; preds = %for.body.lr.ph.split.split.split.us, %if.done.us78
  %n.015.us7686 = phi i64 [ %76, %if.done.us78 ], [ 0, %for.body.lr.ph.split.split.split.us ]
  %p.016.us7585 = phi i64 [ %63, %if.done.us78 ], [ %3, %for.body.lr.ph.split.split.split.us ]
  %.biased.i.i.us = add i64 %p.016.us7585, 7
  %p.0.i.i.us = and i64 %.biased.i.i.us, -8
  %63 = add i64 %p.016.us7585, %.fr111
  %p.0.i.i.i.us = and i64 %63, -8
  %64 = icmp ugt i64 %p.0.i.i.us, %p.016.us7585
  br i1 %64, label %for.interval.body.i.us, label %for.loop.preheader.i.us

for.interval.body.i.us:                           ; preds = %switch.done.i.us77, %for.interval.loop.i.us
  %b.03.i.us = phi i64 [ %67, %for.interval.loop.i.us ], [ %p.016.us7585, %switch.done.i.us77 ]
  %65 = inttoptr i64 %b.03.i.us to ptr
  %66 = load i8, ptr %65, align 1
  %.not28.i.us = icmp eq i8 %66, 0
  br i1 %.not28.i.us, label %for.interval.loop.i.us, label %if.done.us78

for.interval.loop.i.us:                           ; preds = %for.interval.body.i.us
  %67 = add i64 %b.03.i.us, 1
  %exitcond.not.i.us = icmp eq i64 %67, %p.0.i.i.us
  br i1 %exitcond.not.i.us, label %for.loop.preheader.i.us, label %for.interval.body.i.us

for.loop.preheader.i.us:                          ; preds = %for.interval.loop.i.us, %switch.done.i.us77
  %68 = icmp ult i64 %p.0.i.i.us, %p.0.i.i.i.us
  br i1 %68, label %for.body.i.us, label %for.interval.loop13.preheader.i.us

for.body.i.us:                                    ; preds = %for.loop.preheader.i.us, %for.loop.i.us
  %b9.04.i.us = phi i64 [ %71, %for.loop.i.us ], [ %p.0.i.i.us, %for.loop.preheader.i.us ]
  %69 = inttoptr i64 %b9.04.i.us to ptr
  %70 = load i64, ptr %69, align 8
  %.not27.i.us = icmp eq i64 %70, 0
  br i1 %.not27.i.us, label %for.loop.i.us, label %if.done.us78

for.loop.i.us:                                    ; preds = %for.body.i.us
  %71 = add nuw i64 %b9.04.i.us, 8
  %72 = icmp ult i64 %71, %p.0.i.i.i.us
  br i1 %72, label %for.body.i.us, label %for.interval.loop13.preheader.i.us

for.interval.loop13.preheader.i.us:               ; preds = %for.loop.i.us, %for.loop.preheader.i.us
  %73 = icmp ult i64 %p.0.i.i.i.us, %63
  br i1 %73, label %for.interval.body14.i.us, label %for.done

for.interval.body14.i.us:                         ; preds = %for.interval.loop13.preheader.i.us, %for.interval.loop13.i.us
  %b12.05.i.us = phi i64 [ %78, %for.interval.loop13.i.us ], [ %p.0.i.i.i.us, %for.interval.loop13.preheader.i.us ]
  %74 = inttoptr i64 %b12.05.i.us to ptr
  %75 = load i8, ptr %74, align 1
  %.not.i.us = icmp eq i8 %75, 0
  br i1 %.not.i.us, label %for.interval.loop13.i.us, label %if.done.us78

if.done.us78:                                     ; preds = %for.interval.body.i.us, %for.body.i.us, %for.interval.body14.i.us
  %76 = add i64 %n.015.us7686, 1
  %77 = icmp eq i64 %63, 0
  br i1 %77, label %for.done, label %switch.done.i.us77

for.interval.loop13.i.us:                         ; preds = %for.interval.body14.i.us
  %78 = add nuw i64 %b12.05.i.us, 1
  %79 = icmp ult i64 %78, %63
  br i1 %79, label %for.interval.body14.i.us, label %for.done

for.body:                                         ; preds = %for.body.lr.ph.split.split, %if.done
  %p.016 = phi i64 [ %81, %if.done ], [ %3, %for.body.lr.ph.split.split ]
  %n.015 = phi i64 [ %96, %if.done ], [ 0, %for.body.lr.ph.split.split ]
  %80 = icmp eq i64 %p.016, 0
  br i1 %80, label %for.done, label %switch.done.i

switch.done.i:                                    ; preds = %for.body
  %.biased.i.i = add i64 %p.016, 7
  %p.0.i.i = and i64 %.biased.i.i, -8
  %81 = add i64 %p.016, %.fr111
  %p.0.i.i.i = and i64 %81, -8
  %82 = icmp ugt i64 %p.0.i.i, %p.016
  br i1 %82, label %for.interval.body.i, label %for.loop.preheader.i

for.interval.loop.i:                              ; preds = %for.interval.body.i
  %83 = add i64 %b.03.i, 1
  %exitcond.not.i = icmp eq i64 %83, %p.0.i.i
  br i1 %exitcond.not.i, label %for.loop.preheader.i, label %for.interval.body.i

for.loop.preheader.i:                             ; preds = %for.interval.loop.i, %switch.done.i
  %84 = icmp ult i64 %p.0.i.i, %p.0.i.i.i
  br i1 %84, label %for.body.i, label %for.interval.loop13.preheader.i

for.interval.body.i:                              ; preds = %switch.done.i, %for.interval.loop.i
  %b.03.i = phi i64 [ %83, %for.interval.loop.i ], [ %p.016, %switch.done.i ]
  %85 = inttoptr i64 %b.03.i to ptr
  %86 = load i8, ptr %85, align 1
  %.not28.i = icmp eq i8 %86, 0
  br i1 %.not28.i, label %for.interval.loop.i, label %if.done

for.loop.i:                                       ; preds = %for.body.i
  %87 = add nuw i64 %b9.04.i, 8
  %88 = icmp ult i64 %87, %p.0.i.i.i
  br i1 %88, label %for.body.i, label %for.interval.loop13.preheader.i

for.interval.loop13.preheader.i:                  ; preds = %for.loop.i, %for.loop.preheader.i
  %89 = icmp ult i64 %p.0.i.i.i, %81
  br i1 %89, label %for.interval.body14.i, label %for.done

for.body.i:                                       ; preds = %for.loop.preheader.i, %for.loop.i
  %b9.04.i = phi i64 [ %87, %for.loop.i ], [ %p.0.i.i, %for.loop.preheader.i ]
  %90 = inttoptr i64 %b9.04.i to ptr
  %91 = load i64, ptr %90, align 8
  %.not27.i = icmp eq i64 %91, 0
  br i1 %.not27.i, label %for.loop.i, label %if.done

for.interval.loop13.i:                            ; preds = %for.interval.body14.i
  %92 = add nuw i64 %b12.05.i, 1
  %93 = icmp ult i64 %92, %81
  br i1 %93, label %for.interval.body14.i, label %for.done

for.interval.body14.i:                            ; preds = %for.interval.loop13.preheader.i, %for.interval.loop13.i
  %b12.05.i = phi i64 [ %92, %for.interval.loop13.i ], [ %p.0.i.i.i, %for.interval.loop13.preheader.i ]
  %94 = inttoptr i64 %b12.05.i to ptr
  %95 = load i8, ptr %94, align 1
  %.not.i = icmp eq i8 %95, 0
  br i1 %.not.i, label %for.interval.loop13.i, label %if.done

if.done:                                          ; preds = %for.interval.body.i, %for.body.i, %for.interval.body14.i
  %96 = add nuw nsw i64 %n.015, 1
  %exitcond141.not = icmp eq i64 %96, %.fr
  br i1 %exitcond141.not, label %for.done, label %for.body

for.done:                                         ; preds = %switch.done.i.us62, %if.done.us65, %for.body.us59, %switch.done.i.us62.us, %if.done.us65.us, %switch.done.i.us47, %if.done.us50, %for.body.us44, %switch.done.i.us47.us, %if.done.us50.us, %switch.done.i.us32, %if.done.us35, %for.body.us29, %switch.done.i.us32.us, %if.done.us35.us, %switch.done.i.us, %if.done.us, %for.body.us21, %switch.done.i.us.us, %if.done.us.us, %if.done, %for.body, %for.interval.loop13.preheader.i, %for.interval.loop13.i, %if.done.us78, %for.interval.loop13.preheader.i.us, %for.interval.loop13.i.us, %decls, %for.body.lr.ph.split.split.us.split.us, %for.body.lr.ph.split.split.us43.split.us, %for.body.lr.ph.split.split.split.us, %for.body.lr.ph.split.split.us58.split.us, %for.body.lr.ph.split.split.us28.split.us
  %n.013 = phi i64 [ 0, %decls ], [ 0, %for.body.lr.ph.split.split.us.split.us ], [ 0, %for.body.lr.ph.split.split.us28.split.us ], [ 0, %for.body.lr.ph.split.split.us43.split.us ], [ 0, %for.body.lr.ph.split.split.us58.split.us ], [ 0, %for.body.lr.ph.split.split.split.us ], [ %n.015.us7686, %for.interval.loop13.i.us ], [ %76, %if.done.us78 ], [ %n.015.us7686, %for.interval.loop13.preheader.i.us ], [ %n.015, %for.interval.loop13.i ], [ %.fr, %if.done ], [ %n.015, %for.body ], [ %n.015, %for.interval.loop13.preheader.i ], [ %n.015.us23.us91, %switch.done.i.us.us ], [ %10, %if.done.us.us ], [ %n.015.us23, %switch.done.i.us ], [ %.fr, %if.done.us ], [ %n.015.us23, %for.body.us21 ], [ %n.015.us31.us97, %switch.done.i.us32.us ], [ %24, %if.done.us35.us ], [ %n.015.us31, %switch.done.i.us32 ], [ %.fr, %if.done.us35 ], [ %n.015.us31, %for.body.us29 ], [ %n.015.us46.us103, %switch.done.i.us47.us ], [ %38, %if.done.us50.us ], [ %n.015.us46, %switch.done.i.us47 ], [ %.fr, %if.done.us50 ], [ %n.015.us46, %for.body.us44 ], [ %n.015.us61.us109, %switch.done.i.us62.us ], [ %52, %if.done.us65.us ], [ %n.015.us61, %switch.done.i.us62 ], [ %.fr, %if.done.us65 ], [ %n.015.us61, %for.body.us59 ]
  ret i64 %n.013
}

define internal fastcc void @fmt.fmt_array_nul_terminated(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4, i32 %5, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %6 = alloca i64, align 8
  %7 = icmp eq ptr %1, null
  br i1 %7, label %if.then, label %if.done

common.ret:                                       ; preds = %if.done, %io.write_string.exit
  ret void

if.then:                                          ; preds = %decls
  %8 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !1169
  %9 = load ptr, ptr %8, align 8, !noalias !1173
  %.not.i.i = icmp eq ptr %9, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then
  %10 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %11 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %12 = load ptr, ptr %11, align 8, !noalias !1173
  store i64 0, ptr %6, align 8, !noalias !1173
  %13 = call i32 %9(ptr %12, i64 4, ptr nonnull @"ggv$ea", i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !1177
  %14 = load i64, ptr %6, align 8, !noalias !1173
  %15 = load i64, ptr %10, align 8, !noalias !1173
  %16 = add i64 %15, %14
  store i64 %16, ptr %10, align 8, !noalias !1173
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !1169
  br label %common.ret

if.done:                                          ; preds = %decls
  %17 = tail call fastcc i64 @fmt.search_nul_termination-1301(ptr nonnull %1, i64 %3, i64 %2)
  tail call fastcc void @fmt.fmt_array(ptr %0, ptr nonnull %1, i64 %17, i64 %3, ptr %4, i32 %5, ptr %__.context_ptr)
  br label %common.ret
}

define internal fastcc void @fmt.fmt_array(ptr %0, ptr %1, i64 %2, i64 %3, ptr readonly %4, i32 %5, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %6 = alloca i64, align 8
  %buf.i89 = alloca [1 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca i64, align 8
  %buf.i84 = alloca [1 x i8], align 1
  %9 = alloca { ptr, i64 }, align 8
  %10 = alloca i64, align 8
  %buf.i79 = alloca [1 x i8], align 1
  %11 = alloca { ptr, i64 }, align 8
  %12 = alloca i64, align 8
  %buf.i.i67 = alloca [1 x i8], align 1
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %16 = alloca { ptr, i64 }, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %19 = alloca { ptr, i64 }, align 8
  %20 = alloca %..any, align 8
  %21 = alloca %..any, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca [80 x i8], align 8
  %30 = alloca i64, align 8
  %31 = alloca { ptr, i64 }, align 8
  %32 = icmp eq ptr %1, null
  %33 = icmp sgt i64 %2, 0
  %or.cond = select i1 %32, i1 %33, i1 false
  br i1 %or.cond, label %if.then, label %if.done

common.ret:                                       ; preds = %if.then10, %fmt.fmt_write_array.exit, %fmt.fmt_array.print_utf32-6.exit, %fmt.fmt_array.print_utf32-5.exit, %fmt.fmt_array.print_utf32-4.exit, %fmt.fmt_array.print_utf32-3.exit, %fmt.fmt_array.print_utf16-2.exit, %fmt.fmt_array.print_utf16-1.exit, %fmt.fmt_array.print_utf16-0.exit, %switch.case.body, %io.write_string.exit
  ret void

if.then:                                          ; preds = %decls
  %34 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %30), !noalias !1178
  %35 = load ptr, ptr %34, align 8, !noalias !1182
  %.not.i.i = icmp eq ptr %35, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then
  %36 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %37 = load ptr, ptr %36, align 8, !noalias !1182
  store i64 0, ptr %30, align 8, !noalias !1182
  %38 = call i32 %35(ptr %37, i64 4, ptr nonnull @"ggv$10c", i64 0, i64 0, ptr nonnull %30, ptr nonnull %__.context_ptr), !noalias !1186
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %30), !noalias !1178
  br label %common.ret

if.done:                                          ; preds = %decls
  switch i32 %5, label %if.else [
    i32 115, label %if.then1
    i32 113, label %if.then1
    i32 112, label %if.then10
  ]

if.then1:                                         ; preds = %if.done, %if.done
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %29)
  %39 = icmp ne ptr %4, null
  tail call void @llvm.assume(i1 %39)
  %40 = getelementptr inbounds %runtime.Type_Info, ptr %4, i64 0, i32 5, i32 1
  %41 = load i64, ptr %40, align 8
  %cond1.i = icmp eq i64 %41, 1
  br i1 %cond1.i, label %typeswitch.body.lr.ph.i, label %runtime.type_info_base.exit

typeswitch.body.lr.ph.i:                          ; preds = %if.then1
  %42 = getelementptr inbounds %runtime.Type_Info_Named, ptr %29, i64 0, i32 1
  br label %typeswitch.body.i

typeswitch.body.i:                                ; preds = %typeswitch.body.i, %typeswitch.body.lr.ph.i
  %base.02.i = phi ptr [ %4, %typeswitch.body.lr.ph.i ], [ %44, %typeswitch.body.i ]
  %43 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %29, ptr noundef nonnull align 1 dereferenceable(80) %43, i64 80, i1 false)
  %44 = load ptr, ptr %42, align 8
  %45 = getelementptr inbounds %runtime.Type_Info, ptr %44, i64 0, i32 5, i32 1
  %46 = load i64, ptr %45, align 8
  %cond.i = icmp eq i64 %46, 1
  br i1 %cond.i, label %typeswitch.body.i, label %runtime.type_info_base.exit

runtime.type_info_base.exit:                      ; preds = %typeswitch.body.i, %if.then1
  %common.ret.op.i = phi ptr [ %4, %if.then1 ], [ %44, %typeswitch.body.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %29)
  %47 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i, i64 0, i32 4
  %48 = load i64, ptr %47, align 8
  switch i64 %48, label %if.done9 [
    i64 72057594037927945, label %switch.case.body
    i64 72057594037928041, label %switch.case.body2
    i64 72057594037928080, label %switch.case.body3
    i64 72057594037928062, label %switch.case.body4
    i64 72057594037927955, label %switch.case.body5
    i64 72057594037928075, label %switch.case.body6
    i64 72057594037928073, label %switch.case.body7
    i64 4755801206503243882, label %switch.case.body8
  ]

switch.case.body:                                 ; preds = %runtime.type_info_base.exit
  %49 = getelementptr inbounds { ptr, i64 }, ptr %31, i64 0, i32 1
  store ptr %1, ptr %31, align 8
  store i64 %2, ptr %49, align 8
  call fastcc void @fmt.fmt_string(ptr %0, ptr nonnull %31, i32 %5, ptr %__.context_ptr)
  br label %common.ret

switch.case.body2:                                ; preds = %runtime.type_info_base.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %28)
  br i1 %33, label %for.body.lr.ph.i, label %fmt.fmt_array.print_utf16-0.exit

for.body.lr.ph.i:                                 ; preds = %switch.case.body2
  %50 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %51 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  br label %for.body.i

for.body.i:                                       ; preds = %switch.done.i, %for.body.lr.ph.i
  %i.016.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %70, %switch.done.i ]
  %52 = getelementptr i16, ptr %1, i64 %i.016.i
  %53 = load i16, ptr %52, align 2, !noalias !1187
  %54 = add i16 %53, 8192
  %or.cond.i = icmp ult i16 %54, -2048
  br i1 %or.cond.i, label %switch.case.body.i, label %cmp.and.i

switch.case.body.i:                               ; preds = %for.body.i
  %55 = zext i16 %53 to i32
  br label %switch.done.i

cmp.and.i:                                        ; preds = %for.body.i
  %56 = icmp ult i16 %53, -9216
  br i1 %56, label %cmp.and2.i, label %switch.done.i

cmp.and2.i:                                       ; preds = %cmp.and.i
  %57 = add nsw i64 %i.016.i, 1
  %58 = icmp slt i64 %57, %2
  br i1 %58, label %cmp.and3.i, label %switch.done.i

cmp.and3.i:                                       ; preds = %cmp.and2.i
  %59 = getelementptr i16, ptr %1, i64 %57
  %60 = load i16, ptr %59, align 2, !noalias !1187
  %61 = and i16 %60, -1024
  %spec.select.i = icmp eq i16 %61, -9216
  %62 = zext i16 %53 to i32
  %63 = zext i16 %60 to i32
  %64 = shl nuw nsw i32 %62, 10
  %65 = add nsw i32 %64, -56623104
  %66 = add nsw i32 %63, -56320
  %67 = or i32 %66, %65
  %68 = add nuw nsw i32 %67, 65536
  %spec.select = select i1 %spec.select.i, i64 %57, i64 %i.016.i
  %spec.select94 = select i1 %spec.select.i, i32 %68, i32 65533
  br label %switch.done.i

switch.done.i:                                    ; preds = %cmp.and3.i, %cmp.and2.i, %cmp.and.i, %switch.case.body.i
  %i.1.i = phi i64 [ %i.016.i, %switch.case.body.i ], [ %i.016.i, %cmp.and2.i ], [ %i.016.i, %cmp.and.i ], [ %spec.select, %cmp.and3.i ]
  %r.1.i = phi i32 [ %55, %switch.case.body.i ], [ 65533, %cmp.and2.i ], [ 65533, %cmp.and.i ], [ %spec.select94, %cmp.and3.i ]
  %69 = call fastcc i32 @io.write_rune(ptr nonnull %50, i32 %r.1.i, ptr nonnull %51, ptr %28, ptr %__.context_ptr)
  %70 = add nsw i64 %i.1.i, 1
  %71 = icmp slt i64 %70, %2
  br i1 %71, label %for.body.i, label %fmt.fmt_array.print_utf16-0.exit

fmt.fmt_array.print_utf16-0.exit:                 ; preds = %switch.done.i, %switch.case.body2
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28)
  br label %common.ret

switch.case.body3:                                ; preds = %runtime.type_info_base.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27)
  br i1 %33, label %for.body.lr.ph.i12, label %fmt.fmt_array.print_utf16-1.exit

for.body.lr.ph.i12:                               ; preds = %switch.case.body3
  %72 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %73 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  br label %for.body.i13

for.body.i13:                                     ; preds = %switch.done.i17, %for.body.lr.ph.i12
  %i.016.i14 = phi i64 [ 0, %for.body.lr.ph.i12 ], [ %92, %switch.done.i17 ]
  %74 = getelementptr i16, ptr %1, i64 %i.016.i14
  %75 = load i16, ptr %74, align 2, !noalias !1190
  %76 = add i16 %75, 8192
  %or.cond.i15 = icmp ult i16 %76, -2048
  br i1 %or.cond.i15, label %switch.case.body.i24, label %cmp.and.i16

switch.case.body.i24:                             ; preds = %for.body.i13
  %77 = zext i16 %75 to i32
  br label %switch.done.i17

cmp.and.i16:                                      ; preds = %for.body.i13
  %78 = icmp ult i16 %75, -9216
  br i1 %78, label %cmp.and2.i20, label %switch.done.i17

cmp.and2.i20:                                     ; preds = %cmp.and.i16
  %79 = add nsw i64 %i.016.i14, 1
  %80 = icmp slt i64 %79, %2
  br i1 %80, label %cmp.and3.i21, label %switch.done.i17

cmp.and3.i21:                                     ; preds = %cmp.and2.i20
  %81 = getelementptr i16, ptr %1, i64 %79
  %82 = load i16, ptr %81, align 2, !noalias !1190
  %83 = and i16 %82, -1024
  %spec.select.i22 = icmp eq i16 %83, -9216
  %84 = zext i16 %75 to i32
  %85 = zext i16 %82 to i32
  %86 = shl nuw nsw i32 %84, 10
  %87 = add nsw i32 %86, -56623104
  %88 = add nsw i32 %85, -56320
  %89 = or i32 %88, %87
  %90 = add nuw nsw i32 %89, 65536
  %spec.select95 = select i1 %spec.select.i22, i64 %79, i64 %i.016.i14
  %spec.select96 = select i1 %spec.select.i22, i32 %90, i32 65533
  br label %switch.done.i17

switch.done.i17:                                  ; preds = %cmp.and3.i21, %cmp.and2.i20, %cmp.and.i16, %switch.case.body.i24
  %i.1.i18 = phi i64 [ %i.016.i14, %switch.case.body.i24 ], [ %i.016.i14, %cmp.and2.i20 ], [ %i.016.i14, %cmp.and.i16 ], [ %spec.select95, %cmp.and3.i21 ]
  %r.1.i19 = phi i32 [ %77, %switch.case.body.i24 ], [ 65533, %cmp.and2.i20 ], [ 65533, %cmp.and.i16 ], [ %spec.select96, %cmp.and3.i21 ]
  %91 = call fastcc i32 @io.write_rune(ptr nonnull %72, i32 %r.1.i19, ptr nonnull %73, ptr %27, ptr %__.context_ptr)
  %92 = add nsw i64 %i.1.i18, 1
  %93 = icmp slt i64 %92, %2
  br i1 %93, label %for.body.i13, label %fmt.fmt_array.print_utf16-1.exit

fmt.fmt_array.print_utf16-1.exit:                 ; preds = %switch.done.i17, %switch.case.body3
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27)
  br label %common.ret

switch.case.body4:                                ; preds = %runtime.type_info_base.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26)
  br i1 %33, label %for.body.lr.ph.i25, label %fmt.fmt_array.print_utf16-2.exit

for.body.lr.ph.i25:                               ; preds = %switch.case.body4
  %94 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %95 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  br label %for.body.i26

for.body.i26:                                     ; preds = %switch.done.i30, %for.body.lr.ph.i25
  %i.016.i27 = phi i64 [ 0, %for.body.lr.ph.i25 ], [ %116, %switch.done.i30 ]
  %96 = getelementptr i16, ptr %1, i64 %i.016.i27
  %97 = load i16, ptr %96, align 2, !noalias !1193
  %98 = tail call i16 @llvm.bswap.i16(i16 %97)
  %99 = add i16 %98, 8192
  %or.cond.i28 = icmp ult i16 %99, -2048
  br i1 %or.cond.i28, label %switch.case.body.i37, label %cmp.and.i29

switch.case.body.i37:                             ; preds = %for.body.i26
  %100 = zext i16 %98 to i32
  br label %switch.done.i30

cmp.and.i29:                                      ; preds = %for.body.i26
  %101 = icmp ult i16 %98, -9216
  br i1 %101, label %cmp.and2.i33, label %switch.done.i30

cmp.and2.i33:                                     ; preds = %cmp.and.i29
  %102 = add nsw i64 %i.016.i27, 1
  %103 = icmp slt i64 %102, %2
  br i1 %103, label %cmp.and3.i34, label %switch.done.i30

cmp.and3.i34:                                     ; preds = %cmp.and2.i33
  %104 = getelementptr i16, ptr %1, i64 %102
  %105 = load i16, ptr %104, align 2, !noalias !1193
  %106 = tail call i16 @llvm.bswap.i16(i16 %105)
  %107 = and i16 %106, -1024
  %spec.select.i35 = icmp eq i16 %107, -9216
  %108 = zext i16 %98 to i32
  %109 = zext i16 %106 to i32
  %110 = shl nuw nsw i32 %108, 10
  %111 = add nsw i32 %110, -56623104
  %112 = add nsw i32 %109, -56320
  %113 = or i32 %112, %111
  %114 = add nuw nsw i32 %113, 65536
  %spec.select97 = select i1 %spec.select.i35, i64 %102, i64 %i.016.i27
  %spec.select98 = select i1 %spec.select.i35, i32 %114, i32 65533
  br label %switch.done.i30

switch.done.i30:                                  ; preds = %cmp.and3.i34, %cmp.and2.i33, %cmp.and.i29, %switch.case.body.i37
  %i.1.i31 = phi i64 [ %i.016.i27, %switch.case.body.i37 ], [ %i.016.i27, %cmp.and2.i33 ], [ %i.016.i27, %cmp.and.i29 ], [ %spec.select97, %cmp.and3.i34 ]
  %r.1.i32 = phi i32 [ %100, %switch.case.body.i37 ], [ 65533, %cmp.and2.i33 ], [ 65533, %cmp.and.i29 ], [ %spec.select98, %cmp.and3.i34 ]
  %115 = call fastcc i32 @io.write_rune(ptr nonnull %94, i32 %r.1.i32, ptr nonnull %95, ptr %26, ptr %__.context_ptr)
  %116 = add nsw i64 %i.1.i31, 1
  %117 = icmp slt i64 %116, %2
  br i1 %117, label %for.body.i26, label %fmt.fmt_array.print_utf16-2.exit

fmt.fmt_array.print_utf16-2.exit:                 ; preds = %switch.done.i30, %switch.case.body4
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26)
  br label %common.ret

switch.case.body5:                                ; preds = %runtime.type_info_base.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25)
  br i1 %33, label %for.index.body.lr.ph.i, label %fmt.fmt_array.print_utf32-3.exit

for.index.body.lr.ph.i:                           ; preds = %switch.case.body5
  %118 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %119 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  br label %for.index.body.i

for.index.body.i:                                 ; preds = %for.index.body.i, %for.index.body.lr.ph.i
  %120 = phi i64 [ 0, %for.index.body.lr.ph.i ], [ %124, %for.index.body.i ]
  %121 = getelementptr i32, ptr %1, i64 %120
  %122 = load i32, ptr %121, align 4, !noalias !1196
  %123 = call fastcc i32 @io.write_rune(ptr nonnull %118, i32 %122, ptr nonnull %119, ptr %25, ptr %__.context_ptr)
  %124 = add nuw nsw i64 %120, 1
  %exitcond.not.i = icmp eq i64 %124, %2
  br i1 %exitcond.not.i, label %fmt.fmt_array.print_utf32-3.exit, label %for.index.body.i

fmt.fmt_array.print_utf32-3.exit:                 ; preds = %for.index.body.i, %switch.case.body5
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25)
  br label %common.ret

switch.case.body6:                                ; preds = %runtime.type_info_base.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24)
  br i1 %33, label %for.index.body.lr.ph.i38, label %fmt.fmt_array.print_utf32-4.exit

for.index.body.lr.ph.i38:                         ; preds = %switch.case.body6
  %125 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %126 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  br label %for.index.body.i39

for.index.body.i39:                               ; preds = %for.index.body.i39, %for.index.body.lr.ph.i38
  %127 = phi i64 [ 0, %for.index.body.lr.ph.i38 ], [ %131, %for.index.body.i39 ]
  %128 = getelementptr i32, ptr %1, i64 %127
  %129 = load i32, ptr %128, align 4, !noalias !1199
  %130 = call fastcc i32 @io.write_rune(ptr nonnull %125, i32 %129, ptr nonnull %126, ptr %24, ptr %__.context_ptr)
  %131 = add nuw nsw i64 %127, 1
  %exitcond.not.i40 = icmp eq i64 %131, %2
  br i1 %exitcond.not.i40, label %fmt.fmt_array.print_utf32-4.exit, label %for.index.body.i39

fmt.fmt_array.print_utf32-4.exit:                 ; preds = %for.index.body.i39, %switch.case.body6
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24)
  br label %common.ret

switch.case.body7:                                ; preds = %runtime.type_info_base.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23)
  br i1 %33, label %for.index.body.lr.ph.i41, label %fmt.fmt_array.print_utf32-5.exit

for.index.body.lr.ph.i41:                         ; preds = %switch.case.body7
  %132 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %133 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  br label %for.index.body.i42

for.index.body.i42:                               ; preds = %for.index.body.i42, %for.index.body.lr.ph.i41
  %134 = phi i64 [ 0, %for.index.body.lr.ph.i41 ], [ %139, %for.index.body.i42 ]
  %135 = getelementptr i32, ptr %1, i64 %134
  %136 = load i32, ptr %135, align 4, !noalias !1202
  %137 = tail call i32 @llvm.bswap.i32(i32 %136)
  %138 = call fastcc i32 @io.write_rune(ptr nonnull %132, i32 %137, ptr nonnull %133, ptr %23, ptr %__.context_ptr)
  %139 = add nuw nsw i64 %134, 1
  %exitcond.not.i43 = icmp eq i64 %139, %2
  br i1 %exitcond.not.i43, label %fmt.fmt_array.print_utf32-5.exit, label %for.index.body.i42

fmt.fmt_array.print_utf32-5.exit:                 ; preds = %for.index.body.i42, %switch.case.body7
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23)
  br label %common.ret

switch.case.body8:                                ; preds = %runtime.type_info_base.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22)
  br i1 %33, label %for.index.body.lr.ph.i44, label %fmt.fmt_array.print_utf32-6.exit

for.index.body.lr.ph.i44:                         ; preds = %switch.case.body8
  %140 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %141 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  br label %for.index.body.i45

for.index.body.i45:                               ; preds = %for.index.body.i45, %for.index.body.lr.ph.i44
  %142 = phi i64 [ 0, %for.index.body.lr.ph.i44 ], [ %146, %for.index.body.i45 ]
  %143 = getelementptr i32, ptr %1, i64 %142
  %144 = load i32, ptr %143, align 4, !noalias !1205
  %145 = call fastcc i32 @io.write_rune(ptr nonnull %140, i32 %144, ptr nonnull %141, ptr %22, ptr %__.context_ptr)
  %146 = add nuw nsw i64 %142, 1
  %exitcond.not.i46 = icmp eq i64 %146, %2
  br i1 %exitcond.not.i46, label %fmt.fmt_array.print_utf32-6.exit, label %for.index.body.i45

fmt.fmt_array.print_utf32-6.exit:                 ; preds = %for.index.body.i45, %switch.case.body8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22)
  br label %common.ret

if.done9:                                         ; preds = %runtime.type_info_base.exit
  %147 = icmp eq i32 %5, 112
  br i1 %147, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.done, %if.done9
  %148 = ptrtoint ptr %1 to i64
  tail call fastcc void @fmt._fmt_int(ptr %0, i64 %148, i64 16, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %common.ret

if.else:                                          ; preds = %if.done, %if.done9
  %149 = getelementptr inbounds %runtime.Type_Info, ptr %4, i64 0, i32 4
  %150 = load i64, ptr %149, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %21)
  %151 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %152 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i89)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7)
  store i8 91, ptr %buf.i89, align 1, !noalias !1208
  store ptr %buf.i89, ptr %7, align 8, !noalias !1208
  %153 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 1, ptr %153, align 8, !noalias !1208
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !1208
  %154 = load ptr, ptr %151, align 8, !noalias !1211
  %.not.i.i90 = icmp eq ptr %154, null
  br i1 %.not.i.i90, label %io.write_byte.exit93, label %if.then.i.i91

if.then.i.i91:                                    ; preds = %if.else
  %155 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %156 = load ptr, ptr %155, align 8, !noalias !1211
  store i64 0, ptr %6, align 8, !noalias !1211
  %157 = call i32 %154(ptr %156, i64 4, ptr nonnull %7, i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !1215
  %158 = load i64, ptr %6, align 8, !noalias !1211
  %159 = load i64, ptr %152, align 8, !noalias !1211
  %160 = add i64 %159, %158
  store i64 %160, ptr %152, align 8, !noalias !1211
  br label %io.write_byte.exit93

io.write_byte.exit93:                             ; preds = %if.else, %if.then.i.i91
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !1208
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i89)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7)
  %161 = icmp slt i64 %2, 1
  br i1 %161, label %defer.i, label %if.done.i50

defer.i:                                          ; preds = %io.write_byte.exit93
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i84)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  store i8 93, ptr %buf.i84, align 1, !noalias !1216
  store ptr %buf.i84, ptr %9, align 8, !noalias !1216
  %162 = getelementptr inbounds { ptr, i64 }, ptr %9, i64 0, i32 1
  store i64 1, ptr %162, align 8, !noalias !1216
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !1216
  %163 = load ptr, ptr %151, align 8, !noalias !1219
  %.not.i.i85 = icmp eq ptr %163, null
  br i1 %.not.i.i85, label %io.write_byte.exit88, label %if.then.i.i86

if.then.i.i86:                                    ; preds = %defer.i
  %164 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %165 = load ptr, ptr %164, align 8, !noalias !1219
  store i64 0, ptr %8, align 8, !noalias !1219
  %166 = call i32 %163(ptr %165, i64 4, ptr nonnull %9, i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !1223
  %167 = load i64, ptr %8, align 8, !noalias !1219
  %168 = load i64, ptr %152, align 8, !noalias !1219
  %169 = add i64 %168, %167
  store i64 %169, ptr %152, align 8, !noalias !1219
  br label %io.write_byte.exit88

io.write_byte.exit88:                             ; preds = %defer.i, %if.then.i.i86
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !1216
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i84)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  br label %fmt.fmt_write_array.exit

if.done.i50:                                      ; preds = %io.write_byte.exit93
  %170 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 19
  %171 = load i64, ptr %170, align 8, !noalias !1224
  %172 = add i64 %171, 1
  store i64 %172, ptr %170, align 8, !noalias !1224
  %173 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  %174 = load i8, ptr %173, align 1, !noalias !1224
  %.not.i51 = icmp eq i8 %174, 0
  br i1 %.not.i51, label %if.done10.i.peel, label %if.then1.i

if.done10.i.peel:                                 ; preds = %if.done.i50
  %175 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %176 = ptrtoint ptr %1 to i64
  %.repack20.i = getelementptr inbounds %..any, ptr %21, i64 0, i32 1
  store ptr %1, ptr %21, align 8, !noalias !1224
  store i64 %150, ptr %.repack20.i, align 8, !noalias !1224
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %21, i32 %5, ptr %__.context_ptr)
  %exitcond107.peel.not = icmp eq i64 %2, 1
  br i1 %exitcond107.peel.not, label %defer15.i, label %if.then9.i

if.then1.i:                                       ; preds = %if.done.i50
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i79)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11)
  store i8 10, ptr %buf.i79, align 1, !noalias !1227
  store ptr %buf.i79, ptr %11, align 8, !noalias !1227
  %177 = getelementptr inbounds { ptr, i64 }, ptr %11, i64 0, i32 1
  store i64 1, ptr %177, align 8, !noalias !1227
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !1227
  %178 = load ptr, ptr %151, align 8, !noalias !1230
  %.not.i.i80 = icmp eq ptr %178, null
  br i1 %.not.i.i80, label %for.interval.body.i.lr.ph, label %if.then.i.i81

if.then.i.i81:                                    ; preds = %if.then1.i
  %179 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %180 = load ptr, ptr %179, align 8, !noalias !1230
  store i64 0, ptr %10, align 8, !noalias !1230
  %181 = call i32 %178(ptr %180, i64 4, ptr nonnull %11, i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !1234
  %182 = load i64, ptr %10, align 8, !noalias !1230
  %183 = load i64, ptr %152, align 8, !noalias !1230
  %184 = add i64 %183, %182
  store i64 %184, ptr %152, align 8, !noalias !1230
  br label %for.interval.body.i.lr.ph

for.interval.body.i.lr.ph:                        ; preds = %if.then.i.i81, %if.then1.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !1227
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i79)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11)
  %185 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 10
  %186 = load i64, ptr %185, align 8, !noalias !1224
  %187 = add i64 %186, 1
  store i64 %187, ptr %185, align 8, !noalias !1224
  %188 = getelementptr inbounds { ptr, i64 }, ptr %13, i64 0, i32 1
  %189 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %190 = ptrtoint ptr %1 to i64
  %.repack21.i = getelementptr inbounds %..any, ptr %20, i64 0, i32 1
  br label %for.interval.body.i

for.interval.body.ithread-pre-split:              ; preds = %io.write_string.exit66
  %.pr = load i64, ptr %185, align 8, !noalias !1235
  br label %for.interval.body.i

for.interval.body.i:                              ; preds = %for.interval.body.ithread-pre-split, %for.interval.body.i.lr.ph
  %191 = phi i64 [ %.pr, %for.interval.body.ithread-pre-split ], [ %187, %for.interval.body.i.lr.ph ]
  %i.0.i102 = phi i64 [ %214, %for.interval.body.ithread-pre-split ], [ 0, %for.interval.body.i.lr.ph ]
  %192 = icmp sgt i64 %191, 0
  br i1 %192, label %for.interval.body.lr.ph.i68, label %fmt.fmt_write_indent.exit78

for.interval.body.lr.ph.i68:                      ; preds = %for.interval.body.i
  %193 = load ptr, ptr %151, align 8, !noalias !1238
  %194 = icmp eq ptr %193, null
  br i1 %194, label %fmt.fmt_write_indent.exit78, label %for.interval.body.i69

for.interval.body.i69:                            ; preds = %for.interval.body.lr.ph.i68, %io.write_byte.exit.i74
  %195 = phi i64 [ %202, %io.write_byte.exit.i74 ], [ %191, %for.interval.body.lr.ph.i68 ]
  %.012.i70 = phi i64 [ %203, %io.write_byte.exit.i74 ], [ 0, %for.interval.body.lr.ph.i68 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i67), !noalias !1235
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13), !noalias !1235
  store i8 9, ptr %buf.i.i67, align 1, !noalias !1244
  store ptr %buf.i.i67, ptr %13, align 8, !noalias !1244
  store i64 1, ptr %188, align 8, !noalias !1244
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !1244
  %196 = load ptr, ptr %151, align 8, !noalias !1238
  %.not.i.i.i71 = icmp eq ptr %196, null
  br i1 %.not.i.i.i71, label %io.write_byte.exit.i74, label %if.then.i.i.i72

if.then.i.i.i72:                                  ; preds = %for.interval.body.i69
  %197 = load ptr, ptr %189, align 8, !noalias !1238
  store i64 0, ptr %12, align 8, !noalias !1238
  %198 = call i32 %196(ptr %197, i64 4, ptr nonnull %13, i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !1245
  %199 = load i64, ptr %12, align 8, !noalias !1238
  %200 = load i64, ptr %152, align 8, !noalias !1238
  %201 = add i64 %200, %199
  store i64 %201, ptr %152, align 8, !noalias !1238
  %.pre.i73 = load i64, ptr %185, align 8, !noalias !1235
  br label %io.write_byte.exit.i74

io.write_byte.exit.i74:                           ; preds = %if.then.i.i.i72, %for.interval.body.i69
  %202 = phi i64 [ %195, %for.interval.body.i69 ], [ %.pre.i73, %if.then.i.i.i72 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !1244
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i67), !noalias !1235
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13), !noalias !1235
  %203 = add nuw nsw i64 %.012.i70, 1
  %204 = icmp slt i64 %203, %202
  br i1 %204, label %for.interval.body.i69, label %fmt.fmt_write_indent.exit78, !llvm.loop !901

fmt.fmt_write_indent.exit78:                      ; preds = %io.write_byte.exit.i74, %for.interval.body.lr.ph.i68, %for.interval.body.i
  %205 = mul i64 %i.0.i102, %3
  %206 = add i64 %205, %190
  %207 = inttoptr i64 %206 to ptr
  store ptr %207, ptr %20, align 8, !noalias !1224
  store i64 %150, ptr %.repack21.i, align 8, !noalias !1224
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %20, i32 %5, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14), !noalias !1246
  %208 = load ptr, ptr %151, align 8, !noalias !1250
  %.not.i.i62 = icmp eq ptr %208, null
  br i1 %.not.i.i62, label %io.write_string.exit66, label %if.then.i.i63

if.then.i.i63:                                    ; preds = %fmt.fmt_write_indent.exit78
  %209 = load ptr, ptr %189, align 8, !noalias !1250
  store i64 0, ptr %14, align 8, !noalias !1250
  %210 = call i32 %208(ptr %209, i64 4, ptr nonnull @"ggv$df", i64 0, i64 0, ptr nonnull %14, ptr nonnull %__.context_ptr), !noalias !1254
  %211 = load i64, ptr %14, align 8, !noalias !1250
  %212 = load i64, ptr %152, align 8, !noalias !1250
  %213 = add i64 %212, %211
  store i64 %213, ptr %152, align 8, !noalias !1250
  br label %io.write_string.exit66

io.write_string.exit66:                           ; preds = %fmt.fmt_write_indent.exit78, %if.then.i.i63
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !1246
  %214 = add nuw nsw i64 %i.0.i102, 1
  %exitcond.not = icmp eq i64 %214, %2
  br i1 %exitcond.not, label %defer3.i, label %for.interval.body.ithread-pre-split

defer3.i:                                         ; preds = %io.write_string.exit66
  store i64 %186, ptr %185, align 8, !noalias !1224
  %215 = icmp sgt i64 %186, 0
  br i1 %215, label %for.interval.body.lr.ph.i, label %defer15.i

for.interval.body.lr.ph.i:                        ; preds = %defer3.i
  %216 = getelementptr inbounds { ptr, i64 }, ptr %16, i64 0, i32 1
  %217 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %218 = load ptr, ptr %151, align 8, !noalias !1255
  %219 = icmp eq ptr %218, null
  br i1 %219, label %defer15.i, label %for.interval.body.i60

for.interval.body.i60:                            ; preds = %for.interval.body.lr.ph.i, %io.write_byte.exit.i
  %220 = phi i64 [ %227, %io.write_byte.exit.i ], [ %186, %for.interval.body.lr.ph.i ]
  %.012.i = phi i64 [ %228, %io.write_byte.exit.i ], [ 0, %for.interval.body.lr.ph.i ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1263
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %16), !noalias !1263
  store i8 9, ptr %buf.i.i, align 1, !noalias !1264
  store ptr %buf.i.i, ptr %16, align 8, !noalias !1264
  store i64 1, ptr %216, align 8, !noalias !1264
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15), !noalias !1264
  %221 = load ptr, ptr %151, align 8, !noalias !1255
  %.not.i.i.i = icmp eq ptr %221, null
  br i1 %.not.i.i.i, label %io.write_byte.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.interval.body.i60
  %222 = load ptr, ptr %217, align 8, !noalias !1255
  store i64 0, ptr %15, align 8, !noalias !1255
  %223 = call i32 %221(ptr %222, i64 4, ptr nonnull %16, i64 0, i64 0, ptr nonnull %15, ptr nonnull %__.context_ptr), !noalias !1265
  %224 = load i64, ptr %15, align 8, !noalias !1255
  %225 = load i64, ptr %152, align 8, !noalias !1255
  %226 = add i64 %225, %224
  store i64 %226, ptr %152, align 8, !noalias !1255
  %.pre.i = load i64, ptr %185, align 8, !noalias !1263
  br label %io.write_byte.exit.i

io.write_byte.exit.i:                             ; preds = %if.then.i.i.i, %for.interval.body.i60
  %227 = phi i64 [ %220, %for.interval.body.i60 ], [ %.pre.i, %if.then.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15), !noalias !1264
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1263
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %16), !noalias !1263
  %228 = add nuw nsw i64 %.012.i, 1
  %229 = icmp slt i64 %228, %227
  br i1 %229, label %for.interval.body.i60, label %defer15.i, !llvm.loop !901

if.then9.i:                                       ; preds = %if.done10.i.peel, %if.done10.i
  %i5.0.i103 = phi i64 [ %239, %if.done10.i ], [ 1, %if.done10.i.peel ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17), !noalias !1266
  %230 = load ptr, ptr %151, align 8, !noalias !1270
  %.not.i.i55 = icmp eq ptr %230, null
  br i1 %.not.i.i55, label %if.done10.i, label %if.then.i.i56

if.then.i.i56:                                    ; preds = %if.then9.i
  %231 = load ptr, ptr %175, align 8, !noalias !1270
  store i64 0, ptr %17, align 8, !noalias !1270
  %232 = call i32 %230(ptr %231, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %17, ptr nonnull %__.context_ptr), !noalias !1274
  %233 = load i64, ptr %17, align 8, !noalias !1270
  %234 = load i64, ptr %152, align 8, !noalias !1270
  %235 = add i64 %234, %233
  store i64 %235, ptr %152, align 8, !noalias !1270
  br label %if.done10.i

if.done10.i:                                      ; preds = %if.then.i.i56, %if.then9.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17), !noalias !1266
  %236 = mul i64 %i5.0.i103, %3
  %237 = add i64 %236, %176
  %238 = inttoptr i64 %237 to ptr
  store ptr %238, ptr %21, align 8, !noalias !1224
  store i64 %150, ptr %.repack20.i, align 8, !noalias !1224
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %21, i32 %5, ptr %__.context_ptr)
  %239 = add nuw nsw i64 %i5.0.i103, 1
  %exitcond107.not = icmp eq i64 %239, %2
  br i1 %exitcond107.not, label %defer15.i, label %if.then9.i, !llvm.loop !1275

defer15.i:                                        ; preds = %io.write_byte.exit.i, %if.done10.i, %if.done10.i.peel, %for.interval.body.lr.ph.i, %defer3.i
  %240 = load i64, ptr %170, align 8, !noalias !1224
  %241 = add i64 %240, -1
  store i64 %241, ptr %170, align 8, !noalias !1224
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19)
  store i8 93, ptr %buf.i, align 1, !noalias !1276
  store ptr %buf.i, ptr %19, align 8, !noalias !1276
  %242 = getelementptr inbounds { ptr, i64 }, ptr %19, i64 0, i32 1
  store i64 1, ptr %242, align 8, !noalias !1276
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18), !noalias !1276
  %243 = load ptr, ptr %151, align 8, !noalias !1279
  %.not.i.i52 = icmp eq ptr %243, null
  br i1 %.not.i.i52, label %io.write_byte.exit, label %if.then.i.i53

if.then.i.i53:                                    ; preds = %defer15.i
  %244 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %245 = load ptr, ptr %244, align 8, !noalias !1279
  store i64 0, ptr %18, align 8, !noalias !1279
  %246 = call i32 %243(ptr %245, i64 4, ptr nonnull %19, i64 0, i64 0, ptr nonnull %18, ptr nonnull %__.context_ptr), !noalias !1283
  %247 = load i64, ptr %18, align 8, !noalias !1279
  %248 = load i64, ptr %152, align 8, !noalias !1279
  %249 = add i64 %248, %247
  store i64 %249, ptr %152, align 8, !noalias !1279
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %defer15.i, %if.then.i.i53
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18), !noalias !1276
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  br label %fmt.fmt_write_array.exit

fmt.fmt_write_array.exit:                         ; preds = %io.write_byte.exit88, %io.write_byte.exit
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %20)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %21)
  br label %common.ret
}

define internal fastcc void @fmt.fmt_named(ptr %0, ptr nocapture readonly %1, i32 %2, ptr %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %a.i.i233 = alloca [129 x i8], align 1
  %5 = alloca { ptr, i64 }, align 8
  %buf.i234 = alloca [32 x i8], align 1
  %6 = alloca %..string, align 8
  %s.i235 = alloca %..string, align 8
  %7 = alloca i64, align 8
  %a.i.i = alloca [129 x i8], align 1
  %8 = alloca { ptr, i64 }, align 8
  %buf.i229 = alloca [32 x i8], align 1
  %9 = alloca %..string, align 8
  %s.i = alloca %..string, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %buf.i122 = alloca [1 x i8], align 1
  %12 = alloca { ptr, i64 }, align 8
  %13 = alloca i64, align 8
  %buf.i116 = alloca [1 x i8], align 1
  %14 = alloca { ptr, i64 }, align 8
  %15 = alloca i64, align 8
  %buf.i110 = alloca [1 x i8], align 1
  %16 = alloca { ptr, i64 }, align 8
  %17 = alloca i64, align 8
  %buf.i104 = alloca [1 x i8], align 1
  %18 = alloca { ptr, i64 }, align 8
  %19 = alloca i64, align 8
  %buf.i98 = alloca [1 x i8], align 1
  %20 = alloca { ptr, i64 }, align 8
  %21 = alloca i64, align 8
  %buf.i92 = alloca [1 x i8], align 1
  %22 = alloca { ptr, i64 }, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %buf.i31 = alloca [1 x i8], align 1
  %26 = alloca { ptr, i64 }, align 8
  %27 = alloca i64, align 8
  %buf.i26 = alloca [1 x i8], align 1
  %28 = alloca { ptr, i64 }, align 8
  %29 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %30 = alloca { ptr, i64 }, align 8
  %31 = alloca i64, align 8
  %32 = alloca [40 x i8], align 8
  %buf = alloca [32 x i8], align 1
  %33 = alloca { ptr, i64 }, align 8
  %34 = alloca [120 x i8], align 8
  %35 = alloca %..any, align 8
  %36 = getelementptr inbounds %..any, ptr %1, i64 0, i32 1
  %37 = load i64, ptr %36, align 8
  switch i64 %37, label %typeswitch.done [
    i64 3602879701896396825, label %typeswitch.body
    i64 6989586621679009942, label %typeswitch.body1
    i64 3602879701896396948, label %typeswitch.body14
  ]

common.ret:                                       ; preds = %typeswitch.body15, %typeswitch.body16, %typeswitch.default.body, %io.write_string.exit133, %io.write_string.exit89, %io.write_string.exit40, %io.write_byte.exit35
  ret void

typeswitch.body:                                  ; preds = %decls
  %38 = load ptr, ptr %1, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %32, ptr noundef nonnull align 1 dereferenceable(40) %38, i64 40, i1 false)
  %39 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %40 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %31), !noalias !1284
  %41 = load ptr, ptr %39, align 8, !noalias !287
  %.not.i.i = icmp eq ptr %41, null
  br i1 %.not.i.i, label %io.write_string.exit.thread, label %io.write_string.exit

io.write_string.exit.thread:                      ; preds = %typeswitch.body
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31), !noalias !1284
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %30)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %29), !noalias !1288
  br label %io.write_byte.exit

io.write_string.exit:                             ; preds = %typeswitch.body
  %42 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %43 = load ptr, ptr %42, align 8, !noalias !1291
  store i64 0, ptr %31, align 8, !noalias !1291
  %44 = call i32 %41(ptr %43, i64 4, ptr nonnull %32, i64 0, i64 0, ptr nonnull %31, ptr nonnull %__.context_ptr), !noalias !1295
  %45 = load i64, ptr %31, align 8, !noalias !1291
  %46 = load i64, ptr %40, align 8, !noalias !1291
  %47 = add i64 %46, %45
  store i64 %47, ptr %40, align 8, !noalias !1291
  %.pre = load ptr, ptr %39, align 8, !noalias !1296
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31), !noalias !1284
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %30)
  store i8 40, ptr %buf.i, align 1, !noalias !1288
  store ptr %buf.i, ptr %30, align 8, !noalias !1288
  %48 = getelementptr inbounds { ptr, i64 }, ptr %30, i64 0, i32 1
  store i64 1, ptr %48, align 8, !noalias !1288
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %29), !noalias !1288
  %.not.i.i23 = icmp eq ptr %.pre, null
  br i1 %.not.i.i23, label %io.write_byte.exit, label %if.then.i.i24

if.then.i.i24:                                    ; preds = %io.write_string.exit
  %49 = load ptr, ptr %42, align 8, !noalias !1296
  store i64 0, ptr %29, align 8, !noalias !1296
  %50 = call i32 %.pre(ptr %49, i64 4, ptr nonnull %30, i64 0, i64 0, ptr nonnull %29, ptr nonnull %__.context_ptr), !noalias !1300
  %51 = load i64, ptr %29, align 8, !noalias !1296
  %52 = load i64, ptr %40, align 8, !noalias !1296
  %53 = add i64 %52, %51
  store i64 %53, ptr %40, align 8, !noalias !1296
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %io.write_string.exit.thread, %io.write_string.exit, %if.then.i.i24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %29), !noalias !1288
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %30)
  %54 = getelementptr inbounds %runtime.Source_Code_Location, ptr %32, i64 0, i32 1
  %55 = load i32, ptr %54, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %buf.i229)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %s.i)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %buf.i229, i8 0, i64 32, i1 false), !noalias !1301
  call void @llvm.lifetime.start.p0(i64 129, ptr nonnull %a.i.i), !noalias !1301
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8), !noalias !1301
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a.i.i, i8 0, i64 129, i1 false), !noalias !1307
  %56 = icmp slt i32 %55, 0
  %57 = call i32 @llvm.abs.i32(i32 %55, i1 false)
  %58 = zext i32 %57 to i64
  %.not22.i.i = icmp ult i32 %57, 10
  %.pre.i.i230 = load ptr, ptr @strconv.digits, align 8, !noalias !1307
  br i1 %.not22.i.i, label %for.done.i.i, label %for.body.i.i

for.body.i.i:                                     ; preds = %io.write_byte.exit, %for.body.i.i
  %u.024.i.i = phi i64 [ %64, %for.body.i.i ], [ %58, %io.write_byte.exit ]
  %i.023.i.i = phi i64 [ %59, %for.body.i.i ], [ 129, %io.write_byte.exit ]
  %59 = add i64 %i.023.i.i, -1
  %60 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %59
  %61 = urem i64 %u.024.i.i, 10
  %62 = getelementptr i8, ptr %.pre.i.i230, i64 %61
  %63 = load i8, ptr %62, align 1, !noalias !1307
  store i8 %63, ptr %60, align 1, !noalias !1307
  %64 = udiv i64 %u.024.i.i, 10
  %.not.i.i231 = icmp ult i64 %u.024.i.i, 100
  br i1 %.not.i.i231, label %for.done.i.i, label %for.body.i.i

for.done.i.i:                                     ; preds = %for.body.i.i, %io.write_byte.exit
  %i.0.lcssa.i.i = phi i64 [ 129, %io.write_byte.exit ], [ %59, %for.body.i.i ]
  %u.0.lcssa.i.i = phi i64 [ %58, %io.write_byte.exit ], [ %64, %for.body.i.i ]
  %65 = add i64 %i.0.lcssa.i.i, -1
  %66 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %65
  %67 = getelementptr i8, ptr %.pre.i.i230, i64 %u.0.lcssa.i.i
  %68 = load i8, ptr %67, align 1, !noalias !1307
  store i8 %68, ptr %66, align 1, !noalias !1307
  br i1 %56, label %switch.done11.sink.split.i.i, label %switch.done11.i.i

switch.done11.sink.split.i.i:                     ; preds = %for.done.i.i
  %69 = add i64 %i.0.lcssa.i.i, -2
  %70 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %69
  store i8 45, ptr %70, align 1, !noalias !1307
  br label %switch.done11.i.i

switch.done11.i.i:                                ; preds = %switch.done11.sink.split.i.i, %for.done.i.i
  %i.3.i.i = phi i64 [ %69, %switch.done11.sink.split.i.i ], [ %65, %for.done.i.i ]
  %71 = sub i64 129, %i.3.i.i
  %72 = call i64 @llvm.smin.i64(i64 %71, i64 32)
  %.not.i.i.i232 = icmp slt i64 %72, 1
  br i1 %.not.i.i.i232, label %strconv.append_bits.exit.i, label %if.then.i19.i.i

if.then.i19.i.i:                                  ; preds = %switch.done11.i.i
  %73 = getelementptr i8, ptr %a.i.i, i64 %i.3.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %buf.i229, ptr align 1 %73, i64 %72, i1 false), !noalias !1307
  br label %strconv.append_bits.exit.i

strconv.append_bits.exit.i:                       ; preds = %if.then.i19.i.i, %switch.done11.i.i
  store ptr %buf.i229, ptr %8, align 8, !noalias !1307
  %74 = getelementptr inbounds { ptr, i64 }, ptr %8, i64 0, i32 1
  store i64 %71, ptr %74, align 8, !noalias !1307
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %9, ptr nonnull align 8 %8, i64 16, i1 false), !noalias !1311
  call void @llvm.lifetime.end.p0(i64 129, ptr nonnull %a.i.i), !noalias !1301
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8), !noalias !1301
  %.unpack.i = load ptr, ptr %9, align 8, !noalias !1301
  %.elt1.i = getelementptr inbounds %..string, ptr %9, i64 0, i32 1
  %.unpack2.i = load i64, ptr %.elt1.i, align 8, !noalias !1301
  store ptr %.unpack.i, ptr %s.i, align 8, !noalias !1301
  %s.repack3.i = getelementptr inbounds %..string, ptr %s.i, i64 0, i32 1
  store i64 %.unpack2.i, ptr %s.repack3.i, align 8, !noalias !1301
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !1312
  %75 = load ptr, ptr %39, align 8, !noalias !287
  %.not.i.i5.i = icmp eq ptr %75, null
  br i1 %.not.i.i5.i, label %io.write_i64.exit.thread, label %io.write_i64.exit

io.write_i64.exit.thread:                         ; preds = %strconv.append_bits.exit.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !1312
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %buf.i229)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i26)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %28)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27), !noalias !1316
  br label %io.write_byte.exit30

io.write_i64.exit:                                ; preds = %strconv.append_bits.exit.i
  %76 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %77 = load ptr, ptr %76, align 8, !noalias !1319
  store i64 0, ptr %7, align 8, !noalias !1319
  %78 = call i32 %75(ptr %77, i64 4, ptr nonnull %s.i, i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !1323
  %79 = load i64, ptr %7, align 8, !noalias !1319
  %80 = load i64, ptr %40, align 8, !noalias !1319
  %81 = add i64 %80, %79
  store i64 %81, ptr %40, align 8, !noalias !1319
  %.pre328 = load ptr, ptr %39, align 8, !noalias !1324
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !1312
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %buf.i229)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i26)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %28)
  store i8 58, ptr %buf.i26, align 1, !noalias !1316
  store ptr %buf.i26, ptr %28, align 8, !noalias !1316
  %82 = getelementptr inbounds { ptr, i64 }, ptr %28, i64 0, i32 1
  store i64 1, ptr %82, align 8, !noalias !1316
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27), !noalias !1316
  %.not.i.i27 = icmp eq ptr %.pre328, null
  br i1 %.not.i.i27, label %io.write_byte.exit30, label %if.then.i.i28

if.then.i.i28:                                    ; preds = %io.write_i64.exit
  %83 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %84 = load ptr, ptr %83, align 8, !noalias !1324
  store i64 0, ptr %27, align 8, !noalias !1324
  %85 = call i32 %.pre328(ptr %84, i64 4, ptr nonnull %28, i64 0, i64 0, ptr nonnull %27, ptr nonnull %__.context_ptr), !noalias !1328
  %86 = load i64, ptr %27, align 8, !noalias !1324
  %87 = load i64, ptr %40, align 8, !noalias !1324
  %88 = add i64 %87, %86
  store i64 %88, ptr %40, align 8, !noalias !1324
  br label %io.write_byte.exit30

io.write_byte.exit30:                             ; preds = %io.write_i64.exit.thread, %io.write_i64.exit, %if.then.i.i28
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27), !noalias !1316
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i26)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %28)
  %89 = getelementptr inbounds %runtime.Source_Code_Location, ptr %32, i64 0, i32 2
  %90 = load i32, ptr %89, align 4
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %buf.i234)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %s.i235)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %buf.i234, i8 0, i64 32, i1 false), !noalias !1329
  call void @llvm.lifetime.start.p0(i64 129, ptr nonnull %a.i.i233), !noalias !1329
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5), !noalias !1329
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a.i.i233, i8 0, i64 129, i1 false), !noalias !1335
  %91 = icmp slt i32 %90, 0
  %92 = call i32 @llvm.abs.i32(i32 %90, i1 false)
  %93 = zext i32 %92 to i64
  %.not22.i.i236 = icmp ult i32 %92, 10
  %.pre.i.i237 = load ptr, ptr @strconv.digits, align 8, !noalias !1335
  br i1 %.not22.i.i236, label %for.done.i.i242, label %for.body.i.i238

for.body.i.i238:                                  ; preds = %io.write_byte.exit30, %for.body.i.i238
  %u.024.i.i239 = phi i64 [ %99, %for.body.i.i238 ], [ %93, %io.write_byte.exit30 ]
  %i.023.i.i240 = phi i64 [ %94, %for.body.i.i238 ], [ 129, %io.write_byte.exit30 ]
  %94 = add i64 %i.023.i.i240, -1
  %95 = getelementptr [129 x i8], ptr %a.i.i233, i64 0, i64 %94
  %96 = urem i64 %u.024.i.i239, 10
  %97 = getelementptr i8, ptr %.pre.i.i237, i64 %96
  %98 = load i8, ptr %97, align 1, !noalias !1335
  store i8 %98, ptr %95, align 1, !noalias !1335
  %99 = udiv i64 %u.024.i.i239, 10
  %.not.i.i241 = icmp ult i64 %u.024.i.i239, 100
  br i1 %.not.i.i241, label %for.done.i.i242, label %for.body.i.i238

for.done.i.i242:                                  ; preds = %for.body.i.i238, %io.write_byte.exit30
  %i.0.lcssa.i.i243 = phi i64 [ 129, %io.write_byte.exit30 ], [ %94, %for.body.i.i238 ]
  %u.0.lcssa.i.i244 = phi i64 [ %93, %io.write_byte.exit30 ], [ %99, %for.body.i.i238 ]
  %100 = add i64 %i.0.lcssa.i.i243, -1
  %101 = getelementptr [129 x i8], ptr %a.i.i233, i64 0, i64 %100
  %102 = getelementptr i8, ptr %.pre.i.i237, i64 %u.0.lcssa.i.i244
  %103 = load i8, ptr %102, align 1, !noalias !1335
  store i8 %103, ptr %101, align 1, !noalias !1335
  br i1 %91, label %switch.done11.sink.split.i.i258, label %switch.done11.i.i245

switch.done11.sink.split.i.i258:                  ; preds = %for.done.i.i242
  %104 = add i64 %i.0.lcssa.i.i243, -2
  %105 = getelementptr [129 x i8], ptr %a.i.i233, i64 0, i64 %104
  store i8 45, ptr %105, align 1, !noalias !1335
  br label %switch.done11.i.i245

switch.done11.i.i245:                             ; preds = %switch.done11.sink.split.i.i258, %for.done.i.i242
  %i.3.i.i246 = phi i64 [ %104, %switch.done11.sink.split.i.i258 ], [ %100, %for.done.i.i242 ]
  %106 = sub i64 129, %i.3.i.i246
  %107 = call i64 @llvm.smin.i64(i64 %106, i64 32)
  %.not.i.i.i247 = icmp slt i64 %107, 1
  br i1 %.not.i.i.i247, label %strconv.append_bits.exit.i249, label %if.then.i19.i.i248

if.then.i19.i.i248:                               ; preds = %switch.done11.i.i245
  %108 = getelementptr i8, ptr %a.i.i233, i64 %i.3.i.i246
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %buf.i234, ptr align 1 %108, i64 %107, i1 false), !noalias !1335
  br label %strconv.append_bits.exit.i249

strconv.append_bits.exit.i249:                    ; preds = %if.then.i19.i.i248, %switch.done11.i.i245
  store ptr %buf.i234, ptr %5, align 8, !noalias !1335
  %109 = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  store i64 %106, ptr %109, align 8, !noalias !1335
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %6, ptr nonnull align 8 %5, i64 16, i1 false), !noalias !1339
  call void @llvm.lifetime.end.p0(i64 129, ptr nonnull %a.i.i233), !noalias !1329
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5), !noalias !1329
  %.unpack.i250 = load ptr, ptr %6, align 8, !noalias !1329
  %.elt1.i251 = getelementptr inbounds %..string, ptr %6, i64 0, i32 1
  %.unpack2.i252 = load i64, ptr %.elt1.i251, align 8, !noalias !1329
  store ptr %.unpack.i250, ptr %s.i235, align 8, !noalias !1329
  %s.repack3.i253 = getelementptr inbounds %..string, ptr %s.i235, i64 0, i32 1
  store i64 %.unpack2.i252, ptr %s.repack3.i253, align 8, !noalias !1329
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !1340
  %110 = load ptr, ptr %39, align 8, !noalias !287
  %.not.i.i5.i254 = icmp eq ptr %110, null
  br i1 %.not.i.i5.i254, label %io.write_i64.exit259.thread, label %io.write_i64.exit259

io.write_i64.exit259.thread:                      ; preds = %strconv.append_bits.exit.i249
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !1340
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %buf.i234)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i235)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i31)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25), !noalias !1344
  br label %io.write_byte.exit35

io.write_i64.exit259:                             ; preds = %strconv.append_bits.exit.i249
  %111 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %112 = load ptr, ptr %111, align 8, !noalias !1347
  store i64 0, ptr %4, align 8, !noalias !1347
  %113 = call i32 %110(ptr %112, i64 4, ptr nonnull %s.i235, i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !1351
  %114 = load i64, ptr %4, align 8, !noalias !1347
  %115 = load i64, ptr %40, align 8, !noalias !1347
  %116 = add i64 %115, %114
  store i64 %116, ptr %40, align 8, !noalias !1347
  %.pre329 = load ptr, ptr %39, align 8, !noalias !1352
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !1340
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %buf.i234)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i235)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i31)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %26)
  store i8 41, ptr %buf.i31, align 1, !noalias !1344
  store ptr %buf.i31, ptr %26, align 8, !noalias !1344
  %117 = getelementptr inbounds { ptr, i64 }, ptr %26, i64 0, i32 1
  store i64 1, ptr %117, align 8, !noalias !1344
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25), !noalias !1344
  %.not.i.i32 = icmp eq ptr %.pre329, null
  br i1 %.not.i.i32, label %io.write_byte.exit35, label %if.then.i.i33

if.then.i.i33:                                    ; preds = %io.write_i64.exit259
  %118 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %119 = load ptr, ptr %118, align 8, !noalias !1352
  store i64 0, ptr %25, align 8, !noalias !1352
  %120 = call i32 %.pre329(ptr %119, i64 4, ptr nonnull %26, i64 0, i64 0, ptr nonnull %25, ptr nonnull %__.context_ptr), !noalias !1356
  %121 = load i64, ptr %25, align 8, !noalias !1352
  %122 = load i64, ptr %40, align 8, !noalias !1352
  %123 = add i64 %122, %121
  store i64 %123, ptr %40, align 8, !noalias !1352
  br label %io.write_byte.exit35

io.write_byte.exit35:                             ; preds = %io.write_i64.exit259.thread, %io.write_i64.exit259, %if.then.i.i33
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25), !noalias !1344
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i31)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %26)
  br label %common.ret

typeswitch.body1:                                 ; preds = %decls
  %124 = load ptr, ptr %1, align 8
  %125 = load i64, ptr %124, align 1
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %buf, i8 0, i64 32, i1 false)
  %spec.select = tail call i64 @llvm.abs.i64(i64 %125, i1 false)
  %126 = icmp ult i64 %spec.select, 1000000000
  %127 = getelementptr inbounds [32 x i8], ptr %buf, i64 0, i64 31
  store i8 115, ptr %127, align 1
  br i1 %126, label %if.then2, label %for.interval.body.i47.outer

if.then2:                                         ; preds = %typeswitch.body1
  %128 = icmp eq i64 %125, 0
  br i1 %128, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %if.then2
  %129 = icmp ult i64 %spec.select, 1000
  br i1 %129, label %switch.done.thread, label %switch.case.next3

switch.case.body:                                 ; preds = %if.then2
  %130 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24), !noalias !1357
  %131 = load ptr, ptr %130, align 8, !noalias !1361
  %.not.i.i36 = icmp eq ptr %131, null
  br i1 %.not.i.i36, label %io.write_string.exit40, label %if.then.i.i37

if.then.i.i37:                                    ; preds = %switch.case.body
  %132 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %133 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %134 = load ptr, ptr %133, align 8, !noalias !1361
  store i64 0, ptr %24, align 8, !noalias !1361
  %135 = call i32 %131(ptr %134, i64 4, ptr nonnull @"ggv$ca", i64 0, i64 0, ptr nonnull %24, ptr nonnull %__.context_ptr), !noalias !1365
  %136 = load i64, ptr %24, align 8, !noalias !1361
  %137 = load i64, ptr %132, align 8, !noalias !1361
  %138 = add i64 %137, %136
  store i64 %138, ptr %132, align 8, !noalias !1361
  br label %io.write_string.exit40

io.write_string.exit40:                           ; preds = %switch.case.body, %if.then.i.i37
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24), !noalias !1357
  br label %common.ret

switch.case.next3:                                ; preds = %switch.case.next
  %139 = icmp ult i64 %spec.select, 1000000
  br i1 %139, label %runtime.copy_from_string-21865.exit, label %switch.default.body

switch.done.thread:                               ; preds = %switch.case.next
  %140 = getelementptr inbounds [32 x i8], ptr %buf, i64 0, i64 30
  store i8 110, ptr %140, align 1
  br label %fmt.fmt_named.ffrac-1.exit

runtime.copy_from_string-21865.exit:              ; preds = %switch.case.next3
  %141 = getelementptr inbounds i8, ptr %buf, i64 29
  store i16 -19006, ptr %141, align 1
  br label %switch.done

switch.default.body:                              ; preds = %switch.case.next3
  %142 = getelementptr inbounds [32 x i8], ptr %buf, i64 0, i64 30
  store i8 109, ptr %142, align 1
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %runtime.copy_from_string-21865.exit
  %w.0 = phi i64 [ 29, %runtime.copy_from_string-21865.exit ], [ 30, %switch.default.body ]
  %prec.0 = phi i64 [ 3, %runtime.copy_from_string-21865.exit ], [ 6, %switch.default.body ]
  br label %for.interval.body.i.outer

for.interval.body.i.outer:                        ; preds = %switch.done, %if.done.i
  %.034.i.ph = phi i64 [ 0, %switch.done ], [ %155, %if.done.i ]
  %v.03.i.ph = phi i64 [ %spec.select, %switch.done ], [ %154, %if.done.i ]
  %w.02.i.ph = phi i64 [ %w.0, %switch.done ], [ %150, %if.done.i ]
  %print.01.i.ph = phi i1 [ false, %switch.done ], [ true, %if.done.i ]
  %143 = urem i64 %v.03.i.ph, 10
  %144 = udiv i64 %v.03.i.ph, 10
  %145 = icmp ne i64 %143, 0
  %146 = select i1 %print.01.i.ph, i1 true, i1 %145
  br i1 %146, label %if.done.i, label %if.done.i.thread.peel

if.done.i.thread.peel:                            ; preds = %for.interval.body.i.outer
  %147 = add nuw nsw i64 %.034.i.ph, 1
  %exitcond.not.i137.peel = icmp eq i64 %147, %prec.0
  br i1 %exitcond.not.i137.peel, label %fmt.fmt_named.ffrac-1.exit, label %for.interval.body.i

for.interval.body.i:                              ; preds = %if.done.i.thread.peel, %if.done.i.thread
  %.034.i = phi i64 [ %156, %if.done.i.thread ], [ %147, %if.done.i.thread.peel ]
  %v.03.i = phi i64 [ %149, %if.done.i.thread ], [ %144, %if.done.i.thread.peel ]
  %148 = urem i64 %v.03.i, 10
  %149 = udiv i64 %v.03.i, 10
  %.not197 = icmp eq i64 %148, 0
  br i1 %.not197, label %if.done.i.thread, label %if.done.i

if.done.i:                                        ; preds = %for.interval.body.i, %for.interval.body.i.outer
  %.034.i.lcssa = phi i64 [ %.034.i.ph, %for.interval.body.i.outer ], [ %.034.i, %for.interval.body.i ]
  %v.03.i.lcssa = phi i64 [ %v.03.i.ph, %for.interval.body.i.outer ], [ %v.03.i, %for.interval.body.i ]
  %.lcssa169 = phi i64 [ %143, %for.interval.body.i.outer ], [ %148, %for.interval.body.i ]
  %150 = add i64 %w.02.i.ph, -1
  %151 = getelementptr i8, ptr %buf, i64 %150
  %152 = trunc i64 %.lcssa169 to i8
  %153 = or i8 %152, 48
  store i8 %153, ptr %151, align 1, !noalias !1366
  %154 = udiv i64 %v.03.i.lcssa, 10
  %155 = add nuw nsw i64 %.034.i.lcssa, 1
  %exitcond.not.i = icmp eq i64 %155, %prec.0
  br i1 %exitcond.not.i, label %if.then1.i, label %for.interval.body.i.outer

if.done.i.thread:                                 ; preds = %for.interval.body.i
  %156 = add nuw nsw i64 %.034.i, 1
  %exitcond.not.i137 = icmp eq i64 %156, %prec.0
  br i1 %exitcond.not.i137, label %fmt.fmt_named.ffrac-1.exit, label %for.interval.body.i, !llvm.loop !1369

if.then1.i:                                       ; preds = %if.done.i
  %157 = add i64 %w.02.i.ph, -2
  %158 = getelementptr i8, ptr %buf, i64 %157
  store i8 46, ptr %158, align 1, !noalias !1366
  br label %fmt.fmt_named.ffrac-1.exit

fmt.fmt_named.ffrac-1.exit:                       ; preds = %if.done.i.thread.peel, %if.done.i.thread, %switch.done.thread, %if.then1.i
  %v.0.lcssa11.i = phi i64 [ %154, %if.then1.i ], [ %spec.select, %switch.done.thread ], [ %149, %if.done.i.thread ], [ %144, %if.done.i.thread.peel ]
  %w.2.i = phi i64 [ %157, %if.then1.i ], [ 30, %switch.done.thread ], [ %w.02.i.ph, %if.done.i.thread ], [ %w.02.i.ph, %if.done.i.thread.peel ]
  %159 = icmp eq i64 %v.0.lcssa11.i, 0
  br i1 %159, label %if.then.i46, label %for.body.i

if.then.i46:                                      ; preds = %fmt.fmt_named.ffrac-1.exit
  %160 = add i64 %w.2.i, -1
  %161 = getelementptr i8, ptr %buf, i64 %160
  store i8 48, ptr %161, align 1
  br label %if.done11

for.body.i:                                       ; preds = %fmt.fmt_named.ffrac-1.exit, %for.body.i
  %w.02.i42 = phi i64 [ %162, %for.body.i ], [ %w.2.i, %fmt.fmt_named.ffrac-1.exit ]
  %v.01.i = phi i64 [ %167, %for.body.i ], [ %v.0.lcssa11.i, %fmt.fmt_named.ffrac-1.exit ]
  %162 = add i64 %w.02.i42, -1
  %163 = getelementptr i8, ptr %buf, i64 %162
  %164 = urem i64 %v.01.i, 10
  %165 = trunc i64 %164 to i8
  %166 = or i8 %165, 48
  store i8 %166, ptr %163, align 1
  %167 = udiv i64 %v.01.i, 10
  %.not.i43 = icmp ult i64 %v.01.i, 10
  br i1 %.not.i43, label %if.done11, label %for.body.i

for.interval.body.i47.outer:                      ; preds = %typeswitch.body1, %if.done.i52
  %.034.i48.ph = phi i64 [ %180, %if.done.i52 ], [ 0, %typeswitch.body1 ]
  %v.03.i49.ph = phi i64 [ %179, %if.done.i52 ], [ %spec.select, %typeswitch.body1 ]
  %w.02.i50.ph = phi i64 [ %175, %if.done.i52 ], [ 31, %typeswitch.body1 ]
  %print.01.i51.ph = phi i1 [ true, %if.done.i52 ], [ false, %typeswitch.body1 ]
  %168 = urem i64 %v.03.i49.ph, 10
  %169 = udiv i64 %v.03.i49.ph, 10
  %170 = icmp ne i64 %168, 0
  %171 = select i1 %print.01.i51.ph, i1 true, i1 %170
  br i1 %171, label %if.done.i52, label %if.done.i52.thread.peel

if.done.i52.thread.peel:                          ; preds = %for.interval.body.i47.outer
  %172 = add nuw nsw i64 %.034.i48.ph, 1
  %exitcond.not.i54141.peel = icmp eq i64 %172, 9
  br i1 %exitcond.not.i54141.peel, label %fmt.fmt_named.ffrac-1.exit60, label %for.interval.body.i47

for.interval.body.i47:                            ; preds = %if.done.i52.thread.peel, %if.done.i52.thread
  %.034.i48 = phi i64 [ %181, %if.done.i52.thread ], [ %172, %if.done.i52.thread.peel ]
  %v.03.i49 = phi i64 [ %174, %if.done.i52.thread ], [ %169, %if.done.i52.thread.peel ]
  %173 = urem i64 %v.03.i49, 10
  %174 = udiv i64 %v.03.i49, 10
  %.not196 = icmp eq i64 %173, 0
  br i1 %.not196, label %if.done.i52.thread, label %if.done.i52

if.done.i52:                                      ; preds = %for.interval.body.i47, %for.interval.body.i47.outer
  %.034.i48.lcssa = phi i64 [ %.034.i48.ph, %for.interval.body.i47.outer ], [ %.034.i48, %for.interval.body.i47 ]
  %v.03.i49.lcssa = phi i64 [ %v.03.i49.ph, %for.interval.body.i47.outer ], [ %v.03.i49, %for.interval.body.i47 ]
  %.lcssa181 = phi i64 [ %168, %for.interval.body.i47.outer ], [ %173, %for.interval.body.i47 ]
  %175 = add i64 %w.02.i50.ph, -1
  %176 = getelementptr i8, ptr %buf, i64 %175
  %177 = trunc i64 %.lcssa181 to i8
  %178 = or i8 %177, 48
  store i8 %178, ptr %176, align 1, !noalias !1370
  %179 = udiv i64 %v.03.i49.lcssa, 10
  %180 = add nuw nsw i64 %.034.i48.lcssa, 1
  %exitcond.not.i54 = icmp eq i64 %180, 9
  br i1 %exitcond.not.i54, label %if.then1.i58, label %for.interval.body.i47.outer

if.done.i52.thread:                               ; preds = %for.interval.body.i47
  %181 = add nuw nsw i64 %.034.i48, 1
  %exitcond.not.i54141 = icmp eq i64 %181, 9
  br i1 %exitcond.not.i54141, label %fmt.fmt_named.ffrac-1.exit60, label %for.interval.body.i47, !llvm.loop !1373

if.then1.i58:                                     ; preds = %if.done.i52
  %182 = add i64 %w.02.i50.ph, -2
  %183 = getelementptr i8, ptr %buf, i64 %182
  store i8 46, ptr %183, align 1, !noalias !1370
  br label %fmt.fmt_named.ffrac-1.exit60

fmt.fmt_named.ffrac-1.exit60:                     ; preds = %if.done.i52.thread.peel, %if.done.i52.thread, %if.then1.i58
  %184 = phi i64 [ %179, %if.then1.i58 ], [ %174, %if.done.i52.thread ], [ %169, %if.done.i52.thread.peel ]
  %w.2.i57 = phi i64 [ %182, %if.then1.i58 ], [ %w.02.i50.ph, %if.done.i52.thread ], [ %w.02.i50.ph, %if.done.i52.thread.peel ]
  %185 = urem i64 %184, 60
  %186 = udiv i64 %184, 60
  %187 = icmp eq i64 %185, 0
  br i1 %187, label %if.then.i67, label %for.body.i61

if.then.i67:                                      ; preds = %fmt.fmt_named.ffrac-1.exit60
  %188 = add i64 %w.2.i57, -1
  %189 = getelementptr i8, ptr %buf, i64 %188
  store i8 48, ptr %189, align 1
  br label %fmt.fmt_named.fint-2.exit68

for.body.i61:                                     ; preds = %fmt.fmt_named.ffrac-1.exit60, %for.body.i61
  %w.02.i62 = phi i64 [ %190, %for.body.i61 ], [ %w.2.i57, %fmt.fmt_named.ffrac-1.exit60 ]
  %v.01.i63 = phi i64 [ %195, %for.body.i61 ], [ %185, %fmt.fmt_named.ffrac-1.exit60 ]
  %190 = add i64 %w.02.i62, -1
  %191 = getelementptr i8, ptr %buf, i64 %190
  %192 = urem i64 %v.01.i63, 10
  %193 = trunc i64 %192 to i8
  %194 = or i8 %193, 48
  store i8 %194, ptr %191, align 1
  %195 = udiv i64 %v.01.i63, 10
  %.not.i64 = icmp ult i64 %v.01.i63, 10
  br i1 %.not.i64, label %fmt.fmt_named.fint-2.exit68, label %for.body.i61

fmt.fmt_named.fint-2.exit68:                      ; preds = %for.body.i61, %if.then.i67
  %w.1.i66 = phi i64 [ %188, %if.then.i67 ], [ %190, %for.body.i61 ]
  %.not = icmp ult i64 %184, 60
  br i1 %.not, label %if.done11, label %if.then7

if.then7:                                         ; preds = %fmt.fmt_named.fint-2.exit68
  %196 = add i64 %w.1.i66, -1
  %197 = getelementptr [32 x i8], ptr %buf, i64 0, i64 %196
  store i8 109, ptr %197, align 1
  %198 = urem i64 %186, 60
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %if.then.i75, label %for.body.i69

if.then.i75:                                      ; preds = %if.then7
  %200 = add i64 %w.1.i66, -2
  %201 = getelementptr i8, ptr %buf, i64 %200
  store i8 48, ptr %201, align 1
  br label %fmt.fmt_named.fint-2.exit76

for.body.i69:                                     ; preds = %if.then7, %for.body.i69
  %w.02.i70 = phi i64 [ %202, %for.body.i69 ], [ %196, %if.then7 ]
  %v.01.i71 = phi i64 [ %207, %for.body.i69 ], [ %198, %if.then7 ]
  %202 = add i64 %w.02.i70, -1
  %203 = getelementptr i8, ptr %buf, i64 %202
  %204 = urem i64 %v.01.i71, 10
  %205 = trunc i64 %204 to i8
  %206 = or i8 %205, 48
  store i8 %206, ptr %203, align 1
  %207 = udiv i64 %v.01.i71, 10
  %.not.i72 = icmp ult i64 %v.01.i71, 10
  br i1 %.not.i72, label %fmt.fmt_named.fint-2.exit76, label %for.body.i69

fmt.fmt_named.fint-2.exit76:                      ; preds = %for.body.i69, %if.then.i75
  %w.1.i74 = phi i64 [ %200, %if.then.i75 ], [ %202, %for.body.i69 ]
  %.not20 = icmp ult i64 %184, 3600
  br i1 %.not20, label %if.done11, label %if.then8

if.then8:                                         ; preds = %fmt.fmt_named.fint-2.exit76
  %208 = udiv i64 %184, 3600
  %209 = add i64 %w.1.i74, -1
  %210 = getelementptr [32 x i8], ptr %buf, i64 0, i64 %209
  store i8 104, ptr %210, align 1
  br label %for.body.i77

for.body.i77:                                     ; preds = %if.then8, %for.body.i77
  %w.02.i78 = phi i64 [ %211, %for.body.i77 ], [ %209, %if.then8 ]
  %v.01.i79 = phi i64 [ %216, %for.body.i77 ], [ %208, %if.then8 ]
  %211 = add i64 %w.02.i78, -1
  %212 = getelementptr i8, ptr %buf, i64 %211
  %213 = urem i64 %v.01.i79, 10
  %214 = trunc i64 %213 to i8
  %215 = or i8 %214, 48
  store i8 %215, ptr %212, align 1
  %216 = udiv i64 %v.01.i79, 10
  %.not.i80 = icmp ult i64 %v.01.i79, 10
  br i1 %.not.i80, label %if.done11, label %for.body.i77

if.done11:                                        ; preds = %for.body.i77, %for.body.i, %if.then.i46, %fmt.fmt_named.fint-2.exit68, %fmt.fmt_named.fint-2.exit76
  %w.1 = phi i64 [ %w.1.i74, %fmt.fmt_named.fint-2.exit76 ], [ %w.1.i66, %fmt.fmt_named.fint-2.exit68 ], [ %160, %if.then.i46 ], [ %162, %for.body.i ], [ %211, %for.body.i77 ]
  %.not19 = icmp sgt i64 %125, -1
  br i1 %.not19, label %if.done13, label %if.then12

if.then12:                                        ; preds = %if.done11
  %217 = add i64 %w.1, -1
  %218 = getelementptr [32 x i8], ptr %buf, i64 0, i64 %217
  store i8 45, ptr %218, align 1
  br label %if.done13

if.done13:                                        ; preds = %if.then12, %if.done11
  %w.2 = phi i64 [ %217, %if.then12 ], [ %w.1, %if.done11 ]
  %219 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %220 = getelementptr i8, ptr %buf, i64 %w.2
  %221 = sub i64 32, %w.2
  store ptr %220, ptr %33, align 8
  %222 = getelementptr inbounds { ptr, i64 }, ptr %33, i64 0, i32 1
  store i64 %221, ptr %222, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23), !noalias !1374
  %223 = load ptr, ptr %219, align 8, !noalias !1378
  %.not.i.i85 = icmp eq ptr %223, null
  br i1 %.not.i.i85, label %io.write_string.exit89, label %if.then.i.i86

if.then.i.i86:                                    ; preds = %if.done13
  %224 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %225 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %226 = load ptr, ptr %225, align 8, !noalias !1378
  store i64 0, ptr %23, align 8, !noalias !1378
  %227 = call i32 %223(ptr %226, i64 4, ptr nonnull %33, i64 0, i64 0, ptr nonnull %23, ptr nonnull %__.context_ptr), !noalias !1382
  %228 = load i64, ptr %23, align 8, !noalias !1378
  %229 = load i64, ptr %224, align 8, !noalias !1378
  %230 = add i64 %229, %228
  store i64 %230, ptr %224, align 8, !noalias !1378
  br label %io.write_string.exit89

io.write_string.exit89:                           ; preds = %if.done13, %if.then.i.i86
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23), !noalias !1374
  br label %common.ret

typeswitch.body14:                                ; preds = %decls
  %231 = load ptr, ptr %1, align 8
  %232 = load i64, ptr %231, align 1
  %.fr = freeze i64 %232
  %233 = sdiv i64 %.fr, 1000000000
  %234 = srem i64 %.fr, 1000000000
  %235 = add i64 %233, 9223372028715321600
  %236 = udiv i64 %235, 86400
  %237 = urem i64 %235, 86400
  %238 = udiv i64 %235, 12622780800
  %239 = mul nuw nsw i64 %238, 400
  %.neg.i.i = mul nsw i64 %238, -146097
  %240 = add nsw i64 %.neg.i.i, %236
  %241 = udiv i64 %240, 36524
  %242 = lshr i64 %241, 2
  %243 = sub nsw i64 %241, %242
  %244 = mul nsw i64 %243, 100
  %.neg7.i.i = mul i64 %243, -36524
  %245 = add i64 %.neg7.i.i, %240
  %246 = udiv i64 %245, 1461
  %247 = shl nuw nsw i64 %246, 2
  %.neg8.i.i = mul i64 %246, -1461
  %248 = add i64 %.neg8.i.i, %245
  %249 = udiv i64 %248, 365
  %250 = lshr i64 %249, 2
  %251 = sub nsw i64 %249, %250
  %.neg9.i.i = mul i64 %251, -365
  %252 = add i64 %.neg9.i.i, %248
  %253 = add nsw i64 %239, -292277022399
  %254 = add nsw i64 %253, %244
  %255 = add nsw i64 %254, %247
  %256 = add nsw i64 %255, %251
  %257 = and i64 %256, 3
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %logical.cmp.rhs.i.i.i, label %if.done4.i.i

logical.cmp.rhs.i.i.i:                            ; preds = %typeswitch.body14
  %259 = srem i64 %256, 100
  %.not.i.i.i = icmp ne i64 %259, 0
  %260 = srem i64 %256, 400
  %.not.i.i90 = icmp eq i64 %260, 0
  %or.cond.i.i = or i1 %.not.i.i.i, %.not.i.i90
  br i1 %or.cond.i.i, label %if.then1.i.i, label %if.done4.i.i

if.then1.i.i:                                     ; preds = %logical.cmp.rhs.i.i.i
  %261 = icmp sgt i64 %252, 59
  br i1 %261, label %switch.case.body.i.i, label %switch.case.next.i.i

switch.case.next.i.i:                             ; preds = %if.then1.i.i
  %262 = icmp eq i64 %252, 59
  br i1 %262, label %time.date.exit, label %if.done4.i.i

switch.case.body.i.i:                             ; preds = %if.then1.i.i
  %263 = add nsw i64 %252, -1
  br label %if.done4.i.i

if.done4.i.i:                                     ; preds = %switch.case.body.i.i, %switch.case.next.i.i, %logical.cmp.rhs.i.i.i, %typeswitch.body14
  %day.0.i.i = phi i64 [ %263, %switch.case.body.i.i ], [ %252, %switch.case.next.i.i ], [ %252, %typeswitch.body14 ], [ %252, %logical.cmp.rhs.i.i.i ]
  %264 = sdiv i64 %day.0.i.i, 31
  %265 = add nsw i64 %264, 1
  %266 = getelementptr [13 x i32], ptr @time.days_before, i64 0, i64 %265
  %267 = load i32, ptr %266, align 4, !noalias !1383
  %268 = sext i32 %267 to i64
  %.not10.i.i = icmp slt i64 %day.0.i.i, %268
  br i1 %.not10.i.i, label %if.else.i.i, label %if.done4.if.done6_crit_edge.i.i

if.done4.if.done6_crit_edge.i.i:                  ; preds = %if.done4.i.i
  %.pre.i.i = add nsw i64 %264, 2
  br label %if.done6.i.i

if.else.i.i:                                      ; preds = %if.done4.i.i
  %269 = getelementptr [13 x i32], ptr @time.days_before, i64 0, i64 %264
  %270 = load i32, ptr %269, align 4, !noalias !1383
  %271 = sext i32 %270 to i64
  br label %if.done6.i.i

if.done6.i.i:                                     ; preds = %if.else.i.i, %if.done4.if.done6_crit_edge.i.i
  %.pre-phi.i.i = phi i64 [ %.pre.i.i, %if.done4.if.done6_crit_edge.i.i ], [ %265, %if.else.i.i ]
  %begin.0.i.i = phi i64 [ %268, %if.done4.if.done6_crit_edge.i.i ], [ %271, %if.else.i.i ]
  %272 = add i64 %day.0.i.i, 1
  %273 = sub i64 %272, %begin.0.i.i
  br label %time.date.exit

time.date.exit:                                   ; preds = %switch.case.next.i.i, %if.done6.i.i
  %storemerge11.i.i = phi i64 [ %.pre-phi.i.i, %if.done6.i.i ], [ 2, %switch.case.next.i.i ]
  %storemerge.i.i = phi i64 [ %273, %if.done6.i.i ], [ 29, %switch.case.next.i.i ]
  %.lhs.trunc.i.i = trunc i64 %237 to i32
  %274 = udiv i32 %.lhs.trunc.i.i, 3600
  %.zext.i.i = zext i32 %274 to i64
  %.neg.i.i91 = mul nsw i64 %.zext.i.i, -3600
  %275 = add nsw i64 %.neg.i.i91, %237
  %.lhs.trunc2.i.i = trunc i64 %275 to i32
  %276 = sdiv i32 %.lhs.trunc2.i.i, 60
  %.sext.i.i = sext i32 %276 to i64
  %.neg1.i.i = mul nsw i64 %.sext.i.i, -60
  %277 = add nsw i64 %.neg1.i.i, %275
  %278 = add nsw i64 %234, 8139454208000000000
  %279 = urem i64 %278, 1000000000
  tail call fastcc void @fmt.fmt_named.write_padded_number-0(ptr %0, i64 %256, i64 4, ptr %__.context_ptr)
  %280 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %281 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i92)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22)
  store i8 45, ptr %buf.i92, align 1, !noalias !1391
  store ptr %buf.i92, ptr %22, align 8, !noalias !1391
  %282 = getelementptr inbounds { ptr, i64 }, ptr %22, i64 0, i32 1
  store i64 1, ptr %282, align 8, !noalias !1391
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21), !noalias !1391
  %283 = load ptr, ptr %280, align 8, !noalias !1394
  %.not.i.i93 = icmp eq ptr %283, null
  br i1 %.not.i.i93, label %io.write_byte.exit97, label %if.then.i.i94

if.then.i.i94:                                    ; preds = %time.date.exit
  %284 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %285 = load ptr, ptr %284, align 8, !noalias !1394
  store i64 0, ptr %21, align 8, !noalias !1394
  %286 = call i32 %283(ptr %285, i64 4, ptr nonnull %22, i64 0, i64 0, ptr nonnull %21, ptr nonnull %__.context_ptr), !noalias !1398
  %287 = load i64, ptr %21, align 8, !noalias !1394
  %288 = load i64, ptr %281, align 8, !noalias !1394
  %289 = add i64 %288, %287
  store i64 %289, ptr %281, align 8, !noalias !1394
  br label %io.write_byte.exit97

io.write_byte.exit97:                             ; preds = %time.date.exit, %if.then.i.i94
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21), !noalias !1391
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i92)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22)
  call fastcc void @fmt.fmt_named.write_padded_number-0(ptr nonnull %0, i64 %storemerge11.i.i, i64 2, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i98)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %20)
  store i8 45, ptr %buf.i98, align 1, !noalias !1399
  store ptr %buf.i98, ptr %20, align 8, !noalias !1399
  %290 = getelementptr inbounds { ptr, i64 }, ptr %20, i64 0, i32 1
  store i64 1, ptr %290, align 8, !noalias !1399
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19), !noalias !1399
  %291 = load ptr, ptr %280, align 8, !noalias !1402
  %.not.i.i99 = icmp eq ptr %291, null
  br i1 %.not.i.i99, label %io.write_byte.exit103, label %if.then.i.i100

if.then.i.i100:                                   ; preds = %io.write_byte.exit97
  %292 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %293 = load ptr, ptr %292, align 8, !noalias !1402
  store i64 0, ptr %19, align 8, !noalias !1402
  %294 = call i32 %291(ptr %293, i64 4, ptr nonnull %20, i64 0, i64 0, ptr nonnull %19, ptr nonnull %__.context_ptr), !noalias !1406
  %295 = load i64, ptr %19, align 8, !noalias !1402
  %296 = load i64, ptr %281, align 8, !noalias !1402
  %297 = add i64 %296, %295
  store i64 %297, ptr %281, align 8, !noalias !1402
  br label %io.write_byte.exit103

io.write_byte.exit103:                            ; preds = %io.write_byte.exit97, %if.then.i.i100
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19), !noalias !1399
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i98)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %20)
  call fastcc void @fmt.fmt_named.write_padded_number-0(ptr nonnull %0, i64 %storemerge.i.i, i64 2, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i104)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %18)
  store i8 32, ptr %buf.i104, align 1, !noalias !1407
  store ptr %buf.i104, ptr %18, align 8, !noalias !1407
  %298 = getelementptr inbounds { ptr, i64 }, ptr %18, i64 0, i32 1
  store i64 1, ptr %298, align 8, !noalias !1407
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17), !noalias !1407
  %299 = load ptr, ptr %280, align 8, !noalias !1410
  %.not.i.i105 = icmp eq ptr %299, null
  br i1 %.not.i.i105, label %io.write_byte.exit109, label %if.then.i.i106

if.then.i.i106:                                   ; preds = %io.write_byte.exit103
  %300 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %301 = load ptr, ptr %300, align 8, !noalias !1410
  store i64 0, ptr %17, align 8, !noalias !1410
  %302 = call i32 %299(ptr %301, i64 4, ptr nonnull %18, i64 0, i64 0, ptr nonnull %17, ptr nonnull %__.context_ptr), !noalias !1414
  %303 = load i64, ptr %17, align 8, !noalias !1410
  %304 = load i64, ptr %281, align 8, !noalias !1410
  %305 = add i64 %304, %303
  store i64 %305, ptr %281, align 8, !noalias !1410
  br label %io.write_byte.exit109

io.write_byte.exit109:                            ; preds = %io.write_byte.exit103, %if.then.i.i106
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17), !noalias !1407
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i104)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %18)
  call fastcc void @fmt.fmt_named.write_padded_number-0(ptr nonnull %0, i64 %.zext.i.i, i64 2, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i110)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %16)
  store i8 58, ptr %buf.i110, align 1, !noalias !1415
  store ptr %buf.i110, ptr %16, align 8, !noalias !1415
  %306 = getelementptr inbounds { ptr, i64 }, ptr %16, i64 0, i32 1
  store i64 1, ptr %306, align 8, !noalias !1415
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15), !noalias !1415
  %307 = load ptr, ptr %280, align 8, !noalias !1418
  %.not.i.i111 = icmp eq ptr %307, null
  br i1 %.not.i.i111, label %io.write_byte.exit115, label %if.then.i.i112

if.then.i.i112:                                   ; preds = %io.write_byte.exit109
  %308 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %309 = load ptr, ptr %308, align 8, !noalias !1418
  store i64 0, ptr %15, align 8, !noalias !1418
  %310 = call i32 %307(ptr %309, i64 4, ptr nonnull %16, i64 0, i64 0, ptr nonnull %15, ptr nonnull %__.context_ptr), !noalias !1422
  %311 = load i64, ptr %15, align 8, !noalias !1418
  %312 = load i64, ptr %281, align 8, !noalias !1418
  %313 = add i64 %312, %311
  store i64 %313, ptr %281, align 8, !noalias !1418
  br label %io.write_byte.exit115

io.write_byte.exit115:                            ; preds = %io.write_byte.exit109, %if.then.i.i112
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15), !noalias !1415
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i110)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %16)
  call fastcc void @fmt.fmt_named.write_padded_number-0(ptr nonnull %0, i64 %.sext.i.i, i64 2, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i116)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14)
  store i8 58, ptr %buf.i116, align 1, !noalias !1423
  store ptr %buf.i116, ptr %14, align 8, !noalias !1423
  %314 = getelementptr inbounds { ptr, i64 }, ptr %14, i64 0, i32 1
  store i64 1, ptr %314, align 8, !noalias !1423
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13), !noalias !1423
  %315 = load ptr, ptr %280, align 8, !noalias !1426
  %.not.i.i117 = icmp eq ptr %315, null
  br i1 %.not.i.i117, label %io.write_byte.exit121, label %if.then.i.i118

if.then.i.i118:                                   ; preds = %io.write_byte.exit115
  %316 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %317 = load ptr, ptr %316, align 8, !noalias !1426
  store i64 0, ptr %13, align 8, !noalias !1426
  %318 = call i32 %315(ptr %317, i64 4, ptr nonnull %14, i64 0, i64 0, ptr nonnull %13, ptr nonnull %__.context_ptr), !noalias !1430
  %319 = load i64, ptr %13, align 8, !noalias !1426
  %320 = load i64, ptr %281, align 8, !noalias !1426
  %321 = add i64 %320, %319
  store i64 %321, ptr %281, align 8, !noalias !1426
  br label %io.write_byte.exit121

io.write_byte.exit121:                            ; preds = %io.write_byte.exit115, %if.then.i.i118
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !1423
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i116)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14)
  call fastcc void @fmt.fmt_named.write_padded_number-0(ptr nonnull %0, i64 %277, i64 2, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i122)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %12)
  store i8 46, ptr %buf.i122, align 1, !noalias !1431
  store ptr %buf.i122, ptr %12, align 8, !noalias !1431
  %322 = getelementptr inbounds { ptr, i64 }, ptr %12, i64 0, i32 1
  store i64 1, ptr %322, align 8, !noalias !1431
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11), !noalias !1431
  %323 = load ptr, ptr %280, align 8, !noalias !1434
  %.not.i.i123 = icmp eq ptr %323, null
  br i1 %.not.i.i123, label %io.write_byte.exit127, label %if.then.i.i124

if.then.i.i124:                                   ; preds = %io.write_byte.exit121
  %324 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %325 = load ptr, ptr %324, align 8, !noalias !1434
  store i64 0, ptr %11, align 8, !noalias !1434
  %326 = call i32 %323(ptr %325, i64 4, ptr nonnull %12, i64 0, i64 0, ptr nonnull %11, ptr nonnull %__.context_ptr), !noalias !1438
  %327 = load i64, ptr %11, align 8, !noalias !1434
  %328 = load i64, ptr %281, align 8, !noalias !1434
  %329 = add i64 %328, %327
  store i64 %329, ptr %281, align 8, !noalias !1434
  br label %io.write_byte.exit127

io.write_byte.exit127:                            ; preds = %io.write_byte.exit121, %if.then.i.i124
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !1431
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i122)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %12)
  call fastcc void @fmt.fmt_named.write_padded_number-0(ptr nonnull %0, i64 %279, i64 9, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !1439
  %330 = load ptr, ptr %280, align 8, !noalias !1443
  %.not.i.i128 = icmp eq ptr %330, null
  br i1 %.not.i.i128, label %io.write_string.exit133, label %if.then.i.i129

if.then.i.i129:                                   ; preds = %io.write_byte.exit127
  %331 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %332 = load ptr, ptr %331, align 8, !noalias !1443
  store i64 0, ptr %10, align 8, !noalias !1443
  %333 = call i32 %330(ptr %332, i64 4, ptr nonnull @"ggv$cc", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !1447
  %334 = load i64, ptr %10, align 8, !noalias !1443
  %335 = load i64, ptr %281, align 8, !noalias !1443
  %336 = add i64 %335, %334
  store i64 %336, ptr %281, align 8, !noalias !1443
  br label %io.write_string.exit133

io.write_string.exit133:                          ; preds = %io.write_byte.exit127, %if.then.i.i129
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !1439
  br label %common.ret

typeswitch.done:                                  ; preds = %decls
  %337 = getelementptr inbounds %runtime.Type_Info_Named, ptr %3, i64 0, i32 1
  %338 = load ptr, ptr %337, align 8
  %339 = getelementptr inbounds %runtime.Type_Info, ptr %338, i64 0, i32 5, i32 1
  %340 = load i64, ptr %339, align 8
  switch i64 %340, label %typeswitch.default.body [
    i64 19, label %typeswitch.body15
    i64 23, label %typeswitch.body16
  ]

typeswitch.body15:                                ; preds = %typeswitch.done
  %341 = getelementptr inbounds %runtime.Type_Info, ptr %338, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %34, ptr noundef nonnull align 1 dereferenceable(120) %341, i64 120, i1 false)
  call fastcc void @fmt.fmt_struct(ptr %0, ptr nonnull %1, i32 %2, ptr nonnull %34, ptr nonnull %3, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body16:                                ; preds = %typeswitch.done
  tail call fastcc void @fmt.fmt_bit_set(ptr %0, ptr nonnull %1, ptr nonnull @"ggv$e9", i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.default.body:                          ; preds = %typeswitch.done
  %.repack21 = getelementptr inbounds %..any, ptr %35, i64 0, i32 1
  %342 = load ptr, ptr %1, align 8
  store ptr %342, ptr %35, align 8
  %343 = getelementptr inbounds %runtime.Type_Info, ptr %338, i64 0, i32 4
  %344 = load i64, ptr %343, align 8
  store i64 %344, ptr %.repack21, align 8
  call fastcc void @fmt.fmt_value(ptr %0, ptr nonnull %35, i32 %2, ptr %__.context_ptr)
  br label %common.ret
}

define internal fastcc void @fmt.fmt_union(ptr %0, ptr nocapture readonly %1, i32 %2, ptr nocapture readonly %3, i64 %4, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca [80 x i8], align 8
  %9 = alloca i64, align 8
  %10 = alloca %..any, align 8
  %11 = alloca %..any, align 8
  %12 = alloca %..any, align 8
  %13 = icmp eq i64 %4, 0
  br i1 %13, label %if.then, label %if.done

common.ret:                                       ; preds = %io.write_string.exit41, %io.write_string.exit46, %if.else18, %if.then14, %io.write_string.exit36, %if.else, %io.write_string.exit
  ret void

if.then:                                          ; preds = %decls
  %14 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !1448
  %15 = load ptr, ptr %14, align 8, !noalias !1452
  %.not.i.i = icmp eq ptr %15, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then
  %16 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %17 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %18 = load ptr, ptr %17, align 8, !noalias !1452
  store i64 0, ptr %9, align 8, !noalias !1452
  %19 = call i32 %15(ptr %18, i64 4, ptr nonnull @"ggv$10c", i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !1456
  %20 = load i64, ptr %9, align 8, !noalias !1452
  %21 = load i64, ptr %16, align 8, !noalias !1452
  %22 = add i64 %21, %20
  store i64 %22, ptr %16, align 8, !noalias !1452
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !1448
  br label %common.ret

if.done:                                          ; preds = %decls
  %23 = getelementptr inbounds { ptr, i64 }, ptr %3, i64 0, i32 1
  %24 = load i64, ptr %23, align 8
  %25 = icmp eq i64 %24, 1
  br i1 %25, label %logical.cmp.rhs.i, label %if.done4

logical.cmp.rhs.i:                                ; preds = %if.done
  %26 = load ptr, ptr %3, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = icmp eq ptr %27, null
  br i1 %28, label %if.done4, label %for.body.preheader.i.i.i

for.body.preheader.i.i.i:                         ; preds = %logical.cmp.rhs.i
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %8)
  %29 = getelementptr inbounds %runtime.Type_Info, ptr %27, i64 0, i32 5, i32 1
  %30 = load i64, ptr %29, align 8
  %cond1.i.i.i = icmp eq i64 %30, 1
  br i1 %cond1.i.i.i, label %typeswitch.body.lr.ph.i.i.i, label %reflect.type_info_union_is_pure_maybe.exit

typeswitch.body.lr.ph.i.i.i:                      ; preds = %for.body.preheader.i.i.i
  %31 = getelementptr inbounds %runtime.Type_Info_Named, ptr %8, i64 0, i32 1
  br label %typeswitch.body.i.i.i

typeswitch.body.i.i.i:                            ; preds = %typeswitch.body.i.i.i, %typeswitch.body.lr.ph.i.i.i
  %base.02.i.i.i = phi ptr [ %27, %typeswitch.body.lr.ph.i.i.i ], [ %33, %typeswitch.body.i.i.i ]
  %32 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %8, ptr noundef nonnull align 1 dereferenceable(80) %32, i64 80, i1 false)
  %33 = load ptr, ptr %31, align 8
  %34 = getelementptr inbounds %runtime.Type_Info, ptr %33, i64 0, i32 5, i32 1
  %35 = load i64, ptr %34, align 8
  %cond.i.i.i = icmp eq i64 %35, 1
  br i1 %cond.i.i.i, label %typeswitch.body.i.i.i, label %reflect.type_info_union_is_pure_maybe.exit

reflect.type_info_union_is_pure_maybe.exit:       ; preds = %typeswitch.body.i.i.i, %for.body.preheader.i.i.i
  %36 = phi i64 [ %30, %for.body.preheader.i.i.i ], [ %35, %typeswitch.body.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %8)
  %.not = icmp eq i64 %36, 11
  br i1 %.not, label %if.then1, label %if.done4

if.then1:                                         ; preds = %reflect.type_info_union_is_pure_maybe.exit
  %37 = load ptr, ptr %1, align 8
  %38 = icmp eq ptr %37, null
  br i1 %38, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then1
  %39 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !1457
  %40 = load ptr, ptr %39, align 8, !noalias !1461
  %.not.i.i32 = icmp eq ptr %40, null
  br i1 %.not.i.i32, label %io.write_string.exit36, label %if.then.i.i33

if.then.i.i33:                                    ; preds = %if.then2
  %41 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %42 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %43 = load ptr, ptr %42, align 8, !noalias !1461
  store i64 0, ptr %7, align 8, !noalias !1461
  %44 = call i32 %40(ptr %43, i64 4, ptr nonnull @"ggv$10c", i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !1465
  %45 = load i64, ptr %7, align 8, !noalias !1461
  %46 = load i64, ptr %41, align 8, !noalias !1461
  %47 = add i64 %46, %45
  store i64 %47, ptr %41, align 8, !noalias !1461
  br label %io.write_string.exit36

io.write_string.exit36:                           ; preds = %if.then2, %if.then.i.i33
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !1457
  br label %common.ret

if.else:                                          ; preds = %if.then1
  %48 = getelementptr inbounds %runtime.Type_Info, ptr %27, i64 0, i32 4
  %49 = load i64, ptr %48, align 8
  %.repack31 = getelementptr inbounds %..any, ptr %10, i64 0, i32 1
  store ptr %37, ptr %10, align 8
  store i64 %49, ptr %.repack31, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %10, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.done4:                                         ; preds = %logical.cmp.rhs.i, %if.done, %reflect.type_info_union_is_pure_maybe.exit
  %50 = load ptr, ptr %1, align 8
  %51 = ptrtoint ptr %50 to i64
  %52 = getelementptr inbounds %runtime.Type_Info_Union, ptr %3, i64 0, i32 1
  %53 = load i64, ptr %52, align 8
  %54 = add i64 %53, %51
  %55 = inttoptr i64 %54 to ptr
  %56 = getelementptr inbounds %runtime.Type_Info_Union, ptr %3, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr inbounds %runtime.Type_Info, ptr %57, i64 0, i32 4
  %59 = load i64, ptr %58, align 8
  switch i64 %59, label %typeswitch.default.body [
    i64 72057594037927945, label %typeswitch.body
    i64 4683743612465315978, label %typeswitch.body5
    i64 72057594037928041, label %typeswitch.body6
    i64 4683743612465315972, label %typeswitch.body7
    i64 72057594037927955, label %typeswitch.body8
    i64 4683743612465315867, label %typeswitch.body9
    i64 72057594037927943, label %typeswitch.body10
    i64 4683743612465315896, label %typeswitch.body11
  ]

typeswitch.body:                                  ; preds = %if.done4
  %60 = load i8, ptr %55, align 1
  %61 = zext i8 %60 to i64
  br label %typeswitch.done

typeswitch.body5:                                 ; preds = %if.done4
  %62 = load i8, ptr %55, align 1
  %63 = sext i8 %62 to i64
  br label %typeswitch.done

typeswitch.body6:                                 ; preds = %if.done4
  %64 = load i16, ptr %55, align 1
  %65 = zext i16 %64 to i64
  br label %typeswitch.done

typeswitch.body7:                                 ; preds = %if.done4
  %66 = load i16, ptr %55, align 1
  %67 = sext i16 %66 to i64
  br label %typeswitch.done

typeswitch.body8:                                 ; preds = %if.done4
  %68 = load i32, ptr %55, align 1
  %69 = zext i32 %68 to i64
  br label %typeswitch.done

typeswitch.body9:                                 ; preds = %if.done4
  %70 = load i32, ptr %55, align 1
  %71 = sext i32 %70 to i64
  br label %typeswitch.done

typeswitch.body10:                                ; preds = %if.done4
  %72 = load i64, ptr %55, align 1
  br label %typeswitch.done

typeswitch.body11:                                ; preds = %if.done4
  %73 = load i64, ptr %55, align 1
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %if.done4
  %74 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %75 = load ptr, ptr %74, align 8, !alias.scope !1466
  %76 = icmp eq ptr %75, null
  %spec.store.select.i = select i1 %76, ptr @runtime.default_assertion_failure_proc, ptr %75
  tail call void %spec.store.select.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$d1", ptr nonnull @"ggv$d0", ptr nonnull %__.context_ptr)
  unreachable

typeswitch.done:                                  ; preds = %typeswitch.body11, %typeswitch.body10, %typeswitch.body9, %typeswitch.body8, %typeswitch.body7, %typeswitch.body6, %typeswitch.body5, %typeswitch.body
  %tag.0 = phi i64 [ %73, %typeswitch.body11 ], [ %72, %typeswitch.body10 ], [ %71, %typeswitch.body9 ], [ %69, %typeswitch.body8 ], [ %67, %typeswitch.body7 ], [ %65, %typeswitch.body6 ], [ %63, %typeswitch.body5 ], [ %61, %typeswitch.body ]
  %77 = icmp eq ptr %50, null
  br i1 %77, label %if.then12, label %if.else13

if.then12:                                        ; preds = %typeswitch.done
  %78 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !1469
  %79 = load ptr, ptr %78, align 8, !noalias !1473
  %.not.i.i37 = icmp eq ptr %79, null
  br i1 %.not.i.i37, label %io.write_string.exit41, label %if.then.i.i38

if.then.i.i38:                                    ; preds = %if.then12
  %80 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %81 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %82 = load ptr, ptr %81, align 8, !noalias !1473
  store i64 0, ptr %6, align 8, !noalias !1473
  %83 = call i32 %79(ptr %82, i64 4, ptr nonnull @"ggv$10c", i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !1477
  %84 = load i64, ptr %6, align 8, !noalias !1473
  %85 = load i64, ptr %80, align 8, !noalias !1473
  %86 = add i64 %85, %84
  store i64 %86, ptr %80, align 8, !noalias !1473
  br label %io.write_string.exit41

io.write_string.exit41:                           ; preds = %if.then12, %if.then.i.i38
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !1469
  br label %common.ret

if.else13:                                        ; preds = %typeswitch.done
  %87 = getelementptr inbounds %runtime.Type_Info_Union, ptr %3, i64 0, i32 5
  %88 = load i8, ptr %87, align 1
  %.not28 = icmp eq i8 %88, 0
  br i1 %.not28, label %if.else16, label %if.then14

if.then14:                                        ; preds = %if.else13
  %89 = load ptr, ptr %3, align 8
  %90 = getelementptr ptr, ptr %89, i64 %tag.0
  %91 = load ptr, ptr %90, align 8
  %92 = getelementptr inbounds %runtime.Type_Info, ptr %91, i64 0, i32 4
  %93 = load i64, ptr %92, align 8
  %.repack30 = getelementptr inbounds %..any, ptr %11, i64 0, i32 1
  store ptr %50, ptr %11, align 8
  store i64 %93, ptr %.repack30, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %11, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.else16:                                        ; preds = %if.else13
  %94 = icmp eq i64 %tag.0, 0
  br i1 %94, label %if.then17, label %if.else18

if.then17:                                        ; preds = %if.else16
  %95 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !1478
  %96 = load ptr, ptr %95, align 8, !noalias !1482
  %.not.i.i42 = icmp eq ptr %96, null
  br i1 %.not.i.i42, label %io.write_string.exit46, label %if.then.i.i43

if.then.i.i43:                                    ; preds = %if.then17
  %97 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %98 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %99 = load ptr, ptr %98, align 8, !noalias !1482
  store i64 0, ptr %5, align 8, !noalias !1482
  %100 = call i32 %96(ptr %99, i64 4, ptr nonnull @"ggv$10c", i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !1486
  %101 = load i64, ptr %5, align 8, !noalias !1482
  %102 = load i64, ptr %97, align 8, !noalias !1482
  %103 = add i64 %102, %101
  store i64 %103, ptr %97, align 8, !noalias !1482
  br label %io.write_string.exit46

io.write_string.exit46:                           ; preds = %if.then17, %if.then.i.i43
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !1478
  br label %common.ret

if.else18:                                        ; preds = %if.else16
  %104 = load ptr, ptr %3, align 8
  %105 = add i64 %tag.0, -1
  %106 = getelementptr ptr, ptr %104, i64 %105
  %107 = load ptr, ptr %106, align 8
  %108 = getelementptr inbounds %runtime.Type_Info, ptr %107, i64 0, i32 4
  %109 = load i64, ptr %108, align 8
  %.repack29 = getelementptr inbounds %..any, ptr %12, i64 0, i32 1
  store ptr %50, ptr %12, align 8
  store i64 %109, ptr %.repack29, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %12, i32 %2, ptr %__.context_ptr)
  br label %common.ret
}

define internal fastcc void @fmt.fmt_matrix(ptr %0, ptr nocapture readonly %1, i32 %2, ptr nocapture readonly %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %buf.i73 = alloca [1 x i8], align 1
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca i64, align 8
  %buf.i.i61 = alloca [1 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %15 = alloca { ptr, i64 }, align 8
  %16 = alloca i64, align 8
  %17 = alloca %..any, align 8
  %18 = alloca %..any, align 8
  %19 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %20 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16), !noalias !1487
  %21 = load ptr, ptr %19, align 8, !noalias !287
  %.not.i.i = icmp eq ptr %21, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %decls
  %22 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %23 = load ptr, ptr %22, align 8, !noalias !1491
  store i64 0, ptr %16, align 8, !noalias !1491
  %24 = call i32 %21(ptr %23, i64 4, ptr nonnull @"ggv$14f", i64 0, i64 0, ptr nonnull %16, ptr nonnull %__.context_ptr), !noalias !1495
  %25 = load i64, ptr %16, align 8, !noalias !1491
  %26 = load i64, ptr %20, align 8, !noalias !1491
  %27 = add i64 %26, %25
  store i64 %27, ptr %20, align 8, !noalias !1491
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %decls, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16), !noalias !1487
  %28 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 10
  %29 = load i64, ptr %28, align 8
  %30 = add i64 %29, 1
  store i64 %30, ptr %28, align 8
  %31 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  %32 = load i8, ptr %31, align 1
  %.not = icmp eq i8 %32, 0
  br i1 %.not, label %for.interval.loop9.preheader, label %if.then

for.interval.loop9.preheader:                     ; preds = %io.write_string.exit
  %33 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %3, i64 0, i32 3
  %34 = load i64, ptr %33, align 8
  %35 = icmp sgt i64 %34, 0
  br i1 %35, label %for.interval.body10.lr.ph, label %if.done26

for.interval.body10.lr.ph:                        ; preds = %for.interval.loop9.preheader
  %36 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %37 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %3, i64 0, i32 4
  %38 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %3, i64 0, i32 2
  %39 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %3, i64 0, i32 1
  %.repack36 = getelementptr inbounds %..any, ptr %18, i64 0, i32 1
  br label %for.interval.body10

if.then:                                          ; preds = %io.write_string.exit
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %15)
  store i8 10, ptr %buf.i, align 1, !noalias !1496
  store ptr %buf.i, ptr %15, align 8, !noalias !1496
  %40 = getelementptr inbounds { ptr, i64 }, ptr %15, i64 0, i32 1
  store i64 1, ptr %40, align 8, !noalias !1496
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14), !noalias !1496
  %41 = load ptr, ptr %19, align 8, !noalias !287
  %.not.i.i38 = icmp eq ptr %41, null
  br i1 %.not.i.i38, label %io.write_byte.exit, label %if.then.i.i39

if.then.i.i39:                                    ; preds = %if.then
  %42 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %43 = load ptr, ptr %42, align 8, !noalias !1499
  store i64 0, ptr %14, align 8, !noalias !1499
  %44 = call i32 %41(ptr %43, i64 4, ptr nonnull %15, i64 0, i64 0, ptr nonnull %14, ptr nonnull %__.context_ptr), !noalias !1503
  %45 = load i64, ptr %14, align 8, !noalias !1499
  %46 = load i64, ptr %20, align 8, !noalias !1499
  %47 = add i64 %46, %45
  store i64 %47, ptr %20, align 8, !noalias !1499
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %if.then, %if.then.i.i39
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !1496
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15)
  %48 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %3, i64 0, i32 3
  %49 = load i64, ptr %48, align 8
  %50 = icmp sgt i64 %49, 0
  br i1 %50, label %for.interval.body.lr.ph, label %if.done26

for.interval.body.lr.ph:                          ; preds = %io.write_byte.exit
  %51 = getelementptr inbounds { ptr, i64 }, ptr %13, i64 0, i32 1
  %52 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %53 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %3, i64 0, i32 4
  %54 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %3, i64 0, i32 2
  %55 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %3, i64 0, i32 1
  %.repack37 = getelementptr inbounds %..any, ptr %17, i64 0, i32 1
  br label %for.interval.body

for.interval.body:                                ; preds = %for.interval.body.lr.ph, %io.write_string.exit50
  %row.084 = phi i64 [ 0, %for.interval.body.lr.ph ], [ %110, %io.write_string.exit50 ]
  %56 = load i64, ptr %28, align 8, !noalias !1504
  %57 = icmp sgt i64 %56, 0
  br i1 %57, label %for.interval.body.lr.ph.i, label %fmt.fmt_write_indent.exit

for.interval.body.lr.ph.i:                        ; preds = %for.interval.body
  %58 = load ptr, ptr %19, align 8, !noalias !1507
  %59 = icmp eq ptr %58, null
  br i1 %59, label %fmt.fmt_write_indent.exit, label %for.interval.body.i

for.interval.body.i:                              ; preds = %for.interval.body.lr.ph.i, %io.write_byte.exit.i
  %60 = phi i64 [ %67, %io.write_byte.exit.i ], [ %56, %for.interval.body.lr.ph.i ]
  %.012.i = phi i64 [ %68, %io.write_byte.exit.i ], [ 0, %for.interval.body.lr.ph.i ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1504
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13), !noalias !1504
  store i8 9, ptr %buf.i.i, align 1, !noalias !1513
  store ptr %buf.i.i, ptr %13, align 8, !noalias !1513
  store i64 1, ptr %51, align 8, !noalias !1513
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !1513
  %61 = load ptr, ptr %19, align 8, !noalias !1507
  %.not.i.i.i = icmp eq ptr %61, null
  br i1 %.not.i.i.i, label %io.write_byte.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.interval.body.i
  %62 = load ptr, ptr %52, align 8, !noalias !1507
  store i64 0, ptr %12, align 8, !noalias !1507
  %63 = call i32 %61(ptr %62, i64 4, ptr nonnull %13, i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !1514
  %64 = load i64, ptr %12, align 8, !noalias !1507
  %65 = load i64, ptr %20, align 8, !noalias !1507
  %66 = add i64 %65, %64
  store i64 %66, ptr %20, align 8, !noalias !1507
  %.pre.i = load i64, ptr %28, align 8, !noalias !1504
  br label %io.write_byte.exit.i

io.write_byte.exit.i:                             ; preds = %if.then.i.i.i, %for.interval.body.i
  %67 = phi i64 [ %60, %for.interval.body.i ], [ %.pre.i, %if.then.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !1513
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1504
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13), !noalias !1504
  %68 = add nuw nsw i64 %.012.i, 1
  %69 = icmp slt i64 %68, %67
  br i1 %69, label %for.interval.body.i, label %fmt.fmt_write_indent.exit, !llvm.loop !901

fmt.fmt_write_indent.exit:                        ; preds = %io.write_byte.exit.i, %for.interval.body.lr.ph.i, %for.interval.body
  %70 = load i64, ptr %53, align 8
  %71 = icmp sgt i64 %70, 0
  br i1 %71, label %if.done.peel, label %for.interval.done

if.done.peel:                                     ; preds = %fmt.fmt_write_indent.exit
  %72 = load i64, ptr %55, align 8
  %73 = mul i64 %row.084, %72
  %74 = load ptr, ptr %1, align 8
  %75 = ptrtoint ptr %74 to i64
  %76 = add i64 %73, %75
  %77 = inttoptr i64 %76 to ptr
  store ptr %77, ptr %17, align 8
  %78 = load ptr, ptr %3, align 8
  %79 = getelementptr inbounds %runtime.Type_Info, ptr %78, i64 0, i32 4
  %80 = load i64, ptr %79, align 8
  store i64 %80, ptr %.repack37, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %17, i32 %2, ptr %__.context_ptr)
  %81 = load i64, ptr %53, align 8
  %82 = icmp sgt i64 %81, 1
  br i1 %82, label %if.then5, label %for.interval.done

if.then5:                                         ; preds = %if.done.peel, %if.done
  %col.083 = phi i64 [ %101, %if.done ], [ 1, %if.done.peel ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11), !noalias !1515
  %83 = load ptr, ptr %19, align 8, !noalias !1519
  %.not.i.i41 = icmp eq ptr %83, null
  br i1 %.not.i.i41, label %if.done, label %if.then.i.i42

if.then.i.i42:                                    ; preds = %if.then5
  %84 = load ptr, ptr %52, align 8, !noalias !1519
  store i64 0, ptr %11, align 8, !noalias !1519
  %85 = call i32 %83(ptr %84, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %11, ptr nonnull %__.context_ptr), !noalias !1523
  %86 = load i64, ptr %11, align 8, !noalias !1519
  %87 = load i64, ptr %20, align 8, !noalias !1519
  %88 = add i64 %87, %86
  store i64 %88, ptr %20, align 8, !noalias !1519
  br label %if.done

if.done:                                          ; preds = %if.then.i.i42, %if.then5
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !1515
  %89 = load i64, ptr %54, align 8
  %90 = mul i64 %89, %col.083
  %91 = add i64 %90, %row.084
  %92 = load i64, ptr %55, align 8
  %93 = mul i64 %91, %92
  %94 = load ptr, ptr %1, align 8
  %95 = ptrtoint ptr %94 to i64
  %96 = add i64 %93, %95
  %97 = inttoptr i64 %96 to ptr
  store ptr %97, ptr %17, align 8
  %98 = load ptr, ptr %3, align 8
  %99 = getelementptr inbounds %runtime.Type_Info, ptr %98, i64 0, i32 4
  %100 = load i64, ptr %99, align 8
  store i64 %100, ptr %.repack37, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %17, i32 %2, ptr %__.context_ptr)
  %101 = add nuw nsw i64 %col.083, 1
  %102 = load i64, ptr %53, align 8
  %103 = icmp slt i64 %101, %102
  br i1 %103, label %if.then5, label %for.interval.done, !llvm.loop !1524

for.interval.done:                                ; preds = %if.done, %if.done.peel, %fmt.fmt_write_indent.exit
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !1525
  %104 = load ptr, ptr %19, align 8, !noalias !287
  %.not.i.i46 = icmp eq ptr %104, null
  br i1 %.not.i.i46, label %io.write_string.exit50, label %if.then.i.i47

if.then.i.i47:                                    ; preds = %for.interval.done
  %105 = load ptr, ptr %52, align 8, !noalias !1529
  store i64 0, ptr %10, align 8, !noalias !1529
  %106 = call i32 %104(ptr %105, i64 4, ptr nonnull @"ggv$df", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !1533
  %107 = load i64, ptr %10, align 8, !noalias !1529
  %108 = load i64, ptr %20, align 8, !noalias !1529
  %109 = add i64 %108, %107
  store i64 %109, ptr %20, align 8, !noalias !1529
  br label %io.write_string.exit50

io.write_string.exit50:                           ; preds = %for.interval.done, %if.then.i.i47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !1525
  %110 = add nuw nsw i64 %row.084, 1
  %111 = load i64, ptr %48, align 8
  %112 = icmp slt i64 %110, %111
  br i1 %112, label %for.interval.body, label %if.done26

for.interval.body10:                              ; preds = %for.interval.body10.lr.ph, %for.interval.post24
  %row8.086 = phi i64 [ 0, %for.interval.body10.lr.ph ], [ %153, %for.interval.post24 ]
  %.not93 = icmp eq i64 %row8.086, 0
  br i1 %.not93, label %if.done13, label %if.then12

if.then12:                                        ; preds = %for.interval.body10
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !1534
  %113 = load ptr, ptr %19, align 8, !noalias !287
  %.not.i.i51 = icmp eq ptr %113, null
  br i1 %.not.i.i51, label %io.write_string.exit55, label %if.then.i.i52

if.then.i.i52:                                    ; preds = %if.then12
  %114 = load ptr, ptr %36, align 8, !noalias !1538
  store i64 0, ptr %9, align 8, !noalias !1538
  %115 = call i32 %113(ptr %114, i64 4, ptr nonnull @"ggv$149", i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !1542
  %116 = load i64, ptr %9, align 8, !noalias !1538
  %117 = load i64, ptr %20, align 8, !noalias !1538
  %118 = add i64 %117, %116
  store i64 %118, ptr %20, align 8, !noalias !1538
  br label %io.write_string.exit55

io.write_string.exit55:                           ; preds = %if.then12, %if.then.i.i52
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !1534
  br label %if.done13

if.done13:                                        ; preds = %io.write_string.exit55, %for.interval.body10
  %119 = load i64, ptr %37, align 8
  %120 = icmp sgt i64 %119, 0
  br i1 %120, label %if.done19.peel, label %for.interval.post24

if.done19.peel:                                   ; preds = %if.done13
  %121 = load i64, ptr %39, align 8
  %122 = mul i64 %row8.086, %121
  %123 = load ptr, ptr %1, align 8
  %124 = ptrtoint ptr %123 to i64
  %125 = add i64 %122, %124
  %126 = inttoptr i64 %125 to ptr
  store ptr %126, ptr %18, align 8
  %127 = load ptr, ptr %3, align 8
  %128 = getelementptr inbounds %runtime.Type_Info, ptr %127, i64 0, i32 4
  %129 = load i64, ptr %128, align 8
  store i64 %129, ptr %.repack36, align 8
  call fastcc void @fmt.fmt_arg(ptr %0, ptr nonnull %18, i32 %2, ptr %__.context_ptr)
  %130 = load i64, ptr %37, align 8
  %131 = icmp sgt i64 %130, 1
  br i1 %131, label %if.then18, label %for.interval.post24

if.then18:                                        ; preds = %if.done19.peel, %if.done19
  %col14.085 = phi i64 [ %150, %if.done19 ], [ 1, %if.done19.peel ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !1543
  %132 = load ptr, ptr %19, align 8, !noalias !1547
  %.not.i.i56 = icmp eq ptr %132, null
  br i1 %.not.i.i56, label %if.done19, label %if.then.i.i57

if.then.i.i57:                                    ; preds = %if.then18
  %133 = load ptr, ptr %36, align 8, !noalias !1547
  store i64 0, ptr %8, align 8, !noalias !1547
  %134 = call i32 %132(ptr %133, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !1551
  %135 = load i64, ptr %8, align 8, !noalias !1547
  %136 = load i64, ptr %20, align 8, !noalias !1547
  %137 = add i64 %136, %135
  store i64 %137, ptr %20, align 8, !noalias !1547
  br label %if.done19

if.done19:                                        ; preds = %if.then.i.i57, %if.then18
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !1543
  %138 = load i64, ptr %38, align 8
  %139 = mul i64 %138, %col14.085
  %140 = add i64 %139, %row8.086
  %141 = load i64, ptr %39, align 8
  %142 = mul i64 %140, %141
  %143 = load ptr, ptr %1, align 8
  %144 = ptrtoint ptr %143 to i64
  %145 = add i64 %142, %144
  %146 = inttoptr i64 %145 to ptr
  store ptr %146, ptr %18, align 8
  %147 = load ptr, ptr %3, align 8
  %148 = getelementptr inbounds %runtime.Type_Info, ptr %147, i64 0, i32 4
  %149 = load i64, ptr %148, align 8
  store i64 %149, ptr %.repack36, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %18, i32 %2, ptr %__.context_ptr)
  %150 = add nuw nsw i64 %col14.085, 1
  %151 = load i64, ptr %37, align 8
  %152 = icmp slt i64 %150, %151
  br i1 %152, label %if.then18, label %for.interval.post24, !llvm.loop !1552

for.interval.post24:                              ; preds = %if.done19, %if.done19.peel, %if.done13
  %153 = add nuw nsw i64 %row8.086, 1
  %154 = load i64, ptr %33, align 8
  %155 = icmp slt i64 %153, %154
  br i1 %155, label %for.interval.body10, label %if.done26

if.done26:                                        ; preds = %io.write_string.exit50, %for.interval.post24, %io.write_byte.exit, %for.interval.loop9.preheader
  %156 = load i64, ptr %28, align 8
  %157 = add i64 %156, -1
  store i64 %157, ptr %28, align 8
  %158 = load i8, ptr %31, align 1
  %.not35 = icmp ne i8 %158, 0
  %159 = icmp sgt i64 %157, 0
  %or.cond = select i1 %.not35, i1 %159, i1 false
  %.pre92 = load ptr, ptr %19, align 8, !noalias !287
  br i1 %or.cond, label %for.interval.body.lr.ph.i62, label %defer

for.interval.body.lr.ph.i62:                      ; preds = %if.done26
  %160 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  %161 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %162 = icmp eq ptr %.pre92, null
  br i1 %162, label %defer.thread, label %for.interval.body.i63

defer.thread:                                     ; preds = %for.interval.body.lr.ph.i62
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i73)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !1553
  br label %io.write_byte.exit77

for.interval.body.i63:                            ; preds = %for.interval.body.lr.ph.i62, %io.write_byte.exit.i68
  %163 = phi i64 [ %170, %io.write_byte.exit.i68 ], [ %157, %for.interval.body.lr.ph.i62 ]
  %.012.i64 = phi i64 [ %171, %io.write_byte.exit.i68 ], [ 0, %for.interval.body.lr.ph.i62 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i61), !noalias !1556
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7), !noalias !1556
  store i8 9, ptr %buf.i.i61, align 1, !noalias !1559
  store ptr %buf.i.i61, ptr %7, align 8, !noalias !1559
  store i64 1, ptr %160, align 8, !noalias !1559
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !1559
  %164 = load ptr, ptr %19, align 8, !noalias !287
  %.not.i.i.i65 = icmp eq ptr %164, null
  br i1 %.not.i.i.i65, label %io.write_byte.exit.i68, label %if.then.i.i.i66

if.then.i.i.i66:                                  ; preds = %for.interval.body.i63
  %165 = load ptr, ptr %161, align 8, !noalias !1562
  store i64 0, ptr %6, align 8, !noalias !1562
  %166 = call i32 %164(ptr %165, i64 4, ptr nonnull %7, i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !1566
  %167 = load i64, ptr %6, align 8, !noalias !1562
  %168 = load i64, ptr %20, align 8, !noalias !1562
  %169 = add i64 %168, %167
  store i64 %169, ptr %20, align 8, !noalias !1562
  %.pre.i67 = load i64, ptr %28, align 8, !noalias !1556
  br label %io.write_byte.exit.i68

io.write_byte.exit.i68:                           ; preds = %if.then.i.i.i66, %for.interval.body.i63
  %170 = phi i64 [ %163, %for.interval.body.i63 ], [ %.pre.i67, %if.then.i.i.i66 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !1559
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i61), !noalias !1556
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7), !noalias !1556
  %171 = add nuw nsw i64 %.012.i64, 1
  %172 = icmp slt i64 %171, %170
  br i1 %172, label %for.interval.body.i63, label %defer.loopexit87, !llvm.loop !901

defer.loopexit87:                                 ; preds = %io.write_byte.exit.i68
  %.pre = load ptr, ptr %19, align 8, !noalias !1567
  br label %defer

defer:                                            ; preds = %defer.loopexit87, %if.done26
  %173 = phi ptr [ %.pre, %defer.loopexit87 ], [ %.pre92, %if.done26 ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i73)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  store i8 93, ptr %buf.i73, align 1, !noalias !1553
  store ptr %buf.i73, ptr %5, align 8, !noalias !1553
  %174 = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  store i64 1, ptr %174, align 8, !noalias !1553
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !1553
  %.not.i.i74 = icmp eq ptr %173, null
  br i1 %.not.i.i74, label %io.write_byte.exit77, label %if.then.i.i75

if.then.i.i75:                                    ; preds = %defer
  %175 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %176 = load ptr, ptr %175, align 8, !noalias !1567
  store i64 0, ptr %4, align 8, !noalias !1567
  %177 = call i32 %173(ptr %176, i64 4, ptr nonnull %5, i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !1571
  %178 = load i64, ptr %4, align 8, !noalias !1567
  %179 = load i64, ptr %20, align 8, !noalias !1567
  %180 = add i64 %179, %178
  store i64 %180, ptr %20, align 8, !noalias !1567
  br label %io.write_byte.exit77

io.write_byte.exit77:                             ; preds = %defer.thread, %defer, %if.then.i.i75
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !1553
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i73)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  ret void
}

define internal fastcc void @fmt.fmt_value(ptr %0, ptr nocapture readonly %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %a.i.i337 = alloca [129 x i8], align 1
  %13 = alloca { ptr, i64 }, align 8
  %buf.i338 = alloca [32 x i8], align 1
  %14 = alloca %..string, align 8
  %s.i339 = alloca %..string, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %buf.i327 = alloca [1 x i8], align 1
  %17 = alloca { ptr, i64 }, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %a.i.i = alloca [129 x i8], align 1
  %22 = alloca { ptr, i64 }, align 8
  %buf.i308 = alloca [32 x i8], align 1
  %23 = alloca %..string, align 8
  %s.i = alloca %..string, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %26 = alloca { ptr, i64 }, align 8
  %27 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %28 = alloca { ptr, i64 }, align 8
  %29 = alloca i64, align 8
  %30 = alloca [80 x i8], align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca [80 x i8], align 8
  %35 = alloca i64, align 8
  %36 = alloca [120 x i8], align 8
  %37 = alloca i64, align 8
  %a = alloca %..any, align 8
  %ptr37 = alloca %runtime.Raw_Soa_Pointer, align 8
  %a44 = alloca %..any, align 8
  %38 = alloca { i64, i8 }, align 8
  %39 = alloca %..string, align 8
  %idx = alloca %..string, align 8
  %40 = alloca %..any, align 8
  %41 = alloca %..string, align 8
  %idx88 = alloca %..string, align 8
  %42 = alloca %..any, align 8
  %43 = alloca %..any, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca ptr, align 8
  %47 = alloca i64, align 8
  %48 = alloca %fmt.Info, align 8
  %49 = alloca %fmt.Info, align 8
  %50 = alloca %..any, align 8
  %51 = alloca %..any, align 8
  %absolute_ptr = alloca %..any, align 8
  %absolute_ptr180 = alloca %..any, align 8
  %52 = load ptr, ptr %1, align 8
  %53 = icmp eq ptr %52, null
  br i1 %53, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %decls
  %54 = getelementptr inbounds %..any, ptr %1, i64 0, i32 1
  %55 = load i64, ptr %54, align 8
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %if.then, label %if.done6

common.ret:                                       ; preds = %if.done6, %typeswitch.body8, %typeswitch.body9, %typeswitch.body10, %typeswitch.body11, %typeswitch.body12, %typeswitch.body13, %typeswitch.body14, %typeswitch.body15, %typeswitch.body36, %if.done71, %defer98, %if.done110, %if.done123, %if.done136, %defer147, %defer164, %typeswitch.body166, %typeswitch.body167, %typeswitch.body168, %typeswitch.body174, %typeswitch.body175, %typeswitch.body176, %typeswitch.body178, %typeswitch.body181, %if.done34, %if.then17, %io.write_string.exit399, %io.write_string.exit393, %defer153, %if.then149, %if.then134, %if.then121, %if.then108, %if.then66, %if.then61, %switch.case.body56, %switch.case.body55, %if.then51, %if.then49, %io.write_string.exit286, %if.then30, %io.write_string.exit281, %if.then24, %io.write_string.exit276, %io.write_string.exit
  ret void

if.then:                                          ; preds = %cmp.or, %decls
  %57 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35), !noalias !1572
  %58 = load ptr, ptr %57, align 8, !noalias !1576
  %.not.i.i = icmp eq ptr %58, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then
  %59 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %60 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %61 = load ptr, ptr %60, align 8, !noalias !1576
  store i64 0, ptr %35, align 8, !noalias !1576
  %62 = call i32 %58(ptr %61, i64 4, ptr nonnull @"ggv$ea", i64 0, i64 0, ptr nonnull %35, ptr nonnull %__.context_ptr), !noalias !1580
  %63 = load i64, ptr %35, align 8, !noalias !1576
  %64 = load i64, ptr %59, align 8, !noalias !1576
  %65 = add i64 %64, %63
  store i64 %65, ptr %59, align 8, !noalias !1576
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35), !noalias !1572
  br label %common.ret

if.done6:                                         ; preds = %cmp.or
  %66 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 13
  store i8 0, ptr %66, align 1
  %67 = load i64, ptr %54, align 8
  %68 = and i64 %67, 72057594037927935
  %69 = icmp ugt i64 %68, 150
  %n.0.i = select i1 %69, i64 0, i64 %68
  %70 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i
  %71 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5
  %72 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5, i32 1
  %73 = load i64, ptr %72, align 8
  switch i64 %73, label %common.ret [
    i64 27, label %typeswitch.body181
    i64 26, label %typeswitch.body178
    i64 1, label %typeswitch.body8
    i64 8, label %typeswitch.body9
    i64 2, label %typeswitch.body10
    i64 3, label %typeswitch.body11
    i64 4, label %typeswitch.body12
    i64 5, label %typeswitch.body13
    i64 6, label %typeswitch.body14
    i64 7, label %typeswitch.body15
    i64 11, label %typeswitch.body16
    i64 28, label %typeswitch.body36
    i64 12, label %typeswitch.body38
    i64 15, label %typeswitch.body72
    i64 14, label %typeswitch.body99
    i64 17, label %typeswitch.body111
    i64 16, label %typeswitch.body124
    i64 24, label %typeswitch.body137
    i64 22, label %typeswitch.body148
    i64 19, label %typeswitch.body166
    i64 20, label %typeswitch.body167
    i64 21, label %typeswitch.body168
    i64 13, label %typeswitch.body169
    i64 10, label %typeswitch.body174
    i64 23, label %typeswitch.body175
    i64 25, label %typeswitch.body176
  ]

typeswitch.body8:                                 ; preds = %if.done6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %36, ptr noundef nonnull align 16 dereferenceable(80) %71, i64 80, i1 false)
  call fastcc void @fmt.fmt_named(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr nonnull %36, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body9:                                 ; preds = %if.done6
  tail call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body10:                                ; preds = %if.done6
  tail call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body11:                                ; preds = %if.done6
  tail call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body12:                                ; preds = %if.done6
  tail call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body13:                                ; preds = %if.done6
  tail call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body14:                                ; preds = %if.done6
  tail call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body15:                                ; preds = %if.done6
  tail call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body16:                                ; preds = %if.done6
  %74 = load i64, ptr %71, align 16
  %75 = icmp eq i64 %67, 720575940379279372
  %76 = inttoptr i64 %74 to ptr
  br i1 %75, label %if.then17, label %if.else

if.then17:                                        ; preds = %typeswitch.body16
  %77 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %78 = load ptr, ptr %1, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  store i64 0, ptr %37, align 8
  %81 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %77, ptr %79, ptr nonnull %80, ptr %37, ptr %__.context_ptr)
  br label %common.ret

if.else:                                          ; preds = %typeswitch.body16
  %82 = load ptr, ptr %1, align 8
  %83 = load ptr, ptr %82, align 8
  %.not254 = icmp eq i32 %2, 112
  %.not255 = icmp eq i64 %74, 0
  %or.cond = select i1 %.not254, i1 true, i1 %.not255
  br i1 %or.cond, label %if.done34, label %for.body.preheader.i

for.body.preheader.i:                             ; preds = %if.else
  %84 = getelementptr inbounds %runtime.Type_Info, ptr %76, i64 0, i32 4
  %85 = load i64, ptr %84, align 8
  store ptr %83, ptr %a, align 8
  %a.repack260 = getelementptr inbounds %..any, ptr %a, i64 0, i32 1
  store i64 %85, ptr %a.repack260, align 8
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %34)
  %86 = getelementptr inbounds %runtime.Type_Info, ptr %76, i64 0, i32 5, i32 1
  %87 = load i64, ptr %86, align 8
  %cond1.i = icmp eq i64 %87, 1
  br i1 %cond1.i, label %typeswitch.body.lr.ph.i, label %if.then20

typeswitch.body.lr.ph.i:                          ; preds = %for.body.preheader.i
  %88 = getelementptr inbounds %runtime.Type_Info_Named, ptr %34, i64 0, i32 1
  br label %typeswitch.body.i

typeswitch.body.i:                                ; preds = %typeswitch.body.i, %typeswitch.body.lr.ph.i
  %base.02.i = phi ptr [ %76, %typeswitch.body.lr.ph.i ], [ %90, %typeswitch.body.i ]
  %89 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %34, ptr noundef nonnull align 1 dereferenceable(80) %89, i64 80, i1 false)
  %90 = load ptr, ptr %88, align 8
  %91 = getelementptr inbounds %runtime.Type_Info, ptr %90, i64 0, i32 5, i32 1
  %92 = load i64, ptr %91, align 8
  %cond.i = icmp eq i64 %92, 1
  br i1 %cond.i, label %typeswitch.body.i, label %if.then20

if.then20:                                        ; preds = %typeswitch.body.i, %for.body.preheader.i
  %93 = phi i64 [ %87, %for.body.preheader.i ], [ %92, %typeswitch.body.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %34)
  switch i64 %93, label %if.done34 [
    i64 14, label %typeswitch.body21
    i64 17, label %typeswitch.body21
    i64 16, label %typeswitch.body21
    i64 22, label %typeswitch.body21
    i64 19, label %typeswitch.body26
    i64 20, label %typeswitch.body26
  ]

typeswitch.body21:                                ; preds = %if.then20, %if.then20, %if.then20, %if.then20
  %94 = icmp eq ptr %83, null
  br i1 %94, label %if.then22, label %if.done23

if.then22:                                        ; preds = %typeswitch.body21
  %95 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %33), !noalias !1581
  %96 = load ptr, ptr %95, align 8, !noalias !1585
  %.not.i.i272 = icmp eq ptr %96, null
  br i1 %.not.i.i272, label %io.write_string.exit276, label %if.then.i.i273

if.then.i.i273:                                   ; preds = %if.then22
  %97 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %98 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %99 = load ptr, ptr %98, align 8, !noalias !1585
  store i64 0, ptr %33, align 8, !noalias !1585
  %100 = call i32 %96(ptr %99, i64 4, ptr nonnull @"ggv$ea", i64 0, i64 0, ptr nonnull %33, ptr nonnull %__.context_ptr), !noalias !1589
  %101 = load i64, ptr %33, align 8, !noalias !1585
  %102 = load i64, ptr %97, align 8, !noalias !1585
  %103 = add i64 %102, %101
  store i64 %103, ptr %97, align 8, !noalias !1585
  br label %io.write_string.exit276

io.write_string.exit276:                          ; preds = %if.then22, %if.then.i.i273
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %33), !noalias !1581
  br label %common.ret

if.done23:                                        ; preds = %typeswitch.body21
  %104 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 18
  %105 = load i64, ptr %104, align 8
  %106 = icmp slt i64 %105, 1
  br i1 %106, label %if.then24, label %if.done34

if.then24:                                        ; preds = %if.done23
  %107 = add nsw i64 %105, 1
  store i64 %107, ptr %104, align 8
  %108 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %109 = tail call fastcc i32 @io.write_byte(ptr nonnull %108, i8 38, ptr null, ptr %__.context_ptr)
  call fastcc void @fmt.fmt_value(ptr nonnull %0, ptr nonnull %a, i32 %2, ptr %__.context_ptr)
  %110 = load i64, ptr %104, align 8
  %111 = add i64 %110, -1
  store i64 %111, ptr %104, align 8
  br label %common.ret

typeswitch.body26:                                ; preds = %if.then20, %if.then20
  %112 = icmp eq ptr %83, null
  br i1 %112, label %if.then28, label %if.done29

if.then28:                                        ; preds = %typeswitch.body26
  %113 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %32), !noalias !1590
  %114 = load ptr, ptr %113, align 8, !noalias !1594
  %.not.i.i277 = icmp eq ptr %114, null
  br i1 %.not.i.i277, label %io.write_string.exit281, label %if.then.i.i278

if.then.i.i278:                                   ; preds = %if.then28
  %115 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %116 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %117 = load ptr, ptr %116, align 8, !noalias !1594
  store i64 0, ptr %32, align 8, !noalias !1594
  %118 = call i32 %114(ptr %117, i64 4, ptr nonnull @"ggv$ea", i64 0, i64 0, ptr nonnull %32, ptr nonnull %__.context_ptr), !noalias !1598
  %119 = load i64, ptr %32, align 8, !noalias !1594
  %120 = load i64, ptr %115, align 8, !noalias !1594
  %121 = add i64 %120, %119
  store i64 %121, ptr %115, align 8, !noalias !1594
  br label %io.write_string.exit281

io.write_string.exit281:                          ; preds = %if.then28, %if.then.i.i278
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32), !noalias !1590
  br label %common.ret

if.done29:                                        ; preds = %typeswitch.body26
  %122 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 18
  %123 = load i64, ptr %122, align 8
  %124 = icmp slt i64 %123, 1
  br i1 %124, label %if.then30, label %if.done34

if.then30:                                        ; preds = %if.done29
  %125 = add nsw i64 %123, 1
  store i64 %125, ptr %122, align 8
  %126 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %127 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %128 = tail call fastcc i32 @io.write_byte(ptr nonnull %126, i8 38, ptr nonnull %127, ptr %__.context_ptr)
  call fastcc void @fmt.fmt_value(ptr nonnull %0, ptr nonnull %a, i32 %2, ptr %__.context_ptr)
  %129 = load i64, ptr %122, align 8
  %130 = add i64 %129, -1
  store i64 %130, ptr %122, align 8
  br label %common.ret

if.done34:                                        ; preds = %if.done29, %if.done23, %if.then20, %if.else
  tail call fastcc void @fmt.fmt_pointer(ptr %0, ptr %83, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body36:                                ; preds = %if.done6
  %131 = load ptr, ptr %1, align 8
  %.unpack249 = load ptr, ptr %131, align 8
  %.elt250 = getelementptr inbounds %runtime.Raw_Soa_Pointer, ptr %131, i64 0, i32 1
  %.unpack251 = load i64, ptr %.elt250, align 8
  store ptr %.unpack249, ptr %ptr37, align 8
  %ptr37.repack252 = getelementptr inbounds %runtime.Raw_Soa_Pointer, ptr %ptr37, i64 0, i32 1
  store i64 %.unpack251, ptr %ptr37.repack252, align 8
  call fastcc void @fmt.fmt_soa_pointer(ptr nonnull %0, ptr nonnull %ptr37, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body38:                                ; preds = %if.done6
  %132 = load i64, ptr %71, align 16
  %133 = load ptr, ptr %1, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = icmp eq ptr %134, null
  %136 = inttoptr i64 %132 to ptr
  br i1 %135, label %if.then40, label %if.done41

if.then40:                                        ; preds = %typeswitch.body38
  %137 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %31), !noalias !1599
  %138 = load ptr, ptr %137, align 8, !noalias !1603
  %.not.i.i282 = icmp eq ptr %138, null
  br i1 %.not.i.i282, label %io.write_string.exit286, label %if.then.i.i283

if.then.i.i283:                                   ; preds = %if.then40
  %139 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %140 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %141 = load ptr, ptr %140, align 8, !noalias !1603
  store i64 0, ptr %31, align 8, !noalias !1603
  %142 = call i32 %138(ptr %141, i64 4, ptr nonnull @"ggv$ea", i64 0, i64 0, ptr nonnull %31, ptr nonnull %__.context_ptr), !noalias !1607
  %143 = load i64, ptr %31, align 8, !noalias !1603
  %144 = load i64, ptr %139, align 8, !noalias !1603
  %145 = add i64 %144, %143
  store i64 %145, ptr %139, align 8, !noalias !1603
  br label %io.write_string.exit286

io.write_string.exit286:                          ; preds = %if.then40, %if.then.i.i283
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31), !noalias !1599
  br label %common.ret

if.done41:                                        ; preds = %typeswitch.body38
  %.not238 = icmp eq i32 %2, 112
  %.not239 = icmp eq i64 %132, 0
  %or.cond263 = select i1 %.not238, i1 true, i1 %.not239
  br i1 %or.cond263, label %if.done71, label %for.body.preheader.i287

for.body.preheader.i287:                          ; preds = %if.done41
  %146 = getelementptr inbounds %runtime.Type_Info, ptr %136, i64 0, i32 4
  %147 = load i64, ptr %146, align 8
  store ptr %134, ptr %a44, align 8
  %a44.repack244 = getelementptr inbounds %..any, ptr %a44, i64 0, i32 1
  store i64 %147, ptr %a44.repack244, align 8
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %30)
  %148 = getelementptr inbounds %runtime.Type_Info, ptr %136, i64 0, i32 5, i32 1
  %149 = load i64, ptr %148, align 8
  %cond1.i288 = icmp eq i64 %149, 1
  br i1 %cond1.i288, label %typeswitch.body.lr.ph.i290, label %if.init47

typeswitch.body.lr.ph.i290:                       ; preds = %for.body.preheader.i287
  %150 = getelementptr inbounds %runtime.Type_Info_Named, ptr %30, i64 0, i32 1
  br label %typeswitch.body.i291

typeswitch.body.i291:                             ; preds = %typeswitch.body.i291, %typeswitch.body.lr.ph.i290
  %base.02.i292 = phi ptr [ %136, %typeswitch.body.lr.ph.i290 ], [ %152, %typeswitch.body.i291 ]
  %151 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i292, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %30, ptr noundef nonnull align 1 dereferenceable(80) %151, i64 80, i1 false)
  %152 = load ptr, ptr %150, align 8
  %153 = getelementptr inbounds %runtime.Type_Info, ptr %152, i64 0, i32 5, i32 1
  %154 = load i64, ptr %153, align 8
  %cond.i293 = icmp eq i64 %154, 1
  br i1 %cond.i293, label %typeswitch.body.i291, label %if.init47

if.init47:                                        ; preds = %typeswitch.body.i291, %for.body.preheader.i287
  %common.ret.op.i289 = phi ptr [ %136, %for.body.preheader.i287 ], [ %152, %typeswitch.body.i291 ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %30)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %38, i8 0, i64 16, i1 false)
  %155 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20, i32 1
  %156 = load i64, ptr %155, align 8
  %157 = icmp eq i64 %156, 1
  br i1 %157, label %if.then49, label %if.else50

if.then49:                                        ; preds = %if.init47
  %158 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20
  %159 = load i64, ptr %158, align 8
  %160 = load i64, ptr %common.ret.op.i289, align 8
  tail call fastcc void @fmt.fmt_array(ptr nonnull %0, ptr nonnull %134, i64 %159, i64 %160, ptr nonnull %common.ret.op.i289, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.else50:                                        ; preds = %if.init47
  %161 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 21
  %162 = load i8, ptr %161, align 1
  %.not248 = icmp eq i8 %162, 0
  br i1 %.not248, label %if.done53, label %if.then51

if.then51:                                        ; preds = %if.else50
  %163 = load i64, ptr %common.ret.op.i289, align 8
  tail call fastcc void @fmt.fmt_array_nul_terminated(ptr nonnull %0, ptr nonnull %134, i64 -1, i64 %163, ptr nonnull %common.ret.op.i289, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.done53:                                        ; preds = %if.else50
  %164 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i289, i64 0, i32 5, i32 1
  %165 = load i64, ptr %164, align 8
  switch i64 %165, label %if.done71 [
    i64 2, label %typeswitch.body54
    i64 14, label %typeswitch.body59
    i64 17, label %typeswitch.body59
    i64 16, label %typeswitch.body59
    i64 22, label %typeswitch.body59
    i64 19, label %typeswitch.body64
    i64 20, label %typeswitch.body64
  ]

typeswitch.body54:                                ; preds = %if.done53
  switch i32 %2, label %if.done71 [
    i32 115, label %switch.case.body
    i32 113, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %typeswitch.body54, %typeswitch.body54
  %166 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i289, i64 0, i32 4
  %167 = load i64, ptr %166, align 8
  switch i64 %167, label %if.done71 [
    i64 72057594037927945, label %switch.case.body55
    i64 72057594037928041, label %switch.case.body56
    i64 72057594037927955, label %switch.case.body56
    i64 4755801206503243882, label %switch.case.body56
  ]

switch.case.body55:                               ; preds = %switch.case.body
  tail call fastcc void @fmt.fmt_cstring(ptr nonnull %0, ptr nonnull %134, i32 %2, ptr %__.context_ptr)
  br label %common.ret

switch.case.body56:                               ; preds = %switch.case.body, %switch.case.body, %switch.case.body
  %168 = load i64, ptr %common.ret.op.i289, align 8
  %169 = tail call fastcc i64 @fmt.search_nul_termination-1301(ptr nonnull %134, i64 %168, i64 -1)
  tail call fastcc void @fmt.fmt_array(ptr nonnull %0, ptr nonnull %134, i64 %169, i64 %168, ptr nonnull %common.ret.op.i289, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body59:                                ; preds = %if.done53, %if.done53, %if.done53, %if.done53
  %170 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 18
  %171 = load i64, ptr %170, align 8
  %172 = icmp slt i64 %171, 1
  br i1 %172, label %if.then61, label %if.done71

if.then61:                                        ; preds = %typeswitch.body59
  %173 = add nsw i64 %171, 1
  store i64 %173, ptr %170, align 8
  %174 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %175 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %176 = tail call fastcc i32 @io.write_byte(ptr nonnull %174, i8 38, ptr nonnull %175, ptr %__.context_ptr)
  call fastcc void @fmt.fmt_value(ptr nonnull %0, ptr nonnull %a44, i32 %2, ptr %__.context_ptr)
  %177 = load i64, ptr %170, align 8
  %178 = add i64 %177, -1
  store i64 %178, ptr %170, align 8
  br label %common.ret

typeswitch.body64:                                ; preds = %if.done53, %if.done53
  %179 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 18
  %180 = load i64, ptr %179, align 8
  %181 = icmp slt i64 %180, 1
  br i1 %181, label %if.then66, label %if.done71

if.then66:                                        ; preds = %typeswitch.body64
  %182 = add nsw i64 %180, 1
  store i64 %182, ptr %179, align 8
  %183 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %184 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %185 = tail call fastcc i32 @io.write_byte(ptr nonnull %183, i8 38, ptr nonnull %184, ptr %__.context_ptr)
  call fastcc void @fmt.fmt_value(ptr nonnull %0, ptr nonnull %a44, i32 %2, ptr %__.context_ptr)
  %186 = load i64, ptr %179, align 8
  %187 = add i64 %186, -1
  store i64 %187, ptr %179, align 8
  br label %common.ret

if.done71:                                        ; preds = %typeswitch.body64, %typeswitch.body59, %typeswitch.body54, %switch.case.body, %if.done53, %if.done41
  tail call fastcc void @fmt.fmt_pointer(ptr nonnull %0, ptr nonnull %134, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body72:                                ; preds = %if.done6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %36, ptr noundef nonnull align 16 dereferenceable(56) %71, i64 56, i1 false)
  %188 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 19
  %189 = load i64, ptr %188, align 8
  %190 = add i64 %189, 1
  store i64 %190, ptr %188, align 8
  %191 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 4
  %192 = load i8, ptr %191, align 1
  %.not223 = icmp eq i8 %192, 0
  %193 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %194 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  br i1 %.not223, label %if.else81, label %if.then73

if.then73:                                        ; preds = %typeswitch.body72
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %29), !noalias !1608
  %195 = load ptr, ptr %193, align 8, !noalias !1612
  %.not.i.i295 = icmp eq ptr %195, null
  br i1 %.not.i.i295, label %io.write_string.exit299, label %if.then.i.i296

if.then.i.i296:                                   ; preds = %if.then73
  %196 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %197 = load ptr, ptr %196, align 8, !noalias !1612
  store i64 0, ptr %29, align 8, !noalias !1612
  %198 = call i32 %195(ptr %197, i64 4, ptr nonnull @"ggv$dd", i64 0, i64 0, ptr nonnull %29, ptr nonnull %__.context_ptr), !noalias !1616
  %199 = load i64, ptr %29, align 8, !noalias !1612
  %200 = load i64, ptr %194, align 8, !noalias !1612
  %201 = add i64 %200, %199
  store i64 %201, ptr %194, align 8, !noalias !1612
  br label %io.write_string.exit299

io.write_string.exit299:                          ; preds = %if.then73, %if.then.i.i296
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %29), !noalias !1608
  %202 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 10
  %203 = load i64, ptr %202, align 8
  %204 = add i64 %203, 1
  store i64 %204, ptr %202, align 8
  %205 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %36, i64 0, i32 3
  %206 = load i64, ptr %205, align 8
  %207 = icmp sgt i64 %206, 0
  br i1 %207, label %for.interval.body.lr.ph, label %defer79

for.interval.body.lr.ph:                          ; preds = %io.write_string.exit299
  %208 = getelementptr inbounds { ptr, i64 }, ptr %28, i64 0, i32 1
  %209 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %210 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %36, i64 0, i32 1
  %211 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %36, i64 0, i32 4
  %.elt232 = getelementptr inbounds %..string, ptr %39, i64 0, i32 1
  %idx.repack234 = getelementptr inbounds %..string, ptr %idx, i64 0, i32 1
  %212 = getelementptr inbounds { ptr, i64 }, ptr %26, i64 0, i32 1
  %213 = getelementptr inbounds { ptr, i64 }, ptr %22, i64 0, i32 1
  %.elt1.i = getelementptr inbounds %..string, ptr %23, i64 0, i32 1
  %s.repack3.i = getelementptr inbounds %..string, ptr %s.i, i64 0, i32 1
  %214 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %36, i64 0, i32 2
  %.repack237 = getelementptr inbounds %..any, ptr %40, i64 0, i32 1
  br label %for.interval.body

for.interval.body:                                ; preds = %for.interval.body.lr.ph, %io.write_string.exit321
  %i.0421 = phi i64 [ 0, %for.interval.body.lr.ph ], [ %288, %io.write_string.exit321 ]
  %215 = load i64, ptr %202, align 8, !noalias !1617
  %216 = icmp sgt i64 %215, 0
  br i1 %216, label %for.interval.body.lr.ph.i, label %fmt.fmt_write_indent.exit

for.interval.body.lr.ph.i:                        ; preds = %for.interval.body
  %217 = load ptr, ptr %193, align 8, !noalias !1620
  %218 = icmp eq ptr %217, null
  br i1 %218, label %fmt.fmt_write_indent.exit, label %for.interval.body.i

for.interval.body.i:                              ; preds = %for.interval.body.lr.ph.i, %io.write_byte.exit.i
  %219 = phi i64 [ %226, %io.write_byte.exit.i ], [ %215, %for.interval.body.lr.ph.i ]
  %.012.i = phi i64 [ %227, %io.write_byte.exit.i ], [ 0, %for.interval.body.lr.ph.i ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1617
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %28), !noalias !1617
  store i8 9, ptr %buf.i.i, align 1, !noalias !1626
  store ptr %buf.i.i, ptr %28, align 8, !noalias !1626
  store i64 1, ptr %208, align 8, !noalias !1626
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27), !noalias !1626
  %220 = load ptr, ptr %193, align 8, !noalias !1620
  %.not.i.i.i = icmp eq ptr %220, null
  br i1 %.not.i.i.i, label %io.write_byte.exit.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.interval.body.i
  %221 = load ptr, ptr %209, align 8, !noalias !1620
  store i64 0, ptr %27, align 8, !noalias !1620
  %222 = call i32 %220(ptr %221, i64 4, ptr nonnull %28, i64 0, i64 0, ptr nonnull %27, ptr nonnull %__.context_ptr), !noalias !1627
  %223 = load i64, ptr %27, align 8, !noalias !1620
  %224 = load i64, ptr %194, align 8, !noalias !1620
  %225 = add i64 %224, %223
  store i64 %225, ptr %194, align 8, !noalias !1620
  %.pre.i = load i64, ptr %202, align 8, !noalias !1617
  br label %io.write_byte.exit.i

io.write_byte.exit.i:                             ; preds = %if.then.i.i.i, %for.interval.body.i
  %226 = phi i64 [ %219, %for.interval.body.i ], [ %.pre.i, %if.then.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27), !noalias !1626
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1617
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %28), !noalias !1617
  %227 = add nuw nsw i64 %.012.i, 1
  %228 = icmp slt i64 %227, %226
  br i1 %228, label %for.interval.body.i, label %fmt.fmt_write_indent.exit, !llvm.loop !901

fmt.fmt_write_indent.exit:                        ; preds = %io.write_byte.exit.i, %for.interval.body.lr.ph.i, %for.interval.body
  %229 = load ptr, ptr %210, align 8
  %230 = load i64, ptr %211, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %39, i8 0, i64 16, i1 false)
  %231 = call fastcc i8 @fmt.stored_enum_value_to_string(ptr %229, i64 %230, i64 %i.0421, ptr %39)
  %.unpack231 = load ptr, ptr %39, align 8
  %.unpack233 = load i64, ptr %.elt232, align 8
  store ptr %.unpack231, ptr %idx, align 8
  store i64 %.unpack233, ptr %idx.repack234, align 8
  %.not236 = icmp eq i8 %231, 0
  br i1 %.not236, label %if.else77, label %if.then76

if.then76:                                        ; preds = %fmt.fmt_write_indent.exit
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %26)
  store i8 46, ptr %buf.i, align 1, !noalias !1628
  store ptr %buf.i, ptr %26, align 8, !noalias !1628
  store i64 1, ptr %212, align 8, !noalias !1628
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25), !noalias !1628
  %232 = load ptr, ptr %193, align 8, !noalias !287
  %.not.i.i300 = icmp eq ptr %232, null
  br i1 %.not.i.i300, label %io.write_byte.exit.thread, label %io.write_byte.exit

io.write_byte.exit.thread:                        ; preds = %if.then76
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25), !noalias !1628
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24), !noalias !1631
  br label %io.write_string.exit307

io.write_byte.exit:                               ; preds = %if.then76
  %233 = load ptr, ptr %209, align 8, !noalias !1635
  store i64 0, ptr %25, align 8, !noalias !1635
  %234 = call i32 %232(ptr %233, i64 4, ptr nonnull %26, i64 0, i64 0, ptr nonnull %25, ptr nonnull %__.context_ptr), !noalias !1639
  %235 = load i64, ptr %25, align 8, !noalias !1635
  %236 = load i64, ptr %194, align 8, !noalias !1635
  %237 = add i64 %236, %235
  store i64 %237, ptr %194, align 8, !noalias !1635
  %.pre430 = load ptr, ptr %193, align 8, !noalias !1640
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25), !noalias !1628
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24), !noalias !1631
  %.not.i.i303 = icmp eq ptr %.pre430, null
  br i1 %.not.i.i303, label %io.write_string.exit307, label %if.then.i.i304

if.then.i.i304:                                   ; preds = %io.write_byte.exit
  %238 = load ptr, ptr %209, align 8, !noalias !1640
  store i64 0, ptr %24, align 8, !noalias !1640
  %239 = call i32 %.pre430(ptr %238, i64 4, ptr nonnull %idx, i64 0, i64 0, ptr nonnull %24, ptr nonnull %__.context_ptr), !noalias !1644
  %240 = load i64, ptr %24, align 8, !noalias !1640
  %241 = load i64, ptr %194, align 8, !noalias !1640
  %242 = add i64 %241, %240
  store i64 %242, ptr %194, align 8, !noalias !1640
  br label %io.write_string.exit307

io.write_string.exit307:                          ; preds = %io.write_byte.exit.thread, %io.write_byte.exit, %if.then.i.i304
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24), !noalias !1631
  br label %if.done78

if.else77:                                        ; preds = %fmt.fmt_write_indent.exit
  %243 = add i64 %230, %i.0421
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %buf.i308)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %23)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %s.i)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %buf.i308, i8 0, i64 32, i1 false), !noalias !1645
  call void @llvm.lifetime.start.p0(i64 129, ptr nonnull %a.i.i), !noalias !1645
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %22), !noalias !1645
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a.i.i, i8 0, i64 129, i1 false), !noalias !1649
  %244 = icmp slt i64 %243, 0
  %245 = call i64 @llvm.abs.i64(i64 %243, i1 false)
  %.not22.i.i = icmp ult i64 %245, 10
  %.pre.i.i = load ptr, ptr @strconv.digits, align 8, !noalias !1649
  br i1 %.not22.i.i, label %for.done.i.i, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.else77, %for.body.i.i
  %u.024.i.i = phi i64 [ %251, %for.body.i.i ], [ %245, %if.else77 ]
  %i.023.i.i = phi i64 [ %246, %for.body.i.i ], [ 129, %if.else77 ]
  %246 = add i64 %i.023.i.i, -1
  %247 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %246
  %248 = urem i64 %u.024.i.i, 10
  %249 = getelementptr i8, ptr %.pre.i.i, i64 %248
  %250 = load i8, ptr %249, align 1, !noalias !1649
  store i8 %250, ptr %247, align 1, !noalias !1649
  %251 = udiv i64 %u.024.i.i, 10
  %.not.i.i309 = icmp ult i64 %u.024.i.i, 100
  br i1 %.not.i.i309, label %for.done.i.i, label %for.body.i.i

for.done.i.i:                                     ; preds = %for.body.i.i, %if.else77
  %i.0.lcssa.i.i = phi i64 [ 129, %if.else77 ], [ %246, %for.body.i.i ]
  %u.0.lcssa.i.i = phi i64 [ %245, %if.else77 ], [ %251, %for.body.i.i ]
  %252 = add i64 %i.0.lcssa.i.i, -1
  %253 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %252
  %254 = getelementptr i8, ptr %.pre.i.i, i64 %u.0.lcssa.i.i
  %255 = load i8, ptr %254, align 1, !noalias !1649
  store i8 %255, ptr %253, align 1, !noalias !1649
  br i1 %244, label %switch.done11.sink.split.i.i, label %switch.done11.i.i

switch.done11.sink.split.i.i:                     ; preds = %for.done.i.i
  %256 = add i64 %i.0.lcssa.i.i, -2
  %257 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %256
  store i8 45, ptr %257, align 1, !noalias !1649
  br label %switch.done11.i.i

switch.done11.i.i:                                ; preds = %switch.done11.sink.split.i.i, %for.done.i.i
  %i.3.i.i = phi i64 [ %256, %switch.done11.sink.split.i.i ], [ %252, %for.done.i.i ]
  %258 = sub i64 129, %i.3.i.i
  %259 = call i64 @llvm.smin.i64(i64 %258, i64 32)
  %.not.i.i.i310 = icmp slt i64 %259, 1
  br i1 %.not.i.i.i310, label %strconv.append_bits.exit.i, label %if.then.i19.i.i

if.then.i19.i.i:                                  ; preds = %switch.done11.i.i
  %260 = getelementptr i8, ptr %a.i.i, i64 %i.3.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %buf.i308, ptr align 1 %260, i64 %259, i1 false), !noalias !1649
  br label %strconv.append_bits.exit.i

strconv.append_bits.exit.i:                       ; preds = %if.then.i19.i.i, %switch.done11.i.i
  store ptr %buf.i308, ptr %22, align 8, !noalias !1649
  store i64 %258, ptr %213, align 8, !noalias !1649
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %23, ptr nonnull align 8 %22, i64 16, i1 false), !noalias !1653
  call void @llvm.lifetime.end.p0(i64 129, ptr nonnull %a.i.i), !noalias !1645
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %22), !noalias !1645
  %.unpack.i = load ptr, ptr %23, align 8, !noalias !1645
  %.unpack2.i = load i64, ptr %.elt1.i, align 8, !noalias !1645
  store ptr %.unpack.i, ptr %s.i, align 8, !noalias !1645
  store i64 %.unpack2.i, ptr %s.repack3.i, align 8, !noalias !1645
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21), !noalias !1654
  %261 = load ptr, ptr %193, align 8, !noalias !1658
  %.not.i.i5.i = icmp eq ptr %261, null
  br i1 %.not.i.i5.i, label %io.write_i64.exit, label %if.then.i.i.i311

if.then.i.i.i311:                                 ; preds = %strconv.append_bits.exit.i
  %262 = load ptr, ptr %209, align 8, !noalias !1658
  store i64 0, ptr %21, align 8, !noalias !1658
  %263 = call i32 %261(ptr %262, i64 4, ptr nonnull %s.i, i64 0, i64 0, ptr nonnull %21, ptr nonnull %__.context_ptr), !noalias !1662
  %264 = load i64, ptr %21, align 8, !noalias !1658
  %265 = load i64, ptr %194, align 8, !noalias !1658
  %266 = add i64 %265, %264
  store i64 %266, ptr %194, align 8, !noalias !1658
  br label %io.write_i64.exit

io.write_i64.exit:                                ; preds = %strconv.append_bits.exit.i, %if.then.i.i.i311
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21), !noalias !1654
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %buf.i308)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %23)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i)
  br label %if.done78

if.done78:                                        ; preds = %io.write_i64.exit, %io.write_string.exit307
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20), !noalias !1663
  %267 = load ptr, ptr %193, align 8, !noalias !1667
  %.not.i.i312 = icmp eq ptr %267, null
  br i1 %.not.i.i312, label %io.write_string.exit316, label %if.then.i.i313

if.then.i.i313:                                   ; preds = %if.done78
  %268 = load ptr, ptr %209, align 8, !noalias !1667
  store i64 0, ptr %20, align 8, !noalias !1667
  %269 = call i32 %267(ptr %268, i64 4, ptr nonnull @"ggv$e1", i64 0, i64 0, ptr nonnull %20, ptr nonnull %__.context_ptr), !noalias !1671
  %270 = load i64, ptr %20, align 8, !noalias !1667
  %271 = load i64, ptr %194, align 8, !noalias !1667
  %272 = add i64 %271, %270
  store i64 %272, ptr %194, align 8, !noalias !1667
  br label %io.write_string.exit316

io.write_string.exit316:                          ; preds = %if.done78, %if.then.i.i313
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20), !noalias !1663
  %273 = load ptr, ptr %1, align 8
  %274 = ptrtoint ptr %273 to i64
  %275 = load i64, ptr %214, align 8
  %276 = mul i64 %275, %i.0421
  %277 = add i64 %276, %274
  %278 = inttoptr i64 %277 to ptr
  store ptr %278, ptr %40, align 8
  %279 = load ptr, ptr %36, align 8
  %280 = getelementptr inbounds %runtime.Type_Info, ptr %279, i64 0, i32 4
  %281 = load i64, ptr %280, align 8
  store i64 %281, ptr %.repack237, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %40, i32 %2, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19), !noalias !1672
  %282 = load ptr, ptr %193, align 8, !noalias !1676
  %.not.i.i317 = icmp eq ptr %282, null
  br i1 %.not.i.i317, label %io.write_string.exit321, label %if.then.i.i318

if.then.i.i318:                                   ; preds = %io.write_string.exit316
  %283 = load ptr, ptr %209, align 8, !noalias !1676
  store i64 0, ptr %19, align 8, !noalias !1676
  %284 = call i32 %282(ptr %283, i64 4, ptr nonnull @"ggv$df", i64 0, i64 0, ptr nonnull %19, ptr nonnull %__.context_ptr), !noalias !1680
  %285 = load i64, ptr %19, align 8, !noalias !1676
  %286 = load i64, ptr %194, align 8, !noalias !1676
  %287 = add i64 %286, %285
  store i64 %287, ptr %194, align 8, !noalias !1676
  br label %io.write_string.exit321

io.write_string.exit321:                          ; preds = %io.write_string.exit316, %if.then.i.i318
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19), !noalias !1672
  %288 = add nuw nsw i64 %i.0421, 1
  %289 = icmp slt i64 %288, %206
  br i1 %289, label %for.interval.body, label %defer79

defer79:                                          ; preds = %io.write_string.exit321, %io.write_string.exit299
  store i64 %203, ptr %202, align 8
  %290 = call fastcc i32 @io.write_byte(ptr nonnull %193, i8 10, ptr nonnull %194, ptr %__.context_ptr)
  call fastcc void @fmt.fmt_write_indent(ptr nonnull %0, ptr %__.context_ptr)
  br label %defer98

if.else81:                                        ; preds = %typeswitch.body72
  %291 = tail call fastcc i32 @io.write_byte(ptr nonnull %193, i8 91, ptr nonnull %194, ptr %__.context_ptr)
  %292 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %36, i64 0, i32 3
  %293 = load i64, ptr %292, align 8
  %294 = icmp sgt i64 %293, 0
  br i1 %294, label %for.interval.body84.lr.ph, label %defer98

for.interval.body84.lr.ph:                        ; preds = %if.else81
  %295 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %296 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %36, i64 0, i32 1
  %297 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %36, i64 0, i32 4
  %.elt225 = getelementptr inbounds %..string, ptr %41, i64 0, i32 1
  %idx88.repack227 = getelementptr inbounds %..string, ptr %idx88, i64 0, i32 1
  %298 = getelementptr inbounds { ptr, i64 }, ptr %17, i64 0, i32 1
  %299 = getelementptr inbounds { ptr, i64 }, ptr %13, i64 0, i32 1
  %.elt1.i355 = getelementptr inbounds %..string, ptr %14, i64 0, i32 1
  %s.repack3.i357 = getelementptr inbounds %..string, ptr %s.i339, i64 0, i32 1
  %300 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %36, i64 0, i32 2
  %.repack230 = getelementptr inbounds %..any, ptr %42, i64 0, i32 1
  br label %for.interval.body84

for.interval.body84:                              ; preds = %for.interval.body84.lr.ph, %io.write_string.exit368
  %i82.0422 = phi i64 [ 0, %for.interval.body84.lr.ph ], [ %360, %io.write_string.exit368 ]
  %.not433 = icmp eq i64 %i82.0422, 0
  br i1 %.not433, label %if.done87, label %if.then86

if.then86:                                        ; preds = %for.interval.body84
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18), !noalias !1681
  %301 = load ptr, ptr %193, align 8, !noalias !1685
  %.not.i.i322 = icmp eq ptr %301, null
  br i1 %.not.i.i322, label %io.write_string.exit326, label %if.then.i.i323

if.then.i.i323:                                   ; preds = %if.then86
  %302 = load ptr, ptr %295, align 8, !noalias !1685
  store i64 0, ptr %18, align 8, !noalias !1685
  %303 = call i32 %301(ptr %302, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %18, ptr nonnull %__.context_ptr), !noalias !1689
  %304 = load i64, ptr %18, align 8, !noalias !1685
  %305 = load i64, ptr %194, align 8, !noalias !1685
  %306 = add i64 %305, %304
  store i64 %306, ptr %194, align 8, !noalias !1685
  br label %io.write_string.exit326

io.write_string.exit326:                          ; preds = %if.then86, %if.then.i.i323
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18), !noalias !1681
  br label %if.done87

if.done87:                                        ; preds = %io.write_string.exit326, %for.interval.body84
  %307 = load ptr, ptr %296, align 8
  %308 = load i64, ptr %297, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %41, i8 0, i64 16, i1 false)
  %309 = call fastcc i8 @fmt.stored_enum_value_to_string(ptr %307, i64 %308, i64 %i82.0422, ptr %41)
  %.unpack224 = load ptr, ptr %41, align 8
  %.unpack226 = load i64, ptr %.elt225, align 8
  store ptr %.unpack224, ptr %idx88, align 8
  store i64 %.unpack226, ptr %idx88.repack227, align 8
  %.not229 = icmp eq i8 %309, 0
  br i1 %.not229, label %if.else91, label %if.then90

if.then90:                                        ; preds = %if.done87
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i327)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %17)
  store i8 46, ptr %buf.i327, align 1, !noalias !1690
  store ptr %buf.i327, ptr %17, align 8, !noalias !1690
  store i64 1, ptr %298, align 8, !noalias !1690
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16), !noalias !1690
  %310 = load ptr, ptr %193, align 8, !noalias !287
  %.not.i.i328 = icmp eq ptr %310, null
  br i1 %.not.i.i328, label %io.write_byte.exit331.thread, label %io.write_byte.exit331

io.write_byte.exit331.thread:                     ; preds = %if.then90
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16), !noalias !1690
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i327)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15), !noalias !1693
  br label %io.write_string.exit336

io.write_byte.exit331:                            ; preds = %if.then90
  %311 = load ptr, ptr %295, align 8, !noalias !1697
  store i64 0, ptr %16, align 8, !noalias !1697
  %312 = call i32 %310(ptr %311, i64 4, ptr nonnull %17, i64 0, i64 0, ptr nonnull %16, ptr nonnull %__.context_ptr), !noalias !1701
  %313 = load i64, ptr %16, align 8, !noalias !1697
  %314 = load i64, ptr %194, align 8, !noalias !1697
  %315 = add i64 %314, %313
  store i64 %315, ptr %194, align 8, !noalias !1697
  %.pre431 = load ptr, ptr %193, align 8, !noalias !1702
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16), !noalias !1690
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i327)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %17)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15), !noalias !1693
  %.not.i.i332 = icmp eq ptr %.pre431, null
  br i1 %.not.i.i332, label %io.write_string.exit336, label %if.then.i.i333

if.then.i.i333:                                   ; preds = %io.write_byte.exit331
  %316 = load ptr, ptr %295, align 8, !noalias !1702
  store i64 0, ptr %15, align 8, !noalias !1702
  %317 = call i32 %.pre431(ptr %316, i64 4, ptr nonnull %idx88, i64 0, i64 0, ptr nonnull %15, ptr nonnull %__.context_ptr), !noalias !1706
  %318 = load i64, ptr %15, align 8, !noalias !1702
  %319 = load i64, ptr %194, align 8, !noalias !1702
  %320 = add i64 %319, %318
  store i64 %320, ptr %194, align 8, !noalias !1702
  br label %io.write_string.exit336

io.write_string.exit336:                          ; preds = %io.write_byte.exit331.thread, %io.write_byte.exit331, %if.then.i.i333
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15), !noalias !1693
  br label %if.done92

if.else91:                                        ; preds = %if.done87
  %321 = add i64 %308, %i82.0422
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %buf.i338)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %s.i339)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %buf.i338, i8 0, i64 32, i1 false), !noalias !1707
  call void @llvm.lifetime.start.p0(i64 129, ptr nonnull %a.i.i337), !noalias !1707
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13), !noalias !1707
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a.i.i337, i8 0, i64 129, i1 false), !noalias !1711
  %322 = icmp slt i64 %321, 0
  %323 = call i64 @llvm.abs.i64(i64 %321, i1 false)
  %.not22.i.i340 = icmp ult i64 %323, 10
  %.pre.i.i341 = load ptr, ptr @strconv.digits, align 8, !noalias !1711
  br i1 %.not22.i.i340, label %for.done.i.i346, label %for.body.i.i342

for.body.i.i342:                                  ; preds = %if.else91, %for.body.i.i342
  %u.024.i.i343 = phi i64 [ %329, %for.body.i.i342 ], [ %323, %if.else91 ]
  %i.023.i.i344 = phi i64 [ %324, %for.body.i.i342 ], [ 129, %if.else91 ]
  %324 = add i64 %i.023.i.i344, -1
  %325 = getelementptr [129 x i8], ptr %a.i.i337, i64 0, i64 %324
  %326 = urem i64 %u.024.i.i343, 10
  %327 = getelementptr i8, ptr %.pre.i.i341, i64 %326
  %328 = load i8, ptr %327, align 1, !noalias !1711
  store i8 %328, ptr %325, align 1, !noalias !1711
  %329 = udiv i64 %u.024.i.i343, 10
  %.not.i.i345 = icmp ult i64 %u.024.i.i343, 100
  br i1 %.not.i.i345, label %for.done.i.i346, label %for.body.i.i342

for.done.i.i346:                                  ; preds = %for.body.i.i342, %if.else91
  %i.0.lcssa.i.i347 = phi i64 [ 129, %if.else91 ], [ %324, %for.body.i.i342 ]
  %u.0.lcssa.i.i348 = phi i64 [ %323, %if.else91 ], [ %329, %for.body.i.i342 ]
  %330 = add i64 %i.0.lcssa.i.i347, -1
  %331 = getelementptr [129 x i8], ptr %a.i.i337, i64 0, i64 %330
  %332 = getelementptr i8, ptr %.pre.i.i341, i64 %u.0.lcssa.i.i348
  %333 = load i8, ptr %332, align 1, !noalias !1711
  store i8 %333, ptr %331, align 1, !noalias !1711
  br i1 %322, label %switch.done11.sink.split.i.i362, label %switch.done11.i.i349

switch.done11.sink.split.i.i362:                  ; preds = %for.done.i.i346
  %334 = add i64 %i.0.lcssa.i.i347, -2
  %335 = getelementptr [129 x i8], ptr %a.i.i337, i64 0, i64 %334
  store i8 45, ptr %335, align 1, !noalias !1711
  br label %switch.done11.i.i349

switch.done11.i.i349:                             ; preds = %switch.done11.sink.split.i.i362, %for.done.i.i346
  %i.3.i.i350 = phi i64 [ %334, %switch.done11.sink.split.i.i362 ], [ %330, %for.done.i.i346 ]
  %336 = sub i64 129, %i.3.i.i350
  %337 = call i64 @llvm.smin.i64(i64 %336, i64 32)
  %.not.i.i.i351 = icmp slt i64 %337, 1
  br i1 %.not.i.i.i351, label %strconv.append_bits.exit.i353, label %if.then.i19.i.i352

if.then.i19.i.i352:                               ; preds = %switch.done11.i.i349
  %338 = getelementptr i8, ptr %a.i.i337, i64 %i.3.i.i350
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %buf.i338, ptr align 1 %338, i64 %337, i1 false), !noalias !1711
  br label %strconv.append_bits.exit.i353

strconv.append_bits.exit.i353:                    ; preds = %if.then.i19.i.i352, %switch.done11.i.i349
  store ptr %buf.i338, ptr %13, align 8, !noalias !1711
  store i64 %336, ptr %299, align 8, !noalias !1711
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %14, ptr nonnull align 8 %13, i64 16, i1 false), !noalias !1715
  call void @llvm.lifetime.end.p0(i64 129, ptr nonnull %a.i.i337), !noalias !1707
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13), !noalias !1707
  %.unpack.i354 = load ptr, ptr %14, align 8, !noalias !1707
  %.unpack2.i356 = load i64, ptr %.elt1.i355, align 8, !noalias !1707
  store ptr %.unpack.i354, ptr %s.i339, align 8, !noalias !1707
  store i64 %.unpack2.i356, ptr %s.repack3.i357, align 8, !noalias !1707
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !1716
  %339 = load ptr, ptr %193, align 8, !noalias !1720
  %.not.i.i5.i358 = icmp eq ptr %339, null
  br i1 %.not.i.i5.i358, label %io.write_i64.exit363, label %if.then.i.i.i359

if.then.i.i.i359:                                 ; preds = %strconv.append_bits.exit.i353
  %340 = load ptr, ptr %295, align 8, !noalias !1720
  store i64 0, ptr %12, align 8, !noalias !1720
  %341 = call i32 %339(ptr %340, i64 4, ptr nonnull %s.i339, i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !1724
  %342 = load i64, ptr %12, align 8, !noalias !1720
  %343 = load i64, ptr %194, align 8, !noalias !1720
  %344 = add i64 %343, %342
  store i64 %344, ptr %194, align 8, !noalias !1720
  br label %io.write_i64.exit363

io.write_i64.exit363:                             ; preds = %strconv.append_bits.exit.i353, %if.then.i.i.i359
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !1716
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %buf.i338)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i339)
  br label %if.done92

if.done92:                                        ; preds = %io.write_i64.exit363, %io.write_string.exit336
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11), !noalias !1725
  %345 = load ptr, ptr %193, align 8, !noalias !1729
  %.not.i.i364 = icmp eq ptr %345, null
  br i1 %.not.i.i364, label %io.write_string.exit368, label %if.then.i.i365

if.then.i.i365:                                   ; preds = %if.done92
  %346 = load ptr, ptr %295, align 8, !noalias !1729
  store i64 0, ptr %11, align 8, !noalias !1729
  %347 = call i32 %345(ptr %346, i64 4, ptr nonnull @"ggv$e1", i64 0, i64 0, ptr nonnull %11, ptr nonnull %__.context_ptr), !noalias !1733
  %348 = load i64, ptr %11, align 8, !noalias !1729
  %349 = load i64, ptr %194, align 8, !noalias !1729
  %350 = add i64 %349, %348
  store i64 %350, ptr %194, align 8, !noalias !1729
  br label %io.write_string.exit368

io.write_string.exit368:                          ; preds = %if.done92, %if.then.i.i365
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !1725
  %351 = load ptr, ptr %1, align 8
  %352 = ptrtoint ptr %351 to i64
  %353 = load i64, ptr %300, align 8
  %354 = mul i64 %353, %i82.0422
  %355 = add i64 %354, %352
  %356 = inttoptr i64 %355 to ptr
  store ptr %356, ptr %42, align 8
  %357 = load ptr, ptr %36, align 8
  %358 = getelementptr inbounds %runtime.Type_Info, ptr %357, i64 0, i32 4
  %359 = load i64, ptr %358, align 8
  store i64 %359, ptr %.repack230, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %42, i32 %2, ptr %__.context_ptr)
  %360 = add nuw nsw i64 %i82.0422, 1
  %361 = icmp slt i64 %360, %293
  br i1 %361, label %for.interval.body84, label %defer98

defer98:                                          ; preds = %io.write_string.exit368, %if.else81, %defer79
  %362 = call fastcc i32 @io.write_byte(ptr nonnull %193, i8 93, ptr nonnull %194, ptr %__.context_ptr)
  %363 = load i64, ptr %188, align 8
  %364 = add i64 %363, -1
  store i64 %364, ptr %188, align 8
  br label %common.ret

typeswitch.body99:                                ; preds = %if.done6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %36, ptr nonnull align 16 %71, i64 24, i1 false)
  %365 = getelementptr inbounds %runtime.Type_Info_Array, ptr %36, i64 0, i32 2
  %366 = load i64, ptr %365, align 8
  %367 = load ptr, ptr %1, align 8
  %368 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20, i32 1
  %369 = load i64, ptr %368, align 8
  %370 = icmp eq i64 %369, 1
  br i1 %370, label %if.then106, label %if.else107

if.then106:                                       ; preds = %typeswitch.body99
  %371 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20
  %372 = load i64, ptr %371, align 8
  %373 = tail call i64 @llvm.smin.i64(i64 %366, i64 %372)
  br label %if.done110

if.else107:                                       ; preds = %typeswitch.body99
  %374 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 21
  %375 = load i8, ptr %374, align 1
  %.not222 = icmp eq i8 %375, 0
  br i1 %.not222, label %if.done110, label %if.then108

if.then108:                                       ; preds = %if.else107
  %376 = getelementptr inbounds %runtime.Type_Info_Array, ptr %36, i64 0, i32 1
  %377 = load i64, ptr %376, align 8
  %378 = load ptr, ptr %36, align 8
  tail call fastcc void @fmt.fmt_array_nul_terminated(ptr nonnull %0, ptr %367, i64 %366, i64 %377, ptr %378, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.done110:                                       ; preds = %if.else107, %if.then106
  %n100.0 = phi i64 [ %373, %if.then106 ], [ %366, %if.else107 ]
  %379 = getelementptr inbounds %runtime.Type_Info_Array, ptr %36, i64 0, i32 1
  %380 = load i64, ptr %379, align 8
  %381 = load ptr, ptr %36, align 8
  tail call fastcc void @fmt.fmt_array(ptr nonnull %0, ptr %367, i64 %n100.0, i64 %380, ptr %381, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body111:                               ; preds = %if.done6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %36, ptr nonnull align 16 %71, i64 16, i1 false)
  %382 = load ptr, ptr %1, align 8
  %383 = getelementptr inbounds %runtime.Raw_Slice, ptr %382, i64 0, i32 1
  %384 = load i64, ptr %383, align 8
  %385 = load ptr, ptr %382, align 8
  %386 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20, i32 1
  %387 = load i64, ptr %386, align 8
  %388 = icmp eq i64 %387, 1
  br i1 %388, label %if.then119, label %if.else120

if.then119:                                       ; preds = %typeswitch.body111
  %389 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20
  %390 = load i64, ptr %389, align 8
  %391 = tail call i64 @llvm.smin.i64(i64 %384, i64 %390)
  br label %if.done123

if.else120:                                       ; preds = %typeswitch.body111
  %392 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 21
  %393 = load i8, ptr %392, align 1
  %.not220 = icmp eq i8 %393, 0
  br i1 %.not220, label %if.done123, label %if.then121

if.then121:                                       ; preds = %if.else120
  %394 = getelementptr inbounds %runtime.Type_Info_Slice, ptr %36, i64 0, i32 1
  %395 = load i64, ptr %394, align 8
  %396 = load ptr, ptr %36, align 8
  tail call fastcc void @fmt.fmt_array_nul_terminated(ptr nonnull %0, ptr %385, i64 %384, i64 %395, ptr %396, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.done123:                                       ; preds = %if.else120, %if.then119
  %n112.0 = phi i64 [ %391, %if.then119 ], [ %384, %if.else120 ]
  %397 = getelementptr inbounds %runtime.Type_Info_Slice, ptr %36, i64 0, i32 1
  %398 = load i64, ptr %397, align 8
  %399 = load ptr, ptr %36, align 8
  tail call fastcc void @fmt.fmt_array(ptr nonnull %0, ptr %385, i64 %n112.0, i64 %398, ptr %399, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body124:                               ; preds = %if.done6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %36, ptr nonnull align 16 %71, i64 16, i1 false)
  %400 = load ptr, ptr %1, align 8
  %401 = getelementptr inbounds %runtime.Raw_Dynamic_Array, ptr %400, i64 0, i32 1
  %402 = load i64, ptr %401, align 8
  %403 = load ptr, ptr %400, align 8
  %404 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20, i32 1
  %405 = load i64, ptr %404, align 8
  %406 = icmp eq i64 %405, 1
  br i1 %406, label %if.then132, label %if.else133

if.then132:                                       ; preds = %typeswitch.body124
  %407 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 20
  %408 = load i64, ptr %407, align 8
  %409 = tail call i64 @llvm.smin.i64(i64 %402, i64 %408)
  br label %if.done136

if.else133:                                       ; preds = %typeswitch.body124
  %410 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 21
  %411 = load i8, ptr %410, align 1
  %.not218 = icmp eq i8 %411, 0
  br i1 %.not218, label %if.done136, label %if.then134

if.then134:                                       ; preds = %if.else133
  %412 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, ptr %36, i64 0, i32 1
  %413 = load i64, ptr %412, align 8
  %414 = load ptr, ptr %36, align 8
  tail call fastcc void @fmt.fmt_array_nul_terminated(ptr nonnull %0, ptr %403, i64 %402, i64 %413, ptr %414, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.done136:                                       ; preds = %if.else133, %if.then132
  %n125.0 = phi i64 [ %409, %if.then132 ], [ %402, %if.else133 ]
  %415 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, ptr %36, i64 0, i32 1
  %416 = load i64, ptr %415, align 8
  %417 = load ptr, ptr %36, align 8
  tail call fastcc void @fmt.fmt_array(ptr nonnull %0, ptr %403, i64 %n125.0, i64 %416, ptr %417, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body137:                               ; preds = %if.done6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %36, ptr nonnull align 16 %71, i64 24, i1 false)
  %418 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %419 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %420 = tail call fastcc i32 @io.write_byte(ptr nonnull %418, i8 60, ptr nonnull %419, ptr %__.context_ptr)
  %421 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, ptr %36, i64 0, i32 2
  %422 = load i64, ptr %421, align 8
  %423 = icmp sgt i64 %422, 0
  br i1 %423, label %if.done143.peel, label %defer147

if.done143.peel:                                  ; preds = %typeswitch.body137
  %424 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %.repack216 = getelementptr inbounds %..any, ptr %43, i64 0, i32 1
  %425 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, ptr %36, i64 0, i32 1
  %426 = load ptr, ptr %1, align 8
  %427 = load i64, ptr %425, align 8
  store ptr %426, ptr %43, align 8
  %428 = load ptr, ptr %36, align 8
  %429 = getelementptr inbounds %runtime.Type_Info, ptr %428, i64 0, i32 4
  %430 = load i64, ptr %429, align 8
  store i64 %430, ptr %.repack216, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %43, i32 %2, ptr %__.context_ptr)
  %.not441 = icmp eq i64 %422, 1
  br i1 %.not441, label %defer147, label %if.then142

if.then142:                                       ; preds = %if.done143.peel, %if.done143
  %i138.0420 = phi i64 [ %443, %if.done143 ], [ 1, %if.done143.peel ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !1734
  %431 = load ptr, ptr %418, align 8, !noalias !1738
  %.not.i.i369 = icmp eq ptr %431, null
  br i1 %.not.i.i369, label %if.done143, label %if.then.i.i370

if.then.i.i370:                                   ; preds = %if.then142
  %432 = load ptr, ptr %424, align 8, !noalias !1738
  store i64 0, ptr %10, align 8, !noalias !1738
  %433 = call i32 %431(ptr %432, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !1742
  %434 = load i64, ptr %10, align 8, !noalias !1738
  %435 = load i64, ptr %419, align 8, !noalias !1738
  %436 = add i64 %435, %434
  store i64 %436, ptr %419, align 8, !noalias !1738
  br label %if.done143

if.done143:                                       ; preds = %if.then.i.i370, %if.then142
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !1734
  %437 = load ptr, ptr %1, align 8
  %438 = ptrtoint ptr %437 to i64
  %439 = mul i64 %427, %i138.0420
  %440 = add i64 %439, %438
  %441 = inttoptr i64 %440 to ptr
  store ptr %441, ptr %43, align 8
  %442 = load i64, ptr %429, align 8
  store i64 %442, ptr %.repack216, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %43, i32 %2, ptr %__.context_ptr)
  %443 = add nuw nsw i64 %i138.0420, 1
  %444 = icmp slt i64 %443, %422
  br i1 %444, label %if.then142, label %defer147, !llvm.loop !1743

defer147:                                         ; preds = %if.done143, %if.done143.peel, %typeswitch.body137
  %445 = call fastcc i32 @io.write_byte(ptr nonnull %418, i8 62, ptr nonnull %419, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body148:                               ; preds = %if.done6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %36, ptr nonnull align 16 %71, i64 24, i1 false)
  %.not = icmp eq i32 %2, 118
  br i1 %.not, label %if.done150, label %if.then149

if.then149:                                       ; preds = %typeswitch.body148
  tail call fastcc void @fmt.fmt_bad_verb(ptr nonnull %0, i32 %2, ptr %__.context_ptr)
  br label %common.ret

if.done150:                                       ; preds = %typeswitch.body148
  %446 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %447 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !1744
  %448 = load ptr, ptr %446, align 8, !noalias !1748
  %.not.i.i374 = icmp eq ptr %448, null
  br i1 %.not.i.i374, label %io.write_string.exit378, label %if.then.i.i375

if.then.i.i375:                                   ; preds = %if.done150
  %449 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %450 = load ptr, ptr %449, align 8, !noalias !1748
  store i64 0, ptr %9, align 8, !noalias !1748
  %451 = call i32 %448(ptr %450, i64 4, ptr nonnull @"ggv$132", i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !1752
  %452 = load i64, ptr %9, align 8, !noalias !1748
  %453 = load i64, ptr %447, align 8, !noalias !1748
  %454 = add i64 %453, %452
  store i64 %454, ptr %447, align 8, !noalias !1748
  br label %io.write_string.exit378

io.write_string.exit378:                          ; preds = %if.done150, %if.then.i.i375
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !1744
  %455 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 19
  %456 = load i64, ptr %455, align 8
  %457 = add i64 %456, 1
  store i64 %457, ptr %455, align 8
  %458 = load ptr, ptr %1, align 8
  %.not208 = icmp eq ptr %458, null
  br i1 %.not208, label %defer164, label %if.then151

if.then151:                                       ; preds = %io.write_string.exit378
  %459 = getelementptr inbounds %runtime.Type_Info_Map, ptr %36, i64 0, i32 2
  %460 = load ptr, ptr %459, align 8
  %461 = icmp eq ptr %460, null
  br i1 %461, label %defer153, label %if.done155

defer153:                                         ; preds = %if.then151
  store i64 %456, ptr %455, align 8
  %462 = call fastcc i32 @io.write_byte(ptr nonnull %446, i8 93, ptr nonnull %447, ptr %__.context_ptr)
  br label %common.ret

if.done155:                                       ; preds = %if.then151
  %.val = load i64, ptr %458, align 8
  %.not432 = icmp eq i64 %.val, 0
  %463 = and i64 %.val, 63
  store i64 0, ptr %44, align 8
  store i64 0, ptr %45, align 8
  store ptr null, ptr %46, align 8
  call fastcc void @runtime.map_kvh_data_dynamic(i64 %.val, ptr nonnull %460, ptr %44, ptr %45, ptr %46, ptr %47)
  %464 = load i64, ptr %44, align 8
  %465 = load i64, ptr %45, align 8
  %466 = load ptr, ptr %46, align 8
  br i1 %.not432, label %defer164, label %for.interval.body157.lr.ph

for.interval.body157.lr.ph:                       ; preds = %if.done155
  %467 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %468 = getelementptr inbounds %fmt.Info, ptr %48, i64 0, i32 16
  %.repack214 = getelementptr inbounds %..any, ptr %50, i64 0, i32 1
  %.repack215 = getelementptr inbounds %..any, ptr %51, i64 0, i32 1
  %469 = getelementptr inbounds %runtime.Type_Info_Map, ptr %36, i64 0, i32 1
  %470 = getelementptr inbounds %runtime.Map_Info, ptr %460, i64 0, i32 1
  br label %for.interval.body157

for.interval.body157:                             ; preds = %for.interval.body157.lr.ph, %for.interval.post161
  %bucket_index.0418 = phi i64 [ 0, %for.interval.body157.lr.ph ], [ %539, %for.interval.post161 ]
  %j.0417 = phi i64 [ 0, %for.interval.body157.lr.ph ], [ %j.1, %for.interval.post161 ]
  %471 = getelementptr i64, ptr %466, i64 %bucket_index.0418
  %472 = load i64, ptr %471, align 8
  %473 = icmp slt i64 %472, 1
  br i1 %473, label %for.interval.post161, label %or_branch.then

or_branch.then:                                   ; preds = %for.interval.body157
  %474 = icmp sgt i64 %j.0417, 0
  br i1 %474, label %if.then159, label %if.done160

if.then159:                                       ; preds = %or_branch.then
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !1753
  %475 = load ptr, ptr %446, align 8, !noalias !1757
  %.not.i.i379 = icmp eq ptr %475, null
  br i1 %.not.i.i379, label %io.write_string.exit383, label %if.then.i.i380

if.then.i.i380:                                   ; preds = %if.then159
  %476 = load ptr, ptr %467, align 8, !noalias !1757
  store i64 0, ptr %8, align 8, !noalias !1757
  %477 = call i32 %475(ptr %476, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !1761
  %478 = load i64, ptr %8, align 8, !noalias !1757
  %479 = load i64, ptr %447, align 8, !noalias !1757
  %480 = add i64 %479, %478
  store i64 %480, ptr %447, align 8, !noalias !1757
  br label %io.write_string.exit383

io.write_string.exit383:                          ; preds = %if.then159, %if.then.i.i380
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !1753
  br label %if.done160

if.done160:                                       ; preds = %io.write_string.exit383, %or_branch.then
  %481 = add i64 %j.0417, 1
  %482 = load ptr, ptr %460, align 8
  %483 = getelementptr inbounds %runtime.Map_Cell_Info, ptr %482, i64 0, i32 3
  %484 = load i64, ptr %483, align 8, !alias.scope !1762
  %485 = getelementptr inbounds %runtime.Map_Cell_Info, ptr %482, i64 0, i32 2
  %486 = load i64, ptr %485, align 8, !alias.scope !1762
  switch i64 %484, label %switch.default.body.i [
    i64 1, label %switch.case.body.i
    i64 2, label %switch.case.body1.i
  ]

switch.case.body.i:                               ; preds = %if.done160
  %487 = mul i64 %486, %bucket_index.0418
  %488 = add i64 %487, %464
  br label %runtime.map_cell_index_dynamic.exit

switch.case.body1.i:                              ; preds = %if.done160
  %489 = lshr i64 %bucket_index.0418, 1
  %490 = load i64, ptr %482, align 8, !alias.scope !1762
  %491 = mul i64 %486, %489
  %492 = add i64 %491, %464
  %493 = and i64 %bucket_index.0418, 1
  %.not.i = icmp eq i64 %493, 0
  %494 = select i1 %.not.i, i64 0, i64 %490
  %495 = add i64 %492, %494
  br label %runtime.map_cell_index_dynamic.exit

switch.default.body.i:                            ; preds = %if.done160
  %496 = udiv i64 %bucket_index.0418, %484
  %497 = urem i64 %bucket_index.0418, %484
  %498 = load i64, ptr %482, align 8, !alias.scope !1762
  %499 = mul i64 %496, %486
  %500 = add i64 %499, %464
  %501 = mul i64 %498, %497
  %502 = add i64 %500, %501
  br label %runtime.map_cell_index_dynamic.exit

runtime.map_cell_index_dynamic.exit:              ; preds = %switch.case.body.i, %switch.case.body1.i, %switch.default.body.i
  %common.ret.op.i = phi i64 [ %488, %switch.case.body.i ], [ %495, %switch.case.body1.i ], [ %502, %switch.default.body.i ]
  %503 = load ptr, ptr %470, align 8
  %504 = getelementptr inbounds %runtime.Map_Cell_Info, ptr %503, i64 0, i32 3
  %505 = load i64, ptr %504, align 8, !alias.scope !1765
  %506 = getelementptr inbounds %runtime.Map_Cell_Info, ptr %503, i64 0, i32 2
  %507 = load i64, ptr %506, align 8, !alias.scope !1765
  switch i64 %505, label %switch.default.body.i269 [
    i64 1, label %switch.case.body.i268
    i64 2, label %switch.case.body1.i265
  ]

switch.case.body.i268:                            ; preds = %runtime.map_cell_index_dynamic.exit
  %508 = mul i64 %507, %bucket_index.0418
  %509 = add i64 %508, %465
  br label %runtime.map_cell_index_dynamic.exit270

switch.case.body1.i265:                           ; preds = %runtime.map_cell_index_dynamic.exit
  %510 = lshr i64 %bucket_index.0418, 1
  %511 = load i64, ptr %503, align 8, !alias.scope !1765
  %512 = mul i64 %507, %510
  %513 = add i64 %512, %465
  %514 = and i64 %bucket_index.0418, 1
  %.not.i266 = icmp eq i64 %514, 0
  %515 = select i1 %.not.i266, i64 0, i64 %511
  %516 = add i64 %513, %515
  br label %runtime.map_cell_index_dynamic.exit270

switch.default.body.i269:                         ; preds = %runtime.map_cell_index_dynamic.exit
  %517 = udiv i64 %bucket_index.0418, %505
  %518 = urem i64 %bucket_index.0418, %505
  %519 = load i64, ptr %503, align 8, !alias.scope !1765
  %520 = mul i64 %517, %507
  %521 = add i64 %520, %465
  %522 = mul i64 %519, %518
  %523 = add i64 %521, %522
  br label %runtime.map_cell_index_dynamic.exit270

runtime.map_cell_index_dynamic.exit270:           ; preds = %switch.case.body.i268, %switch.case.body1.i265, %switch.default.body.i269
  %common.ret.op.i267 = phi i64 [ %509, %switch.case.body.i268 ], [ %516, %switch.case.body1.i265 ], [ %523, %switch.default.body.i269 ]
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %48, i8 0, i64 120, i1 false)
  %524 = load <2 x ptr>, ptr %446, align 8
  store <2 x ptr> %524, ptr %468, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %49, ptr noundef nonnull align 8 dereferenceable(120) %48, i64 120, i1 false)
  %525 = inttoptr i64 %common.ret.op.i to ptr
  store ptr %525, ptr %50, align 8
  %526 = load ptr, ptr %36, align 8
  %527 = getelementptr inbounds %runtime.Type_Info, ptr %526, i64 0, i32 4
  %528 = load i64, ptr %527, align 8
  store i64 %528, ptr %.repack214, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %49, ptr nonnull %50, i32 118, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !1768
  %529 = load ptr, ptr %446, align 8, !noalias !1772
  %.not.i.i384 = icmp eq ptr %529, null
  br i1 %.not.i.i384, label %io.write_string.exit388, label %if.then.i.i385

if.then.i.i385:                                   ; preds = %runtime.map_cell_index_dynamic.exit270
  %530 = load ptr, ptr %467, align 8, !noalias !1772
  store i64 0, ptr %7, align 8, !noalias !1772
  %531 = call i32 %529(ptr %530, i64 4, ptr nonnull @"ggv$e5", i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !1776
  %532 = load i64, ptr %7, align 8, !noalias !1772
  %533 = load i64, ptr %447, align 8, !noalias !1772
  %534 = add i64 %533, %532
  store i64 %534, ptr %447, align 8, !noalias !1772
  br label %io.write_string.exit388

io.write_string.exit388:                          ; preds = %runtime.map_cell_index_dynamic.exit270, %if.then.i.i385
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !1768
  %535 = inttoptr i64 %common.ret.op.i267 to ptr
  store ptr %535, ptr %51, align 8
  %536 = load ptr, ptr %469, align 8
  %537 = getelementptr inbounds %runtime.Type_Info, ptr %536, i64 0, i32 4
  %538 = load i64, ptr %537, align 8
  store i64 %538, ptr %.repack215, align 8
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %51, i32 118, ptr %__.context_ptr)
  br label %for.interval.post161

for.interval.post161:                             ; preds = %for.interval.body157, %io.write_string.exit388
  %j.1 = phi i64 [ %481, %io.write_string.exit388 ], [ %j.0417, %for.interval.body157 ]
  %539 = add nuw i64 %bucket_index.0418, 1
  %bucket_index.0.highbits = lshr i64 %539, %463
  %540 = icmp eq i64 %bucket_index.0.highbits, 0
  br i1 %540, label %for.interval.body157, label %defer164.loopexit

defer164.loopexit:                                ; preds = %for.interval.post161
  %.pre = load i64, ptr %455, align 8
  %541 = add i64 %.pre, -1
  br label %defer164

defer164:                                         ; preds = %defer164.loopexit, %if.done155, %io.write_string.exit378
  %542 = phi i64 [ %541, %defer164.loopexit ], [ %456, %if.done155 ], [ %456, %io.write_string.exit378 ]
  store i64 %542, ptr %455, align 8
  %543 = call fastcc i32 @io.write_byte(ptr nonnull %446, i8 93, ptr nonnull %447, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body166:                               ; preds = %if.done6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %36, ptr noundef nonnull align 16 dereferenceable(120) %71, i64 120, i1 false)
  call fastcc void @fmt.fmt_struct(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr nonnull %36, ptr nonnull @"ggv$e9", ptr %__.context_ptr)
  br label %common.ret

typeswitch.body167:                               ; preds = %if.done6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %36, ptr noundef nonnull align 16 dereferenceable(48) %71, i64 48, i1 false)
  %544 = load i64, ptr %70, align 16
  call fastcc void @fmt.fmt_union(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr nonnull %36, i64 %544, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body168:                               ; preds = %if.done6
  tail call fastcc void @fmt.fmt_enum(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body169:                               ; preds = %if.done6
  %545 = load ptr, ptr %1, align 8
  %546 = load ptr, ptr %545, align 8
  %547 = icmp eq ptr %546, null
  %548 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  br i1 %547, label %if.then171, label %if.else172

if.then171:                                       ; preds = %typeswitch.body169
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !1777
  %549 = load ptr, ptr %548, align 8, !noalias !1781
  %.not.i.i389 = icmp eq ptr %549, null
  br i1 %.not.i.i389, label %io.write_string.exit393, label %if.then.i.i390

if.then.i.i390:                                   ; preds = %if.then171
  %550 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %551 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %552 = load ptr, ptr %551, align 8, !noalias !1781
  store i64 0, ptr %6, align 8, !noalias !1781
  %553 = call i32 %549(ptr %552, i64 4, ptr nonnull @"ggv$10c", i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !1785
  %554 = load i64, ptr %6, align 8, !noalias !1781
  %555 = load i64, ptr %550, align 8, !noalias !1781
  %556 = add i64 %555, %554
  store i64 %556, ptr %550, align 8, !noalias !1781
  br label %io.write_string.exit393

io.write_string.exit393:                          ; preds = %if.then171, %if.then.i.i390
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !1777
  br label %common.ret

if.else172:                                       ; preds = %typeswitch.body169
  %557 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  store i64 0, ptr %5, align 8, !noalias !1786
  %558 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %548, ptr %70, ptr nonnull %557, ptr %5, ptr %__.context_ptr), !noalias !1790
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !1791
  %559 = load ptr, ptr %548, align 8, !noalias !1795
  %.not.i.i395 = icmp eq ptr %559, null
  br i1 %.not.i.i395, label %io.write_string.exit399, label %if.then.i.i396

if.then.i.i396:                                   ; preds = %if.else172
  %560 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %561 = load ptr, ptr %560, align 8, !noalias !1795
  store i64 0, ptr %4, align 8, !noalias !1795
  %562 = call i32 %559(ptr %561, i64 4, ptr nonnull @"ggv$e8", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !1799
  %563 = load i64, ptr %4, align 8, !noalias !1795
  %564 = load i64, ptr %557, align 8, !noalias !1795
  %565 = add i64 %564, %563
  store i64 %565, ptr %557, align 8, !noalias !1795
  br label %io.write_string.exit399

io.write_string.exit399:                          ; preds = %if.else172, %if.then.i.i396
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !1791
  %566 = ptrtoint ptr %546 to i64
  call fastcc void @fmt._fmt_int(ptr nonnull %0, i64 %566, i64 16, i1 zeroext false, i64 64, ptr nonnull @fmt.__DIGITS_UPPER, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body174:                               ; preds = %if.done6
  %567 = load ptr, ptr %1, align 8
  %568 = load i64, ptr %567, align 8
  %569 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %570 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %571 = and i64 %568, 72057594037927935
  %572 = icmp ugt i64 %571, 150
  %n.0.i.i402 = select i1 %572, i64 0, i64 %571
  %573 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i.i402
  store i64 0, ptr %3, align 8, !noalias !1800
  %574 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %569, ptr %573, ptr nonnull %570, ptr %3, ptr %__.context_ptr), !noalias !1804
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  br label %common.ret

typeswitch.body175:                               ; preds = %if.done6
  tail call fastcc void @fmt.fmt_bit_set(ptr nonnull %0, ptr nonnull %1, ptr nonnull @"ggv$e9", i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body176:                               ; preds = %if.done6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %36, ptr nonnull align 16 %71, i64 16, i1 false)
  %575 = load ptr, ptr %1, align 8
  %576 = getelementptr inbounds %runtime.Type_Info_Relative_Pointer, ptr %36, i64 0, i32 1
  %577 = load ptr, ptr %576, align 8
  %578 = getelementptr inbounds %runtime.Type_Info, ptr %577, i64 0, i32 4
  %579 = load i64, ptr %578, align 8
  %580 = tail call fastcc ptr @reflect.relative_pointer_to_absolute_raw(ptr %575, i64 %579)
  %581 = load ptr, ptr %36, align 8
  %582 = getelementptr inbounds %runtime.Type_Info, ptr %581, i64 0, i32 4
  %583 = load i64, ptr %582, align 8
  store ptr %580, ptr %absolute_ptr, align 8
  %absolute_ptr.repack206 = getelementptr inbounds %..any, ptr %absolute_ptr, i64 0, i32 1
  store i64 %583, ptr %absolute_ptr.repack206, align 8
  call fastcc void @fmt.fmt_value(ptr nonnull %0, ptr nonnull %absolute_ptr, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body178:                               ; preds = %if.done6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %36, ptr nonnull align 16 %71, i64 16, i1 false)
  %584 = load ptr, ptr %1, align 8
  %585 = getelementptr inbounds %runtime.Type_Info_Relative_Multi_Pointer, ptr %36, i64 0, i32 1
  %586 = load ptr, ptr %585, align 8
  %587 = getelementptr inbounds %runtime.Type_Info, ptr %586, i64 0, i32 4
  %588 = load i64, ptr %587, align 8
  %589 = tail call fastcc ptr @reflect.relative_pointer_to_absolute_raw(ptr %584, i64 %588)
  %590 = load ptr, ptr %36, align 8
  %591 = getelementptr inbounds %runtime.Type_Info, ptr %590, i64 0, i32 4
  %592 = load i64, ptr %591, align 8
  store ptr %589, ptr %absolute_ptr180, align 8
  %absolute_ptr180.repack201 = getelementptr inbounds %..any, ptr %absolute_ptr180, i64 0, i32 1
  store i64 %592, ptr %absolute_ptr180.repack201, align 8
  call fastcc void @fmt.fmt_value(ptr nonnull %0, ptr nonnull %absolute_ptr180, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body181:                               ; preds = %if.done6
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %36, ptr noundef nonnull align 16 dereferenceable(40) %71, i64 40, i1 false)
  call fastcc void @fmt.fmt_matrix(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr nonnull %36, ptr %__.context_ptr)
  br label %common.ret
}

define internal fastcc void @fmt.fmt_complex(ptr %0, double %.0.val, double %.8.val, i64 %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %buf.i.i1 = alloca [1 x i8], align 1
  %4 = alloca { ptr, i64 }, align 8
  %5 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  switch i32 %2, label %switch.default.body [
    i32 102, label %switch.case.body
    i32 70, label %switch.case.body
    i32 118, label %switch.case.body
    i32 104, label %switch.case.body
    i32 72, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %decls, %decls, %decls, %decls, %decls
  %7 = lshr i64 %1, 1
  tail call fastcc void @fmt.fmt_float(ptr %0, double %.0.val, i64 %7, i32 %2, ptr %__.context_ptr)
  %8 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 1
  %9 = load i8, ptr %8, align 1
  %.not = icmp ne i8 %9, 0
  %10 = fcmp ult double %.8.val, 0.000000e+00
  %or.cond = select i1 %.not, i1 true, i1 %10
  br i1 %or.cond, label %if.done, label %if.then

if.then:                                          ; preds = %switch.case.body
  %11 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %12 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1805
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6), !noalias !1805
  store i8 43, ptr %buf.i.i, align 1, !noalias !1809
  store ptr %buf.i.i, ptr %6, align 8, !noalias !1809
  %13 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %13, align 8, !noalias !1809
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !1809
  %14 = load ptr, ptr %11, align 8, !noalias !1812
  %.not.i.i.i = icmp eq ptr %14, null
  br i1 %.not.i.i.i, label %.thread.i, label %io.write_byte.exit.i

.thread.i:                                        ; preds = %if.then
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !1809
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1805
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !1805
  br label %if.done

io.write_byte.exit.i:                             ; preds = %if.then
  %15 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %16 = load ptr, ptr %15, align 8, !noalias !1812
  store i64 0, ptr %5, align 8, !noalias !1812
  %17 = call i32 %14(ptr %16, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !1816
  %.fr.i = freeze i32 %17
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !1809
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1805
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !1805
  %.not1 = icmp eq i32 %.fr.i, 0
  br i1 %.not1, label %if.then2.i, label %if.done

if.then2.i:                                       ; preds = %io.write_byte.exit.i
  %18 = load i64, ptr %12, align 8, !noalias !1805
  %19 = add i64 %18, 1
  store i64 %19, ptr %12, align 8, !noalias !1805
  br label %if.done

if.done:                                          ; preds = %if.then2.i, %io.write_byte.exit.i, %.thread.i, %switch.case.body
  call fastcc void @fmt.fmt_float(ptr nonnull %0, double %.8.val, i64 %7, i32 %2, ptr %__.context_ptr)
  %20 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %21 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i1), !noalias !1817
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4), !noalias !1817
  store i8 105, ptr %buf.i.i1, align 1, !noalias !1821
  store ptr %buf.i.i1, ptr %4, align 8, !noalias !1821
  %22 = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  store i64 1, ptr %22, align 8, !noalias !1821
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !1821
  %23 = load ptr, ptr %20, align 8, !noalias !1824
  %.not.i.i.i2 = icmp eq ptr %23, null
  br i1 %.not.i.i.i2, label %.thread.i8, label %io.write_byte.exit.i3

.thread.i8:                                       ; preds = %if.done
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !1821
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i1), !noalias !1817
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !1817
  br label %common.ret

io.write_byte.exit.i3:                            ; preds = %if.done
  %24 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %25 = load ptr, ptr %24, align 8, !noalias !1824
  store i64 0, ptr %3, align 8, !noalias !1824
  %26 = call i32 %23(ptr %25, i64 4, ptr nonnull %4, i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !1828
  %.fr.i4 = freeze i32 %26
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !1821
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i1), !noalias !1817
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !1817
  %.not2 = icmp eq i32 %.fr.i4, 0
  br i1 %.not2, label %if.then2.i6, label %common.ret

if.then2.i6:                                      ; preds = %io.write_byte.exit.i3
  %27 = load i64, ptr %21, align 8, !noalias !1817
  %28 = add i64 %27, 1
  store i64 %28, ptr %21, align 8, !noalias !1817
  br label %common.ret

common.ret:                                       ; preds = %if.then2.i6, %io.write_byte.exit.i3, %.thread.i8, %switch.default.body
  ret void

switch.default.body:                              ; preds = %decls
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %2, ptr %__.context_ptr)
  br label %common.ret
}

define internal fastcc void @fmt.fmt_quaternion(ptr %0, ptr nocapture readonly %1, i64 %2, i32 %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %buf.i.i47 = alloca [1 x i8], align 1
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca i64, align 8
  %buf.i.i38 = alloca [1 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca i64, align 8
  %buf.i.i29 = alloca [1 x i8], align 1
  %9 = alloca { ptr, i64 }, align 8
  %10 = alloca i64, align 8
  %buf.i.i20 = alloca [1 x i8], align 1
  %11 = alloca { ptr, i64 }, align 8
  %12 = alloca i64, align 8
  %buf.i.i11 = alloca [1 x i8], align 1
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca i64, align 8
  %buf.i.i = alloca [1 x i8], align 1
  %15 = alloca { ptr, i64 }, align 8
  switch i32 %3, label %switch.default.body [
    i32 102, label %switch.case.body
    i32 70, label %switch.case.body
    i32 118, label %switch.case.body
    i32 104, label %switch.case.body
    i32 72, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %decls, %decls, %decls, %decls, %decls
  %16 = getelementptr inbounds %..quaternion256, ptr %1, i64 0, i32 3
  %17 = load double, ptr %16, align 8
  %18 = load double, ptr %1, align 8
  %19 = getelementptr inbounds %..quaternion256, ptr %1, i64 0, i32 1
  %20 = load double, ptr %19, align 8
  %21 = getelementptr inbounds %..quaternion256, ptr %1, i64 0, i32 2
  %22 = load double, ptr %21, align 8
  %23 = lshr i64 %2, 2
  tail call fastcc void @fmt.fmt_float(ptr %0, double %17, i64 %23, i32 %3, ptr %__.context_ptr)
  %24 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 1
  %25 = load i8, ptr %24, align 1
  %.not = icmp ne i8 %25, 0
  %26 = fcmp ult double %18, 0.000000e+00
  %or.cond = select i1 %.not, i1 true, i1 %26
  br i1 %or.cond, label %if.done, label %if.then

if.then:                                          ; preds = %switch.case.body
  %27 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %28 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1829
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %15), !noalias !1829
  store i8 43, ptr %buf.i.i, align 1, !noalias !1833
  store ptr %buf.i.i, ptr %15, align 8, !noalias !1833
  %29 = getelementptr inbounds { ptr, i64 }, ptr %15, i64 0, i32 1
  store i64 1, ptr %29, align 8, !noalias !1833
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14), !noalias !1833
  %30 = load ptr, ptr %27, align 8, !noalias !1836
  %.not.i.i.i = icmp eq ptr %30, null
  br i1 %.not.i.i.i, label %.thread.i, label %io.write_byte.exit.i

.thread.i:                                        ; preds = %if.then
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !1833
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1829
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15), !noalias !1829
  br label %if.done

io.write_byte.exit.i:                             ; preds = %if.then
  %31 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %32 = load ptr, ptr %31, align 8, !noalias !1836
  store i64 0, ptr %14, align 8, !noalias !1836
  %33 = call i32 %30(ptr %32, i64 4, ptr nonnull %15, i64 0, i64 0, ptr nonnull %14, ptr nonnull %__.context_ptr), !noalias !1840
  %.fr.i = freeze i32 %33
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !1833
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i), !noalias !1829
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15), !noalias !1829
  %.not56 = icmp eq i32 %.fr.i, 0
  br i1 %.not56, label %if.then2.i, label %if.done

if.then2.i:                                       ; preds = %io.write_byte.exit.i
  %34 = load i64, ptr %28, align 8, !noalias !1829
  %35 = add i64 %34, 1
  store i64 %35, ptr %28, align 8, !noalias !1829
  br label %if.done

if.done:                                          ; preds = %if.then2.i, %io.write_byte.exit.i, %.thread.i, %switch.case.body
  call fastcc void @fmt.fmt_float(ptr nonnull %0, double %18, i64 %23, i32 %3, ptr %__.context_ptr)
  %36 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %37 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i11), !noalias !1841
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13), !noalias !1841
  store i8 105, ptr %buf.i.i11, align 1, !noalias !1845
  store ptr %buf.i.i11, ptr %13, align 8, !noalias !1845
  %38 = getelementptr inbounds { ptr, i64 }, ptr %13, i64 0, i32 1
  store i64 1, ptr %38, align 8, !noalias !1845
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !1845
  %39 = load ptr, ptr %36, align 8, !noalias !1848
  %.not.i.i.i12 = icmp eq ptr %39, null
  br i1 %.not.i.i.i12, label %.thread.i18, label %io.write_byte.exit.i13

.thread.i18:                                      ; preds = %if.done
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !1845
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i11), !noalias !1841
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13), !noalias !1841
  br label %io.write_rune.exit19

io.write_byte.exit.i13:                           ; preds = %if.done
  %40 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %41 = load ptr, ptr %40, align 8, !noalias !1848
  store i64 0, ptr %12, align 8, !noalias !1848
  %42 = call i32 %39(ptr %41, i64 4, ptr nonnull %13, i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !1852
  %.fr.i14 = freeze i32 %42
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !1845
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i11), !noalias !1841
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13), !noalias !1841
  %.not57 = icmp eq i32 %.fr.i14, 0
  br i1 %.not57, label %if.then2.i16, label %io.write_rune.exit19

if.then2.i16:                                     ; preds = %io.write_byte.exit.i13
  %43 = load i64, ptr %37, align 8, !noalias !1841
  %44 = add i64 %43, 1
  store i64 %44, ptr %37, align 8, !noalias !1841
  br label %io.write_rune.exit19

io.write_rune.exit19:                             ; preds = %.thread.i18, %io.write_byte.exit.i13, %if.then2.i16
  %45 = load i8, ptr %24, align 1
  %.not7 = icmp ne i8 %45, 0
  %46 = fcmp ult double %20, 0.000000e+00
  %or.cond9 = select i1 %.not7, i1 true, i1 %46
  br i1 %or.cond9, label %if.done3, label %if.then2

if.then2:                                         ; preds = %io.write_rune.exit19
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i20), !noalias !1853
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11), !noalias !1853
  store i8 43, ptr %buf.i.i20, align 1, !noalias !1857
  store ptr %buf.i.i20, ptr %11, align 8, !noalias !1857
  %47 = getelementptr inbounds { ptr, i64 }, ptr %11, i64 0, i32 1
  store i64 1, ptr %47, align 8, !noalias !1857
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !1857
  %48 = load ptr, ptr %36, align 8, !noalias !1860
  %.not.i.i.i21 = icmp eq ptr %48, null
  br i1 %.not.i.i.i21, label %.thread.i27, label %io.write_byte.exit.i22

.thread.i27:                                      ; preds = %if.then2
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !1857
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i20), !noalias !1853
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11), !noalias !1853
  br label %if.done3

io.write_byte.exit.i22:                           ; preds = %if.then2
  %49 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %50 = load ptr, ptr %49, align 8, !noalias !1860
  store i64 0, ptr %10, align 8, !noalias !1860
  %51 = call i32 %48(ptr %50, i64 4, ptr nonnull %11, i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !1864
  %.fr.i23 = freeze i32 %51
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !1857
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i20), !noalias !1853
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11), !noalias !1853
  %.not58 = icmp eq i32 %.fr.i23, 0
  br i1 %.not58, label %if.then2.i25, label %if.done3

if.then2.i25:                                     ; preds = %io.write_byte.exit.i22
  %52 = load i64, ptr %37, align 8, !noalias !1853
  %53 = add i64 %52, 1
  store i64 %53, ptr %37, align 8, !noalias !1853
  br label %if.done3

if.done3:                                         ; preds = %if.then2.i25, %io.write_byte.exit.i22, %.thread.i27, %io.write_rune.exit19
  call fastcc void @fmt.fmt_float(ptr nonnull %0, double %20, i64 %23, i32 %3, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i29), !noalias !1865
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9), !noalias !1865
  store i8 106, ptr %buf.i.i29, align 1, !noalias !1869
  store ptr %buf.i.i29, ptr %9, align 8, !noalias !1869
  %54 = getelementptr inbounds { ptr, i64 }, ptr %9, i64 0, i32 1
  store i64 1, ptr %54, align 8, !noalias !1869
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !1869
  %55 = load ptr, ptr %36, align 8, !noalias !1872
  %.not.i.i.i30 = icmp eq ptr %55, null
  br i1 %.not.i.i.i30, label %.thread.i36, label %io.write_byte.exit.i31

.thread.i36:                                      ; preds = %if.done3
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !1869
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i29), !noalias !1865
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9), !noalias !1865
  br label %io.write_rune.exit37

io.write_byte.exit.i31:                           ; preds = %if.done3
  %56 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %57 = load ptr, ptr %56, align 8, !noalias !1872
  store i64 0, ptr %8, align 8, !noalias !1872
  %58 = call i32 %55(ptr %57, i64 4, ptr nonnull %9, i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !1876
  %.fr.i32 = freeze i32 %58
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !1869
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i29), !noalias !1865
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9), !noalias !1865
  %.not59 = icmp eq i32 %.fr.i32, 0
  br i1 %.not59, label %if.then2.i34, label %io.write_rune.exit37

if.then2.i34:                                     ; preds = %io.write_byte.exit.i31
  %59 = load i64, ptr %37, align 8, !noalias !1865
  %60 = add i64 %59, 1
  store i64 %60, ptr %37, align 8, !noalias !1865
  br label %io.write_rune.exit37

io.write_rune.exit37:                             ; preds = %.thread.i36, %io.write_byte.exit.i31, %if.then2.i34
  %61 = load i8, ptr %24, align 1
  %.not8 = icmp ne i8 %61, 0
  %62 = fcmp ult double %22, 0.000000e+00
  %or.cond10 = select i1 %.not8, i1 true, i1 %62
  br i1 %or.cond10, label %if.done6, label %if.then5

if.then5:                                         ; preds = %io.write_rune.exit37
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i38), !noalias !1877
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7), !noalias !1877
  store i8 43, ptr %buf.i.i38, align 1, !noalias !1881
  store ptr %buf.i.i38, ptr %7, align 8, !noalias !1881
  %63 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 1, ptr %63, align 8, !noalias !1881
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !1881
  %64 = load ptr, ptr %36, align 8, !noalias !1884
  %.not.i.i.i39 = icmp eq ptr %64, null
  br i1 %.not.i.i.i39, label %.thread.i45, label %io.write_byte.exit.i40

.thread.i45:                                      ; preds = %if.then5
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !1881
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i38), !noalias !1877
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7), !noalias !1877
  br label %if.done6

io.write_byte.exit.i40:                           ; preds = %if.then5
  %65 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %66 = load ptr, ptr %65, align 8, !noalias !1884
  store i64 0, ptr %6, align 8, !noalias !1884
  %67 = call i32 %64(ptr %66, i64 4, ptr nonnull %7, i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !1888
  %.fr.i41 = freeze i32 %67
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !1881
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i38), !noalias !1877
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7), !noalias !1877
  %.not60 = icmp eq i32 %.fr.i41, 0
  br i1 %.not60, label %if.then2.i43, label %if.done6

if.then2.i43:                                     ; preds = %io.write_byte.exit.i40
  %68 = load i64, ptr %37, align 8, !noalias !1877
  %69 = add i64 %68, 1
  store i64 %69, ptr %37, align 8, !noalias !1877
  br label %if.done6

if.done6:                                         ; preds = %if.then2.i43, %io.write_byte.exit.i40, %.thread.i45, %io.write_rune.exit37
  call fastcc void @fmt.fmt_float(ptr nonnull %0, double %22, i64 %23, i32 %3, ptr %__.context_ptr)
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i.i47), !noalias !1889
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5), !noalias !1889
  store i8 107, ptr %buf.i.i47, align 1, !noalias !1893
  store ptr %buf.i.i47, ptr %5, align 8, !noalias !1893
  %70 = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  store i64 1, ptr %70, align 8, !noalias !1893
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !1893
  %71 = load ptr, ptr %36, align 8, !noalias !1896
  %.not.i.i.i48 = icmp eq ptr %71, null
  br i1 %.not.i.i.i48, label %.thread.i54, label %io.write_byte.exit.i49

.thread.i54:                                      ; preds = %if.done6
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !1893
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i47), !noalias !1889
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5), !noalias !1889
  br label %common.ret

io.write_byte.exit.i49:                           ; preds = %if.done6
  %72 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %73 = load ptr, ptr %72, align 8, !noalias !1896
  store i64 0, ptr %4, align 8, !noalias !1896
  %74 = call i32 %71(ptr %73, i64 4, ptr nonnull %5, i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !1900
  %.fr.i50 = freeze i32 %74
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !1893
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i.i47), !noalias !1889
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5), !noalias !1889
  %.not61 = icmp eq i32 %.fr.i50, 0
  br i1 %.not61, label %if.then2.i52, label %common.ret

if.then2.i52:                                     ; preds = %io.write_byte.exit.i49
  %75 = load i64, ptr %37, align 8, !noalias !1889
  %76 = add i64 %75, 1
  store i64 %76, ptr %37, align 8, !noalias !1889
  br label %common.ret

common.ret:                                       ; preds = %if.then2.i52, %io.write_byte.exit.i49, %.thread.i54, %switch.default.body
  ret void

switch.default.body:                              ; preds = %decls
  tail call fastcc void @fmt.fmt_bad_verb(ptr %0, i32 %3, ptr %__.context_ptr)
  br label %common.ret
}

define internal fastcc void @fmt.fmt_arg(ptr %0, ptr nocapture readonly %1, i32 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %info = alloca %runtime.Type_Info_Named, align 8
  %6 = alloca [32 x i8], align 16
  %7 = alloca %..quaternion256, align 16
  %8 = alloca %..quaternion256, align 8
  %9 = alloca i128, align 8
  %10 = alloca i128, align 8
  %11 = load ptr, ptr %1, align 8
  %12 = getelementptr inbounds %..any, ptr %1, i64 0, i32 1
  %13 = load i64, ptr %12, align 8
  %14 = icmp eq ptr %11, null
  %15 = icmp eq i64 %13, 0
  %16 = or i1 %14, %15
  br i1 %16, label %if.then, label %if.done

common.ret:                                       ; preds = %typeswitch.body13, %typeswitch.body14, %typeswitch.body15, %typeswitch.body16, %typeswitch.body17, %typeswitch.body18, %typeswitch.body19, %typeswitch.body20, %typeswitch.body21, %typeswitch.body22, %typeswitch.body23, %typeswitch.body24, %typeswitch.body25, %typeswitch.body26, %typeswitch.body27, %typeswitch.body28, %typeswitch.body29, %typeswitch.body30, %typeswitch.body31, %typeswitch.body32, %typeswitch.body33, %typeswitch.body34, %typeswitch.body35, %typeswitch.body36, %typeswitch.body37, %typeswitch.body38, %typeswitch.body39, %typeswitch.body40, %typeswitch.body41, %typeswitch.body42, %typeswitch.body43, %typeswitch.body44, %typeswitch.body45, %typeswitch.body46, %typeswitch.body47, %typeswitch.body48, %typeswitch.body49, %typeswitch.body50, %typeswitch.body51, %typeswitch.body52, %typeswitch.body53, %typeswitch.body54, %typeswitch.body55, %typeswitch.body56, %typeswitch.body57, %typeswitch.body58, %typeswitch.body59, %typeswitch.body60, %typeswitch.body61, %typeswitch.body62, %typeswitch.body63, %typeswitch.body64, %typeswitch.body65, %typeswitch.body66, %typeswitch.default.body, %if.then11, %typeswitch.done, %io.write_string.exit
  ret void

if.then:                                          ; preds = %decls
  %17 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !1901
  %18 = load ptr, ptr %17, align 8, !noalias !1905
  %.not.i.i = icmp eq ptr %18, null
  br i1 %.not.i.i, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then
  %19 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %20 = load ptr, ptr %19, align 8, !noalias !1905
  store i64 0, ptr %4, align 8, !noalias !1905
  %21 = call i32 %18(ptr %20, i64 4, ptr nonnull @"ggv$ea", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !1909
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %if.then, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !1901
  br label %common.ret

if.done:                                          ; preds = %decls
  %22 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 17
  store ptr %11, ptr %22, align 8
  %.repack73 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 17, i32 1
  store i64 %13, ptr %.repack73, align 8
  %23 = icmp eq i32 %2, 84
  %24 = load i64, ptr %12, align 8
  %25 = and i64 %24, 72057594037927935
  %26 = icmp ugt i64 %25, 150
  %n.0.i = select i1 %26, i64 0, i64 %25
  %27 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i
  br i1 %23, label %if.then1, label %if.done8

if.then1:                                         ; preds = %if.done
  %cond = icmp eq i64 %24, 720575940379279372
  br i1 %cond, label %typeswitch.body, label %typeswitch.done

typeswitch.body:                                  ; preds = %if.then1
  %28 = load ptr, ptr %1, align 8
  %29 = load i64, ptr %28, align 1
  %.cast89 = inttoptr i64 %29 to ptr
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %if.then1, %typeswitch.body
  %ti.0 = phi ptr [ %.cast89, %typeswitch.body ], [ %27, %if.then1 ]
  %30 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %31 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  store i64 0, ptr %5, align 8
  %32 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %30, ptr %ti.0, ptr nonnull %31, ptr %5, ptr %__.context_ptr)
  br label %common.ret

if.done8:                                         ; preds = %if.done
  %33 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5, i32 1
  %34 = load i64, ptr %33, align 8
  %35 = icmp eq i64 %34, 1
  br i1 %35, label %if.then11, label %runtime.typeid_base.exit

if.then11:                                        ; preds = %if.done8
  %36 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %info, ptr noundef nonnull align 16 dereferenceable(80) %36, i64 80, i1 false)
  call fastcc void @fmt.fmt_named(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr nonnull %info, ptr %__.context_ptr)
  br label %common.ret

runtime.typeid_base.exit:                         ; preds = %if.done8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %info, i8 0, i64 80, i1 false)
  %.unpack75 = load ptr, ptr %1, align 8
  %37 = icmp ne ptr %27, null
  tail call void @llvm.assume(i1 %37)
  %38 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 4
  %39 = load i64, ptr %38, align 8
  switch i64 %39, label %typeswitch.default.body [
    i64 504403158265495582, label %typeswitch.body13
    i64 504403158265495692, label %typeswitch.body14
    i64 504403158265495661, label %typeswitch.body15
    i64 504403158265495686, label %typeswitch.body16
    i64 504403158265495681, label %typeswitch.body17
    i64 2, label %typeswitch.body18
    i64 4755801206503243882, label %typeswitch.body19
    i64 216172782113783944, label %typeswitch.body20
    i64 216172782113783919, label %typeswitch.body21
    i64 216172782113783930, label %typeswitch.body22
    i64 216172782113783925, label %typeswitch.body23
    i64 216172782113783923, label %typeswitch.body24
    i64 216172782113783920, label %typeswitch.body25
    i64 216172782113783953, label %typeswitch.body26
    i64 216172782113783924, label %typeswitch.body27
    i64 216172782113783950, label %typeswitch.body28
    i64 288230376151711879, label %typeswitch.body29
    i64 288230376151711874, label %typeswitch.body30
    i64 288230376151711872, label %typeswitch.body31
    i64 118, label %typeswitch.body32
    i64 110, label %typeswitch.body33
    i64 121, label %typeswitch.body34
    i64 4683743612465315978, label %typeswitch.body35
    i64 72057594037927945, label %typeswitch.body36
    i64 4683743612465315972, label %typeswitch.body37
    i64 72057594037928041, label %typeswitch.body38
    i64 4683743612465315867, label %typeswitch.body39
    i64 72057594037927955, label %typeswitch.body40
    i64 4683743612465315896, label %typeswitch.body41
    i64 72057594037927943, label %typeswitch.body42
    i64 4683743612465315841, label %typeswitch.body43
    i64 72057594037928043, label %typeswitch.body44
    i64 72057594037928005, label %typeswitch.body45
    i64 432345564227567639, label %typeswitch.body46
    i64 5044031582654955645, label %typeswitch.body47
    i64 4, label %typeswitch.body48
    i64 4683743612465315954, label %typeswitch.body49
    i64 72057594037928080, label %typeswitch.body50
    i64 4683743612465315967, label %typeswitch.body51
    i64 72057594037928075, label %typeswitch.body52
    i64 4683743612465315983, label %typeswitch.body53
    i64 72057594037928049, label %typeswitch.body54
    i64 4683743612465315986, label %typeswitch.body55
    i64 72057594037928062, label %typeswitch.body56
    i64 4683743612465315971, label %typeswitch.body57
    i64 72057594037928073, label %typeswitch.body58
    i64 4683743612465315981, label %typeswitch.body59
    i64 72057594037928056, label %typeswitch.body60
    i64 4683743612465315987, label %typeswitch.body61
    i64 72057594037928044, label %typeswitch.body62
    i64 4683743612465315963, label %typeswitch.body63
    i64 72057594037928069, label %typeswitch.body64
    i64 4683743612465315959, label %typeswitch.body65
    i64 72057594037928060, label %typeswitch.body66
  ]

typeswitch.body13:                                ; preds = %runtime.typeid_base.exit
  %40 = load i8, ptr %.unpack75, align 1
  %41 = icmp ne i8 %40, 0
  tail call fastcc void @fmt.fmt_bool(ptr nonnull %0, i1 zeroext %41, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body14:                                ; preds = %runtime.typeid_base.exit
  %42 = load i8, ptr %.unpack75, align 1
  %43 = icmp ne i8 %42, 0
  tail call fastcc void @fmt.fmt_bool(ptr nonnull %0, i1 zeroext %43, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body15:                                ; preds = %runtime.typeid_base.exit
  %44 = load i16, ptr %.unpack75, align 1
  %45 = icmp ne i16 %44, 0
  tail call fastcc void @fmt.fmt_bool(ptr nonnull %0, i1 zeroext %45, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body16:                                ; preds = %runtime.typeid_base.exit
  %46 = load i32, ptr %.unpack75, align 1
  %47 = icmp ne i32 %46, 0
  tail call fastcc void @fmt.fmt_bool(ptr nonnull %0, i1 zeroext %47, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body17:                                ; preds = %runtime.typeid_base.exit
  %48 = load i64, ptr %.unpack75, align 1
  %49 = icmp ne i64 %48, 0
  tail call fastcc void @fmt.fmt_bool(ptr nonnull %0, i1 zeroext %49, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body18:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  call fastcc void @fmt.fmt_arg(ptr nonnull %0, ptr nonnull %6, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body19:                                ; preds = %runtime.typeid_base.exit
  %50 = load i32, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_rune(ptr nonnull %0, i32 %50, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body20:                                ; preds = %runtime.typeid_base.exit
  %51 = load half, ptr %.unpack75, align 1
  %52 = fpext half %51 to double
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %52, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body21:                                ; preds = %runtime.typeid_base.exit
  %53 = load float, ptr %.unpack75, align 1
  %54 = fpext float %53 to double
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %54, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body22:                                ; preds = %runtime.typeid_base.exit
  %55 = load double, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %55, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body23:                                ; preds = %runtime.typeid_base.exit
  %56 = load half, ptr %.unpack75, align 1
  %57 = fpext half %56 to double
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %57, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body24:                                ; preds = %runtime.typeid_base.exit
  %58 = load float, ptr %.unpack75, align 1
  %59 = fpext float %58 to double
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %59, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body25:                                ; preds = %runtime.typeid_base.exit
  %60 = load double, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %60, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body26:                                ; preds = %runtime.typeid_base.exit
  %61 = load i16, ptr %.unpack75, align 1
  %62 = tail call i16 @llvm.bswap.i16(i16 %61)
  %.cast82 = bitcast i16 %62 to half
  %63 = fpext half %.cast82 to double
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %63, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body27:                                ; preds = %runtime.typeid_base.exit
  %64 = load i32, ptr %.unpack75, align 1
  %65 = tail call i32 @llvm.bswap.i32(i32 %64)
  %.cast81 = bitcast i32 %65 to float
  %66 = fpext float %.cast81 to double
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %66, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body28:                                ; preds = %runtime.typeid_base.exit
  %67 = load i64, ptr %.unpack75, align 1
  %68 = tail call i64 @llvm.bswap.i64(i64 %67)
  %.cast80 = bitcast i64 %68 to double
  tail call fastcc void @fmt.fmt_float(ptr nonnull %0, double %.cast80, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body29:                                ; preds = %runtime.typeid_base.exit
  %69 = load i32, ptr %.unpack75, align 1
  %70 = trunc i32 %69 to i16
  %71 = bitcast i16 %70 to half
  %72 = fpext half %71 to double
  %73 = lshr i32 %69, 16
  %74 = trunc i32 %73 to i16
  %75 = bitcast i16 %74 to half
  %76 = fpext half %75 to double
  tail call fastcc void @fmt.fmt_complex(ptr nonnull %0, double %72, double %76, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body30:                                ; preds = %runtime.typeid_base.exit
  %77 = load i64, ptr %.unpack75, align 1
  %78 = trunc i64 %77 to i32
  %79 = bitcast i32 %78 to float
  %80 = fpext float %79 to double
  %81 = lshr i64 %77, 32
  %82 = trunc i64 %81 to i32
  %83 = bitcast i32 %82 to float
  %84 = fpext float %83 to double
  tail call fastcc void @fmt.fmt_complex(ptr nonnull %0, double %80, double %84, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body31:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  %.val = load double, ptr %6, align 16
  %85 = getelementptr inbounds i8, ptr %6, i64 8
  %.val93 = load double, ptr %85, align 8
  tail call fastcc void @fmt.fmt_complex(ptr nonnull %0, double %.val, double %.val93, i64 128, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body32:                                ; preds = %runtime.typeid_base.exit
  %86 = load i64, ptr %.unpack75, align 1
  %87 = lshr i64 %86, 16
  %88 = insertelement <2 x i64> poison, i64 %86, i64 0
  %89 = insertelement <2 x i64> %88, i64 %87, i64 1
  %90 = trunc <2 x i64> %89 to <2 x i16>
  %91 = bitcast <2 x i16> %90 to <2 x half>
  %92 = fpext <2 x half> %91 to <2 x double>
  store <2 x double> %92, ptr %7, align 16
  %93 = getelementptr inbounds %..quaternion256, ptr %7, i64 0, i32 2
  %94 = shufflevector <2 x i64> %88, <2 x i64> poison, <2 x i32> zeroinitializer
  %95 = lshr <2 x i64> %94, <i64 32, i64 48>
  %96 = trunc <2 x i64> %95 to <2 x i16>
  %97 = bitcast <2 x i16> %96 to <2 x half>
  %98 = fpext <2 x half> %97 to <2 x double>
  store <2 x double> %98, ptr %93, align 16
  call fastcc void @fmt.fmt_quaternion(ptr nonnull %0, ptr nonnull %7, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body33:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  %99 = load <4 x float>, ptr %6, align 16
  %100 = fpext <4 x float> %99 to <4 x double>
  store <4 x double> %100, ptr %8, align 8
  call fastcc void @fmt.fmt_quaternion(ptr nonnull %0, ptr nonnull %8, i64 128, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body34:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 32, i1 false)
  call fastcc void @fmt.fmt_quaternion(ptr nonnull %0, ptr nonnull %6, i64 256, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body35:                                ; preds = %runtime.typeid_base.exit
  %101 = load i8, ptr %.unpack75, align 1
  %102 = sext i8 %101 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %102, i1 zeroext true, i64 8, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body36:                                ; preds = %runtime.typeid_base.exit
  %103 = load i8, ptr %.unpack75, align 1
  %104 = zext i8 %103 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %104, i1 zeroext false, i64 8, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body37:                                ; preds = %runtime.typeid_base.exit
  %105 = load i16, ptr %.unpack75, align 1
  %106 = sext i16 %105 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %106, i1 zeroext true, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body38:                                ; preds = %runtime.typeid_base.exit
  %107 = load i16, ptr %.unpack75, align 1
  %108 = zext i16 %107 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %108, i1 zeroext false, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body39:                                ; preds = %runtime.typeid_base.exit
  %109 = load i32, ptr %.unpack75, align 1
  %110 = sext i32 %109 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %110, i1 zeroext true, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body40:                                ; preds = %runtime.typeid_base.exit
  %111 = load i32, ptr %.unpack75, align 1
  %112 = zext i32 %111 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %112, i1 zeroext false, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body41:                                ; preds = %runtime.typeid_base.exit
  %113 = load i64, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %113, i1 zeroext true, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body42:                                ; preds = %runtime.typeid_base.exit
  %114 = load i64, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %114, i1 zeroext false, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body43:                                ; preds = %runtime.typeid_base.exit
  %115 = load i64, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %115, i1 zeroext true, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body44:                                ; preds = %runtime.typeid_base.exit
  %116 = load i64, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %116, i1 zeroext false, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body45:                                ; preds = %runtime.typeid_base.exit
  %117 = load i64, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %117, i1 zeroext false, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body46:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  call fastcc void @fmt.fmt_string(ptr nonnull %0, ptr nonnull %6, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body47:                                ; preds = %runtime.typeid_base.exit
  %118 = load i64, ptr %.unpack75, align 1
  %.cast = inttoptr i64 %118 to ptr
  tail call fastcc void @fmt.fmt_cstring(ptr nonnull %0, ptr %.cast, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body48:                                ; preds = %runtime.typeid_base.exit
  %119 = load i64, ptr %.unpack75, align 1
  %120 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %121 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %122 = and i64 %119, 72057594037927935
  %123 = icmp ugt i64 %122, 150
  %n.0.i.i92 = select i1 %123, i64 0, i64 %122
  %124 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i.i92
  store i64 0, ptr %3, align 8, !noalias !1910
  %125 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %120, ptr %124, ptr nonnull %121, ptr %3, ptr %__.context_ptr), !noalias !1914
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  br label %common.ret

typeswitch.body49:                                ; preds = %runtime.typeid_base.exit
  %126 = load i16, ptr %.unpack75, align 1
  %127 = sext i16 %126 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %127, i1 zeroext true, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body50:                                ; preds = %runtime.typeid_base.exit
  %128 = load i16, ptr %.unpack75, align 1
  %129 = zext i16 %128 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %129, i1 zeroext false, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body51:                                ; preds = %runtime.typeid_base.exit
  %130 = load i32, ptr %.unpack75, align 1
  %131 = sext i32 %130 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %131, i1 zeroext true, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body52:                                ; preds = %runtime.typeid_base.exit
  %132 = load i32, ptr %.unpack75, align 1
  %133 = zext i32 %132 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %133, i1 zeroext false, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body53:                                ; preds = %runtime.typeid_base.exit
  %134 = load i64, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %134, i1 zeroext true, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body54:                                ; preds = %runtime.typeid_base.exit
  %135 = load i64, ptr %.unpack75, align 1
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %135, i1 zeroext false, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body55:                                ; preds = %runtime.typeid_base.exit
  %136 = load i16, ptr %.unpack75, align 1
  %137 = tail call i16 @llvm.bswap.i16(i16 %136)
  %138 = sext i16 %137 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %138, i1 zeroext true, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body56:                                ; preds = %runtime.typeid_base.exit
  %139 = load i16, ptr %.unpack75, align 1
  %140 = tail call i16 @llvm.bswap.i16(i16 %139)
  %141 = zext i16 %140 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %141, i1 zeroext false, i64 16, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body57:                                ; preds = %runtime.typeid_base.exit
  %142 = load i32, ptr %.unpack75, align 1
  %143 = tail call i32 @llvm.bswap.i32(i32 %142)
  %144 = sext i32 %143 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %144, i1 zeroext true, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body58:                                ; preds = %runtime.typeid_base.exit
  %145 = load i32, ptr %.unpack75, align 1
  %146 = tail call i32 @llvm.bswap.i32(i32 %145)
  %147 = zext i32 %146 to i64
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %147, i1 zeroext false, i64 32, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body59:                                ; preds = %runtime.typeid_base.exit
  %148 = load i64, ptr %.unpack75, align 1
  %149 = tail call i64 @llvm.bswap.i64(i64 %148)
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %149, i1 zeroext true, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body60:                                ; preds = %runtime.typeid_base.exit
  %150 = load i64, ptr %.unpack75, align 1
  %151 = tail call i64 @llvm.bswap.i64(i64 %150)
  tail call fastcc void @fmt.fmt_int(ptr nonnull %0, i64 %151, i1 zeroext false, i64 64, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body61:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  call fastcc void @fmt.fmt_int_128(ptr nonnull %0, ptr nonnull %6, i1 zeroext true, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body62:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  call fastcc void @fmt.fmt_int_128(ptr nonnull %0, ptr nonnull %6, i1 zeroext false, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body63:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  call fastcc void @fmt.fmt_int_128(ptr nonnull %0, ptr nonnull %6, i1 zeroext true, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body64:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  call fastcc void @fmt.fmt_int_128(ptr nonnull %0, ptr nonnull %6, i1 zeroext false, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body65:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  %152 = load i128, ptr %6, align 16
  %153 = tail call i128 @llvm.bswap.i128(i128 %152)
  store i128 %153, ptr %9, align 8
  call fastcc void @fmt.fmt_int_128(ptr nonnull %0, ptr nonnull %9, i1 zeroext true, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.body66:                                ; preds = %runtime.typeid_base.exit
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 16 %6, ptr align 1 %.unpack75, i64 16, i1 false)
  %154 = load i128, ptr %6, align 16
  %155 = tail call i128 @llvm.bswap.i128(i128 %154)
  store i128 %155, ptr %10, align 8
  call fastcc void @fmt.fmt_int_128(ptr nonnull %0, ptr nonnull %10, i1 zeroext false, i32 %2, ptr %__.context_ptr)
  br label %common.ret

typeswitch.default.body:                          ; preds = %runtime.typeid_base.exit
  tail call fastcc void @fmt.fmt_value(ptr nonnull %0, ptr nonnull %1, i32 %2, ptr %__.context_ptr)
  br label %common.ret
}

declare x86_stdcallcc i32 @ReadConsoleW(ptr, ptr, i32, ptr, ptr) local_unnamed_addr

declare x86_stdcallcc i32 @GetConsoleMode(ptr, ptr) local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define internal void @runtime.default_logger_proc(ptr nocapture readnone %0, i64 %1, ptr nocapture readnone %2, i16 %3, ptr nocapture readnone %4, ptr noalias nocapture nonnull readnone %__.context_ptr) #10 {
decls:
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define internal fastcc void @runtime.default_context(ptr noalias nocapture writeonly %agg.result) unnamed_addr #11 {
decls:
  %c = alloca %runtime.Context, align 8
  %0 = getelementptr inbounds i8, ptr %c, i64 32
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %0, i8 0, i64 64, i1 false)
  store ptr @runtime.default_allocator_proc, ptr %c, align 8
  %1 = getelementptr inbounds %runtime.Allocator, ptr %c, i64 0, i32 1
  store ptr null, ptr %1, align 8
  %2 = getelementptr inbounds %runtime.Context, ptr %c, i64 0, i32 1
  store ptr @runtime.default_temp_allocator_proc, ptr %2, align 8
  %3 = getelementptr inbounds %runtime.Context, ptr %c, i64 0, i32 1, i32 1
  store ptr @runtime.global_default_temp_allocator_data, ptr %3, align 8
  %4 = getelementptr inbounds %runtime.Context, ptr %c, i64 0, i32 3
  store ptr @runtime.default_logger_proc, ptr %4, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %agg.result, ptr noundef nonnull align 8 dereferenceable(96) %c, i64 96, i1 false)
  ret void
}

; Function Attrs: noreturn
define internal void @runtime.default_assertion_failure_proc(ptr nocapture readonly %0, ptr nocapture readonly %1, ptr nocapture readnone %2, ptr noalias nocapture nonnull readnone %__.context_ptr) unnamed_addr #5 {
decls:
  tail call fastcc void @runtime.print_string(ptr %0)
  %3 = getelementptr inbounds %..string, ptr %1, i64 0, i32 1
  %4 = load i64, ptr %3, align 8
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %if.then, label %if.done

if.then:                                          ; preds = %decls
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$13c")
  tail call fastcc void @runtime.print_string(ptr nonnull %1)
  br label %if.done

if.done:                                          ; preds = %if.then, %decls
  tail call fastcc void @runtime.print_byte(i8 10)
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: nofree noinline norecurse nounwind memory(inaccessiblemem: readwrite)
define dso_local half @__truncsfhf2(float %0) local_unnamed_addr #12 {
decls:
  %f = alloca i64, align 8
  %.cast = bitcast float %0 to i32
  %1 = lshr i32 %.cast, 16
  %2 = and i32 %1, 32768
  %3 = lshr i32 %.cast, 23
  %4 = and i32 %3, 255
  %5 = add nsw i32 %4, -112
  %6 = and i32 %.cast, 8388607
  %7 = icmp ult i32 %4, 113
  br i1 %7, label %if.then, label %if.else

if.then:                                          ; preds = %decls
  %8 = icmp ult i32 %4, 102
  br i1 %8, label %if.then1, label %if.done

common.ret:                                       ; preds = %if.done14, %if.then13, %if.else6, %if.then5, %if.done, %if.then1
  %common.ret.op.in = phi i16 [ %9, %if.then1 ], [ %17, %if.done ], [ %21, %if.then5 ], [ %28, %if.else6 ], [ %54, %if.then13 ], [ %60, %if.done14 ]
  %common.ret.op = bitcast i16 %common.ret.op.in to half
  ret half %common.ret.op

if.then1:                                         ; preds = %if.then
  %9 = trunc i32 %2 to i16
  br label %common.ret

if.done:                                          ; preds = %if.then
  %10 = or i32 %6, 8388608
  %11 = sub nuw nsw i32 113, %4
  %12 = lshr i32 %10, %11
  %13 = and i32 %12, 4096
  %.not24 = icmp eq i32 %13, 0
  %14 = add nuw nsw i32 %12, 8192
  %spec.select = select i1 %.not24, i32 %12, i32 %14
  %15 = lshr i32 %spec.select, 13
  %16 = or i32 %15, %2
  %17 = trunc i32 %16 to i16
  br label %common.ret

if.else:                                          ; preds = %decls
  %18 = icmp eq i32 %5, 143
  br i1 %18, label %if.then4, label %if.else8

if.then4:                                         ; preds = %if.else
  %19 = icmp eq i32 %6, 0
  br i1 %19, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.then4
  %20 = trunc i32 %2 to i16
  %21 = or i16 %20, 31744
  br label %common.ret

if.else6:                                         ; preds = %if.then4
  %22 = lshr i32 %6, 13
  %23 = icmp ult i32 %6, 8192
  %24 = zext i1 %23 to i32
  %25 = or i32 %22, %24
  %26 = or i32 %25, %2
  %27 = trunc i32 %26 to i16
  %28 = or i16 %27, 31744
  br label %common.ret

if.else8:                                         ; preds = %if.else
  %29 = and i32 %.cast, 4096
  %.not = icmp eq i32 %29, 0
  %.not21 = icmp ult i32 %6, 8380416
  %30 = add nsw i32 %4, -111
  %31 = or i1 %.not, %.not21
  %spec.select29 = select i1 %31, i32 %5, i32 %30
  %32 = icmp ugt i32 %spec.select29, 30
  br i1 %32, label %if.then13, label %if.done14

if.then13:                                        ; preds = %if.else8
  store i64 1000000000000, ptr %f, align 8
  %33 = load volatile i64, ptr %f, align 8
  %34 = mul i64 %33, %33
  store volatile i64 %34, ptr %f, align 8
  %35 = load volatile i64, ptr %f, align 8
  %36 = mul i64 %35, %35
  store volatile i64 %36, ptr %f, align 8
  %37 = load volatile i64, ptr %f, align 8
  %38 = mul i64 %37, %37
  store volatile i64 %38, ptr %f, align 8
  %39 = load volatile i64, ptr %f, align 8
  %40 = mul i64 %39, %39
  store volatile i64 %40, ptr %f, align 8
  %41 = load volatile i64, ptr %f, align 8
  %42 = mul i64 %41, %41
  store volatile i64 %42, ptr %f, align 8
  %43 = load volatile i64, ptr %f, align 8
  %44 = mul i64 %43, %43
  store volatile i64 %44, ptr %f, align 8
  %45 = load volatile i64, ptr %f, align 8
  %46 = mul i64 %45, %45
  store volatile i64 %46, ptr %f, align 8
  %47 = load volatile i64, ptr %f, align 8
  %48 = mul i64 %47, %47
  store volatile i64 %48, ptr %f, align 8
  %49 = load volatile i64, ptr %f, align 8
  %50 = mul i64 %49, %49
  store volatile i64 %50, ptr %f, align 8
  %51 = load volatile i64, ptr %f, align 8
  %52 = mul i64 %51, %51
  store volatile i64 %52, ptr %f, align 8
  %53 = trunc i32 %2 to i16
  %54 = or i16 %53, 31744
  br label %common.ret

if.done14:                                        ; preds = %if.else8
  %55 = add nuw nsw i32 %6, 8192
  %spec.select28 = select i1 %.not21, i32 %55, i32 0
  %spec.select30 = select i1 %.not, i32 %6, i32 %spec.select28
  %56 = shl nuw nsw i32 %spec.select29, 10
  %57 = lshr i32 %spec.select30, 13
  %58 = or i32 %57, %56
  %59 = or i32 %58, %2
  %60 = trunc i32 %59 to i16
  br label %common.ret
}

; Function Attrs: nofree noinline norecurse nounwind memory(inaccessiblemem: readwrite)
define dso_local half @__truncdfhf2(double %0) local_unnamed_addr #12 {
decls:
  %1 = fptrunc double %0 to float
  %2 = tail call half @__truncsfhf2(float %1) #22
  ret half %2
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn memory(none)
define dso_local float @__gnu_h2f_ieee(half %0) local_unnamed_addr #13 {
decls:
  %.cast = bitcast half %0 to i16
  %1 = and i16 %.cast, 32767
  %2 = zext i16 %1 to i32
  %3 = shl nuw nsw i32 %2, 13
  %.cast1 = bitcast i32 %3 to float
  %4 = fmul float %.cast1, 0x46F0000000000000
  %5 = fcmp ult float %4, 6.553600e+04
  %6 = bitcast float %4 to i32
  %7 = or i32 %6, 2139095040
  %8 = select i1 %5, i32 %6, i32 %7
  %9 = and i16 %.cast, -32768
  %10 = zext i16 %9 to i32
  %11 = shl nuw i32 %10, 16
  %12 = or i32 %8, %11
  %.cast2 = bitcast i32 %12 to float
  ret float %.cast2
}

; Function Attrs: nofree noinline norecurse nounwind memory(inaccessiblemem: readwrite)
define dso_local half @__gnu_f2h_ieee(float %0) local_unnamed_addr #12 {
decls:
  %1 = tail call half @__truncsfhf2(float %0) #22
  ret half %1
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn memory(none)
define dso_local float @__extendhfsf2(half %0) local_unnamed_addr #13 {
decls:
  %1 = tail call float @__gnu_h2f_ieee(half %0) #22
  ret float %1
}

; Function Attrs: mustprogress nofree noinline nosync nounwind willreturn memory(argmem: read)
define dso_local double @__floattidf(ptr nocapture readonly %0) local_unnamed_addr #14 {
decls:
  %fb = alloca [2 x i32], align 8
  %1 = load i128, ptr %0, align 8
  %2 = icmp eq i128 %1, 0
  br i1 %2, label %common.ret, label %if.done

common.ret:                                       ; preds = %decls, %if.done5
  %common.ret.op = phi double [ %41, %if.done5 ], [ 0.000000e+00, %decls ]
  ret double %common.ret.op

if.done:                                          ; preds = %decls
  %3 = ashr i128 %1, 127
  %4 = xor i128 %3, %1
  %5 = sub i128 %4, %3
  %6 = tail call i128 @llvm.ctlz.i128(i128 %5, i1 false), !range !1915
  %7 = trunc i128 %6 to i32
  %8 = icmp ugt i128 %5, 9007199254740991
  br i1 %8, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %9 = sub nuw nsw i128 128, %6
  switch i128 %9, label %switch.default.body [
    i128 54, label %switch.case.body
    i128 55, label %switch.done
  ]

switch.case.body:                                 ; preds = %if.then1
  %10 = shl i128 %5, 1
  br label %switch.done

switch.default.body:                              ; preds = %if.then1
  %11 = sub nsw i128 73, %6
  %12 = icmp ult i128 %11, 128
  %13 = lshr i128 %5, %11
  %14 = select i1 %12, i128 %13, i128 0
  %15 = icmp ugt i128 %5, 36028797018963967
  %16 = lshr i128 9444732965739290427391, %6
  %17 = select i1 %15, i128 %16, i128 0
  %18 = and i128 %17, %5
  %19 = icmp ne i128 %18, 0
  %20 = zext i1 %19 to i128
  %21 = or i128 %14, %20
  br label %switch.done

switch.done:                                      ; preds = %if.then1, %switch.default.body, %switch.case.body
  %a.0 = phi i128 [ %21, %switch.default.body ], [ %5, %if.then1 ], [ %10, %switch.case.body ]
  %22 = lshr i128 %a.0, 2
  %.lobit = and i128 %22, 1
  %23 = or i128 %.lobit, %a.0
  %24 = add i128 %23, 1
  %25 = ashr i128 %24, 2
  %26 = and i128 %24, 36028797018963968
  %.not = icmp eq i128 %26, 0
  %extract.t7 = trunc i128 %25 to i32
  %extract.t11 = trunc i128 %25 to i64
  br i1 %.not, label %if.done5, label %if.then3

if.then3:                                         ; preds = %switch.done
  %27 = ashr i128 %24, 3
  %extract.t10 = trunc i128 %27 to i64
  %extract.t = trunc i128 %27 to i32
  br label %if.done5

if.else:                                          ; preds = %if.done
  %28 = add nuw nsw i128 %6, 53
  %29 = and i128 %28, 127
  %30 = shl i128 %5, %29
  %extract.t8 = trunc i128 %30 to i32
  %extract.t12 = trunc i128 %30 to i64
  br label %if.done5

if.done5:                                         ; preds = %switch.done, %if.then3, %if.else
  %.pn = phi i32 [ 128, %if.then3 ], [ 127, %switch.done ], [ 127, %if.else ]
  %a.1.off0 = phi i32 [ %extract.t, %if.then3 ], [ %extract.t7, %switch.done ], [ %extract.t8, %if.else ]
  %a.1.off09 = phi i64 [ %extract.t10, %if.then3 ], [ %extract.t11, %switch.done ], [ %extract.t12, %if.else ]
  %e.0 = sub nsw i32 %.pn, %7
  %31 = getelementptr inbounds [2 x i32], ptr %fb, i64 0, i64 1
  %32 = trunc i128 %3 to i32
  %33 = and i32 %32, -2147483648
  %34 = shl nsw i32 %e.0, 20
  %35 = add nsw i32 %34, 1072693248
  %36 = or i32 %35, %33
  %37 = lshr i64 %a.1.off09, 32
  %38 = trunc i64 %37 to i32
  %39 = and i32 %38, 1048575
  %40 = or i32 %36, %39
  store i32 %40, ptr %31, align 4
  store i32 %a.1.off0, ptr %fb, align 8
  %41 = load double, ptr %fb, align 8
  br label %common.ret
}

; Function Attrs: mustprogress nofree noinline nosync nounwind willreturn memory(argmem: read)
define dso_local double @__floattidf_unsigned(ptr nocapture readonly %0) local_unnamed_addr #14 {
decls:
  %fb = alloca [2 x i32], align 8
  %1 = load i128, ptr %0, align 8
  %2 = icmp eq i128 %1, 0
  br i1 %2, label %common.ret, label %if.done

common.ret:                                       ; preds = %decls, %if.done5
  %common.ret.op = phi double [ %36, %if.done5 ], [ 0.000000e+00, %decls ]
  ret double %common.ret.op

if.done:                                          ; preds = %decls
  %3 = tail call i128 @llvm.ctlz.i128(i128 %1, i1 true), !range !1915
  %4 = trunc i128 %3 to i32
  %5 = xor i32 %4, 127
  %6 = icmp ugt i128 %1, 9007199254740991
  br i1 %6, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %7 = trunc i128 %3 to i8
  %trunc = sub nuw i8 -128, %7
  switch i8 %trunc, label %switch.default.body [
    i8 54, label %switch.case.body
    i8 55, label %switch.done
  ]

switch.case.body:                                 ; preds = %if.then1
  %8 = shl i128 %1, 1
  br label %switch.done

switch.default.body:                              ; preds = %if.then1
  %9 = sub nsw i128 73, %3
  %10 = icmp ult i128 %9, 128
  %11 = lshr i128 %1, %9
  %12 = select i1 %10, i128 %11, i128 0
  %13 = icmp ugt i128 %1, 36028797018963967
  %14 = lshr i128 9444732965739290427391, %3
  %15 = select i1 %13, i128 %14, i128 0
  %16 = and i128 %15, %1
  %17 = icmp ne i128 %16, 0
  %18 = zext i1 %17 to i128
  %19 = or i128 %12, %18
  br label %switch.done

switch.done:                                      ; preds = %if.then1, %switch.default.body, %switch.case.body
  %a.0 = phi i128 [ %19, %switch.default.body ], [ %1, %if.then1 ], [ %8, %switch.case.body ]
  %20 = lshr i128 %a.0, 2
  %.lobit = and i128 %20, 1
  %21 = or i128 %.lobit, %a.0
  %22 = add i128 %21, 1
  %23 = lshr i128 %22, 2
  %24 = and i128 %22, 36028797018963968
  %.not = icmp eq i128 %24, 0
  %extract.t7 = trunc i128 %23 to i32
  %extract.t11 = trunc i128 %23 to i64
  br i1 %.not, label %if.done5, label %if.then3

if.then3:                                         ; preds = %switch.done
  %25 = lshr i128 %22, 3
  %extract.t10 = trunc i128 %25 to i64
  %extract.t = trunc i128 %25 to i32
  %26 = sub nuw nsw i32 128, %4
  br label %if.done5

if.else:                                          ; preds = %if.done
  %27 = add nsw i128 %3, -75
  %28 = shl nuw nsw i128 %1, %27
  %extract.t8 = trunc i128 %28 to i32
  %extract.t12 = trunc i128 %28 to i64
  br label %if.done5

if.done5:                                         ; preds = %switch.done, %if.then3, %if.else
  %e.0 = phi i32 [ %26, %if.then3 ], [ %5, %switch.done ], [ %5, %if.else ]
  %a.1.off0 = phi i32 [ %extract.t, %if.then3 ], [ %extract.t7, %switch.done ], [ %extract.t8, %if.else ]
  %a.1.off09 = phi i64 [ %extract.t10, %if.then3 ], [ %extract.t11, %switch.done ], [ %extract.t12, %if.else ]
  %29 = getelementptr inbounds [2 x i32], ptr %fb, i64 0, i64 1
  %30 = shl nuw nsw i32 %e.0, 20
  %31 = add nuw nsw i32 %30, 1072693248
  %32 = lshr i64 %a.1.off09, 32
  %33 = trunc i64 %32 to i32
  %34 = and i32 %33, 1048575
  %35 = or i32 %34, %31
  store i32 %35, ptr %29, align 4
  store i32 %a.1.off0, ptr %fb, align 8
  %36 = load double, ptr %fb, align 8
  br label %common.ret
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn memory(none)
define dso_local <2 x i64> @__fixunsdfti(double %0) local_unnamed_addr #13 {
decls:
  %1 = fptoui double %0 to i64
  %.cast = insertelement <2 x i64> <i64 poison, i64 0>, i64 %1, i64 0
  ret <2 x i64> %.cast
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn memory(none)
define dso_local <2 x i64> @__fixunsdfdi(double %0) local_unnamed_addr #13 {
decls:
  %1 = fptosi double %0 to i64
  %2 = sext i64 %1 to i128
  %.cast = bitcast i128 %2 to <2 x i64>
  ret <2 x i64> %.cast
}

; Function Attrs: nofree noinline nosync nounwind memory(argmem: read)
define dso_local <2 x i64> @__umodti3(ptr nocapture readonly %0, ptr nocapture readonly %1) local_unnamed_addr #15 {
decls:
  %r = alloca i128, align 16
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = load i128, ptr %0, align 8
  %5 = load i128, ptr %1, align 8
  store i128 %4, ptr %2, align 16
  store i128 %5, ptr %3, align 16
  %6 = call fastcc <2 x i64> @runtime.udivmod128(ptr nonnull %2, ptr nonnull %3, ptr nonnull %r) #22
  %7 = load <2 x i64>, ptr %r, align 16
  ret <2 x i64> %7
}

; Function Attrs: nofree noinline nosync nounwind memory(argmem: readwrite)
define dso_local <2 x i64> @__udivmodti4(ptr nocapture readonly %0, ptr nocapture readonly %1, ptr %2) local_unnamed_addr #16 {
decls:
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = load i128, ptr %0, align 8
  %6 = load i128, ptr %1, align 8
  store i128 %5, ptr %3, align 16
  store i128 %6, ptr %4, align 16
  %7 = call fastcc <2 x i64> @runtime.udivmod128(ptr nonnull %3, ptr nonnull %4, ptr %2) #22
  ret <2 x i64> %7
}

; Function Attrs: nofree noinline nosync nounwind memory(readwrite, inaccessiblemem: none)
define dso_local <2 x i64> @__udivti3(ptr nocapture readonly %0, ptr nocapture readonly %1) local_unnamed_addr #17 {
decls:
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = load i128, ptr %0, align 8
  %5 = load i128, ptr %1, align 8
  store i128 %4, ptr %2, align 16
  store i128 %5, ptr %3, align 16
  %6 = call <2 x i64> @__udivmodti4(ptr nonnull %2, ptr nonnull %3, ptr null) #22
  ret <2 x i64> %6
}

; Function Attrs: nofree noinline nosync nounwind memory(argmem: read)
define dso_local <2 x i64> @__modti3(ptr nocapture readonly %0, ptr nocapture readonly %1) local_unnamed_addr #15 {
decls:
  %r = alloca i128, align 8
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = load i128, ptr %0, align 8
  %5 = ashr i128 %4, 127
  %6 = load i128, ptr %1, align 8
  %7 = xor i128 %5, %4
  %8 = sub i128 %7, %5
  %9 = tail call i128 @llvm.abs.i128(i128 %6, i1 false)
  store i128 %8, ptr %2, align 16
  store i128 %9, ptr %3, align 16
  %10 = call fastcc <2 x i64> @runtime.udivmod128(ptr nonnull %2, ptr nonnull %3, ptr nonnull %r) #22
  %11 = load i128, ptr %r, align 8
  %12 = xor i128 %11, %5
  %13 = sub i128 %12, %5
  %.cast = bitcast i128 %13 to <2 x i64>
  ret <2 x i64> %.cast
}

; Function Attrs: nofree noinline nosync nounwind memory(argmem: readwrite)
define dso_local <2 x i64> @__divmodti4(ptr nocapture readonly %0, ptr nocapture readonly %1, ptr %2) local_unnamed_addr #16 {
decls:
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = load i128, ptr %0, align 8
  %6 = load i128, ptr %1, align 8
  store i128 %5, ptr %3, align 16
  store i128 %6, ptr %4, align 16
  %7 = call fastcc <2 x i64> @runtime.udivmod128(ptr nonnull %3, ptr nonnull %4, ptr %2) #22
  ret <2 x i64> %7
}

; Function Attrs: nofree noinline nosync nounwind memory(readwrite, inaccessiblemem: none)
define dso_local <2 x i64> @__divti3(ptr nocapture readonly %0, ptr nocapture readonly %1) local_unnamed_addr #17 {
decls:
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = load i128, ptr %0, align 8
  %5 = load i128, ptr %1, align 8
  store i128 %4, ptr %2, align 16
  store i128 %5, ptr %3, align 16
  %6 = call <2 x i64> @__udivmodti4(ptr nonnull %2, ptr nonnull %3, ptr null) #22
  ret <2 x i64> %6
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn memory(none)
define dso_local <2 x i64> @__fixdfti(i64 %0, ptr noalias nocapture nonnull readnone %__.context_ptr) local_unnamed_addr #13 {
decls:
  %.not = icmp sgt i64 %0, -1
  %1 = select i1 %.not, i128 1, i128 -1
  %2 = lshr i64 %0, 52
  %3 = and i64 %2, 2047
  %4 = add nsw i64 %3, -1023
  %5 = and i64 %0, 4503599627370495
  %6 = or i64 %5, 4503599627370496
  %7 = icmp ugt i64 %4, 127
  br i1 %7, label %if.then3, label %if.done7

common.ret:                                       ; preds = %if.else9, %if.then8, %if.then3
  %common.ret.op.in = phi i128 [ %., %if.then3 ], [ %12, %if.then8 ], [ %17, %if.else9 ]
  %common.ret.op = bitcast i128 %common.ret.op.in to <2 x i64>
  ret <2 x i64> %common.ret.op

if.then3:                                         ; preds = %decls
  %. = select i1 %.not, i128 170141183460469231731687303715884105727, i128 -170141183460469231731687303715884105728
  br label %common.ret

if.done7:                                         ; preds = %decls
  %8 = icmp ult i64 %4, 52
  br i1 %8, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.done7
  %9 = sub nuw nsw i64 1075, %3
  %10 = lshr i64 %6, %9
  %11 = zext i64 %10 to i128
  %12 = mul nsw i128 %1, %11
  br label %common.ret

if.else9:                                         ; preds = %if.done7
  %13 = zext i64 %6 to i128
  %14 = add nsw i64 %3, -1075
  %15 = zext i64 %14 to i128
  %16 = shl nuw i128 %13, %15
  %17 = mul i128 %16, %1
  br label %common.ret
}

declare x86_stdcallcc i32 @MultiByteToWideChar(i32, i32, ptr, i32, ptr, i32) local_unnamed_addr

declare x86_stdcallcc i32 @ReadFile(ptr, ptr, i32, ptr, ptr) local_unnamed_addr

declare x86_stdcallcc i32 @CloseHandle(ptr) local_unnamed_addr

declare x86_stdcallcc i32 @FlushFileBuffers(ptr) local_unnamed_addr

define internal fastcc i32 @io.write_i64(ptr nocapture readonly %0, i64 %1, ptr %2, ptr noalias nocapture nonnull writeonly %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %a.i = alloca [129 x i8], align 1
  %5 = alloca { ptr, i64 }, align 8
  %buf = alloca [32 x i8], align 1
  %6 = alloca %..string, align 8
  %s = alloca %..string, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %buf, i8 0, i64 32, i1 false)
  call void @llvm.lifetime.start.p0(i64 129, ptr nonnull %a.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a.i, i8 0, i64 129, i1 false), !noalias !1916
  %7 = icmp slt i64 %1, 0
  %8 = tail call i64 @llvm.abs.i64(i64 %1, i1 false)
  %.not22.i = icmp ult i64 %8, 10
  %.pre.i = load ptr, ptr @strconv.digits, align 8, !noalias !1916
  br i1 %.not22.i, label %for.done.i, label %for.body.i

for.body.i:                                       ; preds = %decls, %for.body.i
  %u.024.i = phi i64 [ %14, %for.body.i ], [ %8, %decls ]
  %i.023.i = phi i64 [ %9, %for.body.i ], [ 129, %decls ]
  %9 = add i64 %i.023.i, -1
  %10 = getelementptr [129 x i8], ptr %a.i, i64 0, i64 %9
  %11 = urem i64 %u.024.i, 10
  %12 = getelementptr i8, ptr %.pre.i, i64 %11
  %13 = load i8, ptr %12, align 1, !noalias !1916
  store i8 %13, ptr %10, align 1, !noalias !1916
  %14 = udiv i64 %u.024.i, 10
  %.not.i = icmp ult i64 %u.024.i, 100
  br i1 %.not.i, label %for.done.i, label %for.body.i

for.done.i:                                       ; preds = %for.body.i, %decls
  %i.0.lcssa.i = phi i64 [ 129, %decls ], [ %9, %for.body.i ]
  %u.0.lcssa.i = phi i64 [ %8, %decls ], [ %14, %for.body.i ]
  %15 = add i64 %i.0.lcssa.i, -1
  %16 = getelementptr [129 x i8], ptr %a.i, i64 0, i64 %15
  %17 = getelementptr i8, ptr %.pre.i, i64 %u.0.lcssa.i
  %18 = load i8, ptr %17, align 1, !noalias !1916
  store i8 %18, ptr %16, align 1, !noalias !1916
  br i1 %7, label %switch.done11.sink.split.i, label %switch.done11.i

switch.done11.sink.split.i:                       ; preds = %for.done.i
  %19 = add i64 %i.0.lcssa.i, -2
  %20 = getelementptr [129 x i8], ptr %a.i, i64 0, i64 %19
  store i8 45, ptr %20, align 1, !noalias !1916
  br label %switch.done11.i

switch.done11.i:                                  ; preds = %for.done.i, %switch.done11.sink.split.i
  %i.3.i = phi i64 [ %19, %switch.done11.sink.split.i ], [ %15, %for.done.i ]
  %21 = sub i64 129, %i.3.i
  %22 = tail call i64 @llvm.smin.i64(i64 %21, i64 32)
  %.not.i.i = icmp slt i64 %22, 1
  br i1 %.not.i.i, label %strconv.append_bits.exit, label %if.then.i19.i

if.then.i19.i:                                    ; preds = %switch.done11.i
  %23 = getelementptr i8, ptr %a.i, i64 %i.3.i
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %buf, ptr align 1 %23, i64 %22, i1 false), !noalias !1916
  br label %strconv.append_bits.exit

strconv.append_bits.exit:                         ; preds = %switch.done11.i, %if.then.i19.i
  store ptr %buf, ptr %5, align 8, !noalias !1916
  %24 = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  store i64 %21, ptr %24, align 8, !noalias !1916
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %6, ptr nonnull align 8 %5, i64 16, i1 false), !noalias !1920
  call void @llvm.lifetime.end.p0(i64 129, ptr nonnull %a.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  %.unpack = load ptr, ptr %6, align 8
  %.elt1 = getelementptr inbounds %..string, ptr %6, i64 0, i32 1
  %.unpack2 = load i64, ptr %.elt1, align 8
  store ptr %.unpack, ptr %s, align 8
  %s.repack3 = getelementptr inbounds %..string, ptr %s, i64 0, i32 1
  store i64 %.unpack2, ptr %s.repack3, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !1921
  %25 = load ptr, ptr %0, align 8, !noalias !1925
  %.not.i.i5 = icmp eq ptr %25, null
  br i1 %.not.i.i5, label %io.write_string.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %strconv.append_bits.exit
  %26 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !noalias !1925
  store i64 0, ptr %4, align 8, !noalias !1925
  %28 = call i32 %25(ptr %27, i64 4, ptr nonnull %s, i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !1929
  %29 = load i64, ptr %4, align 8, !noalias !1925
  %.not3.i.i = icmp eq ptr %2, null
  br i1 %.not3.i.i, label %io.write_string.exit, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.then.i.i
  %30 = load i64, ptr %2, align 8, !noalias !1925
  %31 = add i64 %30, %29
  store i64 %31, ptr %2, align 8, !noalias !1925
  br label %io.write_string.exit

io.write_string.exit:                             ; preds = %strconv.append_bits.exit, %if.then.i.i, %if.then1.i.i
  %n.0.i.i = phi i64 [ %29, %if.then1.i.i ], [ %29, %if.then.i.i ], [ 0, %strconv.append_bits.exit ]
  %err.0.i.i = phi i32 [ %28, %if.then1.i.i ], [ %28, %if.then.i.i ], [ -1, %strconv.append_bits.exit ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !1921
  store i64 %n.0.i.i, ptr %3, align 8
  ret i32 %err.0.i.i
}

declare x86_stdcallcc ptr @CreateFileW(ptr, i32, i32, ptr, i32, i32, ptr) local_unnamed_addr

define internal fastcc i32 @io.write_encoded_rune(ptr nocapture readonly %0, i32 %1, i1 zeroext %2, ptr %3, ptr noalias nocapture nonnull writeonly %4, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %5 = alloca i64, align 8
  %buf.i180 = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %19 = alloca { ptr, i64 }, align 8
  %n = alloca i64, align 8
  %buf = alloca [2 x i8], align 2
  %20 = alloca { ptr, i64 }, align 8
  %21 = alloca %..string, align 8
  %s = alloca %..string, align 8
  %22 = alloca i64, align 8
  store i64 0, ptr %n, align 8
  br i1 %2, label %if.then, label %if.done2

if.then:                                          ; preds = %decls
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %19)
  store i8 39, ptr %buf.i, align 1, !noalias !1930
  store ptr %buf.i, ptr %19, align 8, !noalias !1930
  %23 = getelementptr inbounds { ptr, i64 }, ptr %19, i64 0, i32 1
  store i64 1, ptr %23, align 8, !noalias !1930
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18), !noalias !1930
  %24 = load ptr, ptr %0, align 8, !noalias !1933
  %.not.i.i = icmp eq ptr %24, null
  br i1 %.not.i.i, label %io.write_byte.exit.thread, label %io.write_byte.exit

io.write_byte.exit.thread:                        ; preds = %if.then
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18), !noalias !1930
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  br label %or_return.return

io.write_byte.exit:                               ; preds = %if.then
  %25 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !noalias !1933
  store i64 0, ptr %18, align 8, !noalias !1933
  %27 = call i32 %24(ptr %26, i64 4, ptr nonnull %19, i64 0, i64 0, ptr nonnull %18, ptr nonnull %__.context_ptr), !noalias !1937
  %28 = load i64, ptr %18, align 8, !noalias !1933
  store i64 %28, ptr %n, align 8, !noalias !1933
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18), !noalias !1930
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %19)
  %29 = icmp eq i32 %27, 0
  br i1 %29, label %if.done2, label %or_return.return

or_return.return:                                 ; preds = %io.write_byte.exit.thread, %io.write_byte.exit
  %30 = phi i64 [ 0, %io.write_byte.exit.thread ], [ %28, %io.write_byte.exit ]
  %err.0.i.i186 = phi i32 [ -1, %io.write_byte.exit.thread ], [ %27, %io.write_byte.exit ]
  store i64 %30, ptr %4, align 8
  %.not126 = icmp eq ptr %3, null
  br i1 %.not126, label %common.ret, label %common.ret.sink.split

common.ret.sink.split:                            ; preds = %or_return.return, %if.done87, %or_return.return82, %or_return.return74, %or_return.return69, %or_return.return63, %or_return.return57, %or_return.return51, %or_return.return45, %or_return.return39, %or_return.return33, %or_return.return27, %or_return.return21, %or_return.return15, %or_return.return9, %or_return.return3
  %.sink224 = phi i64 [ %41, %or_return.return3 ], [ %49, %or_return.return9 ], [ %57, %or_return.return15 ], [ %65, %or_return.return21 ], [ %73, %or_return.return27 ], [ %81, %or_return.return33 ], [ %89, %or_return.return39 ], [ %97, %or_return.return45 ], [ %106, %or_return.return51 ], [ %115, %or_return.return57 ], [ %118, %or_return.return63 ], [ %125, %or_return.return69 ], [ %128, %or_return.return74 ], [ %138, %or_return.return82 ], [ %139, %if.done87 ], [ %30, %or_return.return ]
  %common.ret.op.ph = phi i32 [ %err.0.i.i129189, %or_return.return3 ], [ %err.0.i.i133192, %or_return.return9 ], [ %err.0.i.i138195, %or_return.return15 ], [ %err.0.i.i143198, %or_return.return21 ], [ %err.0.i.i148201, %or_return.return27 ], [ %err.0.i.i153204, %or_return.return33 ], [ %err.0.i.i158207, %or_return.return39 ], [ %err.0.i.i163210, %or_return.return45 ], [ %err.0.i.i168213, %or_return.return51 ], [ %err.0.i.i173216, %or_return.return57 ], [ %116, %or_return.return63 ], [ %err.0.i.i178219, %or_return.return69 ], [ %126, %or_return.return74 ], [ %err.0.i.i183221, %or_return.return82 ], [ 0, %if.done87 ], [ %err.0.i.i186, %or_return.return ]
  %31 = load i64, ptr %3, align 8
  %32 = add i64 %31, %.sink224
  store i64 %32, ptr %3, align 8
  br label %common.ret

common.ret:                                       ; preds = %common.ret.sink.split, %if.done87, %or_return.return82, %or_return.return74, %or_return.return69, %or_return.return63, %or_return.return57, %or_return.return51, %or_return.return45, %or_return.return39, %or_return.return33, %or_return.return27, %or_return.return21, %or_return.return15, %or_return.return9, %or_return.return3, %or_return.return
  %common.ret.op = phi i32 [ %err.0.i.i186, %or_return.return ], [ %err.0.i.i129189, %or_return.return3 ], [ %err.0.i.i133192, %or_return.return9 ], [ %err.0.i.i138195, %or_return.return15 ], [ %err.0.i.i143198, %or_return.return21 ], [ %err.0.i.i148201, %or_return.return27 ], [ %err.0.i.i153204, %or_return.return33 ], [ %err.0.i.i158207, %or_return.return39 ], [ %err.0.i.i163210, %or_return.return45 ], [ %err.0.i.i168213, %or_return.return51 ], [ %err.0.i.i173216, %or_return.return57 ], [ %116, %or_return.return63 ], [ %err.0.i.i178219, %or_return.return69 ], [ %126, %or_return.return74 ], [ %err.0.i.i183221, %or_return.return82 ], [ 0, %if.done87 ], [ %common.ret.op.ph, %common.ret.sink.split ]
  ret i32 %common.ret.op

if.done2:                                         ; preds = %io.write_byte.exit, %decls
  %33 = phi i64 [ %28, %io.write_byte.exit ], [ 0, %decls ]
  switch i32 %1, label %switch.default.body [
    i32 7, label %switch.case.body
    i32 8, label %switch.case.body8
    i32 27, label %switch.case.body14
    i32 12, label %switch.case.body20
    i32 10, label %switch.case.body26
    i32 13, label %switch.case.body32
    i32 9, label %switch.case.body38
    i32 11, label %switch.case.body44
  ]

switch.case.body:                                 ; preds = %if.done2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17), !noalias !1938
  %34 = load ptr, ptr %0, align 8, !noalias !1942
  %.not.i.i127 = icmp eq ptr %34, null
  br i1 %.not.i.i127, label %io.write_string.exit.thread, label %io.write_string.exit

io.write_string.exit.thread:                      ; preds = %switch.case.body
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17), !noalias !1938
  br label %or_return.return3

io.write_string.exit:                             ; preds = %switch.case.body
  %35 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !noalias !1942
  store i64 0, ptr %17, align 8, !noalias !1942
  %37 = call i32 %34(ptr %36, i64 4, ptr nonnull @"ggv$f8", i64 0, i64 0, ptr nonnull %17, ptr nonnull %__.context_ptr), !noalias !1946
  %38 = load i64, ptr %17, align 8, !noalias !1942
  %39 = add i64 %33, %38
  store i64 %39, ptr %n, align 8, !noalias !1942
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17), !noalias !1938
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %switch.done80, label %or_return.return3

or_return.return3:                                ; preds = %io.write_string.exit.thread, %io.write_string.exit
  %41 = phi i64 [ %33, %io.write_string.exit.thread ], [ %39, %io.write_string.exit ]
  %err.0.i.i129189 = phi i32 [ -1, %io.write_string.exit.thread ], [ %37, %io.write_string.exit ]
  store i64 %41, ptr %4, align 8
  %.not116 = icmp eq ptr %3, null
  br i1 %.not116, label %common.ret, label %common.ret.sink.split

switch.case.body8:                                ; preds = %if.done2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16), !noalias !1947
  %42 = load ptr, ptr %0, align 8, !noalias !1951
  %.not.i.i130 = icmp eq ptr %42, null
  br i1 %.not.i.i130, label %io.write_string.exit134.thread, label %io.write_string.exit134

io.write_string.exit134.thread:                   ; preds = %switch.case.body8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16), !noalias !1947
  br label %or_return.return9

io.write_string.exit134:                          ; preds = %switch.case.body8
  %43 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !noalias !1951
  store i64 0, ptr %16, align 8, !noalias !1951
  %45 = call i32 %42(ptr %44, i64 4, ptr nonnull @"ggv$f9", i64 0, i64 0, ptr nonnull %16, ptr nonnull %__.context_ptr), !noalias !1955
  %46 = load i64, ptr %16, align 8, !noalias !1951
  %47 = add i64 %33, %46
  store i64 %47, ptr %n, align 8, !noalias !1951
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16), !noalias !1947
  %48 = icmp eq i32 %45, 0
  br i1 %48, label %switch.done80, label %or_return.return9

or_return.return9:                                ; preds = %io.write_string.exit134.thread, %io.write_string.exit134
  %49 = phi i64 [ %33, %io.write_string.exit134.thread ], [ %47, %io.write_string.exit134 ]
  %err.0.i.i133192 = phi i32 [ -1, %io.write_string.exit134.thread ], [ %45, %io.write_string.exit134 ]
  store i64 %49, ptr %4, align 8
  %.not115 = icmp eq ptr %3, null
  br i1 %.not115, label %common.ret, label %common.ret.sink.split

switch.case.body14:                               ; preds = %if.done2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15), !noalias !1956
  %50 = load ptr, ptr %0, align 8, !noalias !1960
  %.not.i.i135 = icmp eq ptr %50, null
  br i1 %.not.i.i135, label %io.write_string.exit139.thread, label %io.write_string.exit139

io.write_string.exit139.thread:                   ; preds = %switch.case.body14
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15), !noalias !1956
  br label %or_return.return15

io.write_string.exit139:                          ; preds = %switch.case.body14
  %51 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %52 = load ptr, ptr %51, align 8, !noalias !1960
  store i64 0, ptr %15, align 8, !noalias !1960
  %53 = call i32 %50(ptr %52, i64 4, ptr nonnull @"ggv$fa", i64 0, i64 0, ptr nonnull %15, ptr nonnull %__.context_ptr), !noalias !1964
  %54 = load i64, ptr %15, align 8, !noalias !1960
  %55 = add i64 %33, %54
  store i64 %55, ptr %n, align 8, !noalias !1960
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15), !noalias !1956
  %56 = icmp eq i32 %53, 0
  br i1 %56, label %switch.done80, label %or_return.return15

or_return.return15:                               ; preds = %io.write_string.exit139.thread, %io.write_string.exit139
  %57 = phi i64 [ %33, %io.write_string.exit139.thread ], [ %55, %io.write_string.exit139 ]
  %err.0.i.i138195 = phi i32 [ -1, %io.write_string.exit139.thread ], [ %53, %io.write_string.exit139 ]
  store i64 %57, ptr %4, align 8
  %.not114 = icmp eq ptr %3, null
  br i1 %.not114, label %common.ret, label %common.ret.sink.split

switch.case.body20:                               ; preds = %if.done2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14), !noalias !1965
  %58 = load ptr, ptr %0, align 8, !noalias !1969
  %.not.i.i140 = icmp eq ptr %58, null
  br i1 %.not.i.i140, label %io.write_string.exit144.thread, label %io.write_string.exit144

io.write_string.exit144.thread:                   ; preds = %switch.case.body20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !1965
  br label %or_return.return21

io.write_string.exit144:                          ; preds = %switch.case.body20
  %59 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %60 = load ptr, ptr %59, align 8, !noalias !1969
  store i64 0, ptr %14, align 8, !noalias !1969
  %61 = call i32 %58(ptr %60, i64 4, ptr nonnull @"ggv$fb", i64 0, i64 0, ptr nonnull %14, ptr nonnull %__.context_ptr), !noalias !1973
  %62 = load i64, ptr %14, align 8, !noalias !1969
  %63 = add i64 %33, %62
  store i64 %63, ptr %n, align 8, !noalias !1969
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !1965
  %64 = icmp eq i32 %61, 0
  br i1 %64, label %switch.done80, label %or_return.return21

or_return.return21:                               ; preds = %io.write_string.exit144.thread, %io.write_string.exit144
  %65 = phi i64 [ %33, %io.write_string.exit144.thread ], [ %63, %io.write_string.exit144 ]
  %err.0.i.i143198 = phi i32 [ -1, %io.write_string.exit144.thread ], [ %61, %io.write_string.exit144 ]
  store i64 %65, ptr %4, align 8
  %.not113 = icmp eq ptr %3, null
  br i1 %.not113, label %common.ret, label %common.ret.sink.split

switch.case.body26:                               ; preds = %if.done2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13), !noalias !1974
  %66 = load ptr, ptr %0, align 8, !noalias !1978
  %.not.i.i145 = icmp eq ptr %66, null
  br i1 %.not.i.i145, label %io.write_string.exit149.thread, label %io.write_string.exit149

io.write_string.exit149.thread:                   ; preds = %switch.case.body26
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !1974
  br label %or_return.return27

io.write_string.exit149:                          ; preds = %switch.case.body26
  %67 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %68 = load ptr, ptr %67, align 8, !noalias !1978
  store i64 0, ptr %13, align 8, !noalias !1978
  %69 = call i32 %66(ptr %68, i64 4, ptr nonnull @"ggv$fc", i64 0, i64 0, ptr nonnull %13, ptr nonnull %__.context_ptr), !noalias !1982
  %70 = load i64, ptr %13, align 8, !noalias !1978
  %71 = add i64 %33, %70
  store i64 %71, ptr %n, align 8, !noalias !1978
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !1974
  %72 = icmp eq i32 %69, 0
  br i1 %72, label %switch.done80, label %or_return.return27

or_return.return27:                               ; preds = %io.write_string.exit149.thread, %io.write_string.exit149
  %73 = phi i64 [ %33, %io.write_string.exit149.thread ], [ %71, %io.write_string.exit149 ]
  %err.0.i.i148201 = phi i32 [ -1, %io.write_string.exit149.thread ], [ %69, %io.write_string.exit149 ]
  store i64 %73, ptr %4, align 8
  %.not112 = icmp eq ptr %3, null
  br i1 %.not112, label %common.ret, label %common.ret.sink.split

switch.case.body32:                               ; preds = %if.done2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !1983
  %74 = load ptr, ptr %0, align 8, !noalias !1987
  %.not.i.i150 = icmp eq ptr %74, null
  br i1 %.not.i.i150, label %io.write_string.exit154.thread, label %io.write_string.exit154

io.write_string.exit154.thread:                   ; preds = %switch.case.body32
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !1983
  br label %or_return.return33

io.write_string.exit154:                          ; preds = %switch.case.body32
  %75 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %76 = load ptr, ptr %75, align 8, !noalias !1987
  store i64 0, ptr %12, align 8, !noalias !1987
  %77 = call i32 %74(ptr %76, i64 4, ptr nonnull @"ggv$fd", i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !1991
  %78 = load i64, ptr %12, align 8, !noalias !1987
  %79 = add i64 %33, %78
  store i64 %79, ptr %n, align 8, !noalias !1987
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !1983
  %80 = icmp eq i32 %77, 0
  br i1 %80, label %switch.done80, label %or_return.return33

or_return.return33:                               ; preds = %io.write_string.exit154.thread, %io.write_string.exit154
  %81 = phi i64 [ %33, %io.write_string.exit154.thread ], [ %79, %io.write_string.exit154 ]
  %err.0.i.i153204 = phi i32 [ -1, %io.write_string.exit154.thread ], [ %77, %io.write_string.exit154 ]
  store i64 %81, ptr %4, align 8
  %.not111 = icmp eq ptr %3, null
  br i1 %.not111, label %common.ret, label %common.ret.sink.split

switch.case.body38:                               ; preds = %if.done2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11), !noalias !1992
  %82 = load ptr, ptr %0, align 8, !noalias !1996
  %.not.i.i155 = icmp eq ptr %82, null
  br i1 %.not.i.i155, label %io.write_string.exit159.thread, label %io.write_string.exit159

io.write_string.exit159.thread:                   ; preds = %switch.case.body38
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !1992
  br label %or_return.return39

io.write_string.exit159:                          ; preds = %switch.case.body38
  %83 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %84 = load ptr, ptr %83, align 8, !noalias !1996
  store i64 0, ptr %11, align 8, !noalias !1996
  %85 = call i32 %82(ptr %84, i64 4, ptr nonnull @"ggv$fe", i64 0, i64 0, ptr nonnull %11, ptr nonnull %__.context_ptr), !noalias !2000
  %86 = load i64, ptr %11, align 8, !noalias !1996
  %87 = add i64 %33, %86
  store i64 %87, ptr %n, align 8, !noalias !1996
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !1992
  %88 = icmp eq i32 %85, 0
  br i1 %88, label %switch.done80, label %or_return.return39

or_return.return39:                               ; preds = %io.write_string.exit159.thread, %io.write_string.exit159
  %89 = phi i64 [ %33, %io.write_string.exit159.thread ], [ %87, %io.write_string.exit159 ]
  %err.0.i.i158207 = phi i32 [ -1, %io.write_string.exit159.thread ], [ %85, %io.write_string.exit159 ]
  store i64 %89, ptr %4, align 8
  %.not110 = icmp eq ptr %3, null
  br i1 %.not110, label %common.ret, label %common.ret.sink.split

switch.case.body44:                               ; preds = %if.done2
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !2001
  %90 = load ptr, ptr %0, align 8, !noalias !2005
  %.not.i.i160 = icmp eq ptr %90, null
  br i1 %.not.i.i160, label %io.write_string.exit164.thread, label %io.write_string.exit164

io.write_string.exit164.thread:                   ; preds = %switch.case.body44
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !2001
  br label %or_return.return45

io.write_string.exit164:                          ; preds = %switch.case.body44
  %91 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %92 = load ptr, ptr %91, align 8, !noalias !2005
  store i64 0, ptr %10, align 8, !noalias !2005
  %93 = call i32 %90(ptr %92, i64 4, ptr nonnull @"ggv$ff", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !2009
  %94 = load i64, ptr %10, align 8, !noalias !2005
  %95 = add i64 %33, %94
  store i64 %95, ptr %n, align 8, !noalias !2005
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !2001
  %96 = icmp eq i32 %93, 0
  br i1 %96, label %switch.done80, label %or_return.return45

or_return.return45:                               ; preds = %io.write_string.exit164.thread, %io.write_string.exit164
  %97 = phi i64 [ %33, %io.write_string.exit164.thread ], [ %95, %io.write_string.exit164 ]
  %err.0.i.i163210 = phi i32 [ -1, %io.write_string.exit164.thread ], [ %93, %io.write_string.exit164 ]
  store i64 %97, ptr %4, align 8
  %.not = icmp eq ptr %3, null
  br i1 %.not, label %common.ret, label %common.ret.sink.split

switch.default.body:                              ; preds = %if.done2
  %98 = icmp slt i32 %1, 32
  br i1 %98, label %if.then50, label %if.else

if.then50:                                        ; preds = %switch.default.body
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !2010
  %99 = load ptr, ptr %0, align 8, !noalias !2014
  %.not.i.i165 = icmp eq ptr %99, null
  br i1 %.not.i.i165, label %io.write_string.exit169.thread, label %io.write_string.exit169

io.write_string.exit169.thread:                   ; preds = %if.then50
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !2010
  br label %or_return.return51

io.write_string.exit169:                          ; preds = %if.then50
  %100 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %101 = load ptr, ptr %100, align 8, !noalias !2014
  store i64 0, ptr %9, align 8, !noalias !2014
  %102 = call i32 %99(ptr %101, i64 4, ptr nonnull @"ggv$f6", i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !2018
  %103 = load i64, ptr %9, align 8, !noalias !2014
  %104 = add i64 %33, %103
  store i64 %104, ptr %n, align 8, !noalias !2014
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !2010
  %105 = icmp eq i32 %102, 0
  br i1 %105, label %or_return.continue55, label %or_return.return51

or_return.return51:                               ; preds = %io.write_string.exit169.thread, %io.write_string.exit169
  %106 = phi i64 [ %33, %io.write_string.exit169.thread ], [ %104, %io.write_string.exit169 ]
  %err.0.i.i168213 = phi i32 [ -1, %io.write_string.exit169.thread ], [ %102, %io.write_string.exit169 ]
  store i64 %106, ptr %4, align 8
  %.not118 = icmp eq ptr %3, null
  br i1 %.not118, label %common.ret, label %common.ret.sink.split

or_return.continue55:                             ; preds = %io.write_string.exit169
  store i16 0, ptr %buf, align 2
  store ptr %buf, ptr %20, align 8
  %107 = getelementptr inbounds { ptr, i64 }, ptr %20, i64 0, i32 1
  store i64 2, ptr %107, align 8
  %108 = sext i32 %1 to i64
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %21, i8 0, i64 16, i1 false)
  call fastcc void @strconv.append_bits(ptr noalias nonnull %21, ptr nonnull %20, i64 %108, i64 16, i1 zeroext true, i64 64, ptr nonnull @strconv.digits, i8 0, ptr %__.context_ptr)
  %.unpack = load ptr, ptr %21, align 8
  %.elt119 = getelementptr inbounds %..string, ptr %21, i64 0, i32 1
  %.unpack120 = load i64, ptr %.elt119, align 8
  store ptr %.unpack, ptr %s, align 8
  %s.repack121 = getelementptr inbounds %..string, ptr %s, i64 0, i32 1
  store i64 %.unpack120, ptr %s.repack121, align 8
  switch i64 %.unpack120, label %switch.done80 [
    i64 0, label %switch.case.body56
    i64 1, label %switch.case.body62
    i64 2, label %switch.case.body68
  ]

switch.case.body56:                               ; preds = %or_return.continue55
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !2019
  %109 = load ptr, ptr %0, align 8, !noalias !2023
  %.not.i.i170 = icmp eq ptr %109, null
  br i1 %.not.i.i170, label %io.write_string.exit174.thread, label %io.write_string.exit174

io.write_string.exit174.thread:                   ; preds = %switch.case.body56
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !2019
  br label %or_return.return57

io.write_string.exit174:                          ; preds = %switch.case.body56
  %110 = load ptr, ptr %100, align 8, !noalias !2023
  store i64 0, ptr %8, align 8, !noalias !2023
  %111 = call i32 %109(ptr %110, i64 4, ptr nonnull @"ggv$f7", i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !2027
  %112 = load i64, ptr %8, align 8, !noalias !2023
  %113 = add i64 %104, %112
  store i64 %113, ptr %n, align 8, !noalias !2023
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !2019
  %114 = icmp eq i32 %111, 0
  br i1 %114, label %switch.done80, label %or_return.return57

or_return.return57:                               ; preds = %io.write_string.exit174.thread, %io.write_string.exit174
  %115 = phi i64 [ %104, %io.write_string.exit174.thread ], [ %113, %io.write_string.exit174 ]
  %err.0.i.i173216 = phi i32 [ -1, %io.write_string.exit174.thread ], [ %111, %io.write_string.exit174 ]
  store i64 %115, ptr %4, align 8
  %.not125 = icmp eq ptr %3, null
  br i1 %.not125, label %common.ret, label %common.ret.sink.split

switch.case.body62:                               ; preds = %or_return.continue55
  %116 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 48, ptr nonnull %n, ptr %__.context_ptr)
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %switch.done80, label %or_return.return63

or_return.return63:                               ; preds = %switch.case.body62
  %118 = load i64, ptr %n, align 8
  store i64 %118, ptr %4, align 8
  %.not124 = icmp eq ptr %3, null
  br i1 %.not124, label %common.ret, label %common.ret.sink.split

switch.case.body68:                               ; preds = %or_return.continue55
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !2028
  %119 = load ptr, ptr %0, align 8, !noalias !2032
  %.not.i.i175 = icmp eq ptr %119, null
  br i1 %.not.i.i175, label %io.write_string.exit179.thread, label %io.write_string.exit179

io.write_string.exit179.thread:                   ; preds = %switch.case.body68
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !2028
  br label %or_return.return69

io.write_string.exit179:                          ; preds = %switch.case.body68
  %120 = load ptr, ptr %100, align 8, !noalias !2032
  store i64 0, ptr %7, align 8, !noalias !2032
  %121 = call i32 %119(ptr %120, i64 4, ptr nonnull %s, i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !2036
  %122 = load i64, ptr %7, align 8, !noalias !2032
  %123 = add i64 %104, %122
  store i64 %123, ptr %n, align 8, !noalias !2032
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !2028
  %124 = icmp eq i32 %121, 0
  br i1 %124, label %switch.done80, label %or_return.return69

or_return.return69:                               ; preds = %io.write_string.exit179.thread, %io.write_string.exit179
  %125 = phi i64 [ %104, %io.write_string.exit179.thread ], [ %123, %io.write_string.exit179 ]
  %err.0.i.i178219 = phi i32 [ -1, %io.write_string.exit179.thread ], [ %121, %io.write_string.exit179 ]
  store i64 %125, ptr %4, align 8
  %.not123 = icmp eq ptr %3, null
  br i1 %.not123, label %common.ret, label %common.ret.sink.split

if.else:                                          ; preds = %switch.default.body
  %126 = call fastcc i32 @io.write_rune(ptr %0, i32 %1, ptr nonnull %n, ptr %22, ptr %__.context_ptr)
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %switch.done80, label %or_return.return74

or_return.return74:                               ; preds = %if.else
  %128 = load i64, ptr %n, align 8
  store i64 %128, ptr %4, align 8
  %.not117 = icmp eq ptr %3, null
  br i1 %.not117, label %common.ret, label %common.ret.sink.split

switch.done80:                                    ; preds = %io.write_string.exit179, %switch.case.body62, %io.write_string.exit174, %or_return.continue55, %if.else, %io.write_string.exit164, %io.write_string.exit159, %io.write_string.exit154, %io.write_string.exit149, %io.write_string.exit144, %io.write_string.exit139, %io.write_string.exit134, %io.write_string.exit
  br i1 %2, label %if.then81, label %switch.done80.if.done87_crit_edge

switch.done80.if.done87_crit_edge:                ; preds = %switch.done80
  %.pre = load i64, ptr %n, align 8
  br label %if.done87

if.then81:                                        ; preds = %switch.done80
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i180)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  store i8 39, ptr %buf.i180, align 1, !noalias !2037
  store ptr %buf.i180, ptr %6, align 8, !noalias !2037
  %129 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %129, align 8, !noalias !2037
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !2037
  %130 = load ptr, ptr %0, align 8, !noalias !2040
  %.not.i.i181 = icmp eq ptr %130, null
  br i1 %.not.i.i181, label %io.write_byte.exit184.thread, label %io.write_byte.exit184

io.write_byte.exit184.thread:                     ; preds = %if.then81
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !2037
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i180)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  %.pre222 = load i64, ptr %n, align 8
  br label %or_return.return82

io.write_byte.exit184:                            ; preds = %if.then81
  %131 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !noalias !2040
  store i64 0, ptr %5, align 8, !noalias !2040
  %133 = call i32 %130(ptr %132, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !2044
  %134 = load i64, ptr %5, align 8, !noalias !2040
  %135 = load i64, ptr %n, align 8, !noalias !2040
  %136 = add i64 %135, %134
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !2037
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i180)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  %137 = icmp eq i32 %133, 0
  br i1 %137, label %if.done87, label %or_return.return82

or_return.return82:                               ; preds = %io.write_byte.exit184.thread, %io.write_byte.exit184
  %138 = phi i64 [ %.pre222, %io.write_byte.exit184.thread ], [ %136, %io.write_byte.exit184 ]
  %err.0.i.i183221 = phi i32 [ -1, %io.write_byte.exit184.thread ], [ %133, %io.write_byte.exit184 ]
  store i64 %138, ptr %4, align 8
  %.not109 = icmp eq ptr %3, null
  br i1 %.not109, label %common.ret, label %common.ret.sink.split

if.done87:                                        ; preds = %switch.done80.if.done87_crit_edge, %io.write_byte.exit184
  %139 = phi i64 [ %.pre, %switch.done80.if.done87_crit_edge ], [ %136, %io.write_byte.exit184 ]
  store i64 %139, ptr %4, align 8
  %.not108 = icmp eq ptr %3, null
  br i1 %.not108, label %common.ret, label %common.ret.sink.split
}

define internal fastcc i32 @io.write_escaped_rune(ptr nocapture readonly %0, i32 %1, i8 %2, ptr noalias nocapture nonnull writeonly %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %buf.i219 = alloca [1 x i8], align 1
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %15 = alloca { ptr, i64 }, align 8
  %n = alloca i64, align 8
  %16 = alloca i64, align 8
  store i64 0, ptr %n, align 8
  %17 = zext i8 %2 to i32
  %18 = icmp eq i32 %17, %1
  %19 = icmp eq i32 %1, 92
  %or.cond = or i1 %19, %18
  br i1 %or.cond, label %if.then16, label %if.else

common.ret:                                       ; preds = %io.write_byte.exit223, %io.write_string.exit261, %io.write_string.exit261.thread, %io.write_string.exit256, %io.write_string.exit256.thread, %io.write_string.exit251, %io.write_string.exit251.thread, %io.write_string.exit246, %io.write_string.exit246.thread, %io.write_string.exit241, %io.write_string.exit241.thread, %io.write_string.exit236, %io.write_string.exit236.thread, %io.write_string.exit231, %io.write_string.exit231.thread, %io.write_string.exit, %io.write_string.exit.thread, %if.then30, %io.write_byte.exit223.thread, %io.write_byte.exit, %io.write_byte.exit.thread, %switch.done182, %or_return.return173, %or_return.return164, %or_return.return159, %or_return.return128, %or_return.return119, %or_return.return114, %or_return.return105, %or_return.return100, %or_return.return95, %or_return.return90
  %.sink = phi i64 [ %199, %switch.done182 ], [ %198, %or_return.return173 ], [ %157, %or_return.return164 ], [ %148, %or_return.return159 ], [ %145, %or_return.return128 ], [ %124, %or_return.return119 ], [ %115, %or_return.return114 ], [ %111, %or_return.return105 ], [ %104, %or_return.return100 ], [ %96, %or_return.return95 ], [ %93, %or_return.return90 ], [ 0, %io.write_byte.exit.thread ], [ %25, %io.write_byte.exit ], [ %25, %io.write_byte.exit223.thread ], [ %40, %if.then30 ], [ 0, %io.write_string.exit.thread ], [ %45, %io.write_string.exit ], [ 0, %io.write_string.exit231.thread ], [ %51, %io.write_string.exit231 ], [ 0, %io.write_string.exit236.thread ], [ %57, %io.write_string.exit236 ], [ 0, %io.write_string.exit241.thread ], [ %63, %io.write_string.exit241 ], [ 0, %io.write_string.exit246.thread ], [ %69, %io.write_string.exit246 ], [ 0, %io.write_string.exit251.thread ], [ %75, %io.write_string.exit251 ], [ 0, %io.write_string.exit256.thread ], [ %81, %io.write_string.exit256 ], [ 0, %io.write_string.exit261.thread ], [ %87, %io.write_string.exit261 ], [ %33, %io.write_byte.exit223 ]
  %common.ret.op = phi i32 [ 0, %switch.done182 ], [ %.lcssa43, %or_return.return173 ], [ %149, %or_return.return164 ], [ %146, %or_return.return159 ], [ %.lcssa, %or_return.return128 ], [ %116, %or_return.return119 ], [ %113, %or_return.return114 ], [ %109, %or_return.return105 ], [ %102, %or_return.return100 ], [ %94, %or_return.return95 ], [ %91, %or_return.return90 ], [ -1, %io.write_byte.exit.thread ], [ %24, %io.write_byte.exit ], [ -1, %io.write_byte.exit223.thread ], [ %39, %if.then30 ], [ -1, %io.write_string.exit.thread ], [ %44, %io.write_string.exit ], [ -1, %io.write_string.exit231.thread ], [ %50, %io.write_string.exit231 ], [ -1, %io.write_string.exit236.thread ], [ %56, %io.write_string.exit236 ], [ -1, %io.write_string.exit241.thread ], [ %62, %io.write_string.exit241 ], [ -1, %io.write_string.exit246.thread ], [ %68, %io.write_string.exit246 ], [ -1, %io.write_string.exit251.thread ], [ %74, %io.write_string.exit251 ], [ -1, %io.write_string.exit256.thread ], [ %80, %io.write_string.exit256 ], [ -1, %io.write_string.exit261.thread ], [ %86, %io.write_string.exit261 ], [ %31, %io.write_byte.exit223 ]
  store i64 %.sink, ptr %3, align 8
  ret i32 %common.ret.op

if.then16:                                        ; preds = %decls
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %15)
  store i8 92, ptr %buf.i, align 1, !noalias !2045
  store ptr %buf.i, ptr %15, align 8, !noalias !2045
  %20 = getelementptr inbounds { ptr, i64 }, ptr %15, i64 0, i32 1
  store i64 1, ptr %20, align 8, !noalias !2045
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14), !noalias !2045
  %21 = load ptr, ptr %0, align 8, !noalias !2048
  %.not.i.i = icmp eq ptr %21, null
  br i1 %.not.i.i, label %io.write_byte.exit.thread, label %io.write_byte.exit

io.write_byte.exit.thread:                        ; preds = %if.then16
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !2045
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15)
  br label %common.ret

io.write_byte.exit:                               ; preds = %if.then16
  %22 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %23 = load ptr, ptr %22, align 8, !noalias !2048
  store i64 0, ptr %14, align 8, !noalias !2048
  %24 = call i32 %21(ptr %23, i64 4, ptr nonnull %15, i64 0, i64 0, ptr nonnull %14, ptr nonnull %__.context_ptr), !noalias !2052
  %25 = load i64, ptr %14, align 8, !noalias !2048
  store i64 %25, ptr %n, align 8, !noalias !2048
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !2045
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %15)
  %26 = icmp eq i32 %24, 0
  br i1 %26, label %or_return.continue21, label %common.ret

or_return.continue21:                             ; preds = %io.write_byte.exit
  %27 = trunc i32 %1 to i8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i219)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13)
  store i8 %27, ptr %buf.i219, align 1, !noalias !2053
  store ptr %buf.i219, ptr %13, align 8, !noalias !2053
  %28 = getelementptr inbounds { ptr, i64 }, ptr %13, i64 0, i32 1
  store i64 1, ptr %28, align 8, !noalias !2053
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !2053
  %29 = load ptr, ptr %0, align 8, !noalias !2056
  %.not.i.i220 = icmp eq ptr %29, null
  br i1 %.not.i.i220, label %io.write_byte.exit223.thread, label %io.write_byte.exit223

io.write_byte.exit223.thread:                     ; preds = %or_return.continue21
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !2053
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i219)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13)
  br label %common.ret

io.write_byte.exit223:                            ; preds = %or_return.continue21
  %30 = load ptr, ptr %22, align 8, !noalias !2056
  store i64 0, ptr %12, align 8, !noalias !2056
  %31 = call i32 %29(ptr %30, i64 4, ptr nonnull %13, i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !2060
  %32 = load i64, ptr %12, align 8, !noalias !2056
  %33 = add i64 %25, %32
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !2053
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i219)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13)
  br label %common.ret

if.else:                                          ; preds = %decls
  %34 = icmp slt i32 %1, 256
  br i1 %34, label %if.then.i, label %if.done40

if.then.i:                                        ; preds = %if.else
  %35 = add i32 %1, -127
  %36 = icmp ult i32 %35, -95
  %37 = icmp slt i32 %1, 161
  %38 = icmp eq i32 %1, 173
  %narrow.i.not = or i1 %37, %38
  %or.cond34 = and i1 %36, %narrow.i.not
  br i1 %or.cond34, label %if.done40, label %if.then30

if.then30:                                        ; preds = %if.then.i
  %39 = call fastcc i32 @io.write_encoded_rune(ptr %0, i32 %1, i1 zeroext false, ptr nonnull %n, ptr %16, ptr %__.context_ptr)
  %40 = load i64, ptr %n, align 8
  br label %common.ret

if.done40:                                        ; preds = %if.then.i, %if.else
  switch i32 %1, label %switch.default.body [
    i32 7, label %switch.case.body41
    i32 8, label %switch.case.body47
    i32 27, label %switch.case.body53
    i32 12, label %switch.case.body59
    i32 10, label %switch.case.body65
    i32 13, label %switch.case.body71
    i32 9, label %switch.case.body77
    i32 11, label %switch.case.body83
  ]

switch.case.body41:                               ; preds = %if.done40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11), !noalias !2061
  %41 = load ptr, ptr %0, align 8, !noalias !2065
  %.not.i.i224 = icmp eq ptr %41, null
  br i1 %.not.i.i224, label %io.write_string.exit.thread, label %io.write_string.exit

io.write_string.exit.thread:                      ; preds = %switch.case.body41
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !2061
  br label %common.ret

io.write_string.exit:                             ; preds = %switch.case.body41
  %42 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !noalias !2065
  store i64 0, ptr %11, align 8, !noalias !2065
  %44 = call i32 %41(ptr %43, i64 4, ptr nonnull @"ggv$f8", i64 0, i64 0, ptr nonnull %11, ptr nonnull %__.context_ptr), !noalias !2069
  %45 = load i64, ptr %11, align 8, !noalias !2065
  store i64 %45, ptr %n, align 8, !noalias !2065
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !2061
  %46 = icmp eq i32 %44, 0
  br i1 %46, label %switch.done182, label %common.ret

switch.case.body47:                               ; preds = %if.done40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !2070
  %47 = load ptr, ptr %0, align 8, !noalias !2074
  %.not.i.i227 = icmp eq ptr %47, null
  br i1 %.not.i.i227, label %io.write_string.exit231.thread, label %io.write_string.exit231

io.write_string.exit231.thread:                   ; preds = %switch.case.body47
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !2070
  br label %common.ret

io.write_string.exit231:                          ; preds = %switch.case.body47
  %48 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !noalias !2074
  store i64 0, ptr %10, align 8, !noalias !2074
  %50 = call i32 %47(ptr %49, i64 4, ptr nonnull @"ggv$f9", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !2078
  %51 = load i64, ptr %10, align 8, !noalias !2074
  store i64 %51, ptr %n, align 8, !noalias !2074
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !2070
  %52 = icmp eq i32 %50, 0
  br i1 %52, label %switch.done182, label %common.ret

switch.case.body53:                               ; preds = %if.done40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !2079
  %53 = load ptr, ptr %0, align 8, !noalias !2083
  %.not.i.i232 = icmp eq ptr %53, null
  br i1 %.not.i.i232, label %io.write_string.exit236.thread, label %io.write_string.exit236

io.write_string.exit236.thread:                   ; preds = %switch.case.body53
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !2079
  br label %common.ret

io.write_string.exit236:                          ; preds = %switch.case.body53
  %54 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !noalias !2083
  store i64 0, ptr %9, align 8, !noalias !2083
  %56 = call i32 %53(ptr %55, i64 4, ptr nonnull @"ggv$fa", i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !2087
  %57 = load i64, ptr %9, align 8, !noalias !2083
  store i64 %57, ptr %n, align 8, !noalias !2083
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !2079
  %58 = icmp eq i32 %56, 0
  br i1 %58, label %switch.done182, label %common.ret

switch.case.body59:                               ; preds = %if.done40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !2088
  %59 = load ptr, ptr %0, align 8, !noalias !2092
  %.not.i.i237 = icmp eq ptr %59, null
  br i1 %.not.i.i237, label %io.write_string.exit241.thread, label %io.write_string.exit241

io.write_string.exit241.thread:                   ; preds = %switch.case.body59
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !2088
  br label %common.ret

io.write_string.exit241:                          ; preds = %switch.case.body59
  %60 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !noalias !2092
  store i64 0, ptr %8, align 8, !noalias !2092
  %62 = call i32 %59(ptr %61, i64 4, ptr nonnull @"ggv$fb", i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !2096
  %63 = load i64, ptr %8, align 8, !noalias !2092
  store i64 %63, ptr %n, align 8, !noalias !2092
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !2088
  %64 = icmp eq i32 %62, 0
  br i1 %64, label %switch.done182, label %common.ret

switch.case.body65:                               ; preds = %if.done40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !2097
  %65 = load ptr, ptr %0, align 8, !noalias !2101
  %.not.i.i242 = icmp eq ptr %65, null
  br i1 %.not.i.i242, label %io.write_string.exit246.thread, label %io.write_string.exit246

io.write_string.exit246.thread:                   ; preds = %switch.case.body65
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !2097
  br label %common.ret

io.write_string.exit246:                          ; preds = %switch.case.body65
  %66 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %67 = load ptr, ptr %66, align 8, !noalias !2101
  store i64 0, ptr %7, align 8, !noalias !2101
  %68 = call i32 %65(ptr %67, i64 4, ptr nonnull @"ggv$fc", i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !2105
  %69 = load i64, ptr %7, align 8, !noalias !2101
  store i64 %69, ptr %n, align 8, !noalias !2101
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !2097
  %70 = icmp eq i32 %68, 0
  br i1 %70, label %switch.done182, label %common.ret

switch.case.body71:                               ; preds = %if.done40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !2106
  %71 = load ptr, ptr %0, align 8, !noalias !2110
  %.not.i.i247 = icmp eq ptr %71, null
  br i1 %.not.i.i247, label %io.write_string.exit251.thread, label %io.write_string.exit251

io.write_string.exit251.thread:                   ; preds = %switch.case.body71
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !2106
  br label %common.ret

io.write_string.exit251:                          ; preds = %switch.case.body71
  %72 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !noalias !2110
  store i64 0, ptr %6, align 8, !noalias !2110
  %74 = call i32 %71(ptr %73, i64 4, ptr nonnull @"ggv$fd", i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !2114
  %75 = load i64, ptr %6, align 8, !noalias !2110
  store i64 %75, ptr %n, align 8, !noalias !2110
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !2106
  %76 = icmp eq i32 %74, 0
  br i1 %76, label %switch.done182, label %common.ret

switch.case.body77:                               ; preds = %if.done40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !2115
  %77 = load ptr, ptr %0, align 8, !noalias !2119
  %.not.i.i252 = icmp eq ptr %77, null
  br i1 %.not.i.i252, label %io.write_string.exit256.thread, label %io.write_string.exit256

io.write_string.exit256.thread:                   ; preds = %switch.case.body77
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !2115
  br label %common.ret

io.write_string.exit256:                          ; preds = %switch.case.body77
  %78 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %79 = load ptr, ptr %78, align 8, !noalias !2119
  store i64 0, ptr %5, align 8, !noalias !2119
  %80 = call i32 %77(ptr %79, i64 4, ptr nonnull @"ggv$fe", i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !2123
  %81 = load i64, ptr %5, align 8, !noalias !2119
  store i64 %81, ptr %n, align 8, !noalias !2119
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !2115
  %82 = icmp eq i32 %80, 0
  br i1 %82, label %switch.done182, label %common.ret

switch.case.body83:                               ; preds = %if.done40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !2124
  %83 = load ptr, ptr %0, align 8, !noalias !2128
  %.not.i.i257 = icmp eq ptr %83, null
  br i1 %.not.i.i257, label %io.write_string.exit261.thread, label %io.write_string.exit261

io.write_string.exit261.thread:                   ; preds = %switch.case.body83
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !2124
  br label %common.ret

io.write_string.exit261:                          ; preds = %switch.case.body83
  %84 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !noalias !2128
  store i64 0, ptr %4, align 8, !noalias !2128
  %86 = call i32 %83(ptr %85, i64 4, ptr nonnull @"ggv$ff", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !2132
  %87 = load i64, ptr %4, align 8, !noalias !2128
  store i64 %87, ptr %n, align 8, !noalias !2128
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !2124
  %88 = icmp eq i32 %86, 0
  br i1 %88, label %switch.done182, label %common.ret

switch.default.body:                              ; preds = %if.done40
  %89 = icmp slt i32 %1, 32
  br i1 %89, label %switch.case.body89, label %switch.case.next

switch.case.next:                                 ; preds = %switch.default.body
  %90 = icmp ugt i32 %1, 1114111
  br i1 %90, label %switch.case.body113, label %switch.case.next110

switch.case.body89:                               ; preds = %switch.default.body
  %91 = call fastcc i32 @io.write_byte(ptr %0, i8 92, ptr nonnull %n, ptr %__.context_ptr)
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %or_return.continue94, label %or_return.return90

or_return.return90:                               ; preds = %switch.case.body89
  %93 = load i64, ptr %n, align 8
  br label %common.ret

or_return.continue94:                             ; preds = %switch.case.body89
  %94 = call fastcc i32 @io.write_byte(ptr %0, i8 120, ptr nonnull %n, ptr %__.context_ptr)
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %or_return.continue99, label %or_return.return95

or_return.return95:                               ; preds = %or_return.continue94
  %96 = load i64, ptr %n, align 8
  br label %common.ret

or_return.continue99:                             ; preds = %or_return.continue94
  %97 = lshr i32 %1, 4
  %98 = and i32 %97, 15
  %99 = zext i32 %98 to i64
  %100 = getelementptr i8, ptr @"csbs$2", i64 %99
  %101 = load i8, ptr %100, align 1
  %102 = call fastcc i32 @io.write_byte(ptr %0, i8 %101, ptr nonnull %n, ptr %__.context_ptr)
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %or_return.continue104, label %or_return.return100

or_return.return100:                              ; preds = %or_return.continue99
  %104 = load i64, ptr %n, align 8
  br label %common.ret

or_return.continue104:                            ; preds = %or_return.continue99
  %105 = and i32 %1, 15
  %106 = zext i32 %105 to i64
  %107 = getelementptr i8, ptr @"csbs$2", i64 %106
  %108 = load i8, ptr %107, align 1
  %109 = call fastcc i32 @io.write_byte(ptr %0, i8 %108, ptr nonnull %n, ptr %__.context_ptr)
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %switch.done182, label %or_return.return105

or_return.return105:                              ; preds = %or_return.continue104
  %111 = load i64, ptr %n, align 8
  br label %common.ret

switch.case.next110:                              ; preds = %switch.case.next
  %112 = icmp ult i32 %1, 65536
  br i1 %112, label %switch.case.body113, label %if.else158

switch.case.body113:                              ; preds = %switch.case.next, %switch.case.next110
  %c.0 = phi i32 [ %1, %switch.case.next110 ], [ 65533, %switch.case.next ]
  %113 = call fastcc i32 @io.write_byte(ptr %0, i8 92, ptr nonnull %n, ptr %__.context_ptr)
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %or_return.continue118, label %or_return.return114

or_return.return114:                              ; preds = %switch.case.body113
  %115 = load i64, ptr %n, align 8
  br label %common.ret

or_return.continue118:                            ; preds = %switch.case.body113
  %116 = call fastcc i32 @io.write_byte(ptr %0, i8 117, ptr nonnull %n, ptr %__.context_ptr)
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %for.body127.preheader, label %or_return.return119

for.body127.preheader:                            ; preds = %or_return.continue118
  %118 = lshr i32 %c.0, 12
  %119 = zext i32 %118 to i64
  %120 = getelementptr i8, ptr @"csbs$2", i64 %119
  %121 = load i8, ptr %120, align 1
  %122 = call fastcc i32 @io.write_byte(ptr %0, i8 %121, ptr nonnull %n, ptr %__.context_ptr)
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %for.loop126, label %or_return.return128

or_return.return119:                              ; preds = %or_return.continue118
  %124 = load i64, ptr %n, align 8
  br label %common.ret

for.loop126:                                      ; preds = %for.body127.preheader
  %125 = lshr i32 %c.0, 8
  %126 = and i32 %125, 15
  %127 = zext i32 %126 to i64
  %128 = getelementptr i8, ptr @"csbs$2", i64 %127
  %129 = load i8, ptr %128, align 1
  %130 = call fastcc i32 @io.write_byte(ptr %0, i8 %129, ptr nonnull %n, ptr %__.context_ptr)
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %for.loop126.1, label %or_return.return128

for.loop126.1:                                    ; preds = %for.loop126
  %132 = lshr i32 %c.0, 4
  %133 = and i32 %132, 15
  %134 = zext i32 %133 to i64
  %135 = getelementptr i8, ptr @"csbs$2", i64 %134
  %136 = load i8, ptr %135, align 1
  %137 = call fastcc i32 @io.write_byte(ptr %0, i8 %136, ptr nonnull %n, ptr %__.context_ptr)
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %for.loop126.2, label %or_return.return128

for.loop126.2:                                    ; preds = %for.loop126.1
  %139 = and i32 %c.0, 15
  %140 = zext i32 %139 to i64
  %141 = getelementptr i8, ptr @"csbs$2", i64 %140
  %142 = load i8, ptr %141, align 1
  %143 = call fastcc i32 @io.write_byte(ptr %0, i8 %142, ptr nonnull %n, ptr %__.context_ptr)
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %switch.done182, label %or_return.return128

or_return.return128:                              ; preds = %for.loop126.2, %for.loop126.1, %for.loop126, %for.body127.preheader
  %.lcssa = phi i32 [ %122, %for.body127.preheader ], [ %130, %for.loop126 ], [ %137, %for.loop126.1 ], [ %143, %for.loop126.2 ]
  %145 = load i64, ptr %n, align 8
  br label %common.ret

if.else158:                                       ; preds = %switch.case.next110
  %146 = call fastcc i32 @io.write_byte(ptr %0, i8 92, ptr nonnull %n, ptr %__.context_ptr)
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %or_return.continue163, label %or_return.return159

or_return.return159:                              ; preds = %if.else158
  %148 = load i64, ptr %n, align 8
  br label %common.ret

or_return.continue163:                            ; preds = %if.else158
  %149 = call fastcc i32 @io.write_byte(ptr %0, i8 85, ptr nonnull %n, ptr %__.context_ptr)
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %for.body172.preheader, label %or_return.return164

for.body172.preheader:                            ; preds = %or_return.continue163
  %151 = lshr i32 %1, 24
  %152 = zext i32 %151 to i64
  %153 = getelementptr i8, ptr @"csbs$2", i64 %152
  %154 = load i8, ptr %153, align 1
  %155 = call fastcc i32 @io.write_byte(ptr %0, i8 %154, ptr nonnull %n, ptr %__.context_ptr)
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %for.loop171, label %or_return.return173

or_return.return164:                              ; preds = %or_return.continue163
  %157 = load i64, ptr %n, align 8
  br label %common.ret

for.loop171:                                      ; preds = %for.body172.preheader
  %158 = lshr i32 %1, 20
  %159 = zext i32 %158 to i64
  %160 = getelementptr i8, ptr @"csbs$2", i64 %159
  %161 = load i8, ptr %160, align 1
  %162 = call fastcc i32 @io.write_byte(ptr %0, i8 %161, ptr nonnull %n, ptr %__.context_ptr)
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %for.loop171.1, label %or_return.return173

for.loop171.1:                                    ; preds = %for.loop171
  %164 = lshr i32 %1, 16
  %165 = and i32 %164, 15
  %166 = zext i32 %165 to i64
  %167 = getelementptr i8, ptr @"csbs$2", i64 %166
  %168 = load i8, ptr %167, align 1
  %169 = call fastcc i32 @io.write_byte(ptr %0, i8 %168, ptr nonnull %n, ptr %__.context_ptr)
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %for.loop171.2, label %or_return.return173

for.loop171.2:                                    ; preds = %for.loop171.1
  %171 = lshr i32 %1, 12
  %172 = and i32 %171, 15
  %173 = zext i32 %172 to i64
  %174 = getelementptr i8, ptr @"csbs$2", i64 %173
  %175 = load i8, ptr %174, align 1
  %176 = call fastcc i32 @io.write_byte(ptr %0, i8 %175, ptr nonnull %n, ptr %__.context_ptr)
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %for.loop171.3, label %or_return.return173

for.loop171.3:                                    ; preds = %for.loop171.2
  %178 = lshr i32 %1, 8
  %179 = and i32 %178, 15
  %180 = zext i32 %179 to i64
  %181 = getelementptr i8, ptr @"csbs$2", i64 %180
  %182 = load i8, ptr %181, align 1
  %183 = call fastcc i32 @io.write_byte(ptr %0, i8 %182, ptr nonnull %n, ptr %__.context_ptr)
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %for.loop171.4, label %or_return.return173

for.loop171.4:                                    ; preds = %for.loop171.3
  %185 = lshr i32 %1, 4
  %186 = and i32 %185, 15
  %187 = zext i32 %186 to i64
  %188 = getelementptr i8, ptr @"csbs$2", i64 %187
  %189 = load i8, ptr %188, align 1
  %190 = call fastcc i32 @io.write_byte(ptr %0, i8 %189, ptr nonnull %n, ptr %__.context_ptr)
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %for.loop171.5, label %or_return.return173

for.loop171.5:                                    ; preds = %for.loop171.4
  %192 = and i32 %1, 15
  %193 = zext i32 %192 to i64
  %194 = getelementptr i8, ptr @"csbs$2", i64 %193
  %195 = load i8, ptr %194, align 1
  %196 = call fastcc i32 @io.write_byte(ptr %0, i8 %195, ptr nonnull %n, ptr %__.context_ptr)
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %switch.done182, label %or_return.return173

or_return.return173:                              ; preds = %for.loop171.5, %for.loop171.4, %for.loop171.3, %for.loop171.2, %for.loop171.1, %for.loop171, %for.body172.preheader
  %.lcssa43 = phi i32 [ %155, %for.body172.preheader ], [ %162, %for.loop171 ], [ %169, %for.loop171.1 ], [ %176, %for.loop171.2 ], [ %183, %for.loop171.3 ], [ %190, %for.loop171.4 ], [ %196, %for.loop171.5 ]
  %198 = load i64, ptr %n, align 8
  br label %common.ret

switch.done182:                                   ; preds = %for.loop171.5, %for.loop126.2, %or_return.continue104, %io.write_string.exit261, %io.write_string.exit256, %io.write_string.exit251, %io.write_string.exit246, %io.write_string.exit241, %io.write_string.exit236, %io.write_string.exit231, %io.write_string.exit
  %199 = load i64, ptr %n, align 8
  br label %common.ret
}

declare x86_stdcallcc void @GetSystemTimePreciseAsFileTime(ptr) local_unnamed_addr

define internal fastcc i32 @io.write_byte(ptr nocapture readonly %0, i8 %1, ptr %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %buf = alloca [1 x i8], align 1
  %4 = alloca { ptr, i64 }, align 8
  store i8 %1, ptr %buf, align 1
  store ptr %buf, ptr %4, align 8
  %5 = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  store i64 1, ptr %5, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  %6 = load ptr, ptr %0, align 8, !noalias !2133
  %.not.i = icmp eq ptr %6, null
  br i1 %.not.i, label %io.write.exit, label %if.then.i

if.then.i:                                        ; preds = %decls
  %7 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !noalias !2133
  store i64 0, ptr %3, align 8, !noalias !2133
  %9 = call i32 %6(ptr %8, i64 4, ptr nonnull %4, i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !2137
  %.not3.i = icmp eq ptr %2, null
  br i1 %.not3.i, label %io.write.exit, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i
  %10 = load i64, ptr %3, align 8, !noalias !2133
  %11 = load i64, ptr %2, align 8, !noalias !2133
  %12 = add i64 %11, %10
  store i64 %12, ptr %2, align 8, !noalias !2133
  br label %io.write.exit

io.write.exit:                                    ; preds = %decls, %if.then.i, %if.then1.i
  %err.0.i = phi i32 [ %9, %if.then1.i ], [ %9, %if.then.i ], [ -1, %decls ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  ret i32 %err.0.i
}

define internal fastcc i32 @io.write_rune(ptr nocapture readonly %0, i32 %1, ptr %2, ptr noalias nocapture nonnull writeonly %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %6 = alloca { ptr, i64 }, align 8
  %buf = alloca [4 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %8 = icmp slt i32 %1, 128
  br i1 %8, label %if.then, label %if.done.i

if.then:                                          ; preds = %decls
  %9 = trunc i32 %1 to i8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6)
  store i8 %9, ptr %buf.i, align 1, !noalias !2138
  store ptr %buf.i, ptr %6, align 8, !noalias !2138
  %10 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 1, ptr %10, align 8, !noalias !2138
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !2138
  %11 = load ptr, ptr %0, align 8, !noalias !2141
  %.not.i.i = icmp eq ptr %11, null
  br i1 %.not.i.i, label %.thread, label %io.write_byte.exit

.thread:                                          ; preds = %if.then
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !2138
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  store i64 0, ptr %3, align 8
  br label %common.ret

io.write_byte.exit:                               ; preds = %if.then
  %12 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !noalias !2141
  store i64 0, ptr %5, align 8, !noalias !2141
  %14 = call i32 %11(ptr %13, i64 4, ptr nonnull %6, i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !2145
  %.fr = freeze i32 %14
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !2138
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6)
  %15 = icmp eq i32 %.fr, 0
  %spec.select = zext i1 %15 to i64
  store i64 %spec.select, ptr %3, align 8
  %16 = icmp ne i32 %.fr, 0
  %.not23 = icmp eq ptr %2, null
  %or.cond = select i1 %16, i1 true, i1 %.not23
  br i1 %or.cond, label %common.ret, label %if.then2

if.then2:                                         ; preds = %io.write_byte.exit
  %17 = load i64, ptr %2, align 8
  %18 = add i64 %17, %spec.select
  store i64 %18, ptr %2, align 8
  br label %common.ret

common.ret:                                       ; preds = %io.write.exit.thread, %.thread, %io.write.exit, %if.then7, %io.write_byte.exit, %if.then2
  %common.ret.op = phi i32 [ 0, %if.then2 ], [ %.fr, %io.write_byte.exit ], [ 0, %if.then7 ], [ %48, %io.write.exit ], [ -1, %.thread ], [ -1, %io.write.exit.thread ]
  ret i32 %common.ret.op

if.done.i:                                        ; preds = %decls
  %19 = icmp ult i32 %1, 2048
  br i1 %19, label %if.then1.i, label %if.done2.i

if.then1.i:                                       ; preds = %if.done.i
  %20 = lshr i32 %1, 6
  %21 = trunc i32 %20 to i8
  %22 = or i8 %21, -64
  br label %utf8.encode_rune.exit

if.done2.i:                                       ; preds = %if.done.i
  %23 = icmp ugt i32 %1, 1114111
  %24 = and i32 %1, -2048
  %or.cond.i = icmp eq i32 %24, 55296
  %or.cond58.i = or i1 %23, %or.cond.i
  %r.0.i = select i1 %or.cond58.i, i32 65533, i32 %1
  %25 = icmp ult i32 %1, 65536
  br i1 %25, label %if.then5.i, label %if.done6.i

if.then5.i:                                       ; preds = %if.done2.i
  %26 = lshr i32 %r.0.i, 12
  %27 = trunc i32 %26 to i8
  %28 = or i8 %27, -32
  %29 = lshr i32 %r.0.i, 6
  %30 = trunc i32 %r.0.i to i8
  %31 = and i8 %30, 63
  %32 = or i8 %31, -128
  br label %utf8.encode_rune.exit

if.done6.i:                                       ; preds = %if.done2.i
  %33 = lshr i32 %r.0.i, 18
  %34 = trunc i32 %33 to i8
  %35 = or i8 %34, -16
  %36 = lshr i32 %r.0.i, 12
  %37 = lshr i32 %r.0.i, 6
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 63
  %40 = or i8 %39, -128
  %41 = trunc i32 %r.0.i to i8
  %42 = and i8 %41, 63
  %43 = or i8 %42, -128
  br label %utf8.encode_rune.exit

utf8.encode_rune.exit:                            ; preds = %if.then1.i, %if.then5.i, %if.done6.i
  %.sink61.i = phi i8 [ %35, %if.done6.i ], [ %28, %if.then5.i ], [ %22, %if.then1.i ]
  %.sink60.i.in.in.in = phi i32 [ %36, %if.done6.i ], [ %29, %if.then5.i ], [ %1, %if.then1.i ]
  %.sink59.i = phi i8 [ %40, %if.done6.i ], [ %32, %if.then5.i ], [ 0, %if.then1.i ]
  %.sink.i = phi i8 [ %43, %if.done6.i ], [ 0, %if.then5.i ], [ 0, %if.then1.i ]
  %common.ret.op.i = phi i64 [ 4, %if.done6.i ], [ 3, %if.then5.i ], [ 2, %if.then1.i ]
  %.sink60.i.in.in = trunc i32 %.sink60.i.in.in.in to i8
  %.sink60.i.in = and i8 %.sink60.i.in.in, 63
  %.sink60.i = or i8 %.sink60.i.in, -128
  store i8 %.sink61.i, ptr %buf, align 1
  %buf.repack17 = getelementptr inbounds [4 x i8], ptr %buf, i64 0, i64 1
  store i8 %.sink60.i, ptr %buf.repack17, align 1
  %buf.repack19 = getelementptr inbounds [4 x i8], ptr %buf, i64 0, i64 2
  store i8 %.sink59.i, ptr %buf.repack19, align 1
  %buf.repack21 = getelementptr inbounds [4 x i8], ptr %buf, i64 0, i64 3
  store i8 %.sink.i, ptr %buf.repack21, align 1
  store ptr %buf, ptr %7, align 8
  %44 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 %common.ret.op.i, ptr %44, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  %45 = load ptr, ptr %0, align 8, !noalias !2146
  %.not.i = icmp eq ptr %45, null
  br i1 %.not.i, label %io.write.exit.thread, label %io.write.exit

io.write.exit.thread:                             ; preds = %utf8.encode_rune.exit
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  store i64 0, ptr %3, align 8
  br label %common.ret

io.write.exit:                                    ; preds = %utf8.encode_rune.exit
  %46 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !noalias !2146
  store i64 0, ptr %4, align 8, !noalias !2146
  %48 = call i32 %45(ptr %47, i64 4, ptr nonnull %7, i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !2150
  %49 = load i64, ptr %4, align 8, !noalias !2146
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  store i64 %49, ptr %3, align 8
  %50 = icmp ne i32 %48, 0
  %.not = icmp eq ptr %2, null
  %or.cond24 = select i1 %50, i1 true, i1 %.not
  br i1 %or.cond24, label %common.ret, label %if.then7

if.then7:                                         ; preds = %io.write.exit
  %51 = load i64, ptr %2, align 8
  %52 = add i64 %51, %49
  store i64 %52, ptr %2, align 8
  br label %common.ret
}

declare x86_stdcallcc i32 @GetFileType(ptr) local_unnamed_addr

declare x86_stdcallcc i32 @SetFilePointer(ptr, i32, ptr, i32) local_unnamed_addr

declare x86_stdcallcc i32 @GetFileSizeEx(ptr, ptr) local_unnamed_addr

define internal fastcc void @strconv.append_bits(ptr noalias nocapture writeonly %agg.result, ptr nocapture readonly %0, i64 %1, i64 %2, i1 zeroext %3, i64 %4, ptr nocapture readonly %5, i8 %6, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %a = alloca [129 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a, i8 0, i64 129, i1 false)
  br i1 %3, label %if.then.i, label %strconv.is_integer_negative.exit

if.then.i:                                        ; preds = %decls
  %8 = add nsw i64 %4, -8
  %9 = tail call i64 @llvm.fshl.i64(i64 %4, i64 %8, i64 61)
  switch i64 %9, label %switch.default.body.i [
    i64 0, label %switch.case.body.i
    i64 1, label %switch.case.body1.i
    i64 3, label %switch.case.body3.i
    i64 7, label %switch.case.body5.i
  ]

switch.case.body.i:                               ; preds = %if.then.i
  %10 = and i64 %1, 128
  %11 = icmp ne i64 %10, 0
  %sext8.i = shl i64 %1, 56
  %12 = ashr exact i64 %sext8.i, 56
  %13 = tail call i64 @llvm.abs.i64(i64 %12, i1 true)
  br label %strconv.is_integer_negative.exit

switch.case.body1.i:                              ; preds = %if.then.i
  %14 = and i64 %1, 32768
  %15 = icmp ne i64 %14, 0
  %sext7.i = shl i64 %1, 48
  %16 = ashr exact i64 %sext7.i, 48
  %17 = tail call i64 @llvm.abs.i64(i64 %16, i1 true)
  br label %strconv.is_integer_negative.exit

switch.case.body3.i:                              ; preds = %if.then.i
  %18 = and i64 %1, 2147483648
  %19 = icmp ne i64 %18, 0
  %sext.i = shl i64 %1, 32
  %20 = ashr exact i64 %sext.i, 32
  %21 = tail call i64 @llvm.abs.i64(i64 %20, i1 true)
  br label %strconv.is_integer_negative.exit

switch.case.body5.i:                              ; preds = %if.then.i
  %22 = icmp slt i64 %1, 0
  %23 = tail call i64 @llvm.abs.i64(i64 %1, i1 false)
  br label %strconv.is_integer_negative.exit

switch.default.body.i:                            ; preds = %if.then.i
  %24 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !alias.scope !2151, !noalias !2156
  %26 = icmp eq ptr %25, null
  %spec.store.select.i.i = select i1 %26, ptr @runtime.default_assertion_failure_proc, ptr %25
  tail call void %spec.store.select.i.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$105", ptr nonnull @"ggv$104", ptr nonnull %__.context_ptr), !noalias !2156
  unreachable

strconv.is_integer_negative.exit:                 ; preds = %decls, %switch.case.body.i, %switch.case.body1.i, %switch.case.body3.i, %switch.case.body5.i
  %u.0.i = phi i64 [ %23, %switch.case.body5.i ], [ %21, %switch.case.body3.i ], [ %17, %switch.case.body1.i ], [ %13, %switch.case.body.i ], [ %1, %decls ]
  %neg.0.shrunk.i = phi i1 [ %22, %switch.case.body5.i ], [ %19, %switch.case.body3.i ], [ %15, %switch.case.body1.i ], [ %11, %switch.case.body.i ], [ false, %decls ]
  %.not22 = icmp ult i64 %u.0.i, %2
  %.pre = load ptr, ptr %5, align 8
  br i1 %.not22, label %for.done, label %for.body

for.body:                                         ; preds = %strconv.is_integer_negative.exit, %for.body
  %u.024 = phi i64 [ %32, %for.body ], [ %u.0.i, %strconv.is_integer_negative.exit ]
  %i.023 = phi i64 [ %27, %for.body ], [ 129, %strconv.is_integer_negative.exit ]
  %27 = add i64 %i.023, -1
  %28 = getelementptr [129 x i8], ptr %a, i64 0, i64 %27
  %29 = urem i64 %u.024, %2
  %30 = getelementptr i8, ptr %.pre, i64 %29
  %31 = load i8, ptr %30, align 1
  store i8 %31, ptr %28, align 1
  %32 = udiv i64 %u.024, %2
  %.not = icmp ult i64 %32, %2
  br i1 %.not, label %for.done, label %for.body

for.done:                                         ; preds = %for.body, %strconv.is_integer_negative.exit
  %i.0.lcssa = phi i64 [ 129, %strconv.is_integer_negative.exit ], [ %27, %for.body ]
  %u.0.lcssa = phi i64 [ %u.0.i, %strconv.is_integer_negative.exit ], [ %32, %for.body ]
  %33 = add i64 %i.0.lcssa, -1
  %34 = getelementptr [129 x i8], ptr %a, i64 0, i64 %33
  %35 = getelementptr i8, ptr %.pre, i64 %u.0.lcssa
  %36 = load i8, ptr %35, align 1
  store i8 %36, ptr %34, align 1
  %37 = and i8 %6, 1
  %.not12 = icmp eq i8 %37, 0
  br i1 %.not12, label %if.done7, label %if.then1

if.then1:                                         ; preds = %for.done
  %38 = add nsw i64 %2, -2
  %39 = tail call i64 @llvm.fshl.i64(i64 %2, i64 %38, i64 63)
  %40 = icmp ult i64 %39, 8
  br i1 %40, label %switch.hole_check, label %if.done7

switch.hole_check:                                ; preds = %if.then1
  %switch.maskindex = trunc i64 %39 to i8
  %switch.shifted = lshr i8 -87, %switch.maskindex
  %41 = and i8 %switch.shifted, 1
  %switch.lobit.not = icmp eq i8 %41, 0
  br i1 %switch.lobit.not, label %if.done7, label %switch.lookup

switch.lookup:                                    ; preds = %switch.hole_check
  %switch.shiftamt = shl nuw nsw i64 %39, 3
  %switch.downshift = lshr i64 8674630395463098978, %switch.shiftamt
  %switch.masked = trunc i64 %switch.downshift to i8
  %.sink29 = add i64 %i.0.lcssa, -2
  %42 = getelementptr [129 x i8], ptr %a, i64 0, i64 %.sink29
  store i8 %switch.masked, ptr %42, align 1
  %43 = add i64 %i.0.lcssa, -3
  %44 = getelementptr [129 x i8], ptr %a, i64 0, i64 %43
  store i8 48, ptr %44, align 1
  br label %if.done7

if.done7:                                         ; preds = %switch.hole_check, %if.then1, %switch.lookup, %for.done
  %i.2 = phi i64 [ %43, %switch.lookup ], [ %33, %for.done ], [ %33, %if.then1 ], [ %33, %switch.hole_check ]
  br i1 %neg.0.shrunk.i, label %switch.done11.sink.split, label %switch.case.next

switch.case.next:                                 ; preds = %if.done7
  %45 = and i8 %6, 2
  %.not13 = icmp eq i8 %45, 0
  br i1 %.not13, label %switch.done11, label %switch.done11.sink.split

switch.done11.sink.split:                         ; preds = %switch.case.next, %if.done7
  %.sink30 = phi i8 [ 45, %if.done7 ], [ 43, %switch.case.next ]
  %46 = add i64 %i.2, -1
  %47 = getelementptr [129 x i8], ptr %a, i64 0, i64 %46
  store i8 %.sink30, ptr %47, align 1
  br label %switch.done11

switch.done11:                                    ; preds = %switch.done11.sink.split, %switch.case.next
  %i.3 = phi i64 [ %i.2, %switch.case.next ], [ %46, %switch.done11.sink.split ]
  %48 = sub i64 129, %i.3
  %49 = getelementptr inbounds { ptr, i64 }, ptr %0, i64 0, i32 1
  %50 = load i64, ptr %49, align 8
  %51 = tail call i64 @llvm.smin.i64(i64 %50, i64 %48)
  %.not.i = icmp slt i64 %51, 1
  br i1 %.not.i, label %runtime.copy_slice-19597.exit, label %if.then.i19

if.then.i19:                                      ; preds = %switch.done11
  %52 = getelementptr i8, ptr %a, i64 %i.3
  %53 = load ptr, ptr %0, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %53, ptr align 1 %52, i64 %51, i1 false)
  br label %runtime.copy_slice-19597.exit

runtime.copy_slice-19597.exit:                    ; preds = %switch.done11, %if.then.i19
  %54 = load ptr, ptr %0, align 8
  store ptr %54, ptr %7, align 8
  %55 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 %48, ptr %55, align 8
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 8 %agg.result, ptr nonnull align 8 %7, i64 16, i1 false)
  ret void
}

define internal i32 @bufio._writer_proc-3482(ptr nocapture %0, i64 %1, ptr nocapture readonly %2, i64 %3, i64 %4, ptr noalias nocapture nonnull writeonly %5, ptr noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca i64, align 8
  %8 = alloca { ptr, i64 }, align 8
  %9 = alloca i64, align 8
  %p.i = alloca { ptr, i64 }, align 8
  %10 = alloca i64, align 8
  %11 = alloca { ptr, i64 }, align 8
  switch i64 %1, label %switch.done [
    i64 1, label %switch.case.body
    i64 4, label %switch.case.body1
    i64 8, label %switch.case.body2
    i64 9, label %common.ret
  ]

common.ret:                                       ; preds = %decls, %switch.done, %bufio.writer_destroy.exit, %bufio.writer_write.exit, %bufio.writer_flush.exit
  %.sink = phi i64 [ 0, %switch.done ], [ 0, %bufio.writer_destroy.exit ], [ %storemerge.i, %bufio.writer_write.exit ], [ 0, %bufio.writer_flush.exit ], [ 786, %decls ]
  %common.ret.op = phi i32 [ -1, %switch.done ], [ 0, %bufio.writer_destroy.exit ], [ %92, %bufio.writer_write.exit ], [ %common.ret.op.i, %bufio.writer_flush.exit ], [ 0, %decls ]
  store i64 %.sink, ptr %5, align 8
  ret i32 %common.ret.op

switch.case.body:                                 ; preds = %decls
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11)
  %12 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 4
  %13 = load i32, ptr %12, align 4, !noalias !2158
  %.not.i = icmp eq i32 %13, 0
  br i1 %.not.i, label %if.done.i, label %bufio.writer_flush.exit

if.done.i:                                        ; preds = %switch.case.body
  %14 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 3
  %15 = load i64, ptr %14, align 8, !noalias !2158
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %bufio.writer_flush.exit, label %if.done2.i

if.done2.i:                                       ; preds = %if.done.i
  %17 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 2
  %18 = load ptr, ptr %0, align 8, !noalias !2158
  store ptr %18, ptr %11, align 8, !noalias !2158
  %19 = getelementptr inbounds { ptr, i64 }, ptr %11, i64 0, i32 1
  store i64 %15, ptr %19, align 8, !noalias !2158
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !2158
  %20 = load ptr, ptr %17, align 8, !noalias !2161
  %.not.i.i = icmp eq ptr %20, null
  br i1 %.not.i.i, label %if.then5.thread.i, label %io.write.exit.i

io.write.exit.i:                                  ; preds = %if.done2.i
  %21 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 2, i32 1
  %22 = load ptr, ptr %21, align 8, !noalias !2161
  store i64 0, ptr %10, align 8, !noalias !2161
  %23 = call i32 %20(ptr %22, i64 4, ptr nonnull %11, i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !2165
  %.fr.i = freeze i32 %23
  %24 = load i64, ptr %10, align 8, !noalias !2161
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !2158
  %25 = load i64, ptr %14, align 8, !noalias !2158
  %26 = icmp slt i64 %24, %25
  %27 = icmp eq i32 %.fr.i, 0
  %28 = and i1 %27, %26
  %err.0.i = select i1 %28, i32 3, i32 %.fr.i
  %.not13.i = icmp eq i32 %err.0.i, 0
  br i1 %.not13.i, label %if.done9.i, label %if.then5.i

if.then5.thread.i:                                ; preds = %if.done2.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !2158
  br label %if.done8.i

if.then5.i:                                       ; preds = %io.write.exit.i
  %29 = icmp sgt i64 %24, 0
  %brmerge.not.i = and i1 %29, %26
  br i1 %brmerge.not.i, label %if.then7.i, label %if.done8.i

if.then7.i:                                       ; preds = %if.then5.i
  %30 = sub i64 %25, %24
  %.not.i14.i = icmp slt i64 %30, 1
  br i1 %.not.i14.i, label %if.done8.i, label %if.then.i15.i

if.then.i15.i:                                    ; preds = %if.then7.i
  %31 = load ptr, ptr %0, align 8, !noalias !2158
  %32 = getelementptr i8, ptr %31, i64 %24
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %31, ptr align 1 %32, i64 %30, i1 false)
  %.pre.i = load i64, ptr %14, align 8, !noalias !2158
  br label %if.done8.i

if.done8.i:                                       ; preds = %if.then.i15.i, %if.then7.i, %if.then5.i, %if.then5.thread.i
  %33 = phi i64 [ %15, %if.then5.thread.i ], [ %25, %if.then5.i ], [ %25, %if.then7.i ], [ %.pre.i, %if.then.i15.i ]
  %n.0.i192530.i = phi i64 [ 0, %if.then5.thread.i ], [ %24, %if.then5.i ], [ %24, %if.then7.i ], [ %24, %if.then.i15.i ]
  %err.02629.i = phi i32 [ -1, %if.then5.thread.i ], [ %err.0.i, %if.then5.i ], [ %err.0.i, %if.then7.i ], [ %err.0.i, %if.then.i15.i ]
  %34 = sub i64 %33, %n.0.i192530.i
  store i64 %34, ptr %14, align 8, !noalias !2158
  store i32 %err.02629.i, ptr %12, align 4, !noalias !2158
  br label %bufio.writer_flush.exit

if.done9.i:                                       ; preds = %io.write.exit.i
  store i64 0, ptr %14, align 8, !noalias !2158
  br label %bufio.writer_flush.exit

bufio.writer_flush.exit:                          ; preds = %switch.case.body, %if.done.i, %if.done8.i, %if.done9.i
  %common.ret.op.i = phi i32 [ %err.02629.i, %if.done8.i ], [ 0, %if.done9.i ], [ 0, %if.done.i ], [ %13, %switch.case.body ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11)
  br label %common.ret

switch.case.body1:                                ; preds = %decls
  %.val = load ptr, ptr %2, align 8
  %35 = getelementptr i8, ptr %2, i64 8
  %.val4 = load i64, ptr %35, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %p.i)
  store ptr %.val, ptr %p.i, align 8, !noalias !2166
  %p.repack6.i = getelementptr inbounds { ptr, i64 }, ptr %p.i, i64 0, i32 1
  %36 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 4
  %37 = getelementptr i8, ptr %0, i64 8
  %38 = getelementptr i8, ptr %0, i64 48
  store i64 %.val4, ptr %p.repack6.i, align 8, !noalias !2166
  %.val2.i = load i64, ptr %37, align 8, !noalias !2166
  %.val133.i = load i64, ptr %38, align 8, !noalias !2166
  %39 = sub i64 %.val2.i, %.val133.i
  %40 = icmp slt i64 %39, %.val4
  br i1 %40, label %cmp.and.lr.ph.i, label %for.done.i

cmp.and.lr.ph.i:                                  ; preds = %switch.case.body1
  %41 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 2
  %42 = getelementptr inbounds { ptr, i64 }, ptr %8, i64 0, i32 1
  %43 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 2, i32 1
  br label %cmp.and.i

cmp.and.i:                                        ; preds = %if.done.i8, %cmp.and.lr.ph.i
  %.val13.pre14.i = phi i64 [ %.val133.i, %cmp.and.lr.ph.i ], [ %.val13.pre15.i, %if.done.i8 ]
  %44 = phi ptr [ %.val, %cmp.and.lr.ph.i ], [ %80, %if.done.i8 ]
  %45 = phi i64 [ %.val2.i, %cmp.and.lr.ph.i ], [ %.val.i, %if.done.i8 ]
  %n.05.i = phi i64 [ 0, %cmp.and.lr.ph.i ], [ %77, %if.done.i8 ]
  %storemerge14.i = phi i64 [ %.val4, %cmp.and.lr.ph.i ], [ %81, %if.done.i8 ]
  %46 = load i32, ptr %36, align 4, !noalias !2166
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %for.body.i, label %bufio.writer_write.exit

for.body.i:                                       ; preds = %cmp.and.i
  %48 = icmp eq i64 %.val13.pre14.i, 0
  br i1 %48, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body.i
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !2166
  %49 = load ptr, ptr %41, align 8, !noalias !2170
  %.not.i.i9 = icmp eq ptr %49, null
  br i1 %.not.i.i9, label %io.write.exit.i10, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %50 = load ptr, ptr %43, align 8, !noalias !2170
  store i64 0, ptr %9, align 8, !noalias !2170
  %51 = call i32 %49(ptr %50, i64 4, ptr nonnull %p.i, i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !2174
  %52 = load i64, ptr %9, align 8, !noalias !2170
  %.val13.pre.pre.i = load i64, ptr %38, align 8, !noalias !2166
  br label %io.write.exit.i10

io.write.exit.i10:                                ; preds = %if.then.i.i, %if.then.i
  %.val13.pre.i = phi i64 [ %.val13.pre.pre.i, %if.then.i.i ], [ 0, %if.then.i ]
  %n.0.i.i = phi i64 [ %52, %if.then.i.i ], [ 0, %if.then.i ]
  %err.0.i.i = phi i32 [ %51, %if.then.i.i ], [ -1, %if.then.i ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !2166
  store i32 %err.0.i.i, ptr %36, align 4, !noalias !2166
  br label %if.done.i8

if.else.i:                                        ; preds = %for.body.i
  %53 = sub i64 %45, %.val13.pre14.i
  %54 = call i64 @llvm.smin.i64(i64 %53, i64 %storemerge14.i)
  %55 = call i64 @llvm.smax.i64(i64 %54, i64 0)
  %.not.i15.i = icmp slt i64 %54, 1
  br i1 %.not.i15.i, label %runtime.copy_slice-19597.exit.i, label %if.then.i16.i

if.then.i16.i:                                    ; preds = %if.else.i
  %56 = load ptr, ptr %0, align 8, !noalias !2166
  %57 = getelementptr i8, ptr %56, i64 %.val13.pre14.i
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %57, ptr align 1 %44, i64 %55, i1 false), !noalias !2175
  %.pre.i7 = load i64, ptr %38, align 8, !noalias !2166
  %.pre10.i = load i32, ptr %36, align 4, !noalias !2176
  br label %runtime.copy_slice-19597.exit.i

runtime.copy_slice-19597.exit.i:                  ; preds = %if.then.i16.i, %if.else.i
  %58 = phi i32 [ 0, %if.else.i ], [ %.pre10.i, %if.then.i16.i ]
  %59 = phi i64 [ %.val13.pre14.i, %if.else.i ], [ %.pre.i7, %if.then.i16.i ]
  %60 = add i64 %59, %55
  store i64 %60, ptr %38, align 8, !noalias !2166
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8), !noalias !2166
  %.not.i17.i = icmp ne i32 %58, 0
  %61 = icmp eq i64 %60, 0
  %or.cond.i = select i1 %.not.i17.i, i1 true, i1 %61
  br i1 %or.cond.i, label %bufio.writer_flush.exit.i, label %if.done2.i.i

if.done2.i.i:                                     ; preds = %runtime.copy_slice-19597.exit.i
  %62 = load ptr, ptr %0, align 8, !noalias !2176
  store ptr %62, ptr %8, align 8, !noalias !2176
  store i64 %60, ptr %42, align 8, !noalias !2176
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !2176
  %63 = load ptr, ptr %41, align 8, !noalias !2179
  %.not.i.i.i = icmp eq ptr %63, null
  br i1 %.not.i.i.i, label %if.then5.thread.i.i, label %io.write.exit.i.i

io.write.exit.i.i:                                ; preds = %if.done2.i.i
  %64 = load ptr, ptr %43, align 8, !noalias !2179
  store i64 0, ptr %7, align 8, !noalias !2179
  %65 = call i32 %63(ptr %64, i64 4, ptr nonnull %8, i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !2183
  %.fr.i.i = freeze i32 %65
  %66 = load i64, ptr %7, align 8, !noalias !2179
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !2176
  %67 = load i64, ptr %38, align 8, !noalias !2176
  %68 = icmp slt i64 %66, %67
  %69 = icmp eq i32 %.fr.i.i, 0
  %70 = and i1 %69, %68
  %err.0.i18.i = select i1 %70, i32 3, i32 %.fr.i.i
  %.not13.i.i = icmp eq i32 %err.0.i18.i, 0
  br i1 %.not13.i.i, label %if.done9.i.i, label %if.then5.i.i

if.then5.thread.i.i:                              ; preds = %if.done2.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !2176
  br label %if.done8.i.i

if.then5.i.i:                                     ; preds = %io.write.exit.i.i
  %71 = icmp sgt i64 %66, 0
  %brmerge.not.i.i = and i1 %71, %68
  br i1 %brmerge.not.i.i, label %if.then7.i.i, label %if.done8.i.i

if.then7.i.i:                                     ; preds = %if.then5.i.i
  %72 = sub i64 %67, %66
  %.not.i14.i.i = icmp slt i64 %72, 1
  br i1 %.not.i14.i.i, label %if.done8.i.i, label %if.then.i15.i.i

if.then.i15.i.i:                                  ; preds = %if.then7.i.i
  %73 = load ptr, ptr %0, align 8, !noalias !2176
  %74 = getelementptr i8, ptr %73, i64 %66
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %73, ptr align 1 %74, i64 %72, i1 false), !noalias !2175
  %.pre.i.i = load i64, ptr %38, align 8, !noalias !2176
  br label %if.done8.i.i

if.done8.i.i:                                     ; preds = %if.then.i15.i.i, %if.then7.i.i, %if.then5.i.i, %if.then5.thread.i.i
  %75 = phi i64 [ %60, %if.then5.thread.i.i ], [ %67, %if.then5.i.i ], [ %67, %if.then7.i.i ], [ %.pre.i.i, %if.then.i15.i.i ]
  %n.0.i192530.i.i = phi i64 [ 0, %if.then5.thread.i.i ], [ %66, %if.then5.i.i ], [ %66, %if.then7.i.i ], [ %66, %if.then.i15.i.i ]
  %err.02629.i.i = phi i32 [ -1, %if.then5.thread.i.i ], [ %err.0.i18.i, %if.then5.i.i ], [ %err.0.i18.i, %if.then7.i.i ], [ %err.0.i18.i, %if.then.i15.i.i ]
  %76 = sub i64 %75, %n.0.i192530.i.i
  store i64 %76, ptr %38, align 8, !noalias !2176
  store i32 %err.02629.i.i, ptr %36, align 4, !noalias !2176
  br label %bufio.writer_flush.exit.i

if.done9.i.i:                                     ; preds = %io.write.exit.i.i
  store i64 0, ptr %38, align 8, !noalias !2176
  br label %bufio.writer_flush.exit.i

bufio.writer_flush.exit.i:                        ; preds = %if.done9.i.i, %if.done8.i.i, %runtime.copy_slice-19597.exit.i
  %.val1312.i = phi i64 [ %60, %runtime.copy_slice-19597.exit.i ], [ %76, %if.done8.i.i ], [ 0, %if.done9.i.i ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8), !noalias !2166
  br label %if.done.i8

if.done.i8:                                       ; preds = %bufio.writer_flush.exit.i, %io.write.exit.i10
  %.val13.pre15.i = phi i64 [ %.val13.pre.i, %io.write.exit.i10 ], [ %.val1312.i, %bufio.writer_flush.exit.i ]
  %m.0.i = phi i64 [ %n.0.i.i, %io.write.exit.i10 ], [ %55, %bufio.writer_flush.exit.i ]
  %77 = add i64 %m.0.i, %n.05.i
  %78 = load i64, ptr %p.repack6.i, align 8, !noalias !2166
  %79 = load ptr, ptr %p.i, align 8, !noalias !2166
  %80 = getelementptr i8, ptr %79, i64 %m.0.i
  %81 = sub i64 %78, %m.0.i
  store ptr %80, ptr %p.i, align 8, !noalias !2166
  store i64 %81, ptr %p.repack6.i, align 8, !noalias !2166
  %.val.i = load i64, ptr %37, align 8, !noalias !2166
  %82 = sub i64 %.val.i, %.val13.pre15.i
  %83 = icmp sgt i64 %81, %82
  br i1 %83, label %cmp.and.i, label %for.done.i

for.done.i:                                       ; preds = %if.done.i8, %switch.case.body1
  %.ph.i = phi ptr [ %.val, %switch.case.body1 ], [ %80, %if.done.i8 ]
  %.ph17.i = phi i64 [ %.val2.i, %switch.case.body1 ], [ %.val.i, %if.done.i8 ]
  %.ph18.i = phi i64 [ %.val133.i, %switch.case.body1 ], [ %.val13.pre15.i, %if.done.i8 ]
  %storemerge1.lcssa.ph.i = phi i64 [ %.val4, %switch.case.body1 ], [ %81, %if.done.i8 ]
  %n.0.lcssa.ph.i = phi i64 [ 0, %switch.case.body1 ], [ %77, %if.done.i8 ]
  %.pr.i = load i32, ptr %36, align 4, !noalias !2166
  %.not.i5 = icmp eq i32 %.pr.i, 0
  br i1 %.not.i5, label %if.done2.i6, label %bufio.writer_write.exit

if.done2.i6:                                      ; preds = %for.done.i
  %84 = sub i64 %.ph17.i, %.ph18.i
  %85 = call i64 @llvm.smin.i64(i64 %84, i64 %storemerge1.lcssa.ph.i)
  %86 = call i64 @llvm.smax.i64(i64 %85, i64 0)
  %.not.i19.i = icmp slt i64 %85, 1
  br i1 %.not.i19.i, label %runtime.copy_slice-19597.exit22.i, label %if.then.i20.i

if.then.i20.i:                                    ; preds = %if.done2.i6
  %87 = load ptr, ptr %0, align 8, !noalias !2166
  %88 = getelementptr i8, ptr %87, i64 %.ph18.i
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %88, ptr align 1 %.ph.i, i64 %86, i1 false), !noalias !2175
  %.pre13.i = load i64, ptr %38, align 8, !noalias !2166
  br label %runtime.copy_slice-19597.exit22.i

runtime.copy_slice-19597.exit22.i:                ; preds = %if.then.i20.i, %if.done2.i6
  %89 = phi i64 [ %.ph18.i, %if.done2.i6 ], [ %.pre13.i, %if.then.i20.i ]
  %90 = add i64 %89, %86
  store i64 %90, ptr %38, align 8, !noalias !2166
  %91 = add i64 %86, %n.0.lcssa.ph.i
  br label %bufio.writer_write.exit

bufio.writer_write.exit:                          ; preds = %cmp.and.i, %for.done.i, %runtime.copy_slice-19597.exit22.i
  %92 = phi i32 [ 0, %runtime.copy_slice-19597.exit22.i ], [ %.pr.i, %for.done.i ], [ %46, %cmp.and.i ]
  %storemerge.i = phi i64 [ %91, %runtime.copy_slice-19597.exit22.i ], [ %n.0.lcssa.ph.i, %for.done.i ], [ %n.05.i, %cmp.and.i ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %p.i)
  br label %common.ret

switch.case.body2:                                ; preds = %decls
  %.val.i11 = load ptr, ptr %0, align 8, !noalias !2184
  %93 = getelementptr i8, ptr %0, i64 8
  %.val1.i = load i64, ptr %93, align 8, !noalias !2184
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6), !noalias !2187
  %94 = icmp eq ptr %.val.i11, null
  br i1 %94, label %bufio.writer_destroy.exit, label %cmp.or.i.i.i

cmp.or.i.i.i:                                     ; preds = %switch.case.body2
  %95 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 1
  %96 = load ptr, ptr %95, align 8, !noalias !2190
  %97 = icmp eq ptr %96, null
  br i1 %97, label %bufio.writer_destroy.exit, label %if.done.i.i.i

if.done.i.i.i:                                    ; preds = %cmp.or.i.i.i
  %98 = getelementptr inbounds %bufio.Writer, ptr %0, i64 0, i32 1, i32 1
  %99 = load ptr, ptr %98, align 8, !noalias !2190
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %6, i8 0, i64 16, i1 false), !noalias !2190
  %100 = call i8 %96(ptr %99, i8 1, i64 0, i64 0, ptr nonnull %.val.i11, i64 %.val1.i, ptr nonnull @"ggv$101", ptr nonnull %6, ptr nonnull %__.context_ptr) #30
  br label %bufio.writer_destroy.exit

bufio.writer_destroy.exit:                        ; preds = %switch.case.body2, %cmp.or.i.i.i, %if.done.i.i.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !2187
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(72) %0, i8 0, i64 72, i1 false), !noalias !2184
  br label %common.ret

switch.done:                                      ; preds = %decls
  br label %common.ret
}

define internal fastcc void @strconv.append_float(ptr noalias nocapture writeonly %agg.result, ptr nocapture readonly %0, double %1, i8 %2, i64 %3, i64 %4, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %5 = alloca { ptr, i64 }, align 8
  %6 = alloca { ptr, i64 }, align 8
  %7 = alloca { ptr, i64 }, align 8
  %8 = alloca [1 x i8], align 1
  %9 = alloca [1 x i8], align 1
  %10 = alloca [1 x i8], align 1
  %11 = alloca [1 x i8], align 1
  %12 = alloca [1 x i8], align 1
  %13 = alloca { ptr, i64 }, align 8
  %14 = alloca [1 x i8], align 1
  %15 = alloca [1 x i8], align 1
  %16 = alloca [1 x i8], align 1
  %17 = alloca [1 x i8], align 1
  %18 = alloca [1 x i8], align 1
  %19 = alloca [1 x i8], align 1
  %20 = alloca [2 x i8], align 2
  %21 = alloca [2 x i8], align 2
  %22 = alloca [3 x i8], align 1
  %23 = alloca { ptr, i64 }, align 8
  %24 = alloca [2 x i8], align 2
  %25 = alloca { ptr, i64 }, align 8
  %buf.i38.i.i = alloca [64 x i8], align 1
  %buf.i.i.i = alloca [64 x i8], align 1
  %upper_.i.i = alloca %strconv_decimal.Decimal, align 8
  %lower_.i.i = alloca %strconv_decimal.Decimal, align 8
  %buf.i.i = alloca [64 x i8], align 1
  %26 = alloca { ptr, i64 }, align 8
  %d_.i = alloca %strconv_decimal.Decimal, align 8
  %27 = alloca { ptr, i64 }, align 8
  %28 = alloca { ptr, i64 }, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %28, i8 0, i64 16, i1 false)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !2193)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %26)
  call void @llvm.lifetime.start.p0(i64 408, ptr nonnull %d_.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %27)
  switch i64 %4, label %switch.default.body.i [
    i64 16, label %switch.case.body.i
    i64 32, label %switch.case.body1.i
    i64 64, label %switch.case.body2.i
  ]

switch.case.body.i:                               ; preds = %decls
  %29 = fptrunc double %1 to half
  %.cast131.i = bitcast half %29 to i16
  %30 = zext i16 %.cast131.i to i64
  br label %switch.done.i

switch.case.body1.i:                              ; preds = %decls
  %31 = fptrunc double %1 to float
  %.cast130.i = bitcast float %31 to i32
  %32 = zext i32 %.cast130.i to i64
  br label %switch.done.i

switch.case.body2.i:                              ; preds = %decls
  %.cast.i = bitcast double %1 to i64
  br label %switch.done.i

switch.default.body.i:                            ; preds = %decls
  %33 = getelementptr inbounds %runtime.Context, ptr %__.context_ptr, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !alias.scope !2196, !noalias !2199
  %35 = icmp eq ptr %34, null
  %spec.store.select.i.i = select i1 %35, ptr @runtime.default_assertion_failure_proc, ptr %34
  tail call void %spec.store.select.i.i(ptr nonnull @"ggv$97", ptr nonnull @"ggv$103", ptr nonnull @"ggv$102", ptr nonnull %__.context_ptr), !noalias !2199
  unreachable

switch.done.i:                                    ; preds = %switch.case.body2.i, %switch.case.body1.i, %switch.case.body.i
  %bits.0.i = phi i64 [ %.cast.i, %switch.case.body2.i ], [ %32, %switch.case.body1.i ], [ %30, %switch.case.body.i ]
  %flt.0.i = phi ptr [ @strconv._f64_info, %switch.case.body2.i ], [ @strconv._f32_info, %switch.case.body1.i ], [ @strconv._f16_info, %switch.case.body.i ]
  %36 = getelementptr inbounds %strconv.Float_Info, ptr %flt.0.i, i64 0, i32 1
  %37 = load i64, ptr %36, align 8, !noalias !2201
  %38 = load i64, ptr %flt.0.i, align 16, !noalias !2201
  %39 = add i64 %38, %37
  %40 = icmp ult i64 %39, 64
  %41 = lshr i64 %bits.0.i, %39
  %42 = icmp ne i64 %41, 0
  %43 = select i1 %40, i1 %42, i1 false
  %44 = icmp ult i64 %38, 64
  %45 = lshr i64 %bits.0.i, %38
  %46 = select i1 %44, i64 %45, i64 0
  %47 = icmp ult i64 %37, 64
  %notmask.i = shl nsw i64 -1, %37
  %48 = xor i64 %notmask.i, -1
  %49 = select i1 %47, i64 %48, i64 -1
  %50 = and i64 %46, %49
  %notmask24.i = shl nsw i64 -1, %38
  %51 = xor i64 %notmask24.i, -1
  %52 = select i1 %44, i64 %51, i64 -1
  %53 = and i64 %52, %bits.0.i
  %54 = icmp eq i64 %50, %49
  br i1 %54, label %switch.case.body3.i, label %switch.case.next.i

switch.case.next.i:                               ; preds = %switch.done.i
  %55 = icmp eq i64 %50, 0
  %56 = shl nuw i64 1, %38
  %57 = select i1 %44, i64 %56, i64 0
  %spec.select.i = tail call i64 @llvm.umax.i64(i64 %50, i64 1)
  %58 = select i1 %55, i64 0, i64 %57
  %spec.select195.i = or i64 %58, %53
  %59 = getelementptr inbounds %strconv.Float_Info, ptr %flt.0.i, i64 0, i32 2
  %60 = load i64, ptr %59, align 16, !noalias !2201
  %61 = add i64 %60, %spec.select.i
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(408) %d_.i, i8 0, i64 408, i1 false), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %buf.i.i), !noalias !2201
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(64) %buf.i.i, i8 0, i64 64, i1 false), !noalias !2201
  %.not1.i.i = icmp eq i64 %spec.select195.i, 0
  br i1 %.not1.i.i, label %for.done.thread.i.i, label %for.body.i.i

switch.case.body3.i:                              ; preds = %switch.done.i
  %.not.i = icmp eq i64 %53, 0
  %s.val132.i = select i1 %.not.i, i64 4, i64 3
  %62 = getelementptr inbounds { ptr, i64 }, ptr %0, i64 0, i32 1
  %63 = load i64, ptr %62, align 8, !noalias !2201
  %64 = tail call i64 @llvm.smin.i64(i64 %63, i64 %s.val132.i)
  %65 = tail call i64 @llvm.smax.i64(i64 %64, i64 0)
  %.not.i.i = icmp slt i64 %64, 1
  br i1 %.not.i.i, label %runtime.copy_from_string-21865.exit.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %switch.case.body3.i
  %"csbs$140.csbs$141.i" = select i1 %43, ptr @"csbs$140", ptr @"csbs$141"
  %s.val.i = select i1 %.not.i, ptr %"csbs$140.csbs$141.i", ptr @"csbs$13f"
  %66 = load ptr, ptr %0, align 8, !noalias !2201
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %66, ptr nonnull align 1 %s.val.i, i64 %65, i1 false), !noalias !2201
  br label %runtime.copy_from_string-21865.exit.i

runtime.copy_from_string-21865.exit.i:            ; preds = %if.then.i.i, %switch.case.body3.i
  %67 = load ptr, ptr %0, align 8, !noalias !2201
  store ptr %67, ptr %26, align 8, !noalias !2201
  %68 = getelementptr inbounds { ptr, i64 }, ptr %26, i64 0, i32 1
  store i64 %65, ptr %68, align 8, !noalias !2201
  br label %strconv.generic_ftoa.exit

for.done.thread.i.i:                              ; preds = %switch.case.next.i
  %69 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 1
  store i64 0, ptr %69, align 8, !noalias !2201
  br label %for.done.i.thread.i.i

for.body.i.i:                                     ; preds = %switch.case.next.i, %for.body.i.i
  %i.03.i.i = phi i64 [ %70, %for.body.i.i ], [ %spec.select195.i, %switch.case.next.i ]
  %n.02.i.i = phi i64 [ %75, %for.body.i.i ], [ 0, %switch.case.next.i ]
  %70 = udiv i64 %i.03.i.i, 10
  %.neg.i.i = mul i64 %70, 246
  %71 = add i64 %.neg.i.i, %i.03.i.i
  %72 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.02.i.i
  %73 = trunc i64 %71 to i8
  %74 = add i8 %73, 48
  store i8 %74, ptr %72, align 1, !noalias !2201
  %75 = add i64 %n.02.i.i, 1
  %.not.i134.i = icmp ult i64 %i.03.i.i, 10
  br i1 %.not.i134.i, label %for.done.i.i, label %for.body.i.i

for.done.i.i:                                     ; preds = %for.body.i.i
  %76 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 1
  store i64 0, ptr %76, align 8, !noalias !2201
  %77 = icmp sgt i64 %n.02.i.i, -1
  br i1 %77, label %for.body3.i.i.preheader, label %for.done.i.thread.i.i

for.body3.i.i.preheader:                          ; preds = %for.done.i.i
  %78 = add i64 %n.02.i.i, 1
  %xtraiter = and i64 %78, 7
  %79 = icmp ult i64 %n.02.i.i, 7
  br i1 %79, label %for.done4.i.i.unr-lcssa, label %for.body3.i.i.preheader.new

for.body3.i.i.preheader.new:                      ; preds = %for.body3.i.i.preheader
  %unroll_iter = and i64 %78, -8
  br label %for.body3.i.i

for.body3.i.i:                                    ; preds = %for.body3.i.i, %for.body3.i.i.preheader.new
  %80 = phi i64 [ 0, %for.body3.i.i.preheader.new ], [ %120, %for.body3.i.i ]
  %n.15.i.i = phi i64 [ %n.02.i.i, %for.body3.i.i.preheader.new ], [ %n.1.i.i.7, %for.body3.i.i ]
  %niter = phi i64 [ 0, %for.body3.i.i.preheader.new ], [ %niter.next.7, %for.body3.i.i ]
  %81 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %80
  %82 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.15.i.i
  %83 = load i8, ptr %82, align 1, !noalias !2201
  store i8 %83, ptr %81, align 1, !noalias !2201
  %84 = load i64, ptr %76, align 8, !noalias !2201
  %85 = add i64 %84, 1
  store i64 %85, ptr %76, align 8, !noalias !2201
  %n.1.i.i = add nsw i64 %n.15.i.i, -1
  %86 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %85
  %87 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.1.i.i
  %88 = load i8, ptr %87, align 1, !noalias !2201
  store i8 %88, ptr %86, align 1, !noalias !2201
  %89 = load i64, ptr %76, align 8, !noalias !2201
  %90 = add i64 %89, 1
  store i64 %90, ptr %76, align 8, !noalias !2201
  %n.1.i.i.1 = add nsw i64 %n.15.i.i, -2
  %91 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %90
  %92 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.1.i.i.1
  %93 = load i8, ptr %92, align 1, !noalias !2201
  store i8 %93, ptr %91, align 1, !noalias !2201
  %94 = load i64, ptr %76, align 8, !noalias !2201
  %95 = add i64 %94, 1
  store i64 %95, ptr %76, align 8, !noalias !2201
  %n.1.i.i.2 = add nsw i64 %n.15.i.i, -3
  %96 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %95
  %97 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.1.i.i.2
  %98 = load i8, ptr %97, align 1, !noalias !2201
  store i8 %98, ptr %96, align 1, !noalias !2201
  %99 = load i64, ptr %76, align 8, !noalias !2201
  %100 = add i64 %99, 1
  store i64 %100, ptr %76, align 8, !noalias !2201
  %n.1.i.i.3 = add nsw i64 %n.15.i.i, -4
  %101 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %100
  %102 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.1.i.i.3
  %103 = load i8, ptr %102, align 1, !noalias !2201
  store i8 %103, ptr %101, align 1, !noalias !2201
  %104 = load i64, ptr %76, align 8, !noalias !2201
  %105 = add i64 %104, 1
  store i64 %105, ptr %76, align 8, !noalias !2201
  %n.1.i.i.4 = add nsw i64 %n.15.i.i, -5
  %106 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %105
  %107 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.1.i.i.4
  %108 = load i8, ptr %107, align 1, !noalias !2201
  store i8 %108, ptr %106, align 1, !noalias !2201
  %109 = load i64, ptr %76, align 8, !noalias !2201
  %110 = add i64 %109, 1
  store i64 %110, ptr %76, align 8, !noalias !2201
  %n.1.i.i.5 = add nsw i64 %n.15.i.i, -6
  %111 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %110
  %112 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.1.i.i.5
  %113 = load i8, ptr %112, align 1, !noalias !2201
  store i8 %113, ptr %111, align 1, !noalias !2201
  %114 = load i64, ptr %76, align 8, !noalias !2201
  %115 = add i64 %114, 1
  store i64 %115, ptr %76, align 8, !noalias !2201
  %n.1.i.i.6 = add nsw i64 %n.15.i.i, -7
  %116 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %115
  %117 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.1.i.i.6
  %118 = load i8, ptr %117, align 1, !noalias !2201
  store i8 %118, ptr %116, align 1, !noalias !2201
  %119 = load i64, ptr %76, align 8, !noalias !2201
  %120 = add i64 %119, 1
  store i64 %120, ptr %76, align 8, !noalias !2201
  %n.1.i.i.7 = add nsw i64 %n.15.i.i, -8
  %niter.next.7 = add i64 %niter, 8
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %for.done4.i.i.unr-lcssa, label %for.body3.i.i

for.done.i.thread.i.i:                            ; preds = %for.done.i.i, %for.done.thread.i.i
  %121 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  br label %strconv_decimal.assign.exit.thread302.i

for.done4.i.i.unr-lcssa:                          ; preds = %for.body3.i.i, %for.body3.i.i.preheader
  %.lcssa352.ph = phi i64 [ undef, %for.body3.i.i.preheader ], [ %119, %for.body3.i.i ]
  %.lcssa351.ph = phi i64 [ undef, %for.body3.i.i.preheader ], [ %120, %for.body3.i.i ]
  %.unr = phi i64 [ 0, %for.body3.i.i.preheader ], [ %120, %for.body3.i.i ]
  %n.15.i.i.unr = phi i64 [ %n.02.i.i, %for.body3.i.i.preheader ], [ %n.1.i.i.7, %for.body3.i.i ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.done4.i.i, label %for.body3.i.i.epil

for.body3.i.i.epil:                               ; preds = %for.done4.i.i.unr-lcssa, %for.body3.i.i.epil
  %122 = phi i64 [ %127, %for.body3.i.i.epil ], [ %.unr, %for.done4.i.i.unr-lcssa ]
  %n.15.i.i.epil = phi i64 [ %n.1.i.i.epil, %for.body3.i.i.epil ], [ %n.15.i.i.unr, %for.done4.i.i.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %for.body3.i.i.epil ], [ 0, %for.done4.i.i.unr-lcssa ]
  %123 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %122
  %124 = getelementptr [64 x i8], ptr %buf.i.i, i64 0, i64 %n.15.i.i.epil
  %125 = load i8, ptr %124, align 1, !noalias !2201
  store i8 %125, ptr %123, align 1, !noalias !2201
  %126 = load i64, ptr %76, align 8, !noalias !2201
  %127 = add i64 %126, 1
  store i64 %127, ptr %76, align 8, !noalias !2201
  %n.1.i.i.epil = add nsw i64 %n.15.i.i.epil, -1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.done4.i.i, label %for.body3.i.i.epil, !llvm.loop !2202

for.done4.i.i:                                    ; preds = %for.body3.i.i.epil, %for.done4.i.i.unr-lcssa
  %.lcssa352 = phi i64 [ %.lcssa352.ph, %for.done4.i.i.unr-lcssa ], [ %126, %for.body3.i.i.epil ]
  %.lcssa351 = phi i64 [ %.lcssa351.ph, %for.done4.i.i.unr-lcssa ], [ %127, %for.body3.i.i.epil ]
  %128 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  store i64 %.lcssa351, ptr %128, align 8, !noalias !2201
  %129 = icmp ult i64 %.lcssa352, 9223372036854775807
  br i1 %129, label %cmp.and.i.i.i, label %for.done.i.i.i

cmp.and.i.i.i:                                    ; preds = %for.done4.i.i, %for.body.i.i.i
  %130 = phi i64 [ %131, %for.body.i.i.i ], [ %.lcssa351, %for.done4.i.i ]
  %131 = add nsw i64 %130, -1
  %132 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !noalias !2201
  %134 = icmp eq i8 %133, 48
  br i1 %134, label %for.body.i.i.i, label %strconv_decimal.assign.exit.thread.i

for.body.i.i.i:                                   ; preds = %cmp.and.i.i.i
  store i64 %131, ptr %76, align 8, !noalias !2201
  %135 = icmp ugt i64 %130, 1
  br i1 %135, label %cmp.and.i.i.i, label %strconv_decimal.assign.exit.i

for.done.i.i.i:                                   ; preds = %for.done4.i.i
  %136 = icmp eq i64 %.lcssa351, 0
  br i1 %136, label %strconv_decimal.assign.exit.thread302.i, label %strconv_decimal.assign.exit.thread.i

strconv_decimal.assign.exit.thread.i:             ; preds = %cmp.and.i.i.i, %for.done.i.i.i
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i.i), !noalias !2201
  br label %switch.case.next.i.i

strconv_decimal.assign.exit.thread302.i:          ; preds = %for.done.i.i.i, %for.done.i.thread.i.i
  %.ph.i = phi ptr [ %121, %for.done.i.thread.i.i ], [ %128, %for.done.i.i.i ]
  store i64 0, ptr %.ph.i, align 8, !noalias !2201
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i.i), !noalias !2201
  %137 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 1
  br label %strconv_decimal.shift.exit.i

strconv_decimal.assign.exit.i:                    ; preds = %for.body.i.i.i
  store i64 0, ptr %128, align 8, !noalias !2201
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i.i), !noalias !2201
  %138 = icmp eq i64 %131, 0
  br i1 %138, label %strconv_decimal.shift.exit.i, label %switch.case.next.i.i

switch.case.next.i.i:                             ; preds = %strconv_decimal.assign.exit.i, %strconv_decimal.assign.exit.thread.i
  %139 = sub i64 %61, %38
  %140 = icmp sgt i64 %139, 0
  br i1 %140, label %for.loop.preheader.i.i, label %switch.case.next1.i.i

for.loop.preheader.i.i:                           ; preds = %switch.case.next.i.i
  %141 = icmp ugt i64 %139, 60
  br i1 %141, label %for.body.i136.i, label %for.done.i135.i

switch.case.next1.i.i:                            ; preds = %switch.case.next.i.i
  %142 = icmp slt i64 %139, 0
  br i1 %142, label %for.loop5.preheader.i.i, label %strconv_decimal.shift.exit.i

for.loop5.preheader.i.i:                          ; preds = %switch.case.next1.i.i
  %143 = icmp ult i64 %139, -60
  br i1 %143, label %for.body6.i.i, label %for.done7.i.i

for.body.i136.i:                                  ; preds = %for.loop.preheader.i.i, %for.body.i136.i
  %k.02.i.i = phi i64 [ %144, %for.body.i136.i ], [ %139, %for.loop.preheader.i.i ]
  call fastcc void @strconv_decimal.shift_left(ptr nonnull %d_.i, i64 60), !noalias !2201
  %144 = add nsw i64 %k.02.i.i, -60
  %145 = icmp ugt i64 %k.02.i.i, 120
  br i1 %145, label %for.body.i136.i, label %for.done.i135.i

for.done.i135.i:                                  ; preds = %for.body.i136.i, %for.loop.preheader.i.i
  %k.0.lcssa.i.i = phi i64 [ %139, %for.loop.preheader.i.i ], [ %144, %for.body.i136.i ]
  call fastcc void @strconv_decimal.shift_left(ptr nonnull %d_.i, i64 %k.0.lcssa.i.i), !noalias !2201
  br label %strconv_decimal.shift.exit.i

for.body6.i.i:                                    ; preds = %for.loop5.preheader.i.i, %for.body6.i.i
  %k.11.i.i = phi i64 [ %146, %for.body6.i.i ], [ %139, %for.loop5.preheader.i.i ]
  call fastcc void @strconv_decimal.shift_right(ptr nonnull %d_.i, i64 60), !noalias !2201
  %146 = add nuw nsw i64 %k.11.i.i, 60
  %147 = icmp ult i64 %k.11.i.i, -120
  br i1 %147, label %for.body6.i.i, label %for.done7.i.i

for.done7.i.i:                                    ; preds = %for.body6.i.i, %for.loop5.preheader.i.i
  %k.1.lcssa.i.i = phi i64 [ %139, %for.loop5.preheader.i.i ], [ %146, %for.body6.i.i ]
  %148 = sub nsw i64 0, %k.1.lcssa.i.i
  call fastcc void @strconv_decimal.shift_right(ptr nonnull %d_.i, i64 %148), !noalias !2201
  br label %strconv_decimal.shift.exit.i

strconv_decimal.shift.exit.i:                     ; preds = %for.done7.i.i, %for.done.i135.i, %switch.case.next1.i.i, %strconv_decimal.assign.exit.i, %strconv_decimal.assign.exit.thread302.i
  %149 = phi ptr [ %76, %strconv_decimal.assign.exit.i ], [ %76, %switch.case.next1.i.i ], [ %76, %for.done.i135.i ], [ %76, %for.done7.i.i ], [ %137, %strconv_decimal.assign.exit.thread302.i ]
  %150 = icmp slt i64 %3, 0
  br i1 %150, label %if.then11.i, label %if.else16.i

if.then11.i:                                      ; preds = %strconv_decimal.shift.exit.i
  call void @llvm.lifetime.start.p0(i64 408, ptr nonnull %upper_.i.i), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 408, ptr nonnull %lower_.i.i), !noalias !2201
  br i1 %.not1.i.i, label %if.then.i140.i, label %if.done.i.i

if.then.i140.i:                                   ; preds = %if.then11.i
  store i64 0, ptr %149, align 8, !noalias !2201
  br label %strconv.round_shortest.exit.i

if.done.i.i:                                      ; preds = %if.then11.i
  %151 = load i64, ptr %59, align 16, !noalias !2201
  %152 = add i64 %151, 1
  %153 = icmp slt i64 %152, %61
  br i1 %153, label %cmp.and.i.i, label %if.done2.i.i

cmp.and.i.i:                                      ; preds = %if.done.i.i
  %154 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  %155 = load i64, ptr %154, align 8, !noalias !2201
  %156 = load i64, ptr %149, align 8, !noalias !2201
  %157 = sub i64 %155, %156
  %158 = mul i64 %157, 332
  %159 = load i64, ptr %flt.0.i, align 16, !noalias !2201
  %160 = sub i64 %61, %159
  %161 = mul i64 %160, 100
  %.not32.i.i = icmp slt i64 %158, %161
  br i1 %.not32.i.i, label %if.done2.i.i, label %strconv.round_shortest.exit.i

if.done2.i.i:                                     ; preds = %cmp.and.i.i, %if.done.i.i
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(408) %upper_.i.i, i8 0, i64 408, i1 false), !noalias !2201
  %162 = shl i64 %spec.select195.i, 1
  %163 = add i64 %162, -1
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %buf.i.i.i), !noalias !2201
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(64) %buf.i.i.i, i8 0, i64 64, i1 false), !noalias !2201
  br label %for.body.i.i137.i

for.body.i.i137.i:                                ; preds = %for.body.i.i137.i, %if.done2.i.i
  %i.03.i.i.i = phi i64 [ %164, %for.body.i.i137.i ], [ %163, %if.done2.i.i ]
  %n.02.i.i.i = phi i64 [ %169, %for.body.i.i137.i ], [ 0, %if.done2.i.i ]
  %164 = udiv i64 %i.03.i.i.i, 10
  %.neg.i.i.i = mul i64 %164, 246
  %165 = add i64 %.neg.i.i.i, %i.03.i.i.i
  %166 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.02.i.i.i
  %167 = trunc i64 %165 to i8
  %168 = add i8 %167, 48
  store i8 %168, ptr %166, align 1, !noalias !2201
  %169 = add i64 %n.02.i.i.i, 1
  %.not.i.i.i = icmp ult i64 %i.03.i.i.i, 10
  br i1 %.not.i.i.i, label %for.done.i.i138.i, label %for.body.i.i137.i

for.done.i.i138.i:                                ; preds = %for.body.i.i137.i
  %170 = getelementptr inbounds %strconv_decimal.Decimal, ptr %upper_.i.i, i64 0, i32 1
  store i64 0, ptr %170, align 8, !noalias !2201
  %171 = icmp sgt i64 %n.02.i.i.i, -1
  br i1 %171, label %for.body3.i.i.i.preheader, label %for.done.i.thread.i.i.i

for.body3.i.i.i.preheader:                        ; preds = %for.done.i.i138.i
  %172 = add i64 %n.02.i.i.i, 1
  %xtraiter355 = and i64 %172, 7
  %173 = icmp ult i64 %n.02.i.i.i, 7
  br i1 %173, label %for.done4.i.i.i.unr-lcssa, label %for.body3.i.i.i.preheader.new

for.body3.i.i.i.preheader.new:                    ; preds = %for.body3.i.i.i.preheader
  %unroll_iter361 = and i64 %172, -8
  br label %for.body3.i.i.i

for.body3.i.i.i:                                  ; preds = %for.body3.i.i.i, %for.body3.i.i.i.preheader.new
  %174 = phi i64 [ 0, %for.body3.i.i.i.preheader.new ], [ %214, %for.body3.i.i.i ]
  %n.15.i.i.i = phi i64 [ %n.02.i.i.i, %for.body3.i.i.i.preheader.new ], [ %n.1.i.i.i.7, %for.body3.i.i.i ]
  %niter362 = phi i64 [ 0, %for.body3.i.i.i.preheader.new ], [ %niter362.next.7, %for.body3.i.i.i ]
  %175 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %174
  %176 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.15.i.i.i
  %177 = load i8, ptr %176, align 1, !noalias !2201
  store i8 %177, ptr %175, align 1, !noalias !2201
  %178 = load i64, ptr %170, align 8, !noalias !2201
  %179 = add i64 %178, 1
  store i64 %179, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i = add nsw i64 %n.15.i.i.i, -1
  %180 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %179
  %181 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.1.i.i.i
  %182 = load i8, ptr %181, align 1, !noalias !2201
  store i8 %182, ptr %180, align 1, !noalias !2201
  %183 = load i64, ptr %170, align 8, !noalias !2201
  %184 = add i64 %183, 1
  store i64 %184, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i.1 = add nsw i64 %n.15.i.i.i, -2
  %185 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %184
  %186 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.1.i.i.i.1
  %187 = load i8, ptr %186, align 1, !noalias !2201
  store i8 %187, ptr %185, align 1, !noalias !2201
  %188 = load i64, ptr %170, align 8, !noalias !2201
  %189 = add i64 %188, 1
  store i64 %189, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i.2 = add nsw i64 %n.15.i.i.i, -3
  %190 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %189
  %191 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.1.i.i.i.2
  %192 = load i8, ptr %191, align 1, !noalias !2201
  store i8 %192, ptr %190, align 1, !noalias !2201
  %193 = load i64, ptr %170, align 8, !noalias !2201
  %194 = add i64 %193, 1
  store i64 %194, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i.3 = add nsw i64 %n.15.i.i.i, -4
  %195 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %194
  %196 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.1.i.i.i.3
  %197 = load i8, ptr %196, align 1, !noalias !2201
  store i8 %197, ptr %195, align 1, !noalias !2201
  %198 = load i64, ptr %170, align 8, !noalias !2201
  %199 = add i64 %198, 1
  store i64 %199, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i.4 = add nsw i64 %n.15.i.i.i, -5
  %200 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %199
  %201 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.1.i.i.i.4
  %202 = load i8, ptr %201, align 1, !noalias !2201
  store i8 %202, ptr %200, align 1, !noalias !2201
  %203 = load i64, ptr %170, align 8, !noalias !2201
  %204 = add i64 %203, 1
  store i64 %204, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i.5 = add nsw i64 %n.15.i.i.i, -6
  %205 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %204
  %206 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.1.i.i.i.5
  %207 = load i8, ptr %206, align 1, !noalias !2201
  store i8 %207, ptr %205, align 1, !noalias !2201
  %208 = load i64, ptr %170, align 8, !noalias !2201
  %209 = add i64 %208, 1
  store i64 %209, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i.6 = add nsw i64 %n.15.i.i.i, -7
  %210 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %209
  %211 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.1.i.i.i.6
  %212 = load i8, ptr %211, align 1, !noalias !2201
  store i8 %212, ptr %210, align 1, !noalias !2201
  %213 = load i64, ptr %170, align 8, !noalias !2201
  %214 = add i64 %213, 1
  store i64 %214, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i.7 = add nsw i64 %n.15.i.i.i, -8
  %niter362.next.7 = add i64 %niter362, 8
  %niter362.ncmp.7 = icmp eq i64 %niter362.next.7, %unroll_iter361
  br i1 %niter362.ncmp.7, label %for.done4.i.i.i.unr-lcssa, label %for.body3.i.i.i

for.done.i.thread.i.i.i:                          ; preds = %for.done.i.i138.i
  %215 = getelementptr inbounds %strconv_decimal.Decimal, ptr %upper_.i.i, i64 0, i32 2
  br label %strconv_decimal.assign.exit.thread59.i.i

for.done4.i.i.i.unr-lcssa:                        ; preds = %for.body3.i.i.i, %for.body3.i.i.i.preheader
  %.lcssa333.ph = phi i64 [ undef, %for.body3.i.i.i.preheader ], [ %213, %for.body3.i.i.i ]
  %.lcssa332.ph = phi i64 [ undef, %for.body3.i.i.i.preheader ], [ %214, %for.body3.i.i.i ]
  %.unr357 = phi i64 [ 0, %for.body3.i.i.i.preheader ], [ %214, %for.body3.i.i.i ]
  %n.15.i.i.i.unr = phi i64 [ %n.02.i.i.i, %for.body3.i.i.i.preheader ], [ %n.1.i.i.i.7, %for.body3.i.i.i ]
  %lcmp.mod358.not = icmp eq i64 %xtraiter355, 0
  br i1 %lcmp.mod358.not, label %for.done4.i.i.i, label %for.body3.i.i.i.epil

for.body3.i.i.i.epil:                             ; preds = %for.done4.i.i.i.unr-lcssa, %for.body3.i.i.i.epil
  %216 = phi i64 [ %221, %for.body3.i.i.i.epil ], [ %.unr357, %for.done4.i.i.i.unr-lcssa ]
  %n.15.i.i.i.epil = phi i64 [ %n.1.i.i.i.epil, %for.body3.i.i.i.epil ], [ %n.15.i.i.i.unr, %for.done4.i.i.i.unr-lcssa ]
  %epil.iter356 = phi i64 [ %epil.iter356.next, %for.body3.i.i.i.epil ], [ 0, %for.done4.i.i.i.unr-lcssa ]
  %217 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %216
  %218 = getelementptr [64 x i8], ptr %buf.i.i.i, i64 0, i64 %n.15.i.i.i.epil
  %219 = load i8, ptr %218, align 1, !noalias !2201
  store i8 %219, ptr %217, align 1, !noalias !2201
  %220 = load i64, ptr %170, align 8, !noalias !2201
  %221 = add i64 %220, 1
  store i64 %221, ptr %170, align 8, !noalias !2201
  %n.1.i.i.i.epil = add nsw i64 %n.15.i.i.i.epil, -1
  %epil.iter356.next = add i64 %epil.iter356, 1
  %epil.iter356.cmp.not = icmp eq i64 %epil.iter356.next, %xtraiter355
  br i1 %epil.iter356.cmp.not, label %for.done4.i.i.i, label %for.body3.i.i.i.epil, !llvm.loop !2203

for.done4.i.i.i:                                  ; preds = %for.body3.i.i.i.epil, %for.done4.i.i.i.unr-lcssa
  %.lcssa333 = phi i64 [ %.lcssa333.ph, %for.done4.i.i.i.unr-lcssa ], [ %220, %for.body3.i.i.i.epil ]
  %.lcssa332 = phi i64 [ %.lcssa332.ph, %for.done4.i.i.i.unr-lcssa ], [ %221, %for.body3.i.i.i.epil ]
  %222 = getelementptr inbounds %strconv_decimal.Decimal, ptr %upper_.i.i, i64 0, i32 2
  store i64 %.lcssa332, ptr %222, align 8, !noalias !2201
  %223 = icmp ult i64 %.lcssa333, 9223372036854775807
  br i1 %223, label %cmp.and.i.i.i.i, label %for.done.i.i.i.i

cmp.and.i.i.i.i:                                  ; preds = %for.done4.i.i.i, %for.body.i.i.i.i
  %224 = phi i64 [ %225, %for.body.i.i.i.i ], [ %.lcssa332, %for.done4.i.i.i ]
  %225 = add nsw i64 %224, -1
  %226 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %225
  %227 = load i8, ptr %226, align 1, !noalias !2201
  %228 = icmp eq i8 %227, 48
  br i1 %228, label %for.body.i.i.i.i, label %strconv_decimal.assign.exit.thread.i.i

for.body.i.i.i.i:                                 ; preds = %cmp.and.i.i.i.i
  store i64 %225, ptr %170, align 8, !noalias !2201
  %229 = icmp ugt i64 %224, 1
  br i1 %229, label %cmp.and.i.i.i.i, label %strconv_decimal.assign.exit.i.i

for.done.i.i.i.i:                                 ; preds = %for.done4.i.i.i
  %230 = icmp eq i64 %.lcssa332, 0
  br i1 %230, label %strconv_decimal.assign.exit.thread59.i.i, label %strconv_decimal.assign.exit.thread.i.i

strconv_decimal.assign.exit.thread.i.i:           ; preds = %cmp.and.i.i.i.i, %for.done.i.i.i.i
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i.i.i), !noalias !2201
  %231 = load i64, ptr %flt.0.i, align 16, !noalias !2201
  br label %switch.case.next.i.i.i

strconv_decimal.assign.exit.thread59.i.i:         ; preds = %for.done.i.i.i.i, %for.done.i.thread.i.i.i
  %.ph.i.i = phi ptr [ %215, %for.done.i.thread.i.i.i ], [ %222, %for.done.i.i.i.i ]
  store i64 0, ptr %.ph.i.i, align 8, !noalias !2201
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i.i.i), !noalias !2201
  %232 = load i64, ptr %flt.0.i, align 16, !noalias !2201
  br label %strconv_decimal.shift.exit.i.i

strconv_decimal.assign.exit.i.i:                  ; preds = %for.body.i.i.i.i
  store i64 0, ptr %222, align 8, !noalias !2201
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i.i.i), !noalias !2201
  %233 = load i64, ptr %flt.0.i, align 16, !noalias !2201
  %234 = icmp eq i64 %225, 0
  br i1 %234, label %strconv_decimal.shift.exit.i.i, label %switch.case.next.i.i.i

switch.case.next.i.i.i:                           ; preds = %strconv_decimal.assign.exit.i.i, %strconv_decimal.assign.exit.thread.i.i
  %235 = phi i64 [ %231, %strconv_decimal.assign.exit.thread.i.i ], [ %233, %strconv_decimal.assign.exit.i.i ]
  %.pn111.i.i = xor i64 %235, -1
  %236 = add i64 %61, %.pn111.i.i
  %237 = icmp sgt i64 %236, 0
  br i1 %237, label %for.loop.preheader.i.i.i, label %switch.case.next1.i.i.i

for.loop.preheader.i.i.i:                         ; preds = %switch.case.next.i.i.i
  %238 = icmp ugt i64 %236, 60
  br i1 %238, label %for.body.i37.i.i, label %for.done.i36.i.i

switch.case.next1.i.i.i:                          ; preds = %switch.case.next.i.i.i
  %239 = icmp slt i64 %236, 0
  br i1 %239, label %for.loop5.preheader.i.i.i, label %strconv_decimal.shift.exit.i.i

for.loop5.preheader.i.i.i:                        ; preds = %switch.case.next1.i.i.i
  %240 = icmp ult i64 %236, -60
  br i1 %240, label %for.body6.i.i.i, label %for.done7.i.i.i

for.body.i37.i.i:                                 ; preds = %for.loop.preheader.i.i.i, %for.body.i37.i.i
  %k.02.i.i.i = phi i64 [ %241, %for.body.i37.i.i ], [ %236, %for.loop.preheader.i.i.i ]
  call fastcc void @strconv_decimal.shift_left(ptr nonnull %upper_.i.i, i64 60), !noalias !2201
  %241 = add nsw i64 %k.02.i.i.i, -60
  %242 = icmp ugt i64 %k.02.i.i.i, 120
  br i1 %242, label %for.body.i37.i.i, label %for.done.i36.i.i

for.done.i36.i.i:                                 ; preds = %for.body.i37.i.i, %for.loop.preheader.i.i.i
  %k.0.lcssa.i.i.i = phi i64 [ %236, %for.loop.preheader.i.i.i ], [ %241, %for.body.i37.i.i ]
  call fastcc void @strconv_decimal.shift_left(ptr nonnull %upper_.i.i, i64 %k.0.lcssa.i.i.i), !noalias !2201
  br label %strconv_decimal.shift.exit.i.i

for.body6.i.i.i:                                  ; preds = %for.loop5.preheader.i.i.i, %for.body6.i.i.i
  %k.11.i.i.i = phi i64 [ %243, %for.body6.i.i.i ], [ %236, %for.loop5.preheader.i.i.i ]
  call fastcc void @strconv_decimal.shift_right(ptr nonnull %upper_.i.i, i64 60), !noalias !2201
  %243 = add nuw nsw i64 %k.11.i.i.i, 60
  %244 = icmp ult i64 %k.11.i.i.i, -120
  br i1 %244, label %for.body6.i.i.i, label %for.done7.i.i.i

for.done7.i.i.i:                                  ; preds = %for.body6.i.i.i, %for.loop5.preheader.i.i.i
  %k.1.lcssa.i.i.i = phi i64 [ %236, %for.loop5.preheader.i.i.i ], [ %243, %for.body6.i.i.i ]
  %245 = sub nsw i64 0, %k.1.lcssa.i.i.i
  call fastcc void @strconv_decimal.shift_right(ptr nonnull %upper_.i.i, i64 %245), !noalias !2201
  %.pre.i.i = load i64, ptr %flt.0.i, align 16, !noalias !2201
  br label %strconv_decimal.shift.exit.i.i

strconv_decimal.shift.exit.i.i:                   ; preds = %for.done7.i.i.i, %for.done.i36.i.i, %switch.case.next1.i.i.i, %strconv_decimal.assign.exit.i.i, %strconv_decimal.assign.exit.thread59.i.i
  %246 = phi i64 [ %233, %strconv_decimal.assign.exit.i.i ], [ %235, %switch.case.next1.i.i.i ], [ %235, %for.done.i36.i.i ], [ %.pre.i.i, %for.done7.i.i.i ], [ %232, %strconv_decimal.assign.exit.thread59.i.i ]
  %247 = icmp ult i64 %246, 64
  %248 = shl nuw i64 1, %246
  %249 = select i1 %247, i64 %248, i64 0
  %250 = icmp uge i64 %249, %spec.select195.i
  %251 = icmp ne i64 %152, %61
  %or.cond33.not.i.i = select i1 %250, i1 %251, i1 false
  %252 = add i64 %spec.select195.i, 9223372036854775807
  %mantlo.0.i.i = select i1 %or.cond33.not.i.i, i64 %163, i64 %252
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(408) %lower_.i.i, i8 0, i64 408, i1 false), !noalias !2201
  %253 = shl i64 %mantlo.0.i.i, 1
  %254 = or i64 %253, 1
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %buf.i38.i.i), !noalias !2201
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(64) %buf.i38.i.i, i8 0, i64 64, i1 false), !noalias !2201
  br label %for.body.i39.i.i

for.body.i39.i.i:                                 ; preds = %for.body.i39.i.i, %strconv_decimal.shift.exit.i.i
  %i.03.i40.i.i = phi i64 [ %255, %for.body.i39.i.i ], [ %254, %strconv_decimal.shift.exit.i.i ]
  %n.02.i41.i.i = phi i64 [ %260, %for.body.i39.i.i ], [ 0, %strconv_decimal.shift.exit.i.i ]
  %255 = udiv i64 %i.03.i40.i.i, 10
  %.neg.i42.i.i = mul i64 %255, 246
  %256 = add i64 %.neg.i42.i.i, %i.03.i40.i.i
  %257 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.02.i41.i.i
  %258 = trunc i64 %256 to i8
  %259 = add i8 %258, 48
  store i8 %259, ptr %257, align 1, !noalias !2201
  %260 = add i64 %n.02.i41.i.i, 1
  %.not.i43.i.i = icmp ult i64 %i.03.i40.i.i, 10
  br i1 %.not.i43.i.i, label %for.done.i44.i.i, label %for.body.i39.i.i

for.done.i44.i.i:                                 ; preds = %for.body.i39.i.i
  %261 = sext i1 %or.cond33.not.i.i to i64
  %262 = getelementptr inbounds %strconv_decimal.Decimal, ptr %lower_.i.i, i64 0, i32 1
  store i64 0, ptr %262, align 8, !noalias !2201
  %263 = icmp sgt i64 %n.02.i41.i.i, -1
  br i1 %263, label %for.body3.i47.i.i.preheader, label %for.done.i.thread.i45.i.i

for.body3.i47.i.i.preheader:                      ; preds = %for.done.i44.i.i
  %264 = add i64 %n.02.i41.i.i, 1
  %xtraiter363 = and i64 %264, 7
  %265 = icmp ult i64 %n.02.i41.i.i, 7
  br i1 %265, label %for.done4.i51.i.i.unr-lcssa, label %for.body3.i47.i.i.preheader.new

for.body3.i47.i.i.preheader.new:                  ; preds = %for.body3.i47.i.i.preheader
  %unroll_iter369 = and i64 %264, -8
  br label %for.body3.i47.i.i

for.body3.i47.i.i:                                ; preds = %for.body3.i47.i.i, %for.body3.i47.i.i.preheader.new
  %266 = phi i64 [ 0, %for.body3.i47.i.i.preheader.new ], [ %306, %for.body3.i47.i.i ]
  %n.15.i48.i.i = phi i64 [ %n.02.i41.i.i, %for.body3.i47.i.i.preheader.new ], [ %n.1.i49.i.i.7, %for.body3.i47.i.i ]
  %niter370 = phi i64 [ 0, %for.body3.i47.i.i.preheader.new ], [ %niter370.next.7, %for.body3.i47.i.i ]
  %267 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %266
  %268 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.15.i48.i.i
  %269 = load i8, ptr %268, align 1, !noalias !2201
  store i8 %269, ptr %267, align 1, !noalias !2201
  %270 = load i64, ptr %262, align 8, !noalias !2201
  %271 = add i64 %270, 1
  store i64 %271, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i = add nsw i64 %n.15.i48.i.i, -1
  %272 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %271
  %273 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.1.i49.i.i
  %274 = load i8, ptr %273, align 1, !noalias !2201
  store i8 %274, ptr %272, align 1, !noalias !2201
  %275 = load i64, ptr %262, align 8, !noalias !2201
  %276 = add i64 %275, 1
  store i64 %276, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i.1 = add nsw i64 %n.15.i48.i.i, -2
  %277 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %276
  %278 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.1.i49.i.i.1
  %279 = load i8, ptr %278, align 1, !noalias !2201
  store i8 %279, ptr %277, align 1, !noalias !2201
  %280 = load i64, ptr %262, align 8, !noalias !2201
  %281 = add i64 %280, 1
  store i64 %281, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i.2 = add nsw i64 %n.15.i48.i.i, -3
  %282 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %281
  %283 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.1.i49.i.i.2
  %284 = load i8, ptr %283, align 1, !noalias !2201
  store i8 %284, ptr %282, align 1, !noalias !2201
  %285 = load i64, ptr %262, align 8, !noalias !2201
  %286 = add i64 %285, 1
  store i64 %286, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i.3 = add nsw i64 %n.15.i48.i.i, -4
  %287 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %286
  %288 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.1.i49.i.i.3
  %289 = load i8, ptr %288, align 1, !noalias !2201
  store i8 %289, ptr %287, align 1, !noalias !2201
  %290 = load i64, ptr %262, align 8, !noalias !2201
  %291 = add i64 %290, 1
  store i64 %291, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i.4 = add nsw i64 %n.15.i48.i.i, -5
  %292 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %291
  %293 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.1.i49.i.i.4
  %294 = load i8, ptr %293, align 1, !noalias !2201
  store i8 %294, ptr %292, align 1, !noalias !2201
  %295 = load i64, ptr %262, align 8, !noalias !2201
  %296 = add i64 %295, 1
  store i64 %296, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i.5 = add nsw i64 %n.15.i48.i.i, -6
  %297 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %296
  %298 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.1.i49.i.i.5
  %299 = load i8, ptr %298, align 1, !noalias !2201
  store i8 %299, ptr %297, align 1, !noalias !2201
  %300 = load i64, ptr %262, align 8, !noalias !2201
  %301 = add i64 %300, 1
  store i64 %301, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i.6 = add nsw i64 %n.15.i48.i.i, -7
  %302 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %301
  %303 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.1.i49.i.i.6
  %304 = load i8, ptr %303, align 1, !noalias !2201
  store i8 %304, ptr %302, align 1, !noalias !2201
  %305 = load i64, ptr %262, align 8, !noalias !2201
  %306 = add i64 %305, 1
  store i64 %306, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i.7 = add nsw i64 %n.15.i48.i.i, -8
  %niter370.next.7 = add i64 %niter370, 8
  %niter370.ncmp.7 = icmp eq i64 %niter370.next.7, %unroll_iter369
  br i1 %niter370.ncmp.7, label %for.done4.i51.i.i.unr-lcssa, label %for.body3.i47.i.i

for.done.i.thread.i45.i.i:                        ; preds = %for.done.i44.i.i
  %307 = getelementptr inbounds %strconv_decimal.Decimal, ptr %lower_.i.i, i64 0, i32 2
  br label %strconv_decimal.assign.exit55.thread64.i.i

for.done4.i51.i.i.unr-lcssa:                      ; preds = %for.body3.i47.i.i, %for.body3.i47.i.i.preheader
  %.lcssa327.ph = phi i64 [ undef, %for.body3.i47.i.i.preheader ], [ %305, %for.body3.i47.i.i ]
  %.lcssa326.ph = phi i64 [ undef, %for.body3.i47.i.i.preheader ], [ %306, %for.body3.i47.i.i ]
  %.unr365 = phi i64 [ 0, %for.body3.i47.i.i.preheader ], [ %306, %for.body3.i47.i.i ]
  %n.15.i48.i.i.unr = phi i64 [ %n.02.i41.i.i, %for.body3.i47.i.i.preheader ], [ %n.1.i49.i.i.7, %for.body3.i47.i.i ]
  %lcmp.mod366.not = icmp eq i64 %xtraiter363, 0
  br i1 %lcmp.mod366.not, label %for.done4.i51.i.i, label %for.body3.i47.i.i.epil

for.body3.i47.i.i.epil:                           ; preds = %for.done4.i51.i.i.unr-lcssa, %for.body3.i47.i.i.epil
  %308 = phi i64 [ %313, %for.body3.i47.i.i.epil ], [ %.unr365, %for.done4.i51.i.i.unr-lcssa ]
  %n.15.i48.i.i.epil = phi i64 [ %n.1.i49.i.i.epil, %for.body3.i47.i.i.epil ], [ %n.15.i48.i.i.unr, %for.done4.i51.i.i.unr-lcssa ]
  %epil.iter364 = phi i64 [ %epil.iter364.next, %for.body3.i47.i.i.epil ], [ 0, %for.done4.i51.i.i.unr-lcssa ]
  %309 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %308
  %310 = getelementptr [64 x i8], ptr %buf.i38.i.i, i64 0, i64 %n.15.i48.i.i.epil
  %311 = load i8, ptr %310, align 1, !noalias !2201
  store i8 %311, ptr %309, align 1, !noalias !2201
  %312 = load i64, ptr %262, align 8, !noalias !2201
  %313 = add i64 %312, 1
  store i64 %313, ptr %262, align 8, !noalias !2201
  %n.1.i49.i.i.epil = add nsw i64 %n.15.i48.i.i.epil, -1
  %epil.iter364.next = add i64 %epil.iter364, 1
  %epil.iter364.cmp.not = icmp eq i64 %epil.iter364.next, %xtraiter363
  br i1 %epil.iter364.cmp.not, label %for.done4.i51.i.i, label %for.body3.i47.i.i.epil, !llvm.loop !2204

for.done4.i51.i.i:                                ; preds = %for.body3.i47.i.i.epil, %for.done4.i51.i.i.unr-lcssa
  %.lcssa327 = phi i64 [ %.lcssa327.ph, %for.done4.i51.i.i.unr-lcssa ], [ %312, %for.body3.i47.i.i.epil ]
  %.lcssa326 = phi i64 [ %.lcssa326.ph, %for.done4.i51.i.i.unr-lcssa ], [ %313, %for.body3.i47.i.i.epil ]
  %314 = getelementptr inbounds %strconv_decimal.Decimal, ptr %lower_.i.i, i64 0, i32 2
  store i64 %.lcssa326, ptr %314, align 8, !noalias !2201
  %315 = icmp ult i64 %.lcssa327, 9223372036854775807
  br i1 %315, label %cmp.and.i.i53.i.i, label %for.done.i.i52.i.i

cmp.and.i.i53.i.i:                                ; preds = %for.done4.i51.i.i, %for.body.i.i54.i.i
  %316 = phi i64 [ %317, %for.body.i.i54.i.i ], [ %.lcssa326, %for.done4.i51.i.i ]
  %317 = add nsw i64 %316, -1
  %318 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %317
  %319 = load i8, ptr %318, align 1, !noalias !2201
  %320 = icmp eq i8 %319, 48
  br i1 %320, label %for.body.i.i54.i.i, label %strconv_decimal.assign.exit55.thread.i.i

for.body.i.i54.i.i:                               ; preds = %cmp.and.i.i53.i.i
  store i64 %317, ptr %262, align 8, !noalias !2201
  %321 = icmp ugt i64 %316, 1
  br i1 %321, label %cmp.and.i.i53.i.i, label %strconv_decimal.assign.exit55.i.i

for.done.i.i52.i.i:                               ; preds = %for.done4.i51.i.i
  %322 = icmp eq i64 %.lcssa326, 0
  br i1 %322, label %strconv_decimal.assign.exit55.thread64.i.i, label %strconv_decimal.assign.exit55.thread.i.i

strconv_decimal.assign.exit55.thread.i.i:         ; preds = %cmp.and.i.i53.i.i, %for.done.i.i52.i.i
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i38.i.i), !noalias !2201
  br label %switch.case.next.i56.i.i

strconv_decimal.assign.exit55.thread64.i.i:       ; preds = %for.done.i.i52.i.i, %for.done.i.thread.i45.i.i
  %.ph63.i.i = phi ptr [ %307, %for.done.i.thread.i45.i.i ], [ %314, %for.done.i.i52.i.i ]
  store i64 0, ptr %.ph63.i.i, align 8, !noalias !2201
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i38.i.i), !noalias !2201
  br label %strconv_decimal.shift.exit68.i.i

strconv_decimal.assign.exit55.i.i:                ; preds = %for.body.i.i54.i.i
  store i64 0, ptr %314, align 8, !noalias !2201
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %buf.i38.i.i), !noalias !2201
  %323 = icmp eq i64 %317, 0
  br i1 %323, label %strconv_decimal.shift.exit68.i.i, label %switch.case.next.i56.i.i

switch.case.next.i56.i.i:                         ; preds = %strconv_decimal.assign.exit55.i.i, %strconv_decimal.assign.exit55.thread.i.i
  %.pn.i.i = xor i64 %246, -1
  %explo.061.pn.i.i = add i64 %61, %.pn.i.i
  %324 = add i64 %explo.061.pn.i.i, %261
  %325 = icmp sgt i64 %324, 0
  br i1 %325, label %for.loop.preheader.i63.i.i, label %switch.case.next1.i57.i.i

for.loop.preheader.i63.i.i:                       ; preds = %switch.case.next.i56.i.i
  %326 = icmp ugt i64 %324, 60
  br i1 %326, label %for.body.i66.i.i, label %for.done.i64.i.i

switch.case.next1.i57.i.i:                        ; preds = %switch.case.next.i56.i.i
  %327 = icmp slt i64 %324, 0
  br i1 %327, label %for.loop5.preheader.i58.i.i, label %strconv_decimal.shift.exit68.i.i

for.loop5.preheader.i58.i.i:                      ; preds = %switch.case.next1.i57.i.i
  %328 = icmp ult i64 %324, -60
  br i1 %328, label %for.body6.i61.i.i, label %for.done7.i59.i.i

for.body.i66.i.i:                                 ; preds = %for.loop.preheader.i63.i.i, %for.body.i66.i.i
  %k.02.i67.i.i = phi i64 [ %329, %for.body.i66.i.i ], [ %324, %for.loop.preheader.i63.i.i ]
  call fastcc void @strconv_decimal.shift_left(ptr nonnull %lower_.i.i, i64 60), !noalias !2201
  %329 = add nsw i64 %k.02.i67.i.i, -60
  %330 = icmp ugt i64 %k.02.i67.i.i, 120
  br i1 %330, label %for.body.i66.i.i, label %for.done.i64.i.i

for.done.i64.i.i:                                 ; preds = %for.body.i66.i.i, %for.loop.preheader.i63.i.i
  %k.0.lcssa.i65.i.i = phi i64 [ %324, %for.loop.preheader.i63.i.i ], [ %329, %for.body.i66.i.i ]
  call fastcc void @strconv_decimal.shift_left(ptr nonnull %lower_.i.i, i64 %k.0.lcssa.i65.i.i), !noalias !2201
  br label %strconv_decimal.shift.exit68.i.i

for.body6.i61.i.i:                                ; preds = %for.loop5.preheader.i58.i.i, %for.body6.i61.i.i
  %k.11.i62.i.i = phi i64 [ %331, %for.body6.i61.i.i ], [ %324, %for.loop5.preheader.i58.i.i ]
  call fastcc void @strconv_decimal.shift_right(ptr nonnull %lower_.i.i, i64 60), !noalias !2201
  %331 = add nuw nsw i64 %k.11.i62.i.i, 60
  %332 = icmp ult i64 %k.11.i62.i.i, -120
  br i1 %332, label %for.body6.i61.i.i, label %for.done7.i59.i.i

for.done7.i59.i.i:                                ; preds = %for.body6.i61.i.i, %for.loop5.preheader.i58.i.i
  %k.1.lcssa.i60.i.i = phi i64 [ %324, %for.loop5.preheader.i58.i.i ], [ %331, %for.body6.i61.i.i ]
  %333 = sub nsw i64 0, %k.1.lcssa.i60.i.i
  call fastcc void @strconv_decimal.shift_right(ptr nonnull %lower_.i.i, i64 %333), !noalias !2201
  br label %strconv_decimal.shift.exit68.i.i

strconv_decimal.shift.exit68.i.i:                 ; preds = %for.done7.i59.i.i, %for.done.i64.i.i, %switch.case.next1.i57.i.i, %strconv_decimal.assign.exit55.i.i, %strconv_decimal.assign.exit55.thread64.i.i
  %334 = and i64 %spec.select195.i, 1
  %335 = icmp eq i64 %334, 0
  %336 = load i64, ptr %149, align 8, !noalias !2201
  %337 = icmp sgt i64 %336, 0
  br i1 %337, label %for.interval.body.lr.ph.i.i, label %strconv.round_shortest.exit.i

for.interval.body.lr.ph.i.i:                      ; preds = %strconv_decimal.shift.exit68.i.i
  %338 = load i64, ptr %262, align 8, !noalias !2201
  %339 = load i64, ptr %170, align 8, !noalias !2201
  br label %for.interval.body.i.i

for.interval.body.i.i:                            ; preds = %for.interval.post.i.i, %for.interval.body.lr.ph.i.i
  %i.037.i.i = phi i64 [ 0, %for.interval.body.lr.ph.i.i ], [ %348, %for.interval.post.i.i ]
  %340 = icmp slt i64 %i.037.i.i, %338
  br i1 %340, label %if.then6.i.i, label %if.done7.i.i

if.then6.i.i:                                     ; preds = %for.interval.body.i.i
  %341 = getelementptr [384 x i8], ptr %lower_.i.i, i64 0, i64 %i.037.i.i
  %342 = load i8, ptr %341, align 1, !noalias !2201
  br label %if.done7.i.i

if.done7.i.i:                                     ; preds = %if.then6.i.i, %for.interval.body.i.i
  %l.0.i.i = phi i8 [ %342, %if.then6.i.i ], [ 48, %for.interval.body.i.i ]
  %343 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.037.i.i
  %344 = load i8, ptr %343, align 1, !noalias !2201
  %345 = icmp slt i64 %i.037.i.i, %339
  br i1 %345, label %if.then8.i.i, label %if.done9.i.i

if.then8.i.i:                                     ; preds = %if.done7.i.i
  %346 = getelementptr [384 x i8], ptr %upper_.i.i, i64 0, i64 %i.037.i.i
  %347 = load i8, ptr %346, align 1, !noalias !2201
  br label %if.done9.i.i

if.done9.i.i:                                     ; preds = %if.then8.i.i, %if.done7.i.i
  %u.0.i.i = phi i8 [ %347, %if.then8.i.i ], [ 48, %if.done7.i.i ]
  %.not.i139.i = icmp eq i8 %l.0.i.i, %344
  %348 = add nuw nsw i64 %i.037.i.i, 1
  %349 = icmp eq i64 %348, %338
  %350 = and i1 %335, %349
  br i1 %.not.i139.i, label %logical.cmp.done11.i.i, label %logical.cmp.done11.thread.i.i

logical.cmp.done11.i.i:                           ; preds = %if.done9.i.i
  %.not31.i.i = icmp eq i8 %l.0.i.i, %u.0.i.i
  br i1 %.not31.i.i, label %if.done19.thread.i.i, label %logical.cmp.rhs12.i.i

logical.cmp.done11.thread.i.i:                    ; preds = %if.done9.i.i
  %.not312.i.i = icmp eq i8 %344, %u.0.i.i
  br i1 %.not312.i.i, label %if.then20.i.i, label %logical.cmp.rhs12.thread.i.i

logical.cmp.rhs12.i.i:                            ; preds = %logical.cmp.done11.i.i
  br i1 %350, label %if.then18.i.i, label %if.done21.i.i

logical.cmp.rhs12.thread.i.i:                     ; preds = %logical.cmp.done11.thread.i.i
  %351 = add i8 %344, 1
  %352 = icmp ult i8 %351, %u.0.i.i
  %or.cond3566.i.i = select i1 %335, i1 true, i1 %352
  %353 = icmp slt i64 %348, %339
  %spec.select67.i.i = select i1 %or.cond3566.i.i, i1 true, i1 %353
  br i1 %spec.select67.i.i, label %if.then18.i.i, label %if.then20.i.i

if.then18.i.i:                                    ; preds = %logical.cmp.rhs12.i.i, %logical.cmp.rhs12.thread.i.i
  %354 = phi i64 [ %348, %logical.cmp.rhs12.thread.i.i ], [ %338, %logical.cmp.rhs12.i.i ]
  %355 = phi i8 [ %344, %logical.cmp.rhs12.thread.i.i ], [ %l.0.i.i, %logical.cmp.rhs12.i.i ]
  %.not.i69.i.i = icmp sgt i64 %336, %354
  br i1 %.not.i69.i.i, label %if.done.i.i.i.i, label %strconv.round_shortest.exit.i

if.done.i.i.i.i:                                  ; preds = %if.then18.i.i
  %356 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %354
  %357 = load i8, ptr %356, align 1, !noalias !2201
  %358 = icmp eq i8 %357, 53
  %359 = add nuw nsw i64 %i.037.i.i, 2
  %360 = icmp eq i64 %359, %336
  %or.cond.i.i.i.i = select i1 %358, i1 %360, i1 false
  br i1 %or.cond.i.i.i.i, label %if.then1.i.i.i.i, label %if.done4.i.i.i.i

if.then1.i.i.i.i:                                 ; preds = %if.done.i.i.i.i
  %361 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 4
  %362 = load i8, ptr %361, align 1, !noalias !2201
  %.not6.i.i.i.i = icmp eq i8 %362, 0
  %363 = and i8 %355, 1
  %.not17.i.i.i = icmp eq i8 %363, 0
  %or.cond110.i.i = select i1 %.not6.i.i.i.i, i1 %.not17.i.i.i, i1 false
  br i1 %or.cond110.i.i, label %cmp.and.i.i.preheader.i.i.i, label %for.loop.i.i.i.i.preheader

if.done4.i.i.i.i:                                 ; preds = %if.done.i.i.i.i
  %364 = icmp ugt i8 %357, 52
  br i1 %364, label %for.loop.i.i.i.i.preheader, label %cmp.and.i.i.preheader.i.i.i

for.loop.i.i.i.i.preheader:                       ; preds = %if.done4.i.i.i.i, %if.then1.i.i.i.i
  br label %for.loop.i.i.i.i

for.loop.i.i.i.i:                                 ; preds = %for.loop.i.i.i.i.preheader, %if.init.i.i.i.i
  %i.0.in.i.i.i.i = phi i64 [ %i.0.i.i.i.i, %if.init.i.i.i.i ], [ %354, %for.loop.i.i.i.i.preheader ]
  %365 = icmp sgt i64 %i.0.in.i.i.i.i, 0
  br i1 %365, label %if.init.i.i.i.i, label %for.done.i.i70.i.i

if.init.i.i.i.i:                                  ; preds = %for.loop.i.i.i.i
  %i.0.i.i.i.i = add nsw i64 %i.0.in.i.i.i.i, -1
  %366 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.0.i.i.i.i
  %367 = load i8, ptr %366, align 1, !noalias !2201
  %368 = icmp ult i8 %367, 57
  br i1 %368, label %if.then1.i5.i.i.i, label %for.loop.i.i.i.i

if.then1.i5.i.i.i:                                ; preds = %if.init.i.i.i.i
  %369 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.0.i.i.i.i
  %370 = add nuw nsw i8 %367, 1
  store i8 %370, ptr %369, align 1, !noalias !2201
  store i64 %i.0.in.i.i.i.i, ptr %149, align 8, !noalias !2201
  br label %strconv.round_shortest.exit.i

for.done.i.i70.i.i:                               ; preds = %for.loop.i.i.i.i
  store i8 49, ptr %d_.i, align 8, !noalias !2201
  store i64 1, ptr %149, align 8, !noalias !2201
  %371 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  %372 = load i64, ptr %371, align 8, !noalias !2201
  %373 = add i64 %372, 1
  store i64 %373, ptr %371, align 8, !noalias !2201
  br label %strconv.round_shortest.exit.i

cmp.and.i.i.preheader.i.i.i:                      ; preds = %if.done4.i.i.i.i, %if.then1.i.i.i.i
  store i64 %354, ptr %149, align 8, !noalias !2201
  br label %cmp.and.i.i.i.i.i

cmp.and.i.i.i.i.i:                                ; preds = %for.body.i.i.i.i.i, %cmp.and.i.i.preheader.i.i.i
  %374 = phi i64 [ %375, %for.body.i.i.i.i.i ], [ %354, %cmp.and.i.i.preheader.i.i.i ]
  %375 = add nsw i64 %374, -1
  %376 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %375
  %377 = load i8, ptr %376, align 1, !noalias !2201
  %378 = icmp eq i8 %377, 48
  br i1 %378, label %for.body.i.i.i.i.i, label %strconv.round_shortest.exit.i

for.body.i.i.i.i.i:                               ; preds = %cmp.and.i.i.i.i.i
  store i64 %375, ptr %149, align 8, !noalias !2201
  %379 = icmp ugt i64 %374, 1
  br i1 %379, label %cmp.and.i.i.i.i.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %for.body.i.i.i.i.i
  %380 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  store i64 0, ptr %380, align 8, !noalias !2201
  br label %strconv.round_shortest.exit.i

if.done19.thread.i.i:                             ; preds = %logical.cmp.done11.i.i
  br i1 %350, label %if.then20.i.i, label %for.interval.post.i.i

if.then20.i.i:                                    ; preds = %if.done19.thread.i.i, %logical.cmp.rhs12.thread.i.i, %logical.cmp.done11.thread.i.i
  %381 = phi i64 [ %348, %logical.cmp.rhs12.thread.i.i ], [ %348, %logical.cmp.done11.thread.i.i ], [ %338, %if.done19.thread.i.i ]
  %382 = icmp sgt i64 %381, -1
  %.not.i72.i.i = icmp sgt i64 %336, %381
  %or.cond4.i.i = and i1 %382, %.not.i72.i.i
  br i1 %or.cond4.i.i, label %if.done.i.i.i, label %strconv.round_shortest.exit.i

if.done.i.i.i:                                    ; preds = %if.then20.i.i
  store i64 %381, ptr %149, align 8, !noalias !2201
  %.not1.i.i.i = icmp eq i64 %381, 0
  br i1 %.not1.i.i.i, label %if.then.i.i75.i.i, label %cmp.and.i.i73.i.i

cmp.and.i.i73.i.i:                                ; preds = %if.done.i.i.i, %for.body.i.i74.i.i
  %383 = phi i64 [ %384, %for.body.i.i74.i.i ], [ %381, %if.done.i.i.i ]
  %384 = add nsw i64 %383, -1
  %385 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %384
  %386 = load i8, ptr %385, align 1, !noalias !2201
  %387 = icmp eq i8 %386, 48
  br i1 %387, label %for.body.i.i74.i.i, label %strconv.round_shortest.exit.i

for.body.i.i74.i.i:                               ; preds = %cmp.and.i.i73.i.i
  store i64 %384, ptr %149, align 8, !noalias !2201
  %388 = icmp ugt i64 %383, 1
  br i1 %388, label %cmp.and.i.i73.i.i, label %if.then.i.i75.i.i

if.then.i.i75.i.i:                                ; preds = %for.body.i.i74.i.i, %if.done.i.i.i
  %389 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  store i64 0, ptr %389, align 8, !noalias !2201
  br label %strconv.round_shortest.exit.i

if.done21.i.i:                                    ; preds = %logical.cmp.rhs12.i.i
  %390 = add i8 %l.0.i.i, 1
  %391 = icmp ult i8 %390, %u.0.i.i
  %or.cond35.i.i = select i1 %335, i1 true, i1 %391
  %392 = icmp slt i64 %348, %339
  %spec.select.i.i = select i1 %or.cond35.i.i, i1 true, i1 %392
  br i1 %spec.select.i.i, label %if.then22.i.i, label %for.interval.post.i.i

if.then22.i.i:                                    ; preds = %if.done21.i.i
  %.not.i77.i.i = icmp sgt i64 %336, %348
  br i1 %.not.i77.i.i, label %for.loop.i.i.i, label %strconv.round_shortest.exit.i

for.loop.i.i.i:                                   ; preds = %if.then22.i.i, %if.init.i.i.i
  %i.0.in.i.i.i = phi i64 [ %i.0.i.i.i, %if.init.i.i.i ], [ %348, %if.then22.i.i ]
  %393 = icmp sgt i64 %i.0.in.i.i.i, 0
  br i1 %393, label %if.init.i.i.i, label %for.done.i78.i.i

if.init.i.i.i:                                    ; preds = %for.loop.i.i.i
  %i.0.i.i.i = add nsw i64 %i.0.in.i.i.i, -1
  %394 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.0.i.i.i
  %395 = load i8, ptr %394, align 1, !noalias !2201
  %396 = icmp ult i8 %395, 57
  br i1 %396, label %if.then1.i.i.i, label %for.loop.i.i.i

if.then1.i.i.i:                                   ; preds = %if.init.i.i.i
  %397 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.0.i.i.i
  %398 = add nuw nsw i8 %395, 1
  store i8 %398, ptr %397, align 1, !noalias !2201
  store i64 %i.0.in.i.i.i, ptr %149, align 8, !noalias !2201
  br label %strconv.round_shortest.exit.i

for.done.i78.i.i:                                 ; preds = %for.loop.i.i.i
  store i8 49, ptr %d_.i, align 8, !noalias !2201
  store i64 1, ptr %149, align 8, !noalias !2201
  %399 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  %400 = load i64, ptr %399, align 8, !noalias !2201
  %401 = add i64 %400, 1
  store i64 %401, ptr %399, align 8, !noalias !2201
  br label %strconv.round_shortest.exit.i

for.interval.post.i.i:                            ; preds = %if.done21.i.i, %if.done19.thread.i.i
  %exitcond.not.i.i = icmp eq i64 %348, %336
  br i1 %exitcond.not.i.i, label %strconv.round_shortest.exit.i, label %for.interval.body.i.i

strconv.round_shortest.exit.i:                    ; preds = %for.interval.post.i.i, %cmp.and.i.i.i.i.i, %cmp.and.i.i73.i.i, %for.done.i78.i.i, %if.then1.i.i.i, %if.then22.i.i, %if.then.i.i75.i.i, %if.then20.i.i, %if.then.i.i.i.i.i, %for.done.i.i70.i.i, %if.then1.i5.i.i.i, %if.then18.i.i, %strconv_decimal.shift.exit68.i.i, %cmp.and.i.i, %if.then.i140.i
  %402 = phi i64 [ 0, %if.then.i140.i ], [ %156, %cmp.and.i.i ], [ %336, %strconv_decimal.shift.exit68.i.i ], [ %336, %if.then18.i.i ], [ %i.0.in.i.i.i.i, %if.then1.i5.i.i.i ], [ 1, %for.done.i.i70.i.i ], [ %375, %if.then.i.i.i.i.i ], [ %336, %if.then20.i.i ], [ 0, %if.then.i.i75.i.i ], [ %336, %if.then22.i.i ], [ %i.0.in.i.i.i, %if.then1.i.i.i ], [ 1, %for.done.i78.i.i ], [ %383, %cmp.and.i.i73.i.i ], [ %374, %cmp.and.i.i.i.i.i ], [ %336, %for.interval.post.i.i ]
  call void @llvm.lifetime.end.p0(i64 408, ptr nonnull %upper_.i.i), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 408, ptr nonnull %lower_.i.i), !noalias !2201
  %403 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  %404 = load i64, ptr %403, align 8, !noalias !2201
  switch i8 %2, label %if.done23.i [
    i8 101, label %switch.case.body12.i
    i8 69, label %switch.case.body12.i
    i8 102, label %switch.case.body13.i
    i8 70, label %switch.case.body13.i
  ]

switch.case.body12.i:                             ; preds = %strconv.round_shortest.exit.i, %strconv.round_shortest.exit.i
  %405 = add i64 %402, -1
  br label %if.done23.i

switch.case.body13.i:                             ; preds = %strconv.round_shortest.exit.i, %strconv.round_shortest.exit.i
  %406 = sub i64 %402, %404
  %407 = tail call i64 @llvm.smax.i64(i64 %406, i64 0)
  br label %if.done23.i

if.else16.i:                                      ; preds = %strconv_decimal.shift.exit.i
  switch i8 %2, label %if.else16.switch.done22_crit_edge.i [
    i8 101, label %switch.case.body17.i
    i8 69, label %switch.case.body17.i
    i8 102, label %switch.case.body18.i
    i8 70, label %switch.case.body18.i
  ]

if.else16.switch.done22_crit_edge.i:              ; preds = %if.else16.i
  %.pre.i = load i64, ptr %149, align 8, !noalias !2201
  br label %switch.done22.i

switch.case.body17.i:                             ; preds = %if.else16.i, %if.else16.i
  %408 = add nuw i64 %3, 1
  %409 = icmp sgt i64 %408, -1
  %.pre298.i = load i64, ptr %149, align 8, !noalias !2201
  %.not.i141.i = icmp sgt i64 %.pre298.i, %408
  %or.cond377.i = select i1 %409, i1 %.not.i141.i, i1 false
  br i1 %or.cond377.i, label %if.done.i.i142.i, label %switch.done22.i

if.done.i.i142.i:                                 ; preds = %switch.case.body17.i
  %410 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %408
  %411 = load i8, ptr %410, align 1, !noalias !2201
  %412 = icmp eq i8 %411, 53
  %413 = add nuw nsw i64 %3, 2
  %414 = icmp eq i64 %413, %.pre298.i
  %or.cond.i.i.i = select i1 %412, i1 %414, i1 false
  br i1 %or.cond.i.i.i, label %if.then1.i.i151.i, label %if.done4.i.i.i

if.then1.i.i151.i:                                ; preds = %if.done.i.i142.i
  %415 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 4
  %416 = load i8, ptr %415, align 1, !noalias !2201
  %.not6.i.i.i = icmp eq i8 %416, 0
  br i1 %.not6.i.i.i, label %strconv_decimal.can_round_up.exit.i.i, label %for.loop.i.i146.i.preheader

if.done4.i.i.i:                                   ; preds = %if.done.i.i142.i
  %417 = icmp ugt i8 %411, 52
  br i1 %417, label %for.loop.i.i146.i.preheader, label %cmp.and.i.i.preheader.i.i

strconv_decimal.can_round_up.exit.i.i:            ; preds = %if.then1.i.i151.i
  %418 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %3
  %419 = load i8, ptr %418, align 1, !noalias !2201
  %420 = and i8 %419, 1
  %.not17.i.i = icmp eq i8 %420, 0
  br i1 %.not17.i.i, label %cmp.and.i.i.preheader.i.i, label %for.loop.i.i146.i.preheader

for.loop.i.i146.i.preheader:                      ; preds = %strconv_decimal.can_round_up.exit.i.i, %if.done4.i.i.i, %if.then1.i.i151.i
  br label %for.loop.i.i146.i

for.loop.i.i146.i:                                ; preds = %for.loop.i.i146.i.preheader, %if.init.i.i149.i
  %i.0.in.i.i147.i = phi i64 [ %i.0.i.i150.i, %if.init.i.i149.i ], [ %408, %for.loop.i.i146.i.preheader ]
  %421 = icmp sgt i64 %i.0.in.i.i147.i, 0
  br i1 %421, label %if.init.i.i149.i, label %for.done.i.i148.i

if.init.i.i149.i:                                 ; preds = %for.loop.i.i146.i
  %i.0.i.i150.i = add nsw i64 %i.0.in.i.i147.i, -1
  %422 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.0.i.i150.i
  %423 = load i8, ptr %422, align 1, !noalias !2201
  %424 = icmp ult i8 %423, 57
  br i1 %424, label %if.then1.i5.i.i, label %for.loop.i.i146.i

if.then1.i5.i.i:                                  ; preds = %if.init.i.i149.i
  %425 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.0.i.i150.i
  %426 = add nuw nsw i8 %423, 1
  store i8 %426, ptr %425, align 1, !noalias !2201
  store i64 %i.0.in.i.i147.i, ptr %149, align 8, !noalias !2201
  br label %switch.done22.i

for.done.i.i148.i:                                ; preds = %for.loop.i.i146.i
  store i8 49, ptr %d_.i, align 8, !noalias !2201
  store i64 1, ptr %149, align 8, !noalias !2201
  %427 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  %428 = load i64, ptr %427, align 8, !noalias !2201
  %429 = add i64 %428, 1
  store i64 %429, ptr %427, align 8, !noalias !2201
  br label %switch.done22.i

cmp.and.i.i.preheader.i.i:                        ; preds = %strconv_decimal.can_round_up.exit.i.i, %if.done4.i.i.i
  store i64 %408, ptr %149, align 8, !noalias !2201
  br label %cmp.and.i.i.i144.i

cmp.and.i.i.i144.i:                               ; preds = %for.body.i.i.i145.i, %cmp.and.i.i.preheader.i.i
  %430 = phi i64 [ %431, %for.body.i.i.i145.i ], [ %408, %cmp.and.i.i.preheader.i.i ]
  %431 = add nsw i64 %430, -1
  %432 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %431
  %433 = load i8, ptr %432, align 1, !noalias !2201
  %434 = icmp eq i8 %433, 48
  br i1 %434, label %for.body.i.i.i145.i, label %switch.done22.i

for.body.i.i.i145.i:                              ; preds = %cmp.and.i.i.i144.i
  store i64 %431, ptr %149, align 8, !noalias !2201
  %435 = icmp ugt i64 %430, 1
  br i1 %435, label %cmp.and.i.i.i144.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %for.body.i.i.i145.i
  %436 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  store i64 0, ptr %436, align 8, !noalias !2201
  br label %switch.done22.i

switch.case.body18.i:                             ; preds = %if.else16.i, %if.else16.i
  %437 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  %438 = load i64, ptr %437, align 8, !noalias !2201
  %439 = add i64 %438, %3
  %440 = icmp sgt i64 %439, -1
  %.pre297.i = load i64, ptr %149, align 8, !noalias !2201
  %.not.i153.i = icmp sgt i64 %.pre297.i, %439
  %or.cond378.i = select i1 %440, i1 %.not.i153.i, i1 false
  br i1 %or.cond378.i, label %if.done.i.i154.i, label %switch.done22.i

if.done.i.i154.i:                                 ; preds = %switch.case.body18.i
  %441 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %439
  %442 = load i8, ptr %441, align 1, !noalias !2201
  %443 = icmp eq i8 %442, 53
  %444 = add nuw nsw i64 %439, 1
  %445 = icmp eq i64 %444, %.pre297.i
  %or.cond.i.i155.i = select i1 %443, i1 %445, i1 false
  br i1 %or.cond.i.i155.i, label %if.then1.i.i170.i, label %if.done4.i.i156.i

if.then1.i.i170.i:                                ; preds = %if.done.i.i154.i
  %446 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 4
  %447 = load i8, ptr %446, align 1, !noalias !2201
  %.not6.i.i171.i = icmp eq i8 %447, 0
  br i1 %.not6.i.i171.i, label %if.done3.i.i172.i, label %for.loop.i.i164.i.preheader

for.loop.i.i164.i.preheader:                      ; preds = %strconv_decimal.can_round_up.exit.i174.i, %if.done4.i.i156.i, %if.then1.i.i170.i
  br label %for.loop.i.i164.i

if.done3.i.i172.i:                                ; preds = %if.then1.i.i170.i
  %.not9.i173.i = icmp eq i64 %439, 0
  br i1 %.not9.i173.i, label %if.done.i8.thread.i177.i, label %strconv_decimal.can_round_up.exit.i174.i

if.done.i8.thread.i177.i:                         ; preds = %if.done3.i.i172.i
  store i64 0, ptr %149, align 8, !noalias !2201
  br label %if.then.i.i.i162.i

if.done4.i.i156.i:                                ; preds = %if.done.i.i154.i
  %448 = icmp ugt i8 %442, 52
  br i1 %448, label %for.loop.i.i164.i.preheader, label %if.done.i8.i157.i

strconv_decimal.can_round_up.exit.i174.i:         ; preds = %if.done3.i.i172.i
  %449 = add nsw i64 %439, -1
  %450 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %449
  %451 = load i8, ptr %450, align 1, !noalias !2201
  %452 = and i8 %451, 1
  %.not17.i175.i = icmp eq i8 %452, 0
  br i1 %.not17.i175.i, label %if.done.i8.thread13.i176.i, label %for.loop.i.i164.i.preheader

if.done.i8.thread13.i176.i:                       ; preds = %strconv_decimal.can_round_up.exit.i174.i
  store i64 %439, ptr %149, align 8, !noalias !2201
  br label %cmp.and.i.i.i160.i.preheader

for.loop.i.i164.i:                                ; preds = %for.loop.i.i164.i.preheader, %if.init.i.i167.i
  %i.0.in.i.i165.i = phi i64 [ %i.0.i.i168.i, %if.init.i.i167.i ], [ %439, %for.loop.i.i164.i.preheader ]
  %453 = icmp sgt i64 %i.0.in.i.i165.i, 0
  br i1 %453, label %if.init.i.i167.i, label %for.done.i.i166.i

if.init.i.i167.i:                                 ; preds = %for.loop.i.i164.i
  %i.0.i.i168.i = add nsw i64 %i.0.in.i.i165.i, -1
  %454 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.0.i.i168.i
  %455 = load i8, ptr %454, align 1, !noalias !2201
  %456 = icmp ult i8 %455, 57
  br i1 %456, label %if.then1.i5.i169.i, label %for.loop.i.i164.i

if.then1.i5.i169.i:                               ; preds = %if.init.i.i167.i
  %457 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %i.0.i.i168.i
  %458 = add nuw nsw i8 %455, 1
  store i8 %458, ptr %457, align 1, !noalias !2201
  store i64 %i.0.in.i.i165.i, ptr %149, align 8, !noalias !2201
  br label %switch.done22.i

for.done.i.i166.i:                                ; preds = %for.loop.i.i164.i
  store i8 49, ptr %d_.i, align 8, !noalias !2201
  store i64 1, ptr %149, align 8, !noalias !2201
  %459 = add i64 %438, 1
  store i64 %459, ptr %437, align 8, !noalias !2201
  br label %switch.done22.i

if.done.i8.i157.i:                                ; preds = %if.done4.i.i156.i
  store i64 %439, ptr %149, align 8, !noalias !2201
  %.not1.i.i158.i = icmp eq i64 %439, 0
  br i1 %.not1.i.i158.i, label %if.then.i.i.i162.i, label %cmp.and.i.i.i160.i.preheader

cmp.and.i.i.i160.i.preheader:                     ; preds = %if.done.i8.i157.i, %if.done.i8.thread13.i176.i
  br label %cmp.and.i.i.i160.i

cmp.and.i.i.i160.i:                               ; preds = %cmp.and.i.i.i160.i.preheader, %for.body.i.i.i161.i
  %460 = phi i64 [ %461, %for.body.i.i.i161.i ], [ %439, %cmp.and.i.i.i160.i.preheader ]
  %461 = add nsw i64 %460, -1
  %462 = getelementptr [384 x i8], ptr %d_.i, i64 0, i64 %461
  %463 = load i8, ptr %462, align 1, !noalias !2201
  %464 = icmp eq i8 %463, 48
  br i1 %464, label %for.body.i.i.i161.i, label %switch.done22.i

for.body.i.i.i161.i:                              ; preds = %cmp.and.i.i.i160.i
  store i64 %461, ptr %149, align 8, !noalias !2201
  %465 = icmp ugt i64 %460, 1
  br i1 %465, label %cmp.and.i.i.i160.i, label %if.then.i.i.i162.i

if.then.i.i.i162.i:                               ; preds = %for.body.i.i.i161.i, %if.done.i8.i157.i, %if.done.i8.thread.i177.i
  %466 = phi i64 [ 0, %if.done.i8.i157.i ], [ 0, %if.done.i8.thread.i177.i ], [ %461, %for.body.i.i.i161.i ]
  store i64 0, ptr %437, align 8, !noalias !2201
  br label %switch.done22.i

switch.done22.i:                                  ; preds = %cmp.and.i.i.i160.i, %cmp.and.i.i.i144.i, %if.then.i.i.i162.i, %for.done.i.i166.i, %if.then1.i5.i169.i, %switch.case.body18.i, %if.then.i.i.i.i, %for.done.i.i148.i, %if.then1.i5.i.i, %switch.case.body17.i, %if.else16.switch.done22_crit_edge.i
  %467 = phi i64 [ %.pre.i, %if.else16.switch.done22_crit_edge.i ], [ %466, %if.then.i.i.i162.i ], [ 1, %for.done.i.i166.i ], [ %i.0.in.i.i165.i, %if.then1.i5.i169.i ], [ %.pre297.i, %switch.case.body18.i ], [ %431, %if.then.i.i.i.i ], [ 1, %for.done.i.i148.i ], [ %i.0.in.i.i147.i, %if.then1.i5.i.i ], [ %.pre298.i, %switch.case.body17.i ], [ %430, %cmp.and.i.i.i144.i ], [ %460, %cmp.and.i.i.i160.i ]
  %468 = getelementptr inbounds %strconv_decimal.Decimal, ptr %d_.i, i64 0, i32 2
  %469 = load i64, ptr %468, align 8, !noalias !2201
  br label %if.done23.i

if.done23.i:                                      ; preds = %switch.done22.i, %switch.case.body13.i, %switch.case.body12.i, %strconv.round_shortest.exit.i
  %470 = phi i64 [ %404, %strconv.round_shortest.exit.i ], [ %404, %switch.case.body13.i ], [ %404, %switch.case.body12.i ], [ %469, %switch.done22.i ]
  %471 = phi i64 [ %402, %strconv.round_shortest.exit.i ], [ %402, %switch.case.body13.i ], [ %402, %switch.case.body12.i ], [ %467, %switch.done22.i ]
  %prec.0.i = phi i64 [ %3, %strconv.round_shortest.exit.i ], [ %407, %switch.case.body13.i ], [ %405, %switch.case.body12.i ], [ %3, %switch.done22.i ]
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %27, i8 0, i64 16, i1 false), !noalias !2201
  %.val.i = load ptr, ptr %0, align 8, !noalias !2201
  %472 = getelementptr i8, ptr %0, i64 8
  %.val133.i = load i64, ptr %472, align 8, !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %9), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %10), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %11), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %12), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %13), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %14), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %15), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %16), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %17), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %18), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %19), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %20), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %21), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 3, ptr nonnull %22), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %23), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %24), !noalias !2201
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %25), !noalias !2201
  switch i8 %2, label %switch.default.body45.i.i [
    i8 102, label %switch.case.body.i.i
    i8 70, label %switch.case.body.i.i
    i8 101, label %switch.case.body9.i.i
    i8 69, label %switch.case.body9.i.i
  ]

switch.case.body.i.i:                             ; preds = %if.done23.i, %if.done23.i
  %..i.i = select i1 %43, i8 45, i8 43
  store i8 %..i.i, ptr %8, align 1, !noalias !2205
  %473 = icmp sgt i64 %.val133.i, 0
  %474 = zext i1 %473 to i64
  %.not.i.i.i.i = icmp slt i64 %.val133.i, 1
  br i1 %.not.i.i.i.i, label %strconv.format_digits.add_bytes-1.exit.i.i, label %if.then.i.i.i186.i

if.then.i.i.i186.i:                               ; preds = %switch.case.body.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %.val.i, ptr nonnull align 1 %8, i64 %474, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit.i.i

strconv.format_digits.add_bytes-1.exit.i.i:       ; preds = %if.then.i.i.i186.i, %switch.case.body.i.i
  %475 = icmp sgt i64 %470, 0
  %476 = sub i64 %.val133.i, %474
  br i1 %475, label %if.then1.i.i, label %if.else2.i.i

if.then1.i.i:                                     ; preds = %strconv.format_digits.add_bytes-1.exit.i.i
  %477 = tail call i64 @llvm.smin.i64(i64 %471, i64 %470)
  %478 = tail call i64 @llvm.smin.i64(i64 %476, i64 %477)
  %479 = tail call i64 @llvm.smax.i64(i64 %478, i64 0)
  %.not.i.i112.i.i = icmp slt i64 %478, 1
  br i1 %.not.i.i112.i.i, label %strconv.format_digits.add_bytes-1.exit115.i.i, label %if.then.i.i113.i.i

if.then.i.i113.i.i:                               ; preds = %if.then1.i.i
  %480 = getelementptr i8, ptr %.val.i, i64 %474
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %480, ptr nonnull align 8 %d_.i, i64 %479, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit115.i.i

strconv.format_digits.add_bytes-1.exit115.i.i:    ; preds = %if.then.i.i113.i.i, %if.then1.i.i
  %481 = add nuw i64 %479, %474
  %482 = icmp sgt i64 %470, %471
  br i1 %482, label %for.body.i194.i.preheader, label %if.done3.i.i

for.body.i194.i.preheader:                        ; preds = %strconv.format_digits.add_bytes-1.exit115.i.i
  %483 = sub i64 %470, %477
  %484 = xor i64 %477, -1
  %485 = add i64 %470, %484
  %xtraiter371 = and i64 %483, 7
  %lcmp.mod372.not = icmp eq i64 %xtraiter371, 0
  br i1 %lcmp.mod372.not, label %for.body.i194.i.prol.loopexit, label %for.body.i194.i.prol

for.body.i194.i.prol:                             ; preds = %for.body.i194.i.preheader, %strconv.format_digits.add_bytes-1.exit119.i.i.prol
  %m.07.i.i.prol = phi i64 [ %492, %strconv.format_digits.add_bytes-1.exit119.i.i.prol ], [ %477, %for.body.i194.i.preheader ]
  %486 = phi i64 [ %491, %strconv.format_digits.add_bytes-1.exit119.i.i.prol ], [ %481, %for.body.i194.i.preheader ]
  %prol.iter = phi i64 [ %prol.iter.next, %strconv.format_digits.add_bytes-1.exit119.i.i.prol ], [ 0, %for.body.i194.i.preheader ]
  store i8 48, ptr %9, align 1, !noalias !2205
  %487 = sub i64 %.val133.i, %486
  %488 = icmp sgt i64 %487, 0
  %489 = zext i1 %488 to i64
  %.not.i.i116.i.i.prol = icmp slt i64 %487, 1
  br i1 %.not.i.i116.i.i.prol, label %strconv.format_digits.add_bytes-1.exit119.i.i.prol, label %if.then.i.i117.i.i.prol

if.then.i.i117.i.i.prol:                          ; preds = %for.body.i194.i.prol
  %490 = getelementptr i8, ptr %.val.i, i64 %486
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %490, ptr nonnull align 1 %9, i64 %489, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i.prol

strconv.format_digits.add_bytes-1.exit119.i.i.prol: ; preds = %if.then.i.i117.i.i.prol, %for.body.i194.i.prol
  %491 = add i64 %486, %489
  %492 = add nsw i64 %m.07.i.i.prol, 1
  %prol.iter.next = add i64 %prol.iter, 1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.next, %xtraiter371
  br i1 %prol.iter.cmp.not, label %for.body.i194.i.prol.loopexit, label %for.body.i194.i.prol, !llvm.loop !2208

for.body.i194.i.prol.loopexit:                    ; preds = %strconv.format_digits.add_bytes-1.exit119.i.i.prol, %for.body.i194.i.preheader
  %.lcssa285.unr = phi i64 [ undef, %for.body.i194.i.preheader ], [ %491, %strconv.format_digits.add_bytes-1.exit119.i.i.prol ]
  %m.07.i.i.unr = phi i64 [ %477, %for.body.i194.i.preheader ], [ %492, %strconv.format_digits.add_bytes-1.exit119.i.i.prol ]
  %.unr373 = phi i64 [ %481, %for.body.i194.i.preheader ], [ %491, %strconv.format_digits.add_bytes-1.exit119.i.i.prol ]
  %493 = icmp ult i64 %485, 7
  br i1 %493, label %if.done3.i.i, label %for.body.i194.i

for.body.i194.i:                                  ; preds = %for.body.i194.i.prol.loopexit, %strconv.format_digits.add_bytes-1.exit119.i.i.7
  %m.07.i.i = phi i64 [ %535, %strconv.format_digits.add_bytes-1.exit119.i.i.7 ], [ %m.07.i.i.unr, %for.body.i194.i.prol.loopexit ]
  %494 = phi i64 [ %534, %strconv.format_digits.add_bytes-1.exit119.i.i.7 ], [ %.unr373, %for.body.i194.i.prol.loopexit ]
  store i8 48, ptr %9, align 1, !noalias !2205
  %495 = sub i64 %.val133.i, %494
  %496 = icmp sgt i64 %495, 0
  %497 = zext i1 %496 to i64
  %.not.i.i116.i.i = icmp slt i64 %495, 1
  br i1 %.not.i.i116.i.i, label %strconv.format_digits.add_bytes-1.exit119.i.i, label %if.then.i.i117.i.i

if.then.i.i117.i.i:                               ; preds = %for.body.i194.i
  %498 = getelementptr i8, ptr %.val.i, i64 %494
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %498, ptr nonnull align 1 %9, i64 %497, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i

strconv.format_digits.add_bytes-1.exit119.i.i:    ; preds = %if.then.i.i117.i.i, %for.body.i194.i
  %499 = add i64 %494, %497
  store i8 48, ptr %9, align 1, !noalias !2205
  %500 = sub i64 %.val133.i, %499
  %501 = icmp sgt i64 %500, 0
  %502 = zext i1 %501 to i64
  %.not.i.i116.i.i.1 = icmp slt i64 %500, 1
  br i1 %.not.i.i116.i.i.1, label %strconv.format_digits.add_bytes-1.exit119.i.i.1, label %if.then.i.i117.i.i.1

if.then.i.i117.i.i.1:                             ; preds = %strconv.format_digits.add_bytes-1.exit119.i.i
  %503 = getelementptr i8, ptr %.val.i, i64 %499
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %503, ptr nonnull align 1 %9, i64 %502, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i.1

strconv.format_digits.add_bytes-1.exit119.i.i.1:  ; preds = %if.then.i.i117.i.i.1, %strconv.format_digits.add_bytes-1.exit119.i.i
  %504 = add i64 %499, %502
  store i8 48, ptr %9, align 1, !noalias !2205
  %505 = sub i64 %.val133.i, %504
  %506 = icmp sgt i64 %505, 0
  %507 = zext i1 %506 to i64
  %.not.i.i116.i.i.2 = icmp slt i64 %505, 1
  br i1 %.not.i.i116.i.i.2, label %strconv.format_digits.add_bytes-1.exit119.i.i.2, label %if.then.i.i117.i.i.2

if.then.i.i117.i.i.2:                             ; preds = %strconv.format_digits.add_bytes-1.exit119.i.i.1
  %508 = getelementptr i8, ptr %.val.i, i64 %504
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %508, ptr nonnull align 1 %9, i64 %507, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i.2

strconv.format_digits.add_bytes-1.exit119.i.i.2:  ; preds = %if.then.i.i117.i.i.2, %strconv.format_digits.add_bytes-1.exit119.i.i.1
  %509 = add i64 %504, %507
  store i8 48, ptr %9, align 1, !noalias !2205
  %510 = sub i64 %.val133.i, %509
  %511 = icmp sgt i64 %510, 0
  %512 = zext i1 %511 to i64
  %.not.i.i116.i.i.3 = icmp slt i64 %510, 1
  br i1 %.not.i.i116.i.i.3, label %strconv.format_digits.add_bytes-1.exit119.i.i.3, label %if.then.i.i117.i.i.3

if.then.i.i117.i.i.3:                             ; preds = %strconv.format_digits.add_bytes-1.exit119.i.i.2
  %513 = getelementptr i8, ptr %.val.i, i64 %509
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %513, ptr nonnull align 1 %9, i64 %512, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i.3

strconv.format_digits.add_bytes-1.exit119.i.i.3:  ; preds = %if.then.i.i117.i.i.3, %strconv.format_digits.add_bytes-1.exit119.i.i.2
  %514 = add i64 %509, %512
  store i8 48, ptr %9, align 1, !noalias !2205
  %515 = sub i64 %.val133.i, %514
  %516 = icmp sgt i64 %515, 0
  %517 = zext i1 %516 to i64
  %.not.i.i116.i.i.4 = icmp slt i64 %515, 1
  br i1 %.not.i.i116.i.i.4, label %strconv.format_digits.add_bytes-1.exit119.i.i.4, label %if.then.i.i117.i.i.4

if.then.i.i117.i.i.4:                             ; preds = %strconv.format_digits.add_bytes-1.exit119.i.i.3
  %518 = getelementptr i8, ptr %.val.i, i64 %514
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %518, ptr nonnull align 1 %9, i64 %517, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i.4

strconv.format_digits.add_bytes-1.exit119.i.i.4:  ; preds = %if.then.i.i117.i.i.4, %strconv.format_digits.add_bytes-1.exit119.i.i.3
  %519 = add i64 %514, %517
  store i8 48, ptr %9, align 1, !noalias !2205
  %520 = sub i64 %.val133.i, %519
  %521 = icmp sgt i64 %520, 0
  %522 = zext i1 %521 to i64
  %.not.i.i116.i.i.5 = icmp slt i64 %520, 1
  br i1 %.not.i.i116.i.i.5, label %strconv.format_digits.add_bytes-1.exit119.i.i.5, label %if.then.i.i117.i.i.5

if.then.i.i117.i.i.5:                             ; preds = %strconv.format_digits.add_bytes-1.exit119.i.i.4
  %523 = getelementptr i8, ptr %.val.i, i64 %519
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %523, ptr nonnull align 1 %9, i64 %522, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i.5

strconv.format_digits.add_bytes-1.exit119.i.i.5:  ; preds = %if.then.i.i117.i.i.5, %strconv.format_digits.add_bytes-1.exit119.i.i.4
  %524 = add i64 %519, %522
  store i8 48, ptr %9, align 1, !noalias !2205
  %525 = sub i64 %.val133.i, %524
  %526 = icmp sgt i64 %525, 0
  %527 = zext i1 %526 to i64
  %.not.i.i116.i.i.6 = icmp slt i64 %525, 1
  br i1 %.not.i.i116.i.i.6, label %strconv.format_digits.add_bytes-1.exit119.i.i.6, label %if.then.i.i117.i.i.6

if.then.i.i117.i.i.6:                             ; preds = %strconv.format_digits.add_bytes-1.exit119.i.i.5
  %528 = getelementptr i8, ptr %.val.i, i64 %524
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %528, ptr nonnull align 1 %9, i64 %527, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i.6

strconv.format_digits.add_bytes-1.exit119.i.i.6:  ; preds = %if.then.i.i117.i.i.6, %strconv.format_digits.add_bytes-1.exit119.i.i.5
  %529 = add i64 %524, %527
  store i8 48, ptr %9, align 1, !noalias !2205
  %530 = sub i64 %.val133.i, %529
  %531 = icmp sgt i64 %530, 0
  %532 = zext i1 %531 to i64
  %.not.i.i116.i.i.7 = icmp slt i64 %530, 1
  br i1 %.not.i.i116.i.i.7, label %strconv.format_digits.add_bytes-1.exit119.i.i.7, label %if.then.i.i117.i.i.7

if.then.i.i117.i.i.7:                             ; preds = %strconv.format_digits.add_bytes-1.exit119.i.i.6
  %533 = getelementptr i8, ptr %.val.i, i64 %529
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %533, ptr nonnull align 1 %9, i64 %532, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit119.i.i.7

strconv.format_digits.add_bytes-1.exit119.i.i.7:  ; preds = %if.then.i.i117.i.i.7, %strconv.format_digits.add_bytes-1.exit119.i.i.6
  %534 = add i64 %529, %532
  %535 = add nsw i64 %m.07.i.i, 8
  %exitcond.not.i.7 = icmp eq i64 %535, %470
  br i1 %exitcond.not.i.7, label %if.done3.i.i, label %for.body.i194.i

if.else2.i.i:                                     ; preds = %strconv.format_digits.add_bytes-1.exit.i.i
  store i8 48, ptr %10, align 1, !noalias !2205
  %536 = icmp sgt i64 %476, 0
  %537 = zext i1 %536 to i64
  %.not.i.i120.i.i = icmp slt i64 %476, 1
  br i1 %.not.i.i120.i.i, label %strconv.format_digits.add_bytes-1.exit123.i.i, label %if.then.i.i121.i.i

if.then.i.i121.i.i:                               ; preds = %if.else2.i.i
  %538 = getelementptr i8, ptr %.val.i, i64 %474
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %538, ptr nonnull align 1 %10, i64 %537, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit123.i.i

strconv.format_digits.add_bytes-1.exit123.i.i:    ; preds = %if.then.i.i121.i.i, %if.else2.i.i
  %539 = add nuw nsw i64 %537, %474
  br label %if.done3.i.i

if.done3.i.i:                                     ; preds = %for.body.i194.i.prol.loopexit, %strconv.format_digits.add_bytes-1.exit119.i.i.7, %strconv.format_digits.add_bytes-1.exit123.i.i, %strconv.format_digits.add_bytes-1.exit115.i.i
  %.pre.i126.i.i = phi i64 [ %539, %strconv.format_digits.add_bytes-1.exit123.i.i ], [ %481, %strconv.format_digits.add_bytes-1.exit115.i.i ], [ %.lcssa285.unr, %for.body.i194.i.prol.loopexit ], [ %534, %strconv.format_digits.add_bytes-1.exit119.i.i.7 ]
  %540 = icmp sgt i64 %prec.0.i, 0
  br i1 %540, label %if.then4.i.i, label %if.done8.i.i

if.then4.i.i:                                     ; preds = %if.done3.i.i
  store i8 46, ptr %11, align 1, !noalias !2205
  %541 = sub i64 %.val133.i, %.pre.i126.i.i
  %542 = icmp sgt i64 %541, 0
  %543 = zext i1 %542 to i64
  %.not.i.i124.i.i = icmp slt i64 %541, 1
  br i1 %.not.i.i124.i.i, label %for.interval.body.lr.ph.i187.i, label %if.then.i.i125.i.i

if.then.i.i125.i.i:                               ; preds = %if.then4.i.i
  %544 = getelementptr i8, ptr %.val.i, i64 %.pre.i126.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %544, ptr nonnull align 1 %11, i64 %543, i1 false), !noalias !2205
  br label %for.interval.body.lr.ph.i187.i

for.interval.body.lr.ph.i187.i:                   ; preds = %if.then.i.i125.i.i, %if.then4.i.i
  %545 = add i64 %.pre.i126.i.i, %543
  %xtraiter374 = and i64 %prec.0.i, 7
  %546 = icmp ult i64 %prec.0.i, 8
  br i1 %546, label %if.done8.i.i.loopexit.unr-lcssa, label %for.interval.body.lr.ph.i187.i.new

for.interval.body.lr.ph.i187.i.new:               ; preds = %for.interval.body.lr.ph.i187.i
  %unroll_iter379 = and i64 %prec.0.i, -8
  br label %for.interval.body.i188.i

for.interval.body.i188.i:                         ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i.7, %for.interval.body.lr.ph.i187.i.new
  %i.011.i.i = phi i64 [ 0, %for.interval.body.lr.ph.i187.i.new ], [ %635, %strconv.format_digits.add_bytes-1.exit131.i.i.7 ]
  %547 = phi i64 [ %545, %for.interval.body.lr.ph.i187.i.new ], [ %634, %strconv.format_digits.add_bytes-1.exit131.i.i.7 ]
  %niter380 = phi i64 [ 0, %for.interval.body.lr.ph.i187.i.new ], [ %niter380.next.7, %strconv.format_digits.add_bytes-1.exit131.i.i.7 ]
  %548 = add i64 %i.011.i.i, %470
  %549 = icmp sgt i64 %548, -1
  %550 = icmp slt i64 %548, %471
  %or.cond.i = select i1 %549, i1 %550, i1 false
  br i1 %or.cond.i, label %if.then6.i192.i, label %if.done7.i189.i

if.then6.i192.i:                                  ; preds = %for.interval.body.i188.i
  %551 = getelementptr i8, ptr %d_.i, i64 %548
  %552 = load i8, ptr %551, align 1, !noalias !2205
  br label %if.done7.i189.i

if.done7.i189.i:                                  ; preds = %if.then6.i192.i, %for.interval.body.i188.i
  %c.0.i.i = phi i8 [ %552, %if.then6.i192.i ], [ 48, %for.interval.body.i188.i ]
  store i8 %c.0.i.i, ptr %12, align 1, !noalias !2205
  %553 = sub i64 %.val133.i, %547
  %554 = icmp sgt i64 %553, 0
  %555 = zext i1 %554 to i64
  %.not.i.i128.i.i = icmp slt i64 %553, 1
  br i1 %.not.i.i128.i.i, label %strconv.format_digits.add_bytes-1.exit131.i.i, label %if.then.i.i129.i.i

if.then.i.i129.i.i:                               ; preds = %if.done7.i189.i
  %556 = getelementptr i8, ptr %.val.i, i64 %547
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %556, ptr nonnull align 1 %12, i64 %555, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i

strconv.format_digits.add_bytes-1.exit131.i.i:    ; preds = %if.then.i.i129.i.i, %if.done7.i189.i
  %557 = add i64 %547, %555
  %558 = or i64 %i.011.i.i, 1
  %559 = add i64 %558, %470
  %560 = icmp sgt i64 %559, -1
  %561 = icmp slt i64 %559, %471
  %or.cond.i.1 = select i1 %560, i1 %561, i1 false
  br i1 %or.cond.i.1, label %if.then6.i192.i.1, label %if.done7.i189.i.1

if.then6.i192.i.1:                                ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i
  %562 = getelementptr i8, ptr %d_.i, i64 %559
  %563 = load i8, ptr %562, align 1, !noalias !2205
  br label %if.done7.i189.i.1

if.done7.i189.i.1:                                ; preds = %if.then6.i192.i.1, %strconv.format_digits.add_bytes-1.exit131.i.i
  %c.0.i.i.1 = phi i8 [ %563, %if.then6.i192.i.1 ], [ 48, %strconv.format_digits.add_bytes-1.exit131.i.i ]
  store i8 %c.0.i.i.1, ptr %12, align 1, !noalias !2205
  %564 = sub i64 %.val133.i, %557
  %565 = icmp sgt i64 %564, 0
  %566 = zext i1 %565 to i64
  %.not.i.i128.i.i.1 = icmp slt i64 %564, 1
  br i1 %.not.i.i128.i.i.1, label %strconv.format_digits.add_bytes-1.exit131.i.i.1, label %if.then.i.i129.i.i.1

if.then.i.i129.i.i.1:                             ; preds = %if.done7.i189.i.1
  %567 = getelementptr i8, ptr %.val.i, i64 %557
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %567, ptr nonnull align 1 %12, i64 %566, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i.1

strconv.format_digits.add_bytes-1.exit131.i.i.1:  ; preds = %if.then.i.i129.i.i.1, %if.done7.i189.i.1
  %568 = add i64 %557, %566
  %569 = or i64 %i.011.i.i, 2
  %570 = add i64 %569, %470
  %571 = icmp sgt i64 %570, -1
  %572 = icmp slt i64 %570, %471
  %or.cond.i.2 = select i1 %571, i1 %572, i1 false
  br i1 %or.cond.i.2, label %if.then6.i192.i.2, label %if.done7.i189.i.2

if.then6.i192.i.2:                                ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i.1
  %573 = getelementptr i8, ptr %d_.i, i64 %570
  %574 = load i8, ptr %573, align 1, !noalias !2205
  br label %if.done7.i189.i.2

if.done7.i189.i.2:                                ; preds = %if.then6.i192.i.2, %strconv.format_digits.add_bytes-1.exit131.i.i.1
  %c.0.i.i.2 = phi i8 [ %574, %if.then6.i192.i.2 ], [ 48, %strconv.format_digits.add_bytes-1.exit131.i.i.1 ]
  store i8 %c.0.i.i.2, ptr %12, align 1, !noalias !2205
  %575 = sub i64 %.val133.i, %568
  %576 = icmp sgt i64 %575, 0
  %577 = zext i1 %576 to i64
  %.not.i.i128.i.i.2 = icmp slt i64 %575, 1
  br i1 %.not.i.i128.i.i.2, label %strconv.format_digits.add_bytes-1.exit131.i.i.2, label %if.then.i.i129.i.i.2

if.then.i.i129.i.i.2:                             ; preds = %if.done7.i189.i.2
  %578 = getelementptr i8, ptr %.val.i, i64 %568
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %578, ptr nonnull align 1 %12, i64 %577, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i.2

strconv.format_digits.add_bytes-1.exit131.i.i.2:  ; preds = %if.then.i.i129.i.i.2, %if.done7.i189.i.2
  %579 = add i64 %568, %577
  %580 = or i64 %i.011.i.i, 3
  %581 = add i64 %580, %470
  %582 = icmp sgt i64 %581, -1
  %583 = icmp slt i64 %581, %471
  %or.cond.i.3 = select i1 %582, i1 %583, i1 false
  br i1 %or.cond.i.3, label %if.then6.i192.i.3, label %if.done7.i189.i.3

if.then6.i192.i.3:                                ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i.2
  %584 = getelementptr i8, ptr %d_.i, i64 %581
  %585 = load i8, ptr %584, align 1, !noalias !2205
  br label %if.done7.i189.i.3

if.done7.i189.i.3:                                ; preds = %if.then6.i192.i.3, %strconv.format_digits.add_bytes-1.exit131.i.i.2
  %c.0.i.i.3 = phi i8 [ %585, %if.then6.i192.i.3 ], [ 48, %strconv.format_digits.add_bytes-1.exit131.i.i.2 ]
  store i8 %c.0.i.i.3, ptr %12, align 1, !noalias !2205
  %586 = sub i64 %.val133.i, %579
  %587 = icmp sgt i64 %586, 0
  %588 = zext i1 %587 to i64
  %.not.i.i128.i.i.3 = icmp slt i64 %586, 1
  br i1 %.not.i.i128.i.i.3, label %strconv.format_digits.add_bytes-1.exit131.i.i.3, label %if.then.i.i129.i.i.3

if.then.i.i129.i.i.3:                             ; preds = %if.done7.i189.i.3
  %589 = getelementptr i8, ptr %.val.i, i64 %579
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %589, ptr nonnull align 1 %12, i64 %588, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i.3

strconv.format_digits.add_bytes-1.exit131.i.i.3:  ; preds = %if.then.i.i129.i.i.3, %if.done7.i189.i.3
  %590 = add i64 %579, %588
  %591 = or i64 %i.011.i.i, 4
  %592 = add i64 %591, %470
  %593 = icmp sgt i64 %592, -1
  %594 = icmp slt i64 %592, %471
  %or.cond.i.4 = select i1 %593, i1 %594, i1 false
  br i1 %or.cond.i.4, label %if.then6.i192.i.4, label %if.done7.i189.i.4

if.then6.i192.i.4:                                ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i.3
  %595 = getelementptr i8, ptr %d_.i, i64 %592
  %596 = load i8, ptr %595, align 1, !noalias !2205
  br label %if.done7.i189.i.4

if.done7.i189.i.4:                                ; preds = %if.then6.i192.i.4, %strconv.format_digits.add_bytes-1.exit131.i.i.3
  %c.0.i.i.4 = phi i8 [ %596, %if.then6.i192.i.4 ], [ 48, %strconv.format_digits.add_bytes-1.exit131.i.i.3 ]
  store i8 %c.0.i.i.4, ptr %12, align 1, !noalias !2205
  %597 = sub i64 %.val133.i, %590
  %598 = icmp sgt i64 %597, 0
  %599 = zext i1 %598 to i64
  %.not.i.i128.i.i.4 = icmp slt i64 %597, 1
  br i1 %.not.i.i128.i.i.4, label %strconv.format_digits.add_bytes-1.exit131.i.i.4, label %if.then.i.i129.i.i.4

if.then.i.i129.i.i.4:                             ; preds = %if.done7.i189.i.4
  %600 = getelementptr i8, ptr %.val.i, i64 %590
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %600, ptr nonnull align 1 %12, i64 %599, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i.4

strconv.format_digits.add_bytes-1.exit131.i.i.4:  ; preds = %if.then.i.i129.i.i.4, %if.done7.i189.i.4
  %601 = add i64 %590, %599
  %602 = or i64 %i.011.i.i, 5
  %603 = add i64 %602, %470
  %604 = icmp sgt i64 %603, -1
  %605 = icmp slt i64 %603, %471
  %or.cond.i.5 = select i1 %604, i1 %605, i1 false
  br i1 %or.cond.i.5, label %if.then6.i192.i.5, label %if.done7.i189.i.5

if.then6.i192.i.5:                                ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i.4
  %606 = getelementptr i8, ptr %d_.i, i64 %603
  %607 = load i8, ptr %606, align 1, !noalias !2205
  br label %if.done7.i189.i.5

if.done7.i189.i.5:                                ; preds = %if.then6.i192.i.5, %strconv.format_digits.add_bytes-1.exit131.i.i.4
  %c.0.i.i.5 = phi i8 [ %607, %if.then6.i192.i.5 ], [ 48, %strconv.format_digits.add_bytes-1.exit131.i.i.4 ]
  store i8 %c.0.i.i.5, ptr %12, align 1, !noalias !2205
  %608 = sub i64 %.val133.i, %601
  %609 = icmp sgt i64 %608, 0
  %610 = zext i1 %609 to i64
  %.not.i.i128.i.i.5 = icmp slt i64 %608, 1
  br i1 %.not.i.i128.i.i.5, label %strconv.format_digits.add_bytes-1.exit131.i.i.5, label %if.then.i.i129.i.i.5

if.then.i.i129.i.i.5:                             ; preds = %if.done7.i189.i.5
  %611 = getelementptr i8, ptr %.val.i, i64 %601
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %611, ptr nonnull align 1 %12, i64 %610, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i.5

strconv.format_digits.add_bytes-1.exit131.i.i.5:  ; preds = %if.then.i.i129.i.i.5, %if.done7.i189.i.5
  %612 = add i64 %601, %610
  %613 = or i64 %i.011.i.i, 6
  %614 = add i64 %613, %470
  %615 = icmp sgt i64 %614, -1
  %616 = icmp slt i64 %614, %471
  %or.cond.i.6 = select i1 %615, i1 %616, i1 false
  br i1 %or.cond.i.6, label %if.then6.i192.i.6, label %if.done7.i189.i.6

if.then6.i192.i.6:                                ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i.5
  %617 = getelementptr i8, ptr %d_.i, i64 %614
  %618 = load i8, ptr %617, align 1, !noalias !2205
  br label %if.done7.i189.i.6

if.done7.i189.i.6:                                ; preds = %if.then6.i192.i.6, %strconv.format_digits.add_bytes-1.exit131.i.i.5
  %c.0.i.i.6 = phi i8 [ %618, %if.then6.i192.i.6 ], [ 48, %strconv.format_digits.add_bytes-1.exit131.i.i.5 ]
  store i8 %c.0.i.i.6, ptr %12, align 1, !noalias !2205
  %619 = sub i64 %.val133.i, %612
  %620 = icmp sgt i64 %619, 0
  %621 = zext i1 %620 to i64
  %.not.i.i128.i.i.6 = icmp slt i64 %619, 1
  br i1 %.not.i.i128.i.i.6, label %strconv.format_digits.add_bytes-1.exit131.i.i.6, label %if.then.i.i129.i.i.6

if.then.i.i129.i.i.6:                             ; preds = %if.done7.i189.i.6
  %622 = getelementptr i8, ptr %.val.i, i64 %612
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %622, ptr nonnull align 1 %12, i64 %621, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i.6

strconv.format_digits.add_bytes-1.exit131.i.i.6:  ; preds = %if.then.i.i129.i.i.6, %if.done7.i189.i.6
  %623 = add i64 %612, %621
  %624 = or i64 %i.011.i.i, 7
  %625 = add i64 %624, %470
  %626 = icmp sgt i64 %625, -1
  %627 = icmp slt i64 %625, %471
  %or.cond.i.7 = select i1 %626, i1 %627, i1 false
  br i1 %or.cond.i.7, label %if.then6.i192.i.7, label %if.done7.i189.i.7

if.then6.i192.i.7:                                ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i.6
  %628 = getelementptr i8, ptr %d_.i, i64 %625
  %629 = load i8, ptr %628, align 1, !noalias !2205
  br label %if.done7.i189.i.7

if.done7.i189.i.7:                                ; preds = %if.then6.i192.i.7, %strconv.format_digits.add_bytes-1.exit131.i.i.6
  %c.0.i.i.7 = phi i8 [ %629, %if.then6.i192.i.7 ], [ 48, %strconv.format_digits.add_bytes-1.exit131.i.i.6 ]
  store i8 %c.0.i.i.7, ptr %12, align 1, !noalias !2205
  %630 = sub i64 %.val133.i, %623
  %631 = icmp sgt i64 %630, 0
  %632 = zext i1 %631 to i64
  %.not.i.i128.i.i.7 = icmp slt i64 %630, 1
  br i1 %.not.i.i128.i.i.7, label %strconv.format_digits.add_bytes-1.exit131.i.i.7, label %if.then.i.i129.i.i.7

if.then.i.i129.i.i.7:                             ; preds = %if.done7.i189.i.7
  %633 = getelementptr i8, ptr %.val.i, i64 %623
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %633, ptr nonnull align 1 %12, i64 %632, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i.7

strconv.format_digits.add_bytes-1.exit131.i.i.7:  ; preds = %if.then.i.i129.i.i.7, %if.done7.i189.i.7
  %634 = add i64 %623, %632
  %635 = add nuw nsw i64 %i.011.i.i, 8
  %niter380.next.7 = add i64 %niter380, 8
  %niter380.ncmp.7 = icmp eq i64 %niter380.next.7, %unroll_iter379
  br i1 %niter380.ncmp.7, label %if.done8.i.i.loopexit.unr-lcssa, label %for.interval.body.i188.i

if.done8.i.i.loopexit.unr-lcssa:                  ; preds = %strconv.format_digits.add_bytes-1.exit131.i.i.7, %for.interval.body.lr.ph.i187.i
  %.lcssa.ph = phi i64 [ undef, %for.interval.body.lr.ph.i187.i ], [ %634, %strconv.format_digits.add_bytes-1.exit131.i.i.7 ]
  %i.011.i.i.unr = phi i64 [ 0, %for.interval.body.lr.ph.i187.i ], [ %635, %strconv.format_digits.add_bytes-1.exit131.i.i.7 ]
  %.unr376 = phi i64 [ %545, %for.interval.body.lr.ph.i187.i ], [ %634, %strconv.format_digits.add_bytes-1.exit131.i.i.7 ]
  %lcmp.mod377.not = icmp eq i64 %xtraiter374, 0
  br i1 %lcmp.mod377.not, label %if.done8.i.i, label %for.interval.body.i188.i.epil

for.interval.body.i188.i.epil:                    ; preds = %if.done8.i.i.loopexit.unr-lcssa, %strconv.format_digits.add_bytes-1.exit131.i.i.epil
  %i.011.i.i.epil = phi i64 [ %647, %strconv.format_digits.add_bytes-1.exit131.i.i.epil ], [ %i.011.i.i.unr, %if.done8.i.i.loopexit.unr-lcssa ]
  %636 = phi i64 [ %646, %strconv.format_digits.add_bytes-1.exit131.i.i.epil ], [ %.unr376, %if.done8.i.i.loopexit.unr-lcssa ]
  %epil.iter375 = phi i64 [ %epil.iter375.next, %strconv.format_digits.add_bytes-1.exit131.i.i.epil ], [ 0, %if.done8.i.i.loopexit.unr-lcssa ]
  %637 = add i64 %i.011.i.i.epil, %470
  %638 = icmp sgt i64 %637, -1
  %639 = icmp slt i64 %637, %471
  %or.cond.i.epil = select i1 %638, i1 %639, i1 false
  br i1 %or.cond.i.epil, label %if.then6.i192.i.epil, label %if.done7.i189.i.epil

if.then6.i192.i.epil:                             ; preds = %for.interval.body.i188.i.epil
  %640 = getelementptr i8, ptr %d_.i, i64 %637
  %641 = load i8, ptr %640, align 1, !noalias !2205
  br label %if.done7.i189.i.epil

if.done7.i189.i.epil:                             ; preds = %if.then6.i192.i.epil, %for.interval.body.i188.i.epil
  %c.0.i.i.epil = phi i8 [ %641, %if.then6.i192.i.epil ], [ 48, %for.interval.body.i188.i.epil ]
  store i8 %c.0.i.i.epil, ptr %12, align 1, !noalias !2205
  %642 = sub i64 %.val133.i, %636
  %643 = icmp sgt i64 %642, 0
  %644 = zext i1 %643 to i64
  %.not.i.i128.i.i.epil = icmp slt i64 %642, 1
  br i1 %.not.i.i128.i.i.epil, label %strconv.format_digits.add_bytes-1.exit131.i.i.epil, label %if.then.i.i129.i.i.epil

if.then.i.i129.i.i.epil:                          ; preds = %if.done7.i189.i.epil
  %645 = getelementptr i8, ptr %.val.i, i64 %636
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %645, ptr nonnull align 1 %12, i64 %644, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit131.i.i.epil

strconv.format_digits.add_bytes-1.exit131.i.i.epil: ; preds = %if.then.i.i129.i.i.epil, %if.done7.i189.i.epil
  %646 = add i64 %636, %644
  %647 = add nuw nsw i64 %i.011.i.i.epil, 1
  %epil.iter375.next = add i64 %epil.iter375, 1
  %epil.iter375.cmp.not = icmp eq i64 %epil.iter375.next, %xtraiter374
  br i1 %epil.iter375.cmp.not, label %if.done8.i.i, label %for.interval.body.i188.i.epil, !llvm.loop !2209

if.done8.i.i:                                     ; preds = %if.done8.i.i.loopexit.unr-lcssa, %strconv.format_digits.add_bytes-1.exit131.i.i.epil, %if.done3.i.i
  %b.val111.i.i = phi i64 [ %.pre.i126.i.i, %if.done3.i.i ], [ %.lcssa.ph, %if.done8.i.i.loopexit.unr-lcssa ], [ %646, %strconv.format_digits.add_bytes-1.exit131.i.i.epil ]
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7), !noalias !2205
  store ptr %.val.i, ptr %7, align 8, !noalias !2210
  %648 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 %b.val111.i.i, ptr %648, align 8, !noalias !2210
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %13, ptr nonnull align 8 %7, i64 16, i1 false), !noalias !2205
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7), !noalias !2205
  br label %strconv.format_digits.exit.i

switch.case.body9.i.i:                            ; preds = %if.done23.i, %if.done23.i
  %.47.i.i = select i1 %43, i8 45, i8 43
  store i8 %.47.i.i, ptr %14, align 1, !noalias !2205
  %649 = icmp sgt i64 %.val133.i, 0
  %650 = zext i1 %649 to i64
  %.not.i.i132.i.i = icmp slt i64 %.val133.i, 1
  br i1 %.not.i.i132.i.i, label %strconv.format_digits.add_bytes-1.exit135.i.i, label %if.then.i.i133.i.i

if.then.i.i133.i.i:                               ; preds = %switch.case.body9.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %.val.i, ptr nonnull align 1 %14, i64 %650, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit135.i.i

strconv.format_digits.add_bytes-1.exit135.i.i:    ; preds = %if.then.i.i133.i.i, %switch.case.body9.i.i
  %.not.i179.i = icmp eq i64 %471, 0
  %651 = load i8, ptr %d_.i, align 8, !noalias !2201
  %spec.select379.i = select i1 %.not.i179.i, i8 48, i8 %651
  store i8 %spec.select379.i, ptr %15, align 1, !noalias !2205
  %652 = sub i64 %.val133.i, %650
  %653 = icmp sgt i64 %652, 0
  %654 = zext i1 %653 to i64
  %.not.i.i136.i.i = icmp slt i64 %652, 1
  br i1 %.not.i.i136.i.i, label %strconv.format_digits.add_bytes-1.exit139.i.i, label %if.then.i.i137.i.i

if.then.i.i137.i.i:                               ; preds = %strconv.format_digits.add_bytes-1.exit135.i.i
  %655 = getelementptr i8, ptr %.val.i, i64 %650
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %655, ptr nonnull align 1 %15, i64 %654, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit139.i.i

strconv.format_digits.add_bytes-1.exit139.i.i:    ; preds = %if.then.i.i137.i.i, %strconv.format_digits.add_bytes-1.exit135.i.i
  %656 = add nuw nsw i64 %654, %650
  %657 = icmp sgt i64 %prec.0.i, 0
  br i1 %657, label %if.then15.i.i, label %if.done24.i.i

if.then15.i.i:                                    ; preds = %strconv.format_digits.add_bytes-1.exit139.i.i
  store i8 46, ptr %16, align 1, !noalias !2205
  %658 = sub i64 %.val133.i, %656
  %659 = icmp sgt i64 %658, 0
  %660 = zext i1 %659 to i64
  %.not.i.i140.i.i = icmp slt i64 %658, 1
  br i1 %.not.i.i140.i.i, label %strconv.format_digits.add_bytes-1.exit143.i.i, label %if.then.i.i141.i.i

if.then.i.i141.i.i:                               ; preds = %if.then15.i.i
  %661 = getelementptr i8, ptr %.val.i, i64 %656
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %661, ptr nonnull align 1 %16, i64 %660, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit143.i.i

strconv.format_digits.add_bytes-1.exit143.i.i:    ; preds = %if.then.i.i141.i.i, %if.then15.i.i
  %662 = add nuw nsw i64 %656, %660
  %663 = add nuw i64 %prec.0.i, 1
  %664 = tail call i64 @llvm.smin.i64(i64 %471, i64 %663)
  %665 = icmp sgt i64 %664, 1
  br i1 %665, label %if.then18.i185.i, label %if.done19.i184.i

if.then18.i185.i:                                 ; preds = %strconv.format_digits.add_bytes-1.exit143.i.i
  %666 = add nsw i64 %664, -1
  %667 = sub i64 %.val133.i, %662
  %668 = tail call i64 @llvm.smin.i64(i64 %667, i64 %666)
  %669 = tail call i64 @llvm.smax.i64(i64 %668, i64 0)
  %.not.i.i144.i.i = icmp slt i64 %668, 1
  br i1 %.not.i.i144.i.i, label %strconv.format_digits.add_bytes-1.exit147.i.i, label %if.then.i.i145.i.i

if.then.i.i145.i.i:                               ; preds = %if.then18.i185.i
  %670 = getelementptr inbounds i8, ptr %d_.i, i64 1
  %671 = getelementptr i8, ptr %.val.i, i64 %662
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %671, ptr nonnull align 1 %670, i64 %669, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit147.i.i

strconv.format_digits.add_bytes-1.exit147.i.i:    ; preds = %if.then.i.i145.i.i, %if.then18.i185.i
  %672 = add nuw i64 %669, %662
  br label %if.done19.i184.i

if.done19.i184.i:                                 ; preds = %strconv.format_digits.add_bytes-1.exit147.i.i, %strconv.format_digits.add_bytes-1.exit143.i.i
  %b.repack68.promoted.i.i = phi i64 [ %672, %strconv.format_digits.add_bytes-1.exit147.i.i ], [ %662, %strconv.format_digits.add_bytes-1.exit143.i.i ]
  %i16.0.i.i = phi i64 [ %664, %strconv.format_digits.add_bytes-1.exit147.i.i ], [ 1, %strconv.format_digits.add_bytes-1.exit143.i.i ]
  %.not723.i.i = icmp ugt i64 %i16.0.i.i, %prec.0.i
  br i1 %.not723.i.i, label %if.done24.i.i, label %for.body21.i.i

for.body21.i.i:                                   ; preds = %if.done19.i184.i, %strconv.format_digits.add_bytes-1.exit151.i.i
  %i16.14.i.i = phi i64 [ %679, %strconv.format_digits.add_bytes-1.exit151.i.i ], [ %i16.0.i.i, %if.done19.i184.i ]
  %673 = phi i64 [ %678, %strconv.format_digits.add_bytes-1.exit151.i.i ], [ %b.repack68.promoted.i.i, %if.done19.i184.i ]
  store i8 48, ptr %17, align 1, !noalias !2205
  %674 = sub i64 %.val133.i, %673
  %675 = icmp sgt i64 %674, 0
  %676 = zext i1 %675 to i64
  %.not.i.i148.i.i = icmp slt i64 %674, 1
  br i1 %.not.i.i148.i.i, label %strconv.format_digits.add_bytes-1.exit151.i.i, label %if.then.i.i149.i.i

if.then.i.i149.i.i:                               ; preds = %for.body21.i.i
  %677 = getelementptr i8, ptr %.val.i, i64 %673
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %677, ptr nonnull align 1 %17, i64 %676, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit151.i.i

strconv.format_digits.add_bytes-1.exit151.i.i:    ; preds = %if.then.i.i149.i.i, %for.body21.i.i
  %678 = add i64 %673, %676
  %679 = add i64 %i16.14.i.i, 1
  %.not72.i.i = icmp sgt i64 %679, %prec.0.i
  br i1 %.not72.i.i, label %if.done24.i.i, label %for.body21.i.i

if.done24.i.i:                                    ; preds = %strconv.format_digits.add_bytes-1.exit151.i.i, %if.done19.i184.i, %strconv.format_digits.add_bytes-1.exit139.i.i
  %680 = phi i64 [ %656, %strconv.format_digits.add_bytes-1.exit139.i.i ], [ %b.repack68.promoted.i.i, %if.done19.i184.i ], [ %678, %strconv.format_digits.add_bytes-1.exit151.i.i ]
  store i8 %2, ptr %18, align 1, !noalias !2205
  %681 = sub i64 %.val133.i, %680
  %682 = icmp sgt i64 %681, 0
  %683 = zext i1 %682 to i64
  %.not.i.i152.i.i = icmp slt i64 %681, 1
  br i1 %.not.i.i152.i.i, label %strconv.format_digits.add_bytes-1.exit155.i.i, label %if.then.i.i153.i.i

if.then.i.i153.i.i:                               ; preds = %if.done24.i.i
  %684 = getelementptr i8, ptr %.val.i, i64 %680
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %684, ptr nonnull align 1 %18, i64 %683, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit155.i.i

strconv.format_digits.add_bytes-1.exit155.i.i:    ; preds = %if.then.i.i153.i.i, %if.done24.i.i
  %685 = add i64 %680, %683
  %686 = add i64 %470, -1
  %spec.store.select.i180.i = select i1 %.not.i179.i, i64 0, i64 %686
  %687 = icmp slt i64 %spec.store.select.i180.i, 0
  %spec.select.i181.i = select i1 %687, i8 45, i8 43
  %spec.select73.i.i = tail call i64 @llvm.abs.i64(i64 %spec.store.select.i180.i, i1 false)
  store i8 %spec.select.i181.i, ptr %19, align 1, !noalias !2205
  %688 = sub i64 %.val133.i, %685
  %689 = icmp sgt i64 %688, 0
  %690 = zext i1 %689 to i64
  %.not.i.i156.i.i = icmp slt i64 %688, 1
  br i1 %.not.i.i156.i.i, label %strconv.format_digits.add_bytes-1.exit159.i.i, label %if.then.i.i157.i.i

if.then.i.i157.i.i:                               ; preds = %strconv.format_digits.add_bytes-1.exit155.i.i
  %691 = getelementptr i8, ptr %.val.i, i64 %685
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %691, ptr nonnull align 1 %19, i64 %690, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit159.i.i

strconv.format_digits.add_bytes-1.exit159.i.i:    ; preds = %if.then.i.i157.i.i, %strconv.format_digits.add_bytes-1.exit155.i.i
  %692 = add i64 %685, %690
  %693 = icmp slt i64 %spec.select73.i.i, 10
  br i1 %693, label %switch.case.body29.i.i, label %switch.case.next.i182.i

switch.case.next.i182.i:                          ; preds = %strconv.format_digits.add_bytes-1.exit159.i.i
  %694 = icmp ult i64 %spec.select73.i.i, 100
  br i1 %694, label %switch.case.body31.i.i, label %switch.default.body.i.i

switch.case.body29.i.i:                           ; preds = %strconv.format_digits.add_bytes-1.exit159.i.i
  %695 = trunc i64 %spec.select73.i.i to i8
  %696 = add i8 %695, 48
  store i16 48, ptr %20, align 2, !noalias !2205
  %697 = getelementptr inbounds [2 x i8], ptr %20, i64 0, i64 1
  store i8 %696, ptr %697, align 1, !noalias !2205
  %698 = sub i64 %.val133.i, %692
  %699 = tail call i64 @llvm.smin.i64(i64 %698, i64 2)
  %700 = tail call i64 @llvm.smax.i64(i64 %699, i64 0)
  %.not.i.i160.i.i = icmp slt i64 %699, 1
  br i1 %.not.i.i160.i.i, label %switch.done.i.i, label %if.then.i.i161.i.i

if.then.i.i161.i.i:                               ; preds = %switch.case.body29.i.i
  %701 = getelementptr i8, ptr %.val.i, i64 %692
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %701, ptr nonnull align 2 %20, i64 %700, i1 false), !noalias !2205
  br label %switch.done.i.i

switch.case.body31.i.i:                           ; preds = %switch.case.next.i182.i
  %.lhs.trunc.i.i = trunc i64 %spec.select73.i.i to i8
  %702 = udiv i8 %.lhs.trunc.i.i, 10
  %703 = add nuw nsw i8 %702, 48
  %704 = urem i8 %.lhs.trunc.i.i, 10
  %705 = or i8 %704, 48
  store i8 %703, ptr %21, align 2, !noalias !2205
  %706 = getelementptr inbounds [2 x i8], ptr %21, i64 0, i64 1
  store i8 %705, ptr %706, align 1, !noalias !2205
  %707 = sub i64 %.val133.i, %692
  %708 = tail call i64 @llvm.smin.i64(i64 %707, i64 2)
  %709 = tail call i64 @llvm.smax.i64(i64 %708, i64 0)
  %.not.i.i164.i.i = icmp slt i64 %708, 1
  br i1 %.not.i.i164.i.i, label %switch.done.i.i, label %if.then.i.i165.i.i

if.then.i.i165.i.i:                               ; preds = %switch.case.body31.i.i
  %710 = getelementptr i8, ptr %.val.i, i64 %692
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %710, ptr nonnull align 2 %21, i64 %709, i1 false), !noalias !2205
  br label %switch.done.i.i

switch.default.body.i.i:                          ; preds = %switch.case.next.i182.i
  %711 = udiv i64 %spec.select73.i.i, 100
  %712 = trunc i64 %711 to i8
  %713 = add i8 %712, 48
  %714 = udiv i64 %spec.select73.i.i, 10
  %715 = trunc i64 %714 to i8
  %716 = urem i8 %715, 10
  %717 = or i8 %716, 48
  %718 = urem i64 %spec.select73.i.i, 10
  %719 = trunc i64 %718 to i8
  %720 = or i8 %719, 48
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %22, i8 0, i64 3, i1 false), !noalias !2205
  store i8 %713, ptr %22, align 1, !noalias !2205
  %721 = getelementptr inbounds [3 x i8], ptr %22, i64 0, i64 1
  store i8 %717, ptr %721, align 1, !noalias !2205
  %722 = getelementptr inbounds [3 x i8], ptr %22, i64 0, i64 2
  store i8 %720, ptr %722, align 1, !noalias !2205
  %723 = sub i64 %.val133.i, %692
  %724 = tail call i64 @llvm.smin.i64(i64 %723, i64 3)
  %725 = tail call i64 @llvm.smax.i64(i64 %724, i64 0)
  %.not.i.i168.i.i = icmp slt i64 %724, 1
  br i1 %.not.i.i168.i.i, label %switch.done.i.i, label %if.then.i.i169.i.i

if.then.i.i169.i.i:                               ; preds = %switch.default.body.i.i
  %726 = getelementptr i8, ptr %.val.i, i64 %692
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %726, ptr nonnull align 1 %22, i64 %725, i1 false), !noalias !2205
  br label %switch.done.i.i

switch.done.i.i:                                  ; preds = %if.then.i.i169.i.i, %switch.default.body.i.i, %if.then.i.i165.i.i, %switch.case.body31.i.i, %if.then.i.i161.i.i, %switch.case.body29.i.i
  %.pn.i183.i = phi i64 [ %700, %switch.case.body29.i.i ], [ %700, %if.then.i.i161.i.i ], [ %709, %switch.case.body31.i.i ], [ %709, %if.then.i.i165.i.i ], [ %725, %switch.default.body.i.i ], [ %725, %if.then.i.i169.i.i ]
  %b.val109.i.i = add i64 %.pn.i183.i, %692
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6), !noalias !2205
  store ptr %.val.i, ptr %6, align 8, !noalias !2213
  %727 = getelementptr inbounds { ptr, i64 }, ptr %6, i64 0, i32 1
  store i64 %b.val109.i.i, ptr %727, align 8, !noalias !2213
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %23, ptr nonnull align 8 %6, i64 16, i1 false), !noalias !2205
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6), !noalias !2205
  br label %strconv.format_digits.exit.i

switch.default.body45.i.i:                        ; preds = %if.done23.i
  store i16 37, ptr %24, align 2, !noalias !2205
  %728 = getelementptr inbounds [2 x i8], ptr %24, i64 0, i64 1
  store i8 %2, ptr %728, align 1, !noalias !2205
  %729 = tail call i64 @llvm.smin.i64(i64 %.val133.i, i64 2)
  %730 = tail call i64 @llvm.smax.i64(i64 %729, i64 0)
  %.not.i.i172.i.i = icmp slt i64 %729, 1
  br i1 %.not.i.i172.i.i, label %strconv.format_digits.add_bytes-1.exit175.i.i, label %if.then.i.i173.i.i

if.then.i.i173.i.i:                               ; preds = %switch.default.body45.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %.val.i, ptr nonnull align 2 %24, i64 %730, i1 false), !noalias !2205
  br label %strconv.format_digits.add_bytes-1.exit175.i.i

strconv.format_digits.add_bytes-1.exit175.i.i:    ; preds = %if.then.i.i173.i.i, %switch.default.body45.i.i
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5), !noalias !2205
  store ptr %.val.i, ptr %5, align 8, !noalias !2216
  %731 = getelementptr inbounds { ptr, i64 }, ptr %5, i64 0, i32 1
  store i64 %730, ptr %731, align 8, !noalias !2216
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %25, ptr nonnull align 8 %5, i64 16, i1 false), !noalias !2205
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5), !noalias !2205
  br label %strconv.format_digits.exit.i

strconv.format_digits.exit.i:                     ; preds = %strconv.format_digits.add_bytes-1.exit175.i.i, %switch.done.i.i, %if.done8.i.i
  %.sink.i.i = phi ptr [ %25, %strconv.format_digits.add_bytes-1.exit175.i.i ], [ %23, %switch.done.i.i ], [ %13, %if.done8.i.i ]
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %27, ptr nonnull align 8 %.sink.i.i, i64 16, i1 false), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %10), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %11), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %12), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %13), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %14), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %15), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %16), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %17), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %18), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %19), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %20), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %21), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 3, ptr nonnull %22), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %23), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %24), !noalias !2201
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %25), !noalias !2201
  br label %strconv.generic_ftoa.exit

strconv.generic_ftoa.exit:                        ; preds = %runtime.copy_from_string-21865.exit.i, %strconv.format_digits.exit.i
  %.sink.i = phi ptr [ %27, %strconv.format_digits.exit.i ], [ %26, %runtime.copy_from_string-21865.exit.i ]
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %28, ptr nonnull align 8 %.sink.i, i64 16, i1 false), !noalias !2193
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %26)
  call void @llvm.lifetime.end.p0(i64 408, ptr nonnull %d_.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %27)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 8 %agg.result, ptr nonnull align 8 %28, i64 16, i1 false)
  ret void
}

; Function Attrs: nofree nosync nounwind memory(write, argmem: readwrite, inaccessiblemem: none)
define internal fastcc void @strconv_decimal.shift_right(ptr nocapture %0, i64 %1) unnamed_addr #18 {
decls:
  %.fr31 = freeze i64 %1
  %2 = icmp ugt i64 %.fr31, 63
  %3 = getelementptr inbounds %strconv_decimal.Decimal, ptr %0, i64 0, i32 1
  %4 = load i64, ptr %3, align 8
  br i1 %2, label %decls.split.us, label %for.body.preheader

for.body.preheader:                               ; preds = %decls
  %smax = tail call i64 @llvm.smax.i64(i64 %4, i64 0)
  br label %for.body

decls.split.us:                                   ; preds = %decls
  %.not23.us11 = icmp sgt i64 %4, 0
  br i1 %.not23.us11, label %if.done4.us.preheader, label %common.ret.sink.split

if.done4.us.preheader:                            ; preds = %decls.split.us
  %xtraiter = and i64 %4, 7
  %5 = icmp ult i64 %4, 8
  br i1 %5, label %if.then.loopexit.unr-lcssa, label %if.done4.us.preheader.new

if.done4.us.preheader.new:                        ; preds = %if.done4.us.preheader
  %unroll_iter = and i64 %4, -8
  br label %if.done4.us

if.done4.us:                                      ; preds = %if.done4.us, %if.done4.us.preheader.new
  %r.07.us13 = phi i64 [ 0, %if.done4.us.preheader.new ], [ %61, %if.done4.us ]
  %n.08.us12 = phi i64 [ 0, %if.done4.us.preheader.new ], [ %60, %if.done4.us ]
  %niter = phi i64 [ 0, %if.done4.us.preheader.new ], [ %niter.next.7, %if.done4.us ]
  %6 = getelementptr [384 x i8], ptr %0, i64 0, i64 %r.07.us13
  %7 = load i8, ptr %6, align 1
  %8 = zext i8 %7 to i64
  %9 = mul i64 %n.08.us12, 10
  %10 = add i64 %9, -48
  %11 = add i64 %10, %8
  %12 = or i64 %r.07.us13, 1
  %13 = getelementptr [384 x i8], ptr %0, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1
  %15 = zext i8 %14 to i64
  %16 = mul i64 %11, 10
  %17 = add i64 %16, -48
  %18 = add i64 %17, %15
  %19 = or i64 %r.07.us13, 2
  %20 = getelementptr [384 x i8], ptr %0, i64 0, i64 %19
  %21 = load i8, ptr %20, align 1
  %22 = zext i8 %21 to i64
  %23 = mul i64 %18, 10
  %24 = add i64 %23, -48
  %25 = add i64 %24, %22
  %26 = or i64 %r.07.us13, 3
  %27 = getelementptr [384 x i8], ptr %0, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1
  %29 = zext i8 %28 to i64
  %30 = mul i64 %25, 10
  %31 = add i64 %30, -48
  %32 = add i64 %31, %29
  %33 = or i64 %r.07.us13, 4
  %34 = getelementptr [384 x i8], ptr %0, i64 0, i64 %33
  %35 = load i8, ptr %34, align 1
  %36 = zext i8 %35 to i64
  %37 = mul i64 %32, 10
  %38 = add i64 %37, -48
  %39 = add i64 %38, %36
  %40 = or i64 %r.07.us13, 5
  %41 = getelementptr [384 x i8], ptr %0, i64 0, i64 %40
  %42 = load i8, ptr %41, align 1
  %43 = zext i8 %42 to i64
  %44 = mul i64 %39, 10
  %45 = add i64 %44, -48
  %46 = add i64 %45, %43
  %47 = or i64 %r.07.us13, 6
  %48 = getelementptr [384 x i8], ptr %0, i64 0, i64 %47
  %49 = load i8, ptr %48, align 1
  %50 = zext i8 %49 to i64
  %51 = mul i64 %46, 10
  %52 = add i64 %51, -48
  %53 = add i64 %52, %50
  %54 = or i64 %r.07.us13, 7
  %55 = getelementptr [384 x i8], ptr %0, i64 0, i64 %54
  %56 = load i8, ptr %55, align 1
  %57 = zext i8 %56 to i64
  %58 = mul i64 %53, 10
  %59 = add i64 %58, -48
  %60 = add i64 %59, %57
  %61 = add nuw nsw i64 %r.07.us13, 8
  %niter.next.7 = add i64 %niter, 8
  %niter.ncmp.7 = icmp eq i64 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7, label %if.then.loopexit.unr-lcssa, label %if.done4.us

for.body:                                         ; preds = %for.body.preheader, %if.done4
  %n.08 = phi i64 [ %82, %if.done4 ], [ 0, %for.body.preheader ]
  %r.07 = phi i64 [ %83, %if.done4 ], [ 0, %for.body.preheader ]
  %exitcond.not = icmp eq i64 %r.07, %smax
  br i1 %exitcond.not, label %if.then, label %if.done4

if.then.loopexit.unr-lcssa:                       ; preds = %if.done4.us, %if.done4.us.preheader
  %.lcssa70.ph = phi i64 [ undef, %if.done4.us.preheader ], [ %60, %if.done4.us ]
  %r.07.us13.unr = phi i64 [ 0, %if.done4.us.preheader ], [ %61, %if.done4.us ]
  %n.08.us12.unr = phi i64 [ 0, %if.done4.us.preheader ], [ %60, %if.done4.us ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.then, label %if.done4.us.epil

if.done4.us.epil:                                 ; preds = %if.then.loopexit.unr-lcssa, %if.done4.us.epil
  %r.07.us13.epil = phi i64 [ %68, %if.done4.us.epil ], [ %r.07.us13.unr, %if.then.loopexit.unr-lcssa ]
  %n.08.us12.epil = phi i64 [ %67, %if.done4.us.epil ], [ %n.08.us12.unr, %if.then.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %if.done4.us.epil ], [ 0, %if.then.loopexit.unr-lcssa ]
  %62 = getelementptr [384 x i8], ptr %0, i64 0, i64 %r.07.us13.epil
  %63 = load i8, ptr %62, align 1
  %64 = zext i8 %63 to i64
  %65 = mul i64 %n.08.us12.epil, 10
  %66 = add i64 %65, -48
  %67 = add i64 %66, %64
  %68 = add nuw nsw i64 %r.07.us13.epil, 1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %if.then, label %if.done4.us.epil, !llvm.loop !2219

if.then:                                          ; preds = %for.body, %if.then.loopexit.unr-lcssa, %if.done4.us.epil
  %.us-phi = phi i64 [ %4, %if.done4.us.epil ], [ %4, %if.then.loopexit.unr-lcssa ], [ %smax, %for.body ]
  %.us-phi9 = phi i64 [ %.lcssa70.ph, %if.then.loopexit.unr-lcssa ], [ %67, %if.done4.us.epil ], [ %n.08, %for.body ]
  %69 = icmp eq i64 %.us-phi9, 0
  br i1 %69, label %common.ret.sink.split, label %for.loop2.preheader

for.loop2.preheader:                              ; preds = %if.then
  %70 = lshr i64 %.us-phi9, %.fr31
  %71 = icmp eq i64 %70, 0
  %72 = select i1 %2, i1 true, i1 %71
  br i1 %72, label %for.body3.lr.ph, label %for.done5

for.body3.lr.ph:                                  ; preds = %for.loop2.preheader
  br i1 %2, label %for.body3.us, label %for.body3

for.body3.us:                                     ; preds = %for.body3.lr.ph, %for.body3.us
  br label %for.body3.us

common.ret.sink.split:                            ; preds = %for.body.i, %for.done.i, %if.then, %decls.split.us
  %.sink = phi ptr [ %3, %decls.split.us ], [ %3, %if.then ], [ %86, %for.done.i ], [ %86, %for.body.i ]
  store i64 0, ptr %.sink, align 8
  br label %common.ret

common.ret:                                       ; preds = %cmp.and.i, %common.ret.sink.split, %for.done.i
  ret void

for.body3:                                        ; preds = %for.body3.lr.ph, %for.body3
  %n.117 = phi i64 [ %73, %for.body3 ], [ %.us-phi9, %for.body3.lr.ph ]
  %r.116 = phi i64 [ %74, %for.body3 ], [ %.us-phi, %for.body3.lr.ph ]
  %73 = mul i64 %n.117, 10
  %74 = add i64 %r.116, 1
  %75 = lshr i64 %73, %.fr31
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %for.body3, label %for.done5

if.done4:                                         ; preds = %for.body
  %77 = getelementptr [384 x i8], ptr %0, i64 0, i64 %r.07
  %78 = load i8, ptr %77, align 1
  %79 = zext i8 %78 to i64
  %80 = mul i64 %n.08, 10
  %81 = add i64 %80, -48
  %82 = add i64 %81, %79
  %83 = add nuw i64 %r.07, 1
  %84 = lshr i64 %82, %.fr31
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %for.body, label %for.done5

for.done5:                                        ; preds = %if.done4, %for.body3, %for.loop2.preheader
  %r.2 = phi i64 [ %.us-phi, %for.loop2.preheader ], [ %74, %for.body3 ], [ %83, %if.done4 ]
  %n.2 = phi i64 [ %.us-phi9, %for.loop2.preheader ], [ %73, %for.body3 ], [ %82, %if.done4 ]
  %86 = getelementptr inbounds %strconv_decimal.Decimal, ptr %0, i64 0, i32 2
  %87 = load i64, ptr %86, align 8
  %reass.sub = sub i64 %87, %r.2
  %88 = add i64 %reass.sub, 1
  store i64 %88, ptr %86, align 8
  %notmask = shl nsw i64 -1, %.fr31
  %89 = xor i64 %notmask, -1
  %90 = icmp slt i64 %r.2, %4
  br i1 %90, label %for.body7, label %for.loop11.preheader

for.loop11.preheader:                             ; preds = %for.body7, %for.done5
  %w.0.lcssa = phi i64 [ 0, %for.done5 ], [ %100, %for.body7 ]
  %n.3.lcssa = phi i64 [ %n.2, %for.done5 ], [ %103, %for.body7 ]
  %.not27 = icmp eq i64 %n.3.lcssa, 0
  br i1 %.not27, label %for.done18, label %for.body12.lr.ph

for.body12.lr.ph:                                 ; preds = %for.loop11.preheader
  %91 = getelementptr inbounds %strconv_decimal.Decimal, ptr %0, i64 0, i32 4
  br label %for.body12

for.body7:                                        ; preds = %for.done5, %for.body7
  %n.322 = phi i64 [ %103, %for.body7 ], [ %n.2, %for.done5 ]
  %w.021 = phi i64 [ %100, %for.body7 ], [ 0, %for.done5 ]
  %r.320 = phi i64 [ %104, %for.body7 ], [ %r.2, %for.done5 ]
  %92 = getelementptr [384 x i8], ptr %0, i64 0, i64 %r.320
  %93 = load i8, ptr %92, align 1
  %94 = zext i8 %93 to i64
  %95 = lshr i64 %n.322, %.fr31
  %96 = and i64 %n.322, %89
  %97 = getelementptr [384 x i8], ptr %0, i64 0, i64 %w.021
  %98 = trunc i64 %95 to i8
  %99 = add i8 %98, 48
  store i8 %99, ptr %97, align 1
  %100 = add i64 %w.021, 1
  %101 = mul i64 %96, 10
  %102 = add i64 %101, -48
  %103 = add i64 %102, %94
  %104 = add nsw i64 %r.320, 1
  %105 = load i64, ptr %3, align 8
  %106 = icmp slt i64 %104, %105
  br i1 %106, label %for.body7, label %for.loop11.preheader

for.body12:                                       ; preds = %for.body12.lr.ph, %if.done17
  %n.429 = phi i64 [ %n.3.lcssa, %for.body12.lr.ph ], [ %114, %if.done17 ]
  %w.128 = phi i64 [ %w.0.lcssa, %for.body12.lr.ph ], [ %w.2, %if.done17 ]
  %107 = lshr i64 %n.429, %.fr31
  %108 = and i64 %n.429, %89
  %109 = icmp slt i64 %w.128, 384
  br i1 %109, label %if.then14, label %if.else

if.then14:                                        ; preds = %for.body12
  %110 = getelementptr [384 x i8], ptr %0, i64 0, i64 %w.128
  %111 = trunc i64 %107 to i8
  %112 = add i8 %111, 48
  store i8 %112, ptr %110, align 1
  %113 = add nsw i64 %w.128, 1
  br label %if.done17

if.else:                                          ; preds = %for.body12
  %.not22 = icmp eq i64 %107, 0
  br i1 %.not22, label %if.done17, label %if.then15

if.then15:                                        ; preds = %if.else
  store i8 1, ptr %91, align 1
  br label %if.done17

if.done17:                                        ; preds = %if.else, %if.then15, %if.then14
  %w.2 = phi i64 [ %113, %if.then14 ], [ %w.128, %if.then15 ], [ %w.128, %if.else ]
  %114 = mul i64 %108, 10
  %.not = icmp eq i64 %114, 0
  br i1 %.not, label %for.done18, label %for.body12

for.done18:                                       ; preds = %if.done17, %for.loop11.preheader
  %w.1.lcssa = phi i64 [ %w.0.lcssa, %for.loop11.preheader ], [ %w.2, %if.done17 ]
  store i64 %w.1.lcssa, ptr %3, align 8
  %115 = icmp sgt i64 %w.1.lcssa, 0
  br i1 %115, label %cmp.and.i, label %for.done.i

cmp.and.i:                                        ; preds = %for.done18, %for.body.i
  %116 = phi i64 [ %117, %for.body.i ], [ %w.1.lcssa, %for.done18 ]
  %117 = add nsw i64 %116, -1
  %118 = getelementptr [384 x i8], ptr %0, i64 0, i64 %117
  %119 = load i8, ptr %118, align 1
  %120 = icmp eq i8 %119, 48
  br i1 %120, label %for.body.i, label %common.ret

for.body.i:                                       ; preds = %cmp.and.i
  store i64 %117, ptr %3, align 8
  %121 = icmp ugt i64 %116, 1
  br i1 %121, label %cmp.and.i, label %common.ret.sink.split

for.done.i:                                       ; preds = %for.done18
  %122 = icmp eq i64 %w.1.lcssa, 0
  br i1 %122, label %common.ret.sink.split, label %common.ret
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
define internal fastcc i64 @reflect.type_kind(i64 %0) unnamed_addr #19 {
decls:
  %1 = and i64 %0, 72057594037927935
  %2 = icmp ugt i64 %1, 150
  %n.0.i = select i1 %2, i64 0, i64 %1
  %3 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i
  %.not = icmp eq ptr %3, null
  br i1 %.not, label %common.ret, label %if.then

if.then:                                          ; preds = %decls
  %4 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i, i32 5, i32 1
  %5 = load i64, ptr %4, align 8
  %switch.tableidx = add i64 %5, -1
  %6 = icmp ult i64 %switch.tableidx, 28
  %spec.select = select i1 %6, i64 %5, i64 0
  br label %common.ret

common.ret:                                       ; preds = %if.then, %decls
  %common.ret.op = phi i64 [ 0, %decls ], [ %spec.select, %if.then ]
  ret i64 %common.ret.op
}

; Function Attrs: nofree nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define internal fastcc void @strconv_decimal.shift_left(ptr nocapture %0, i64 %1) unnamed_addr #20 {
decls:
  %2 = getelementptr [61 x { i64, %..string }], ptr @strconv_decimal._shift_left_offsets-4005, i64 0, i64 %1
  %3 = load i64, ptr %2, align 8
  %4 = getelementptr inbounds %strconv_decimal.Decimal, ptr %0, i64 0, i32 1
  %5 = load i64, ptr %4, align 8
  %6 = getelementptr [61 x { i64, %..string }], ptr @strconv_decimal._shift_left_offsets-4005, i64 0, i64 %1, i32 1
  %7 = getelementptr [61 x { i64, %..string }], ptr @strconv_decimal._shift_left_offsets-4005, i64 0, i64 %1, i32 1, i32 1
  %8 = load i64, ptr %7, align 8
  %9 = and i64 %1, 2305843009213693951
  %.not = icmp eq i64 %9, 0
  br i1 %.not, label %strconv_decimal.shift_left.prefix_less-0.exit.thread, label %for.interval.body.preheader.i

for.interval.body.preheader.i:                    ; preds = %decls
  %smax.i = tail call i64 @llvm.smax.i64(i64 %5, i64 0)
  br label %for.interval.body.i

for.interval.loop.i:                              ; preds = %if.done.i
  %10 = add nuw nsw i64 %i.02.i, 1
  %exitcond5.not.i = icmp eq i64 %10, %8
  br i1 %exitcond5.not.i, label %strconv_decimal.shift_left.prefix_less-0.exit.thread, label %for.interval.body.i

for.interval.body.i:                              ; preds = %for.interval.loop.i, %for.interval.body.preheader.i
  %i.02.i = phi i64 [ %10, %for.interval.loop.i ], [ 0, %for.interval.body.preheader.i ]
  %exitcond.not.i = icmp eq i64 %i.02.i, %smax.i
  br i1 %exitcond.not.i, label %strconv_decimal.shift_left.prefix_less-0.exit.thread4, label %if.done.i

strconv_decimal.shift_left.prefix_less-0.exit.thread4: ; preds = %for.interval.body.i
  %11 = add i64 %3, -1
  br label %19

if.done.i:                                        ; preds = %for.interval.body.i
  %12 = getelementptr i8, ptr %0, i64 %i.02.i
  %13 = load i8, ptr %12, align 1
  %14 = load ptr, ptr %6, align 8
  %15 = getelementptr i8, ptr %14, i64 %i.02.i
  %16 = load i8, ptr %15, align 1
  %.not6.i = icmp eq i8 %13, %16
  br i1 %.not6.i, label %for.interval.loop.i, label %strconv_decimal.shift_left.prefix_less-0.exit

strconv_decimal.shift_left.prefix_less-0.exit:    ; preds = %if.done.i
  %17 = icmp uge i8 %13, %16
  %18 = add i64 %3, -1
  %cond.fr = freeze i1 %17
  br i1 %cond.fr, label %strconv_decimal.shift_left.prefix_less-0.exit.thread, label %19

strconv_decimal.shift_left.prefix_less-0.exit.thread: ; preds = %for.interval.loop.i, %decls, %strconv_decimal.shift_left.prefix_less-0.exit
  br label %19

19:                                               ; preds = %strconv_decimal.shift_left.prefix_less-0.exit.thread4, %strconv_decimal.shift_left.prefix_less-0.exit, %strconv_decimal.shift_left.prefix_less-0.exit.thread
  %20 = phi i64 [ %3, %strconv_decimal.shift_left.prefix_less-0.exit.thread ], [ %18, %strconv_decimal.shift_left.prefix_less-0.exit ], [ %11, %strconv_decimal.shift_left.prefix_less-0.exit.thread4 ]
  %read_index.012 = add i64 %5, -1
  %21 = icmp sgt i64 %read_index.012, -1
  br i1 %21, label %for.body.lr.ph, label %for.done14

for.body.lr.ph:                                   ; preds = %19
  %22 = add i64 %20, %5
  %23 = icmp ult i64 %1, 64
  %24 = getelementptr inbounds %strconv_decimal.Decimal, ptr %0, i64 0, i32 4
  %xtraiter = and i64 %5, 7
  %25 = icmp ult i64 %read_index.012, 7
  br i1 %25, label %for.loop5.preheader.unr-lcssa, label %for.body.lr.ph.new

for.body.lr.ph.new:                               ; preds = %for.body.lr.ph
  %unroll_iter = and i64 %5, -8
  br label %for.body

for.loop5.preheader.unr-lcssa:                    ; preds = %if.done4.7, %for.body.lr.ph
  %.lcssa37.ph = phi i64 [ undef, %for.body.lr.ph ], [ %145, %if.done4.7 ]
  %.lcssa.ph = phi i64 [ undef, %for.body.lr.ph ], [ %146, %if.done4.7 ]
  %read_index.015.unr = phi i64 [ %read_index.012, %for.body.lr.ph ], [ %read_index.0.7, %if.done4.7 ]
  %n.014.unr = phi i64 [ 0, %for.body.lr.ph ], [ %146, %if.done4.7 ]
  %write_index.013.unr = phi i64 [ %22, %for.body.lr.ph ], [ %148, %if.done4.7 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.loop5.preheader, label %for.body.epil

for.body.epil:                                    ; preds = %for.loop5.preheader.unr-lcssa, %if.done4.epil
  %read_index.015.epil = phi i64 [ %read_index.0.epil, %if.done4.epil ], [ %read_index.015.unr, %for.loop5.preheader.unr-lcssa ]
  %n.014.epil = phi i64 [ %33, %if.done4.epil ], [ %n.014.unr, %for.loop5.preheader.unr-lcssa ]
  %write_index.013.epil = phi i64 [ %35, %if.done4.epil ], [ %write_index.013.unr, %for.loop5.preheader.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.next, %if.done4.epil ], [ 0, %for.loop5.preheader.unr-lcssa ]
  %26 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.015.epil
  %27 = load i8, ptr %26, align 1
  %28 = zext i8 %27 to i64
  %29 = add nsw i64 %28, -48
  %30 = shl i64 %29, %1
  %31 = select i1 %23, i64 %30, i64 0
  %32 = add i64 %31, %n.014.epil
  %33 = udiv i64 %32, 10
  %.neg20.epil = mul i64 %33, -10
  %34 = add i64 %.neg20.epil, %32
  %35 = add i64 %write_index.013.epil, -1
  %36 = icmp slt i64 %35, 384
  br i1 %36, label %if.then1.epil, label %if.else.epil

if.else.epil:                                     ; preds = %for.body.epil
  %.not21.epil = icmp eq i64 %34, 0
  br i1 %.not21.epil, label %if.done4.epil, label %if.then2.epil

if.then2.epil:                                    ; preds = %if.else.epil
  store i8 1, ptr %24, align 1
  br label %if.done4.epil

if.then1.epil:                                    ; preds = %for.body.epil
  %37 = getelementptr [384 x i8], ptr %0, i64 0, i64 %35
  %38 = trunc i64 %34 to i8
  %39 = add i8 %38, 48
  store i8 %39, ptr %37, align 1
  br label %if.done4.epil

if.done4.epil:                                    ; preds = %if.then1.epil, %if.then2.epil, %if.else.epil
  %read_index.0.epil = add nsw i64 %read_index.015.epil, -1
  %epil.iter.next = add i64 %epil.iter, 1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.next, %xtraiter
  br i1 %epil.iter.cmp.not, label %for.loop5.preheader, label %for.body.epil, !llvm.loop !2220

for.loop5.preheader:                              ; preds = %if.done4.epil, %for.loop5.preheader.unr-lcssa
  %.lcssa37 = phi i64 [ %.lcssa37.ph, %for.loop5.preheader.unr-lcssa ], [ %32, %if.done4.epil ]
  %.lcssa = phi i64 [ %.lcssa.ph, %for.loop5.preheader.unr-lcssa ], [ %33, %if.done4.epil ]
  %.not1817 = icmp ult i64 %.lcssa37, 10
  br i1 %.not1817, label %for.done14, label %for.body6.lr.ph

for.body6.lr.ph:                                  ; preds = %for.loop5.preheader
  %40 = getelementptr inbounds %strconv_decimal.Decimal, ptr %0, i64 0, i32 4
  br label %for.body6

for.body:                                         ; preds = %if.done4.7, %for.body.lr.ph.new
  %read_index.015 = phi i64 [ %read_index.012, %for.body.lr.ph.new ], [ %read_index.0.7, %if.done4.7 ]
  %n.014 = phi i64 [ 0, %for.body.lr.ph.new ], [ %146, %if.done4.7 ]
  %write_index.013 = phi i64 [ %22, %for.body.lr.ph.new ], [ %148, %if.done4.7 ]
  %niter = phi i64 [ 0, %for.body.lr.ph.new ], [ %niter.next.7, %if.done4.7 ]
  %41 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.015
  %42 = load i8, ptr %41, align 1
  %43 = zext i8 %42 to i64
  %44 = add nsw i64 %43, -48
  %45 = shl i64 %44, %1
  %46 = select i1 %23, i64 %45, i64 0
  %47 = add i64 %46, %n.014
  %48 = udiv i64 %47, 10
  %.neg20 = mul i64 %48, -10
  %49 = add i64 %.neg20, %47
  %50 = add i64 %write_index.013, -1
  %51 = icmp slt i64 %50, 384
  br i1 %51, label %if.then1, label %if.else

if.then1:                                         ; preds = %for.body
  %52 = getelementptr [384 x i8], ptr %0, i64 0, i64 %50
  %53 = trunc i64 %49 to i8
  %54 = add i8 %53, 48
  store i8 %54, ptr %52, align 1
  br label %if.done4

if.else:                                          ; preds = %for.body
  %.not21 = icmp eq i64 %49, 0
  br i1 %.not21, label %if.done4, label %if.then2

if.then2:                                         ; preds = %if.else
  store i8 1, ptr %24, align 1
  br label %if.done4

if.done4:                                         ; preds = %if.else, %if.then2, %if.then1
  %read_index.0 = add nsw i64 %read_index.015, -1
  %55 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.0
  %56 = load i8, ptr %55, align 1
  %57 = zext i8 %56 to i64
  %58 = add nsw i64 %57, -48
  %59 = shl i64 %58, %1
  %60 = select i1 %23, i64 %59, i64 0
  %61 = add i64 %60, %48
  %62 = udiv i64 %61, 10
  %.neg20.1 = mul i64 %62, -10
  %63 = add i64 %.neg20.1, %61
  %64 = add i64 %write_index.013, -2
  %65 = icmp slt i64 %64, 384
  br i1 %65, label %if.then1.1, label %if.else.1

if.else.1:                                        ; preds = %if.done4
  %.not21.1 = icmp eq i64 %63, 0
  br i1 %.not21.1, label %if.done4.1, label %if.then2.1

if.then2.1:                                       ; preds = %if.else.1
  store i8 1, ptr %24, align 1
  br label %if.done4.1

if.then1.1:                                       ; preds = %if.done4
  %66 = getelementptr [384 x i8], ptr %0, i64 0, i64 %64
  %67 = trunc i64 %63 to i8
  %68 = add i8 %67, 48
  store i8 %68, ptr %66, align 1
  br label %if.done4.1

if.done4.1:                                       ; preds = %if.then1.1, %if.then2.1, %if.else.1
  %read_index.0.1 = add nsw i64 %read_index.015, -2
  %69 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.0.1
  %70 = load i8, ptr %69, align 1
  %71 = zext i8 %70 to i64
  %72 = add nsw i64 %71, -48
  %73 = shl i64 %72, %1
  %74 = select i1 %23, i64 %73, i64 0
  %75 = add i64 %74, %62
  %76 = udiv i64 %75, 10
  %.neg20.2 = mul i64 %76, -10
  %77 = add i64 %.neg20.2, %75
  %78 = add i64 %write_index.013, -3
  %79 = icmp slt i64 %78, 384
  br i1 %79, label %if.then1.2, label %if.else.2

if.else.2:                                        ; preds = %if.done4.1
  %.not21.2 = icmp eq i64 %77, 0
  br i1 %.not21.2, label %if.done4.2, label %if.then2.2

if.then2.2:                                       ; preds = %if.else.2
  store i8 1, ptr %24, align 1
  br label %if.done4.2

if.then1.2:                                       ; preds = %if.done4.1
  %80 = getelementptr [384 x i8], ptr %0, i64 0, i64 %78
  %81 = trunc i64 %77 to i8
  %82 = add i8 %81, 48
  store i8 %82, ptr %80, align 1
  br label %if.done4.2

if.done4.2:                                       ; preds = %if.then1.2, %if.then2.2, %if.else.2
  %read_index.0.2 = add nsw i64 %read_index.015, -3
  %83 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.0.2
  %84 = load i8, ptr %83, align 1
  %85 = zext i8 %84 to i64
  %86 = add nsw i64 %85, -48
  %87 = shl i64 %86, %1
  %88 = select i1 %23, i64 %87, i64 0
  %89 = add i64 %88, %76
  %90 = udiv i64 %89, 10
  %.neg20.3 = mul i64 %90, -10
  %91 = add i64 %.neg20.3, %89
  %92 = add i64 %write_index.013, -4
  %93 = icmp slt i64 %92, 384
  br i1 %93, label %if.then1.3, label %if.else.3

if.else.3:                                        ; preds = %if.done4.2
  %.not21.3 = icmp eq i64 %91, 0
  br i1 %.not21.3, label %if.done4.3, label %if.then2.3

if.then2.3:                                       ; preds = %if.else.3
  store i8 1, ptr %24, align 1
  br label %if.done4.3

if.then1.3:                                       ; preds = %if.done4.2
  %94 = getelementptr [384 x i8], ptr %0, i64 0, i64 %92
  %95 = trunc i64 %91 to i8
  %96 = add i8 %95, 48
  store i8 %96, ptr %94, align 1
  br label %if.done4.3

if.done4.3:                                       ; preds = %if.then1.3, %if.then2.3, %if.else.3
  %read_index.0.3 = add nsw i64 %read_index.015, -4
  %97 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.0.3
  %98 = load i8, ptr %97, align 1
  %99 = zext i8 %98 to i64
  %100 = add nsw i64 %99, -48
  %101 = shl i64 %100, %1
  %102 = select i1 %23, i64 %101, i64 0
  %103 = add i64 %102, %90
  %104 = udiv i64 %103, 10
  %.neg20.4 = mul i64 %104, -10
  %105 = add i64 %.neg20.4, %103
  %106 = add i64 %write_index.013, -5
  %107 = icmp slt i64 %106, 384
  br i1 %107, label %if.then1.4, label %if.else.4

if.else.4:                                        ; preds = %if.done4.3
  %.not21.4 = icmp eq i64 %105, 0
  br i1 %.not21.4, label %if.done4.4, label %if.then2.4

if.then2.4:                                       ; preds = %if.else.4
  store i8 1, ptr %24, align 1
  br label %if.done4.4

if.then1.4:                                       ; preds = %if.done4.3
  %108 = getelementptr [384 x i8], ptr %0, i64 0, i64 %106
  %109 = trunc i64 %105 to i8
  %110 = add i8 %109, 48
  store i8 %110, ptr %108, align 1
  br label %if.done4.4

if.done4.4:                                       ; preds = %if.then1.4, %if.then2.4, %if.else.4
  %read_index.0.4 = add nsw i64 %read_index.015, -5
  %111 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.0.4
  %112 = load i8, ptr %111, align 1
  %113 = zext i8 %112 to i64
  %114 = add nsw i64 %113, -48
  %115 = shl i64 %114, %1
  %116 = select i1 %23, i64 %115, i64 0
  %117 = add i64 %116, %104
  %118 = udiv i64 %117, 10
  %.neg20.5 = mul i64 %118, -10
  %119 = add i64 %.neg20.5, %117
  %120 = add i64 %write_index.013, -6
  %121 = icmp slt i64 %120, 384
  br i1 %121, label %if.then1.5, label %if.else.5

if.else.5:                                        ; preds = %if.done4.4
  %.not21.5 = icmp eq i64 %119, 0
  br i1 %.not21.5, label %if.done4.5, label %if.then2.5

if.then2.5:                                       ; preds = %if.else.5
  store i8 1, ptr %24, align 1
  br label %if.done4.5

if.then1.5:                                       ; preds = %if.done4.4
  %122 = getelementptr [384 x i8], ptr %0, i64 0, i64 %120
  %123 = trunc i64 %119 to i8
  %124 = add i8 %123, 48
  store i8 %124, ptr %122, align 1
  br label %if.done4.5

if.done4.5:                                       ; preds = %if.then1.5, %if.then2.5, %if.else.5
  %read_index.0.5 = add nsw i64 %read_index.015, -6
  %125 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.0.5
  %126 = load i8, ptr %125, align 1
  %127 = zext i8 %126 to i64
  %128 = add nsw i64 %127, -48
  %129 = shl i64 %128, %1
  %130 = select i1 %23, i64 %129, i64 0
  %131 = add i64 %130, %118
  %132 = udiv i64 %131, 10
  %.neg20.6 = mul i64 %132, -10
  %133 = add i64 %.neg20.6, %131
  %134 = add i64 %write_index.013, -7
  %135 = icmp slt i64 %134, 384
  br i1 %135, label %if.then1.6, label %if.else.6

if.else.6:                                        ; preds = %if.done4.5
  %.not21.6 = icmp eq i64 %133, 0
  br i1 %.not21.6, label %if.done4.6, label %if.then2.6

if.then2.6:                                       ; preds = %if.else.6
  store i8 1, ptr %24, align 1
  br label %if.done4.6

if.then1.6:                                       ; preds = %if.done4.5
  %136 = getelementptr [384 x i8], ptr %0, i64 0, i64 %134
  %137 = trunc i64 %133 to i8
  %138 = add i8 %137, 48
  store i8 %138, ptr %136, align 1
  br label %if.done4.6

if.done4.6:                                       ; preds = %if.then1.6, %if.then2.6, %if.else.6
  %read_index.0.6 = add nsw i64 %read_index.015, -7
  %139 = getelementptr [384 x i8], ptr %0, i64 0, i64 %read_index.0.6
  %140 = load i8, ptr %139, align 1
  %141 = zext i8 %140 to i64
  %142 = add nsw i64 %141, -48
  %143 = shl i64 %142, %1
  %144 = select i1 %23, i64 %143, i64 0
  %145 = add i64 %144, %132
  %146 = udiv i64 %145, 10
  %.neg20.7 = mul i64 %146, -10
  %147 = add i64 %.neg20.7, %145
  %148 = add i64 %write_index.013, -8
  %149 = icmp slt i64 %148, 384
  br i1 %149, label %if.then1.7, label %if.else.7

if.else.7:                                        ; preds = %if.done4.6
  %.not21.7 = icmp eq i64 %147, 0
  br i1 %.not21.7, label %if.done4.7, label %if.then2.7

if.then2.7:                                       ; preds = %if.else.7
  store i8 1, ptr %24, align 1
  br label %if.done4.7

if.then1.7:                                       ; preds = %if.done4.6
  %150 = getelementptr [384 x i8], ptr %0, i64 0, i64 %148
  %151 = trunc i64 %147 to i8
  %152 = add i8 %151, 48
  store i8 %152, ptr %150, align 1
  br label %if.done4.7

if.done4.7:                                       ; preds = %if.then1.7, %if.then2.7, %if.else.7
  %read_index.0.7 = add nsw i64 %read_index.015, -8
  %niter.next.7 = add i64 %niter, 8
  %niter.ncmp.7.not = icmp eq i64 %niter.next.7, %unroll_iter
  br i1 %niter.ncmp.7.not, label %for.loop5.preheader.unr-lcssa, label %for.body

for.body6:                                        ; preds = %for.body6.lr.ph, %if.done13
  %n.119 = phi i64 [ %.lcssa, %for.body6.lr.ph ], [ %153, %if.done13 ]
  %write_index.118 = phi i64 [ %20, %for.body6.lr.ph ], [ %155, %if.done13 ]
  %153 = udiv i64 %n.119, 10
  %.neg = mul nsw i64 %153, -10
  %154 = add nsw i64 %.neg, %n.119
  %155 = add i64 %write_index.118, -1
  %156 = icmp slt i64 %155, 384
  br i1 %156, label %if.then9, label %if.else10

if.then9:                                         ; preds = %for.body6
  %157 = getelementptr [384 x i8], ptr %0, i64 0, i64 %155
  %158 = trunc i64 %154 to i8
  %159 = add i8 %158, 48
  store i8 %159, ptr %157, align 1
  br label %if.done13

if.else10:                                        ; preds = %for.body6
  %.not19 = icmp eq i64 %154, 0
  br i1 %.not19, label %if.done13, label %if.then11

if.then11:                                        ; preds = %if.else10
  store i8 1, ptr %40, align 1
  br label %if.done13

if.done13:                                        ; preds = %if.else10, %if.then11, %if.then9
  %.not18 = icmp ult i64 %n.119, 10
  br i1 %.not18, label %for.done14, label %for.body6

for.done14:                                       ; preds = %if.done13, %19, %for.loop5.preheader
  %160 = getelementptr inbounds %strconv_decimal.Decimal, ptr %0, i64 0, i32 2
  %161 = load i64, ptr %160, align 8
  %162 = add i64 %161, %20
  store i64 %162, ptr %160, align 8
  %163 = load i64, ptr %4, align 8
  %164 = tail call i64 @llvm.smax.i64(i64 %163, i64 0)
  %165 = tail call i64 @llvm.umin.i64(i64 %164, i64 384)
  store i64 %165, ptr %4, align 8
  %.not8 = icmp eq i64 %165, 0
  br i1 %.not8, label %if.then.i, label %cmp.and.i

cmp.and.i:                                        ; preds = %for.done14, %for.body.i
  %166 = phi i64 [ %167, %for.body.i ], [ %165, %for.done14 ]
  %167 = add nsw i64 %166, -1
  %168 = getelementptr [384 x i8], ptr %0, i64 0, i64 %167
  %169 = load i8, ptr %168, align 1
  %170 = icmp eq i8 %169, 48
  br i1 %170, label %for.body.i, label %strconv_decimal.trim.exit

for.body.i:                                       ; preds = %cmp.and.i
  store i64 %167, ptr %4, align 8
  %171 = icmp ugt i64 %166, 1
  br i1 %171, label %cmp.and.i, label %if.then.i

if.then.i:                                        ; preds = %for.body.i, %for.done14
  store i64 0, ptr %160, align 8
  br label %strconv_decimal.trim.exit

strconv_decimal.trim.exit:                        ; preds = %cmp.and.i, %if.then.i
  ret void
}

define internal fastcc i32 @reflect.write_type_writer(ptr %0, ptr readonly %1, ptr %2, ptr noalias nonnull writeonly %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca [80 x i8], align 8
  %16 = alloca [80 x i8], align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca i64, align 8
  %55 = alloca i64, align 8
  %56 = alloca i64, align 8
  %57 = alloca i64, align 8
  %58 = alloca i64, align 8
  %59 = alloca i64, align 8
  %60 = alloca i64, align 8
  %61 = alloca i64, align 8
  %62 = alloca i64, align 8
  %63 = alloca i64, align 8
  %64 = alloca i64, align 8
  %65 = alloca i64, align 8
  %66 = alloca i64, align 8
  %67 = alloca i64, align 8
  %68 = alloca i64, align 8
  %69 = alloca i64, align 8
  %70 = alloca i64, align 8
  %71 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %72 = alloca { ptr, i64 }, align 8
  %73 = alloca i64, align 8
  %74 = alloca i64, align 8
  %75 = alloca i64, align 8
  %76 = alloca i64, align 8
  %77 = alloca i64, align 8
  %78 = alloca i64, align 8
  %79 = alloca i64, align 8
  %80 = alloca i64, align 8
  %n = alloca i64, align 8
  %81 = alloca [120 x i8], align 8
  %82 = alloca i64, align 8
  %83 = alloca i64, align 8
  %84 = alloca i64, align 8
  %85 = alloca i64, align 8
  %86 = alloca i64, align 8
  %87 = alloca i64, align 8
  %88 = alloca i64, align 8
  %89 = alloca i64, align 8
  %90 = alloca i64, align 8
  %91 = alloca i64, align 8
  %name = alloca %..string, align 8
  %92 = alloca i64, align 8
  %93 = alloca i64, align 8
  %94 = alloca i64, align 8
  %95 = alloca i64, align 8
  %96 = alloca i64, align 8
  %97 = alloca i64, align 8
  %98 = alloca i64, align 8
  %99 = alloca i64, align 8
  %100 = alloca i64, align 8
  %101 = alloca i64, align 8
  %102 = alloca i64, align 8
  %103 = alloca i64, align 8
  %104 = alloca i64, align 8
  %105 = alloca i64, align 8
  %name477 = alloca %..string, align 8
  %106 = alloca i64, align 8
  %107 = alloca i64, align 8
  %108 = alloca i64, align 8
  %109 = alloca i64, align 8
  %name588 = alloca %..string, align 8
  %110 = alloca i64, align 8
  %111 = alloca i64, align 8
  %112 = alloca i64, align 8
  %113 = alloca i64, align 8
  %114 = alloca i64, align 8
  %115 = alloca i64, align 8
  %116 = alloca i64, align 8
  %117 = alloca i64, align 8
  %118 = alloca i64, align 8
  %119 = alloca i64, align 8
  %120 = alloca i64, align 8
  %121 = alloca i64, align 8
  %122 = alloca i64, align 8
  %123 = alloca i64, align 8
  %124 = alloca i64, align 8
  store i64 0, ptr %n, align 8
  %125 = icmp eq ptr %1, null
  br i1 %125, label %if.then, label %if.done5

if.then:                                          ; preds = %decls
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %80), !noalias !2221
  %126 = load ptr, ptr %0, align 8, !noalias !2225
  %.not.i.i = icmp eq ptr %126, null
  br i1 %.not.i.i, label %io.write_string.exit.thread, label %io.write_string.exit

io.write_string.exit.thread:                      ; preds = %if.then
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %80), !noalias !2221
  br label %or_return.return

io.write_string.exit:                             ; preds = %if.then
  %127 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %128 = load ptr, ptr %127, align 8, !noalias !2225
  store i64 0, ptr %80, align 8, !noalias !2225
  %129 = call i32 %126(ptr %128, i64 4, ptr nonnull @"ggv$10c", i64 0, i64 0, ptr nonnull %80, ptr nonnull %__.context_ptr), !noalias !2229
  %130 = load i64, ptr %80, align 8, !noalias !2225
  %131 = load i64, ptr %n, align 8, !noalias !2225
  %132 = add i64 %131, %130
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %80), !noalias !2221
  %133 = icmp eq i32 %129, 0
  br i1 %133, label %or_return.continue, label %or_return.return

or_return.return:                                 ; preds = %io.write_string.exit.thread, %io.write_string.exit
  %134 = phi i64 [ 0, %io.write_string.exit.thread ], [ %132, %io.write_string.exit ]
  %err.0.i.i1470 = phi i32 [ -1, %io.write_string.exit.thread ], [ %129, %io.write_string.exit ]
  store i64 %134, ptr %3, align 8
  %.not1095 = icmp eq ptr %2, null
  br i1 %.not1095, label %common.ret, label %common.ret.sink.split

common.ret.sink.split:                            ; preds = %or_return.continue424, %or_return.continue410, %or_return.continue396, %or_return.return, %typeswitch.done, %or_return.return760, %or_return.return755, %or_return.return750, %or_return.return745, %or_return.return740, %or_return.return735, %or_return.return729, %or_return.return724, %or_return.return719, %or_return.return714, %or_return.return708, %or_return.return703, %or_return.return698, %or_return.return693, %or_return.return687, %or_return.return682, %or_return.return677, %or_return.return672, %or_return.return666, %or_return.return660, %or_return.return655, %or_return.return648, %or_return.return643, %or_return.return638, %or_return.return632, %or_return.return627, %or_return.return622, %or_return.return615, %or_return.return609, %or_return.return603, %or_return.return597, %or_return.return591, %or_return.return581, %or_return.return576, %or_return.return571, %or_return.return565, %or_return.return559, %or_return.return553, %or_return.return544, %or_return.return538, %or_return.return533, %or_return.return528, %or_return.return521, %or_return.return514, %or_return.return508, %or_return.return502, %or_return.return496, %or_return.return491, %or_return.return486, %or_return.return480, %or_return.return470, %or_return.return464, %or_return.return459, %or_return.return454, %or_return.return447, %or_return.return440, %or_return.return434, %or_return.return420, %or_return.return406, %or_return.return392, %or_return.return387, %or_return.return382, %or_return.return374, %or_return.return369, %or_return.return364, %or_return.return359, %or_return.return353, %or_return.return348, %or_return.return342, %or_return.return337, %or_return.return331, %or_return.return326, %or_return.return321, %or_return.return316, %or_return.return310, %or_return.return303, %or_return.return298, %or_return.return293, %or_return.return288, %or_return.return281, %or_return.return274, %or_return.return268, %or_return.return263, %or_return.return255, %or_return.return245, %or_return.return237, %or_return.return232, %or_return.return225, %or_return.return220, %or_return.return214, %or_return.return207, %or_return.return201, %or_return.return195, %or_return.return189, %or_return.return184, %or_return.return178, %or_return.return173, %or_return.return166, %or_return.return161, %or_return.return155, %or_return.return148, %or_return.return142, %or_return.return135, %or_return.return130, %or_return.return124, %or_return.return116, %or_return.return110, %or_return.return103, %or_return.return98, %or_return.return92, %or_return.return87, %or_return.return80, %or_return.return74, %or_return.return67, %or_return.return62, %or_return.return56, %or_return.return49, %or_return.return43, %or_return.return36, %or_return.return31, %or_return.return24, %or_return.return18, %or_return.return12, %or_return.return6, %or_return.continue
  %.sink1822 = phi i64 [ %132, %or_return.continue ], [ %148, %or_return.return6 ], [ %160, %or_return.return12 ], [ %169, %or_return.return18 ], [ %178, %or_return.return24 ], [ %182, %or_return.return31 ], [ %187, %or_return.return36 ], [ %198, %or_return.return43 ], [ %207, %or_return.return49 ], [ %216, %or_return.return56 ], [ %227, %or_return.return62 ], [ %232, %or_return.return67 ], [ %241, %or_return.return74 ], [ %249, %or_return.return80 ], [ %258, %or_return.return87 ], [ %263, %or_return.return92 ], [ %272, %or_return.return98 ], [ %277, %or_return.return103 ], [ %287, %or_return.return110 ], [ %296, %or_return.return116 ], [ %307, %or_return.return124 ], [ %310, %or_return.return130 ], [ %315, %or_return.return135 ], [ %324, %or_return.return142 ], [ %333, %or_return.return148 ], [ %344, %or_return.return155 ], [ %353, %or_return.return161 ], [ %357, %or_return.return166 ], [ %367, %or_return.return173 ], [ %371, %or_return.return178 ], [ %381, %or_return.return184 ], [ %385, %or_return.return189 ], [ %394, %or_return.return195 ], [ %404, %or_return.return201 ], [ %417, %or_return.return207 ], [ %429, %or_return.return214 ], [ %432, %or_return.return220 ], [ %440, %or_return.return225 ], [ %451, %or_return.return232 ], [ %455, %or_return.return237 ], [ %467, %or_return.return245 ], [ %482, %or_return.return255 ], [ %495, %or_return.return263 ], [ %503, %or_return.return268 ], [ %506, %or_return.return274 ], [ %514, %or_return.return281 ], [ %523, %or_return.return288 ], [ %528, %or_return.return293 ], [ %536, %or_return.return298 ], [ %540, %or_return.return303 ], [ %551, %or_return.return310 ], [ %561, %or_return.return316 ], [ %566, %or_return.return321 ], [ %574, %or_return.return326 ], [ %578, %or_return.return331 ], [ %587, %or_return.return337 ], [ %591, %or_return.return342 ], [ %600, %or_return.return348 ], [ %604, %or_return.return353 ], [ %613, %or_return.return359 ], [ %617, %or_return.return364 ], [ %620, %or_return.return369 ], [ %625, %or_return.return374 ], [ %636, %or_return.return382 ], [ %641, %or_return.return387 ], [ %644, %or_return.return392 ], [ %657, %or_return.return406 ], [ %670, %or_return.return420 ], [ %683, %or_return.return434 ], [ %693, %or_return.return440 ], [ %704, %or_return.return447 ], [ %715, %or_return.return454 ], [ %720, %or_return.return459 ], [ %728, %or_return.return464 ], [ %731, %or_return.return470 ], [ %747, %or_return.return480 ], [ %755, %or_return.return486 ], [ %763, %or_return.return491 ], [ %769, %or_return.return496 ], [ %772, %or_return.return502 ], [ %781, %or_return.return508 ], [ %791, %or_return.return514 ], [ %802, %or_return.return521 ], [ %813, %or_return.return528 ], [ %818, %or_return.return533 ], [ %826, %or_return.return538 ], [ %829, %or_return.return544 ], [ %845, %or_return.return553 ], [ %848, %or_return.return559 ], [ %851, %or_return.return565 ], [ %860, %or_return.return571 ], [ %864, %or_return.return576 ], [ %872, %or_return.return581 ], [ %889, %or_return.return591 ], [ %898, %or_return.return597 ], [ %901, %or_return.return603 ], [ %910, %or_return.return609 ], [ %928, %or_return.return615 ], [ %934, %or_return.return622 ], [ %942, %or_return.return627 ], [ %948, %or_return.return632 ], [ %953, %or_return.return638 ], [ %961, %or_return.return643 ], [ %966, %or_return.return648 ], [ %976, %or_return.return655 ], [ %980, %or_return.return660 ], [ %983, %or_return.return666 ], [ %992, %or_return.return672 ], [ %997, %or_return.return677 ], [ %1000, %or_return.return682 ], [ %1004, %or_return.return687 ], [ %1013, %or_return.return693 ], [ %1018, %or_return.return698 ], [ %1026, %or_return.return703 ], [ %1030, %or_return.return708 ], [ %1039, %or_return.return714 ], [ %1044, %or_return.return719 ], [ %1052, %or_return.return724 ], [ %1056, %or_return.return729 ], [ %1065, %or_return.return735 ], [ %1070, %or_return.return740 ], [ %1078, %or_return.return745 ], [ %1083, %or_return.return750 ], [ %1091, %or_return.return755 ], [ %1095, %or_return.return760 ], [ %1096, %typeswitch.done ], [ %134, %or_return.return ], [ %648, %or_return.continue396 ], [ %661, %or_return.continue410 ], [ %674, %or_return.continue424 ]
  %common.ret.op.ph = phi i32 [ 0, %or_return.continue ], [ %err.0.i.i11001473, %or_return.return6 ], [ %err.0.i.i11051476, %or_return.return12 ], [ %err.0.i.i11101479, %or_return.return18 ], [ %err.0.i.i11151482, %or_return.return24 ], [ %180, %or_return.return31 ], [ %185, %or_return.return36 ], [ %err.0.i.i11201485, %or_return.return43 ], [ %err.0.i.i11251488, %or_return.return49 ], [ %err.0.i.i11301491, %or_return.return56 ], [ %err.0.i.i11341493, %or_return.return62 ], [ %230, %or_return.return67 ], [ %err.0.i.i11381496, %or_return.return74 ], [ %err.0.i.i11431499, %or_return.return80 ], [ %err.0.i.i11481502, %or_return.return87 ], [ %261, %or_return.return92 ], [ %err.0.i.i11531505, %or_return.return98 ], [ %275, %or_return.return103 ], [ %err.0.i.i11581508, %or_return.return110 ], [ %err.0.i.i11631511, %or_return.return116 ], [ %err.0.i.i11681514, %or_return.return124 ], [ %308, %or_return.return130 ], [ %313, %or_return.return135 ], [ %err.0.i.i11731517, %or_return.return142 ], [ %err.0.i.i11781520, %or_return.return148 ], [ %err.0.i.i11831523, %or_return.return155 ], [ %err.0.i.i11881526, %or_return.return161 ], [ %355, %or_return.return166 ], [ %err.0.i.i11931529, %or_return.return173 ], [ %369, %or_return.return178 ], [ %err.0.i.i11981532, %or_return.return184 ], [ %383, %or_return.return189 ], [ %err.0.i.i12031535, %or_return.return195 ], [ %err.0.i.i12081538, %or_return.return201 ], [ %err.0.i.i12131541, %or_return.return207 ], [ %err.0.i.i12181544, %or_return.return214 ], [ %430, %or_return.return220 ], [ %err.0.i.i12231547, %or_return.return225 ], [ %err.0.i.i12281550, %or_return.return232 ], [ %453, %or_return.return237 ], [ %err.0.i.i12331553, %or_return.return245 ], [ %err.0.i.i12381556, %or_return.return255 ], [ %err.0.i.i12431560, %or_return.return263 ], [ %err.0.i.i12481563, %or_return.return268 ], [ %504, %or_return.return274 ], [ %err.0.i.i12531566, %or_return.return281 ], [ %err.0.i.i12581569, %or_return.return288 ], [ %526, %or_return.return293 ], [ %err.0.i.i12631572, %or_return.return298 ], [ %538, %or_return.return303 ], [ %err.0.i.i12681575, %or_return.return310 ], [ %err.0.i.i12731578, %or_return.return316 ], [ %564, %or_return.return321 ], [ %err.0.i.i12781581, %or_return.return326 ], [ %576, %or_return.return331 ], [ %err.0.i.i12831584, %or_return.return337 ], [ %589, %or_return.return342 ], [ %err.0.i.i12881587, %or_return.return348 ], [ %602, %or_return.return353 ], [ %err.0.i.i12931590, %or_return.return359 ], [ %615, %or_return.return364 ], [ %618, %or_return.return369 ], [ %623, %or_return.return374 ], [ %err.0.i.i12981593, %or_return.return382 ], [ %639, %or_return.return387 ], [ %642, %or_return.return392 ], [ %err.0.i.i13031596, %or_return.return406 ], [ %err.0.i.i13081599, %or_return.return420 ], [ %err.0.i.i13131602, %or_return.return434 ], [ %err.0.i.i13181605, %or_return.return440 ], [ %err.0.i.i13231608, %or_return.return447 ], [ %err.0.i.i13281611, %or_return.return454 ], [ %718, %or_return.return459 ], [ %err.0.i.i13331614, %or_return.return464 ], [ %729, %or_return.return470 ], [ %err.0.i.i13381617, %or_return.return480 ], [ %err.0.i.i13431620, %or_return.return486 ], [ %err.0.i.i13481623, %or_return.return491 ], [ %767, %or_return.return496 ], [ %770, %or_return.return502 ], [ %err.0.i.i13531626, %or_return.return508 ], [ %err.0.i.i13581629, %or_return.return514 ], [ %err.0.i.i13631632, %or_return.return521 ], [ %err.0.i.i13681635, %or_return.return528 ], [ %816, %or_return.return533 ], [ %err.0.i.i13731638, %or_return.return538 ], [ %827, %or_return.return544 ], [ %err.0.i.i13781641, %or_return.return553 ], [ %846, %or_return.return559 ], [ %849, %or_return.return565 ], [ %err.0.i.i13831644, %or_return.return571 ], [ %862, %or_return.return576 ], [ %err.0.i.i13881647, %or_return.return581 ], [ %err.0.i.i13931650, %or_return.return591 ], [ %err.0.i.i13981653, %or_return.return597 ], [ %899, %or_return.return603 ], [ %err.0.i.i14031656, %or_return.return609 ], [ %926, %or_return.return615 ], [ %932, %or_return.return622 ], [ %err.0.i.i14161666, %or_return.return627 ], [ %946, %or_return.return632 ], [ %951, %or_return.return638 ], [ %err.0.i.i14211669, %or_return.return643 ], [ %964, %or_return.return648 ], [ %err.0.i.i14261672, %or_return.return655 ], [ %978, %or_return.return660 ], [ %981, %or_return.return666 ], [ %err.0.i.i14311675, %or_return.return672 ], [ %995, %or_return.return677 ], [ %998, %or_return.return682 ], [ %1002, %or_return.return687 ], [ %err.0.i.i14361678, %or_return.return693 ], [ %1016, %or_return.return698 ], [ %err.0.i.i14411681, %or_return.return703 ], [ %1028, %or_return.return708 ], [ %err.0.i.i14461684, %or_return.return714 ], [ %1042, %or_return.return719 ], [ %err.0.i.i14511687, %or_return.return724 ], [ %1054, %or_return.return729 ], [ %err.0.i.i14561690, %or_return.return735 ], [ %1068, %or_return.return740 ], [ %err.0.i.i14611693, %or_return.return745 ], [ %1081, %or_return.return750 ], [ %err.0.i.i14661696, %or_return.return755 ], [ %1093, %or_return.return760 ], [ 0, %typeswitch.done ], [ %err.0.i.i1470, %or_return.return ], [ %647, %or_return.continue396 ], [ %660, %or_return.continue410 ], [ %673, %or_return.continue424 ]
  %135 = load i64, ptr %2, align 8
  %136 = add i64 %135, %.sink1822
  store i64 %136, ptr %2, align 8
  br label %common.ret

common.ret:                                       ; preds = %or_return.continue424, %or_return.continue410, %or_return.continue396, %common.ret.sink.split, %typeswitch.done, %or_return.return760, %or_return.return755, %or_return.return750, %or_return.return745, %or_return.return740, %or_return.return735, %or_return.return729, %or_return.return724, %or_return.return719, %or_return.return714, %or_return.return708, %or_return.return703, %or_return.return698, %or_return.return693, %or_return.return687, %or_return.return682, %or_return.return677, %or_return.return672, %or_return.return666, %or_return.return660, %or_return.return655, %or_return.return648, %or_return.return643, %or_return.return638, %or_return.return632, %or_return.return627, %or_return.return622, %or_return.return615, %or_return.return609, %or_return.return603, %or_return.return597, %or_return.return591, %or_return.return581, %or_return.return576, %or_return.return571, %or_return.return565, %or_return.return559, %or_return.return553, %or_return.return544, %or_return.return538, %or_return.return533, %or_return.return528, %or_return.return521, %or_return.return514, %or_return.return508, %or_return.return502, %or_return.return496, %or_return.return491, %or_return.return486, %or_return.return480, %or_return.return470, %or_return.return464, %or_return.return459, %or_return.return454, %or_return.return447, %or_return.return440, %or_return.return434, %or_return.return420, %or_return.return406, %or_return.return392, %or_return.return387, %or_return.return382, %or_return.return374, %or_return.return369, %or_return.return364, %or_return.return359, %or_return.return353, %or_return.return348, %or_return.return342, %or_return.return337, %or_return.return331, %or_return.return326, %or_return.return321, %or_return.return316, %or_return.return310, %or_return.return303, %or_return.return298, %or_return.return293, %or_return.return288, %or_return.return281, %or_return.return274, %or_return.return268, %or_return.return263, %or_return.return255, %or_return.return245, %or_return.return237, %or_return.return232, %or_return.return225, %or_return.return220, %or_return.return214, %or_return.return207, %or_return.return201, %or_return.return195, %or_return.return189, %or_return.return184, %or_return.return178, %or_return.return173, %or_return.return166, %or_return.return161, %or_return.return155, %or_return.return148, %or_return.return142, %or_return.return135, %or_return.return130, %or_return.return124, %or_return.return116, %or_return.return110, %or_return.return103, %or_return.return98, %or_return.return92, %or_return.return87, %or_return.return80, %or_return.return74, %or_return.return67, %or_return.return62, %or_return.return56, %or_return.return49, %or_return.return43, %or_return.return36, %or_return.return31, %or_return.return24, %or_return.return18, %or_return.return12, %or_return.return6, %or_return.continue, %or_return.return
  %common.ret.op = phi i32 [ %err.0.i.i1470, %or_return.return ], [ 0, %or_return.continue ], [ %err.0.i.i11001473, %or_return.return6 ], [ %err.0.i.i11051476, %or_return.return12 ], [ %err.0.i.i11101479, %or_return.return18 ], [ %err.0.i.i11151482, %or_return.return24 ], [ %180, %or_return.return31 ], [ %185, %or_return.return36 ], [ %err.0.i.i11201485, %or_return.return43 ], [ %err.0.i.i11251488, %or_return.return49 ], [ %err.0.i.i11301491, %or_return.return56 ], [ %err.0.i.i11341493, %or_return.return62 ], [ %230, %or_return.return67 ], [ %err.0.i.i11381496, %or_return.return74 ], [ %err.0.i.i11431499, %or_return.return80 ], [ %err.0.i.i11481502, %or_return.return87 ], [ %261, %or_return.return92 ], [ %err.0.i.i11531505, %or_return.return98 ], [ %275, %or_return.return103 ], [ %err.0.i.i11581508, %or_return.return110 ], [ %err.0.i.i11631511, %or_return.return116 ], [ %err.0.i.i11681514, %or_return.return124 ], [ %308, %or_return.return130 ], [ %313, %or_return.return135 ], [ %err.0.i.i11731517, %or_return.return142 ], [ %err.0.i.i11781520, %or_return.return148 ], [ %err.0.i.i11831523, %or_return.return155 ], [ %err.0.i.i11881526, %or_return.return161 ], [ %355, %or_return.return166 ], [ %err.0.i.i11931529, %or_return.return173 ], [ %369, %or_return.return178 ], [ %err.0.i.i11981532, %or_return.return184 ], [ %383, %or_return.return189 ], [ %err.0.i.i12031535, %or_return.return195 ], [ %err.0.i.i12081538, %or_return.return201 ], [ %err.0.i.i12131541, %or_return.return207 ], [ %err.0.i.i12181544, %or_return.return214 ], [ %430, %or_return.return220 ], [ %err.0.i.i12231547, %or_return.return225 ], [ %err.0.i.i12281550, %or_return.return232 ], [ %453, %or_return.return237 ], [ %err.0.i.i12331553, %or_return.return245 ], [ %err.0.i.i12381556, %or_return.return255 ], [ %err.0.i.i12431560, %or_return.return263 ], [ %err.0.i.i12481563, %or_return.return268 ], [ %504, %or_return.return274 ], [ %err.0.i.i12531566, %or_return.return281 ], [ %err.0.i.i12581569, %or_return.return288 ], [ %526, %or_return.return293 ], [ %err.0.i.i12631572, %or_return.return298 ], [ %538, %or_return.return303 ], [ %err.0.i.i12681575, %or_return.return310 ], [ %err.0.i.i12731578, %or_return.return316 ], [ %564, %or_return.return321 ], [ %err.0.i.i12781581, %or_return.return326 ], [ %576, %or_return.return331 ], [ %err.0.i.i12831584, %or_return.return337 ], [ %589, %or_return.return342 ], [ %err.0.i.i12881587, %or_return.return348 ], [ %602, %or_return.return353 ], [ %err.0.i.i12931590, %or_return.return359 ], [ %615, %or_return.return364 ], [ %618, %or_return.return369 ], [ %623, %or_return.return374 ], [ %err.0.i.i12981593, %or_return.return382 ], [ %639, %or_return.return387 ], [ %642, %or_return.return392 ], [ %err.0.i.i13031596, %or_return.return406 ], [ %err.0.i.i13081599, %or_return.return420 ], [ %err.0.i.i13131602, %or_return.return434 ], [ %err.0.i.i13181605, %or_return.return440 ], [ %err.0.i.i13231608, %or_return.return447 ], [ %err.0.i.i13281611, %or_return.return454 ], [ %718, %or_return.return459 ], [ %err.0.i.i13331614, %or_return.return464 ], [ %729, %or_return.return470 ], [ %err.0.i.i13381617, %or_return.return480 ], [ %err.0.i.i13431620, %or_return.return486 ], [ %err.0.i.i13481623, %or_return.return491 ], [ %767, %or_return.return496 ], [ %770, %or_return.return502 ], [ %err.0.i.i13531626, %or_return.return508 ], [ %err.0.i.i13581629, %or_return.return514 ], [ %err.0.i.i13631632, %or_return.return521 ], [ %err.0.i.i13681635, %or_return.return528 ], [ %816, %or_return.return533 ], [ %err.0.i.i13731638, %or_return.return538 ], [ %827, %or_return.return544 ], [ %err.0.i.i13781641, %or_return.return553 ], [ %846, %or_return.return559 ], [ %849, %or_return.return565 ], [ %err.0.i.i13831644, %or_return.return571 ], [ %862, %or_return.return576 ], [ %err.0.i.i13881647, %or_return.return581 ], [ %err.0.i.i13931650, %or_return.return591 ], [ %err.0.i.i13981653, %or_return.return597 ], [ %899, %or_return.return603 ], [ %err.0.i.i14031656, %or_return.return609 ], [ %926, %or_return.return615 ], [ %932, %or_return.return622 ], [ %err.0.i.i14161666, %or_return.return627 ], [ %946, %or_return.return632 ], [ %951, %or_return.return638 ], [ %err.0.i.i14211669, %or_return.return643 ], [ %964, %or_return.return648 ], [ %err.0.i.i14261672, %or_return.return655 ], [ %978, %or_return.return660 ], [ %981, %or_return.return666 ], [ %err.0.i.i14311675, %or_return.return672 ], [ %995, %or_return.return677 ], [ %998, %or_return.return682 ], [ %1002, %or_return.return687 ], [ %err.0.i.i14361678, %or_return.return693 ], [ %1016, %or_return.return698 ], [ %err.0.i.i14411681, %or_return.return703 ], [ %1028, %or_return.return708 ], [ %err.0.i.i14461684, %or_return.return714 ], [ %1042, %or_return.return719 ], [ %err.0.i.i14511687, %or_return.return724 ], [ %1054, %or_return.return729 ], [ %err.0.i.i14561690, %or_return.return735 ], [ %1068, %or_return.return740 ], [ %err.0.i.i14611693, %or_return.return745 ], [ %1081, %or_return.return750 ], [ %err.0.i.i14661696, %or_return.return755 ], [ %1093, %or_return.return760 ], [ 0, %typeswitch.done ], [ %common.ret.op.ph, %common.ret.sink.split ], [ %647, %or_return.continue396 ], [ %660, %or_return.continue410 ], [ %673, %or_return.continue424 ]
  ret i32 %common.ret.op

or_return.continue:                               ; preds = %io.write_string.exit
  store i64 %132, ptr %3, align 8
  %.not1096 = icmp eq ptr %2, null
  br i1 %.not1096, label %common.ret, label %common.ret.sink.split

if.done5:                                         ; preds = %decls
  %137 = getelementptr inbounds %runtime.Type_Info, ptr %1, i64 0, i32 5
  %138 = getelementptr inbounds %runtime.Type_Info, ptr %1, i64 0, i32 5, i32 1
  %139 = load i64, ptr %138, align 8
  switch i64 %139, label %typeswitch.done [
    i64 1, label %typeswitch.body
    i64 2, label %typeswitch.body11
    i64 3, label %typeswitch.body55
    i64 4, label %typeswitch.body61
    i64 5, label %typeswitch.body86
    i64 6, label %typeswitch.body97
    i64 7, label %typeswitch.body108
    i64 8, label %typeswitch.body122
    i64 9, label %typeswitch.body141
    i64 10, label %typeswitch.body147
    i64 11, label %typeswitch.body153
    i64 12, label %typeswitch.body172
    i64 28, label %typeswitch.body183
    i64 13, label %typeswitch.body194
    i64 18, label %typeswitch.body243
    i64 14, label %typeswitch.body287
    i64 15, label %typeswitch.body308
    i64 16, label %typeswitch.body336
    i64 17, label %typeswitch.body347
    i64 22, label %typeswitch.body358
    i64 19, label %typeswitch.body379
    i64 20, label %typeswitch.body507
    i64 21, label %typeswitch.body570
    i64 23, label %typeswitch.body608
    i64 24, label %typeswitch.body671
    i64 25, label %typeswitch.body692
    i64 26, label %typeswitch.body713
    i64 27, label %typeswitch.body734
  ]

typeswitch.body:                                  ; preds = %if.done5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %81, ptr noundef nonnull align 1 dereferenceable(80) %137, i64 80, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %79), !noalias !2230
  %140 = load ptr, ptr %0, align 8, !noalias !2234
  %.not.i.i1097 = icmp eq ptr %140, null
  br i1 %.not.i.i1097, label %io.write_string.exit1101.thread, label %io.write_string.exit1101

io.write_string.exit1101.thread:                  ; preds = %typeswitch.body
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %79), !noalias !2230
  br label %or_return.return6

io.write_string.exit1101:                         ; preds = %typeswitch.body
  %141 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %142 = load ptr, ptr %141, align 8, !noalias !2234
  store i64 0, ptr %79, align 8, !noalias !2234
  %143 = call i32 %140(ptr %142, i64 4, ptr nonnull %81, i64 0, i64 0, ptr nonnull %79, ptr nonnull %__.context_ptr), !noalias !2238
  %144 = load i64, ptr %79, align 8, !noalias !2234
  %145 = load i64, ptr %n, align 8, !noalias !2234
  %146 = add i64 %145, %144
  store i64 %146, ptr %n, align 8, !noalias !2234
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %79), !noalias !2230
  %147 = icmp eq i32 %143, 0
  br i1 %147, label %typeswitch.done, label %or_return.return6

or_return.return6:                                ; preds = %io.write_string.exit1101.thread, %io.write_string.exit1101
  %148 = phi i64 [ 0, %io.write_string.exit1101.thread ], [ %146, %io.write_string.exit1101 ]
  %err.0.i.i11001473 = phi i32 [ -1, %io.write_string.exit1101.thread ], [ %143, %io.write_string.exit1101 ]
  store i64 %148, ptr %3, align 8
  %.not1094 = icmp eq ptr %2, null
  br i1 %.not1094, label %common.ret, label %common.ret.sink.split

typeswitch.body11:                                ; preds = %if.done5
  %149 = load i16, ptr %137, align 1
  store i16 %149, ptr %81, align 8
  %150 = getelementptr inbounds %runtime.Type_Info, ptr %1, i64 0, i32 4
  %151 = load i64, ptr %150, align 8
  switch i64 %151, label %switch.default.body [
    i64 4683743612465315841, label %switch.case.body
    i64 72057594037928043, label %switch.case.body17
    i64 72057594037928005, label %switch.case.body23
  ]

switch.case.body:                                 ; preds = %typeswitch.body11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %78), !noalias !2239
  %152 = load ptr, ptr %0, align 8, !noalias !2243
  %.not.i.i1102 = icmp eq ptr %152, null
  br i1 %.not.i.i1102, label %io.write_string.exit1106.thread, label %io.write_string.exit1106

io.write_string.exit1106.thread:                  ; preds = %switch.case.body
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %78), !noalias !2239
  br label %or_return.return12

io.write_string.exit1106:                         ; preds = %switch.case.body
  %153 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %154 = load ptr, ptr %153, align 8, !noalias !2243
  store i64 0, ptr %78, align 8, !noalias !2243
  %155 = call i32 %152(ptr %154, i64 4, ptr nonnull @"ggv$10d", i64 0, i64 0, ptr nonnull %78, ptr nonnull %__.context_ptr), !noalias !2247
  %156 = load i64, ptr %78, align 8, !noalias !2243
  %157 = load i64, ptr %n, align 8, !noalias !2243
  %158 = add i64 %157, %156
  store i64 %158, ptr %n, align 8, !noalias !2243
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %78), !noalias !2239
  %159 = icmp eq i32 %155, 0
  br i1 %159, label %typeswitch.done, label %or_return.return12

or_return.return12:                               ; preds = %io.write_string.exit1106.thread, %io.write_string.exit1106
  %160 = phi i64 [ 0, %io.write_string.exit1106.thread ], [ %158, %io.write_string.exit1106 ]
  %err.0.i.i11051476 = phi i32 [ -1, %io.write_string.exit1106.thread ], [ %155, %io.write_string.exit1106 ]
  store i64 %160, ptr %3, align 8
  %.not1088 = icmp eq ptr %2, null
  br i1 %.not1088, label %common.ret, label %common.ret.sink.split

switch.case.body17:                               ; preds = %typeswitch.body11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %77), !noalias !2248
  %161 = load ptr, ptr %0, align 8, !noalias !2252
  %.not.i.i1107 = icmp eq ptr %161, null
  br i1 %.not.i.i1107, label %io.write_string.exit1111.thread, label %io.write_string.exit1111

io.write_string.exit1111.thread:                  ; preds = %switch.case.body17
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %77), !noalias !2248
  br label %or_return.return18

io.write_string.exit1111:                         ; preds = %switch.case.body17
  %162 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %163 = load ptr, ptr %162, align 8, !noalias !2252
  store i64 0, ptr %77, align 8, !noalias !2252
  %164 = call i32 %161(ptr %163, i64 4, ptr nonnull @"ggv$10e", i64 0, i64 0, ptr nonnull %77, ptr nonnull %__.context_ptr), !noalias !2256
  %165 = load i64, ptr %77, align 8, !noalias !2252
  %166 = load i64, ptr %n, align 8, !noalias !2252
  %167 = add i64 %166, %165
  store i64 %167, ptr %n, align 8, !noalias !2252
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %77), !noalias !2248
  %168 = icmp eq i32 %164, 0
  br i1 %168, label %typeswitch.done, label %or_return.return18

or_return.return18:                               ; preds = %io.write_string.exit1111.thread, %io.write_string.exit1111
  %169 = phi i64 [ 0, %io.write_string.exit1111.thread ], [ %167, %io.write_string.exit1111 ]
  %err.0.i.i11101479 = phi i32 [ -1, %io.write_string.exit1111.thread ], [ %164, %io.write_string.exit1111 ]
  store i64 %169, ptr %3, align 8
  %.not1087 = icmp eq ptr %2, null
  br i1 %.not1087, label %common.ret, label %common.ret.sink.split

switch.case.body23:                               ; preds = %typeswitch.body11
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %76), !noalias !2257
  %170 = load ptr, ptr %0, align 8, !noalias !2261
  %.not.i.i1112 = icmp eq ptr %170, null
  br i1 %.not.i.i1112, label %io.write_string.exit1116.thread, label %io.write_string.exit1116

io.write_string.exit1116.thread:                  ; preds = %switch.case.body23
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %76), !noalias !2257
  br label %or_return.return24

io.write_string.exit1116:                         ; preds = %switch.case.body23
  %171 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %172 = load ptr, ptr %171, align 8, !noalias !2261
  store i64 0, ptr %76, align 8, !noalias !2261
  %173 = call i32 %170(ptr %172, i64 4, ptr nonnull @"ggv$10f", i64 0, i64 0, ptr nonnull %76, ptr nonnull %__.context_ptr), !noalias !2265
  %174 = load i64, ptr %76, align 8, !noalias !2261
  %175 = load i64, ptr %n, align 8, !noalias !2261
  %176 = add i64 %175, %174
  store i64 %176, ptr %n, align 8, !noalias !2261
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %76), !noalias !2257
  %177 = icmp eq i32 %173, 0
  br i1 %177, label %typeswitch.done, label %or_return.return24

or_return.return24:                               ; preds = %io.write_string.exit1116.thread, %io.write_string.exit1116
  %178 = phi i64 [ 0, %io.write_string.exit1116.thread ], [ %176, %io.write_string.exit1116 ]
  %err.0.i.i11151482 = phi i32 [ -1, %io.write_string.exit1116.thread ], [ %173, %io.write_string.exit1116 ]
  store i64 %178, ptr %3, align 8
  %.not1086 = icmp eq ptr %2, null
  br i1 %.not1086, label %common.ret, label %common.ret.sink.split

switch.default.body:                              ; preds = %typeswitch.body11
  %179 = and i16 %149, 255
  %.not1089 = icmp eq i16 %179, 0
  %. = select i1 %.not1089, i8 117, i8 105
  %180 = call fastcc i32 @io.write_byte(ptr %0, i8 %., ptr nonnull %n, ptr %__.context_ptr)
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %or_return.continue35, label %or_return.return31

or_return.return31:                               ; preds = %switch.default.body
  %182 = load i64, ptr %n, align 8
  store i64 %182, ptr %3, align 8
  %.not1090 = icmp eq ptr %2, null
  br i1 %.not1090, label %common.ret, label %common.ret.sink.split

or_return.continue35:                             ; preds = %switch.default.body
  %183 = load i64, ptr %1, align 8
  %184 = shl i64 %183, 3
  %185 = call fastcc i32 @io.write_i64(ptr %0, i64 %184, ptr nonnull %n, ptr %82, ptr %__.context_ptr)
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %or_return.continue40, label %or_return.return36

or_return.return36:                               ; preds = %or_return.continue35
  %187 = load i64, ptr %n, align 8
  store i64 %187, ptr %3, align 8
  %.not1091 = icmp eq ptr %2, null
  br i1 %.not1091, label %common.ret, label %common.ret.sink.split

or_return.continue40:                             ; preds = %or_return.continue35
  %188 = getelementptr inbounds %runtime.Type_Info_Integer, ptr %81, i64 0, i32 1
  %189 = load i8, ptr %188, align 1
  switch i8 %189, label %typeswitch.done [
    i8 2, label %switch.case.body48
    i8 1, label %switch.case.body42
  ]

switch.case.body42:                               ; preds = %or_return.continue40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %75), !noalias !2266
  %190 = load ptr, ptr %0, align 8, !noalias !2270
  %.not.i.i1117 = icmp eq ptr %190, null
  br i1 %.not.i.i1117, label %io.write_string.exit1121.thread, label %io.write_string.exit1121

io.write_string.exit1121.thread:                  ; preds = %switch.case.body42
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %75), !noalias !2266
  %.pre1775 = load i64, ptr %n, align 8
  br label %or_return.return43

io.write_string.exit1121:                         ; preds = %switch.case.body42
  %191 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %192 = load ptr, ptr %191, align 8, !noalias !2270
  store i64 0, ptr %75, align 8, !noalias !2270
  %193 = call i32 %190(ptr %192, i64 4, ptr nonnull @"ggv$113", i64 0, i64 0, ptr nonnull %75, ptr nonnull %__.context_ptr), !noalias !2274
  %194 = load i64, ptr %75, align 8, !noalias !2270
  %195 = load i64, ptr %n, align 8, !noalias !2270
  %196 = add i64 %195, %194
  store i64 %196, ptr %n, align 8, !noalias !2270
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %75), !noalias !2266
  %197 = icmp eq i32 %193, 0
  br i1 %197, label %typeswitch.done, label %or_return.return43

or_return.return43:                               ; preds = %io.write_string.exit1121.thread, %io.write_string.exit1121
  %198 = phi i64 [ %.pre1775, %io.write_string.exit1121.thread ], [ %196, %io.write_string.exit1121 ]
  %err.0.i.i11201485 = phi i32 [ -1, %io.write_string.exit1121.thread ], [ %193, %io.write_string.exit1121 ]
  store i64 %198, ptr %3, align 8
  %.not1092 = icmp eq ptr %2, null
  br i1 %.not1092, label %common.ret, label %common.ret.sink.split

switch.case.body48:                               ; preds = %or_return.continue40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %74), !noalias !2275
  %199 = load ptr, ptr %0, align 8, !noalias !2279
  %.not.i.i1122 = icmp eq ptr %199, null
  br i1 %.not.i.i1122, label %io.write_string.exit1126.thread, label %io.write_string.exit1126

io.write_string.exit1126.thread:                  ; preds = %switch.case.body48
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %74), !noalias !2275
  %.pre1776 = load i64, ptr %n, align 8
  br label %or_return.return49

io.write_string.exit1126:                         ; preds = %switch.case.body48
  %200 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %201 = load ptr, ptr %200, align 8, !noalias !2279
  store i64 0, ptr %74, align 8, !noalias !2279
  %202 = call i32 %199(ptr %201, i64 4, ptr nonnull @"ggv$114", i64 0, i64 0, ptr nonnull %74, ptr nonnull %__.context_ptr), !noalias !2283
  %203 = load i64, ptr %74, align 8, !noalias !2279
  %204 = load i64, ptr %n, align 8, !noalias !2279
  %205 = add i64 %204, %203
  store i64 %205, ptr %n, align 8, !noalias !2279
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %74), !noalias !2275
  %206 = icmp eq i32 %202, 0
  br i1 %206, label %typeswitch.done, label %or_return.return49

or_return.return49:                               ; preds = %io.write_string.exit1126.thread, %io.write_string.exit1126
  %207 = phi i64 [ %.pre1776, %io.write_string.exit1126.thread ], [ %205, %io.write_string.exit1126 ]
  %err.0.i.i11251488 = phi i32 [ -1, %io.write_string.exit1126.thread ], [ %202, %io.write_string.exit1126 ]
  store i64 %207, ptr %3, align 8
  %.not1093 = icmp eq ptr %2, null
  br i1 %.not1093, label %common.ret, label %common.ret.sink.split

typeswitch.body55:                                ; preds = %if.done5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %73), !noalias !2284
  %208 = load ptr, ptr %0, align 8, !noalias !2288
  %.not.i.i1127 = icmp eq ptr %208, null
  br i1 %.not.i.i1127, label %io.write_string.exit1131.thread, label %io.write_string.exit1131

io.write_string.exit1131.thread:                  ; preds = %typeswitch.body55
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %73), !noalias !2284
  br label %or_return.return56

io.write_string.exit1131:                         ; preds = %typeswitch.body55
  %209 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %210 = load ptr, ptr %209, align 8, !noalias !2288
  store i64 0, ptr %73, align 8, !noalias !2288
  %211 = call i32 %208(ptr %210, i64 4, ptr nonnull @"ggv$112", i64 0, i64 0, ptr nonnull %73, ptr nonnull %__.context_ptr), !noalias !2292
  %212 = load i64, ptr %73, align 8, !noalias !2288
  %213 = load i64, ptr %n, align 8, !noalias !2288
  %214 = add i64 %213, %212
  store i64 %214, ptr %n, align 8, !noalias !2288
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %73), !noalias !2284
  %215 = icmp eq i32 %211, 0
  br i1 %215, label %typeswitch.done, label %or_return.return56

or_return.return56:                               ; preds = %io.write_string.exit1131.thread, %io.write_string.exit1131
  %216 = phi i64 [ 0, %io.write_string.exit1131.thread ], [ %214, %io.write_string.exit1131 ]
  %err.0.i.i11301491 = phi i32 [ -1, %io.write_string.exit1131.thread ], [ %211, %io.write_string.exit1131 ]
  store i64 %216, ptr %3, align 8
  %.not1085 = icmp eq ptr %2, null
  br i1 %.not1085, label %common.ret, label %common.ret.sink.split

typeswitch.body61:                                ; preds = %if.done5
  %217 = load i8, ptr %137, align 1
  store i8 %217, ptr %81, align 8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %72)
  store i8 102, ptr %buf.i, align 1, !noalias !2293
  store ptr %buf.i, ptr %72, align 8, !noalias !2293
  %218 = getelementptr inbounds { ptr, i64 }, ptr %72, i64 0, i32 1
  store i64 1, ptr %218, align 8, !noalias !2293
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %71), !noalias !2293
  %219 = load ptr, ptr %0, align 8, !noalias !2296
  %.not.i.i1132 = icmp eq ptr %219, null
  br i1 %.not.i.i1132, label %io.write_byte.exit.thread, label %io.write_byte.exit

io.write_byte.exit.thread:                        ; preds = %typeswitch.body61
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %71), !noalias !2293
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %72)
  br label %or_return.return62

io.write_byte.exit:                               ; preds = %typeswitch.body61
  %220 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %221 = load ptr, ptr %220, align 8, !noalias !2296
  store i64 0, ptr %71, align 8, !noalias !2296
  %222 = call i32 %219(ptr %221, i64 4, ptr nonnull %72, i64 0, i64 0, ptr nonnull %71, ptr nonnull %__.context_ptr), !noalias !2300
  %223 = load i64, ptr %71, align 8, !noalias !2296
  %224 = load i64, ptr %n, align 8, !noalias !2296
  %225 = add i64 %224, %223
  store i64 %225, ptr %n, align 8, !noalias !2296
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %71), !noalias !2293
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %72)
  %226 = icmp eq i32 %222, 0
  br i1 %226, label %or_return.continue66, label %or_return.return62

or_return.return62:                               ; preds = %io.write_byte.exit.thread, %io.write_byte.exit
  %227 = phi i64 [ 0, %io.write_byte.exit.thread ], [ %225, %io.write_byte.exit ]
  %err.0.i.i11341493 = phi i32 [ -1, %io.write_byte.exit.thread ], [ %222, %io.write_byte.exit ]
  store i64 %227, ptr %3, align 8
  %.not1081 = icmp eq ptr %2, null
  br i1 %.not1081, label %common.ret, label %common.ret.sink.split

or_return.continue66:                             ; preds = %io.write_byte.exit
  %228 = load i64, ptr %1, align 8
  %229 = shl i64 %228, 3
  %230 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %229, ptr nonnull %n, ptr %83, ptr %__.context_ptr)
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %or_return.continue71, label %or_return.return67

or_return.return67:                               ; preds = %or_return.continue66
  %232 = load i64, ptr %n, align 8
  store i64 %232, ptr %3, align 8
  %.not1082 = icmp eq ptr %2, null
  br i1 %.not1082, label %common.ret, label %common.ret.sink.split

or_return.continue71:                             ; preds = %or_return.continue66
  %233 = load i8, ptr %81, align 8
  switch i8 %233, label %typeswitch.done [
    i8 2, label %switch.case.body79
    i8 1, label %switch.case.body73
  ]

switch.case.body73:                               ; preds = %or_return.continue71
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %70), !noalias !2301
  %234 = load ptr, ptr %0, align 8, !noalias !2305
  %.not.i.i1135 = icmp eq ptr %234, null
  br i1 %.not.i.i1135, label %io.write_string.exit1139.thread, label %io.write_string.exit1139

io.write_string.exit1139.thread:                  ; preds = %switch.case.body73
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %70), !noalias !2301
  %.pre1773 = load i64, ptr %n, align 8
  br label %or_return.return74

io.write_string.exit1139:                         ; preds = %switch.case.body73
  %235 = load ptr, ptr %220, align 8, !noalias !2305
  store i64 0, ptr %70, align 8, !noalias !2305
  %236 = call i32 %234(ptr %235, i64 4, ptr nonnull @"ggv$113", i64 0, i64 0, ptr nonnull %70, ptr nonnull %__.context_ptr), !noalias !2309
  %237 = load i64, ptr %70, align 8, !noalias !2305
  %238 = load i64, ptr %n, align 8, !noalias !2305
  %239 = add i64 %238, %237
  store i64 %239, ptr %n, align 8, !noalias !2305
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %70), !noalias !2301
  %240 = icmp eq i32 %236, 0
  br i1 %240, label %typeswitch.done, label %or_return.return74

or_return.return74:                               ; preds = %io.write_string.exit1139.thread, %io.write_string.exit1139
  %241 = phi i64 [ %.pre1773, %io.write_string.exit1139.thread ], [ %239, %io.write_string.exit1139 ]
  %err.0.i.i11381496 = phi i32 [ -1, %io.write_string.exit1139.thread ], [ %236, %io.write_string.exit1139 ]
  store i64 %241, ptr %3, align 8
  %.not1083 = icmp eq ptr %2, null
  br i1 %.not1083, label %common.ret, label %common.ret.sink.split

switch.case.body79:                               ; preds = %or_return.continue71
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %69), !noalias !2310
  %242 = load ptr, ptr %0, align 8, !noalias !2314
  %.not.i.i1140 = icmp eq ptr %242, null
  br i1 %.not.i.i1140, label %io.write_string.exit1144.thread, label %io.write_string.exit1144

io.write_string.exit1144.thread:                  ; preds = %switch.case.body79
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %69), !noalias !2310
  %.pre1774 = load i64, ptr %n, align 8
  br label %or_return.return80

io.write_string.exit1144:                         ; preds = %switch.case.body79
  %243 = load ptr, ptr %220, align 8, !noalias !2314
  store i64 0, ptr %69, align 8, !noalias !2314
  %244 = call i32 %242(ptr %243, i64 4, ptr nonnull @"ggv$114", i64 0, i64 0, ptr nonnull %69, ptr nonnull %__.context_ptr), !noalias !2318
  %245 = load i64, ptr %69, align 8, !noalias !2314
  %246 = load i64, ptr %n, align 8, !noalias !2314
  %247 = add i64 %246, %245
  store i64 %247, ptr %n, align 8, !noalias !2314
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %69), !noalias !2310
  %248 = icmp eq i32 %244, 0
  br i1 %248, label %typeswitch.done, label %or_return.return80

or_return.return80:                               ; preds = %io.write_string.exit1144.thread, %io.write_string.exit1144
  %249 = phi i64 [ %.pre1774, %io.write_string.exit1144.thread ], [ %247, %io.write_string.exit1144 ]
  %err.0.i.i11431499 = phi i32 [ -1, %io.write_string.exit1144.thread ], [ %244, %io.write_string.exit1144 ]
  store i64 %249, ptr %3, align 8
  %.not1084 = icmp eq ptr %2, null
  br i1 %.not1084, label %common.ret, label %common.ret.sink.split

typeswitch.body86:                                ; preds = %if.done5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %68), !noalias !2319
  %250 = load ptr, ptr %0, align 8, !noalias !2323
  %.not.i.i1145 = icmp eq ptr %250, null
  br i1 %.not.i.i1145, label %io.write_string.exit1149.thread, label %io.write_string.exit1149

io.write_string.exit1149.thread:                  ; preds = %typeswitch.body86
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68), !noalias !2319
  br label %or_return.return87

io.write_string.exit1149:                         ; preds = %typeswitch.body86
  %251 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %252 = load ptr, ptr %251, align 8, !noalias !2323
  store i64 0, ptr %68, align 8, !noalias !2323
  %253 = call i32 %250(ptr %252, i64 4, ptr nonnull @"ggv$115", i64 0, i64 0, ptr nonnull %68, ptr nonnull %__.context_ptr), !noalias !2327
  %254 = load i64, ptr %68, align 8, !noalias !2323
  %255 = load i64, ptr %n, align 8, !noalias !2323
  %256 = add i64 %255, %254
  store i64 %256, ptr %n, align 8, !noalias !2323
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %68), !noalias !2319
  %257 = icmp eq i32 %253, 0
  br i1 %257, label %or_return.continue91, label %or_return.return87

or_return.return87:                               ; preds = %io.write_string.exit1149.thread, %io.write_string.exit1149
  %258 = phi i64 [ 0, %io.write_string.exit1149.thread ], [ %256, %io.write_string.exit1149 ]
  %err.0.i.i11481502 = phi i32 [ -1, %io.write_string.exit1149.thread ], [ %253, %io.write_string.exit1149 ]
  store i64 %258, ptr %3, align 8
  %.not1079 = icmp eq ptr %2, null
  br i1 %.not1079, label %common.ret, label %common.ret.sink.split

or_return.continue91:                             ; preds = %io.write_string.exit1149
  %259 = load i64, ptr %1, align 8
  %260 = shl i64 %259, 3
  %261 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %260, ptr nonnull %n, ptr %84, ptr %__.context_ptr)
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %typeswitch.done, label %or_return.return92

or_return.return92:                               ; preds = %or_return.continue91
  %263 = load i64, ptr %n, align 8
  store i64 %263, ptr %3, align 8
  %.not1080 = icmp eq ptr %2, null
  br i1 %.not1080, label %common.ret, label %common.ret.sink.split

typeswitch.body97:                                ; preds = %if.done5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %67), !noalias !2328
  %264 = load ptr, ptr %0, align 8, !noalias !2332
  %.not.i.i1150 = icmp eq ptr %264, null
  br i1 %.not.i.i1150, label %io.write_string.exit1154.thread, label %io.write_string.exit1154

io.write_string.exit1154.thread:                  ; preds = %typeswitch.body97
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %67), !noalias !2328
  br label %or_return.return98

io.write_string.exit1154:                         ; preds = %typeswitch.body97
  %265 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %266 = load ptr, ptr %265, align 8, !noalias !2332
  store i64 0, ptr %67, align 8, !noalias !2332
  %267 = call i32 %264(ptr %266, i64 4, ptr nonnull @"ggv$116", i64 0, i64 0, ptr nonnull %67, ptr nonnull %__.context_ptr), !noalias !2336
  %268 = load i64, ptr %67, align 8, !noalias !2332
  %269 = load i64, ptr %n, align 8, !noalias !2332
  %270 = add i64 %269, %268
  store i64 %270, ptr %n, align 8, !noalias !2332
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %67), !noalias !2328
  %271 = icmp eq i32 %267, 0
  br i1 %271, label %or_return.continue102, label %or_return.return98

or_return.return98:                               ; preds = %io.write_string.exit1154.thread, %io.write_string.exit1154
  %272 = phi i64 [ 0, %io.write_string.exit1154.thread ], [ %270, %io.write_string.exit1154 ]
  %err.0.i.i11531505 = phi i32 [ -1, %io.write_string.exit1154.thread ], [ %267, %io.write_string.exit1154 ]
  store i64 %272, ptr %3, align 8
  %.not1077 = icmp eq ptr %2, null
  br i1 %.not1077, label %common.ret, label %common.ret.sink.split

or_return.continue102:                            ; preds = %io.write_string.exit1154
  %273 = load i64, ptr %1, align 8
  %274 = shl i64 %273, 3
  %275 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %274, ptr nonnull %n, ptr %85, ptr %__.context_ptr)
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %typeswitch.done, label %or_return.return103

or_return.return103:                              ; preds = %or_return.continue102
  %277 = load i64, ptr %n, align 8
  store i64 %277, ptr %3, align 8
  %.not1078 = icmp eq ptr %2, null
  br i1 %.not1078, label %common.ret, label %common.ret.sink.split

typeswitch.body108:                               ; preds = %if.done5
  %278 = load i8, ptr %137, align 1
  store i8 %278, ptr %81, align 8
  %.not1074 = icmp eq i8 %278, 0
  br i1 %.not1074, label %if.else115, label %if.then109

if.then109:                                       ; preds = %typeswitch.body108
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %66), !noalias !2337
  %279 = load ptr, ptr %0, align 8, !noalias !2341
  %.not.i.i1155 = icmp eq ptr %279, null
  br i1 %.not.i.i1155, label %io.write_string.exit1159.thread, label %io.write_string.exit1159

io.write_string.exit1159.thread:                  ; preds = %if.then109
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %66), !noalias !2337
  br label %or_return.return110

io.write_string.exit1159:                         ; preds = %if.then109
  %280 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %281 = load ptr, ptr %280, align 8, !noalias !2341
  store i64 0, ptr %66, align 8, !noalias !2341
  %282 = call i32 %279(ptr %281, i64 4, ptr nonnull @"ggv$117", i64 0, i64 0, ptr nonnull %66, ptr nonnull %__.context_ptr), !noalias !2345
  %283 = load i64, ptr %66, align 8, !noalias !2341
  %284 = load i64, ptr %n, align 8, !noalias !2341
  %285 = add i64 %284, %283
  store i64 %285, ptr %n, align 8, !noalias !2341
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %66), !noalias !2337
  %286 = icmp eq i32 %282, 0
  br i1 %286, label %typeswitch.done, label %or_return.return110

or_return.return110:                              ; preds = %io.write_string.exit1159.thread, %io.write_string.exit1159
  %287 = phi i64 [ 0, %io.write_string.exit1159.thread ], [ %285, %io.write_string.exit1159 ]
  %err.0.i.i11581508 = phi i32 [ -1, %io.write_string.exit1159.thread ], [ %282, %io.write_string.exit1159 ]
  store i64 %287, ptr %3, align 8
  %.not1076 = icmp eq ptr %2, null
  br i1 %.not1076, label %common.ret, label %common.ret.sink.split

if.else115:                                       ; preds = %typeswitch.body108
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %65), !noalias !2346
  %288 = load ptr, ptr %0, align 8, !noalias !2350
  %.not.i.i1160 = icmp eq ptr %288, null
  br i1 %.not.i.i1160, label %io.write_string.exit1164.thread, label %io.write_string.exit1164

io.write_string.exit1164.thread:                  ; preds = %if.else115
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %65), !noalias !2346
  br label %or_return.return116

io.write_string.exit1164:                         ; preds = %if.else115
  %289 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %290 = load ptr, ptr %289, align 8, !noalias !2350
  store i64 0, ptr %65, align 8, !noalias !2350
  %291 = call i32 %288(ptr %290, i64 4, ptr nonnull @"ggv$118", i64 0, i64 0, ptr nonnull %65, ptr nonnull %__.context_ptr), !noalias !2354
  %292 = load i64, ptr %65, align 8, !noalias !2350
  %293 = load i64, ptr %n, align 8, !noalias !2350
  %294 = add i64 %293, %292
  store i64 %294, ptr %n, align 8, !noalias !2350
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %65), !noalias !2346
  %295 = icmp eq i32 %291, 0
  br i1 %295, label %typeswitch.done, label %or_return.return116

or_return.return116:                              ; preds = %io.write_string.exit1164.thread, %io.write_string.exit1164
  %296 = phi i64 [ 0, %io.write_string.exit1164.thread ], [ %294, %io.write_string.exit1164 ]
  %err.0.i.i11631511 = phi i32 [ -1, %io.write_string.exit1164.thread ], [ %291, %io.write_string.exit1164 ]
  store i64 %296, ptr %3, align 8
  %.not1075 = icmp eq ptr %2, null
  br i1 %.not1075, label %common.ret, label %common.ret.sink.split

typeswitch.body122:                               ; preds = %if.done5
  %297 = getelementptr inbounds %runtime.Type_Info, ptr %1, i64 0, i32 4
  %298 = load i64, ptr %297, align 8
  %cond = icmp eq i64 %298, 504403158265495582
  br i1 %cond, label %switch.case.body123, label %switch.default.body129

switch.case.body123:                              ; preds = %typeswitch.body122
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %64), !noalias !2355
  %299 = load ptr, ptr %0, align 8, !noalias !2359
  %.not.i.i1165 = icmp eq ptr %299, null
  br i1 %.not.i.i1165, label %io.write_string.exit1169.thread, label %io.write_string.exit1169

io.write_string.exit1169.thread:                  ; preds = %switch.case.body123
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %64), !noalias !2355
  br label %or_return.return124

io.write_string.exit1169:                         ; preds = %switch.case.body123
  %300 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %301 = load ptr, ptr %300, align 8, !noalias !2359
  store i64 0, ptr %64, align 8, !noalias !2359
  %302 = call i32 %299(ptr %301, i64 4, ptr nonnull @"ggv$119", i64 0, i64 0, ptr nonnull %64, ptr nonnull %__.context_ptr), !noalias !2363
  %303 = load i64, ptr %64, align 8, !noalias !2359
  %304 = load i64, ptr %n, align 8, !noalias !2359
  %305 = add i64 %304, %303
  store i64 %305, ptr %n, align 8, !noalias !2359
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %64), !noalias !2355
  %306 = icmp eq i32 %302, 0
  br i1 %306, label %typeswitch.done, label %or_return.return124

or_return.return124:                              ; preds = %io.write_string.exit1169.thread, %io.write_string.exit1169
  %307 = phi i64 [ 0, %io.write_string.exit1169.thread ], [ %305, %io.write_string.exit1169 ]
  %err.0.i.i11681514 = phi i32 [ -1, %io.write_string.exit1169.thread ], [ %302, %io.write_string.exit1169 ]
  store i64 %307, ptr %3, align 8
  %.not1073 = icmp eq ptr %2, null
  br i1 %.not1073, label %common.ret, label %common.ret.sink.split

switch.default.body129:                           ; preds = %typeswitch.body122
  %308 = call fastcc i32 @io.write_byte(ptr %0, i8 98, ptr nonnull %n, ptr %__.context_ptr)
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %or_return.continue134, label %or_return.return130

or_return.return130:                              ; preds = %switch.default.body129
  %310 = load i64, ptr %n, align 8
  store i64 %310, ptr %3, align 8
  %.not1071 = icmp eq ptr %2, null
  br i1 %.not1071, label %common.ret, label %common.ret.sink.split

or_return.continue134:                            ; preds = %switch.default.body129
  %311 = load i64, ptr %1, align 8
  %312 = shl i64 %311, 3
  %313 = call fastcc i32 @io.write_i64(ptr %0, i64 %312, ptr nonnull %n, ptr %86, ptr %__.context_ptr)
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %typeswitch.done, label %or_return.return135

or_return.return135:                              ; preds = %or_return.continue134
  %315 = load i64, ptr %n, align 8
  store i64 %315, ptr %3, align 8
  %.not1072 = icmp eq ptr %2, null
  br i1 %.not1072, label %common.ret, label %common.ret.sink.split

typeswitch.body141:                               ; preds = %if.done5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %63), !noalias !2364
  %316 = load ptr, ptr %0, align 8, !noalias !2368
  %.not.i.i1170 = icmp eq ptr %316, null
  br i1 %.not.i.i1170, label %io.write_string.exit1174.thread, label %io.write_string.exit1174

io.write_string.exit1174.thread:                  ; preds = %typeswitch.body141
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %63), !noalias !2364
  br label %or_return.return142

io.write_string.exit1174:                         ; preds = %typeswitch.body141
  %317 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %318 = load ptr, ptr %317, align 8, !noalias !2368
  store i64 0, ptr %63, align 8, !noalias !2368
  %319 = call i32 %316(ptr %318, i64 4, ptr nonnull @"ggv$11a", i64 0, i64 0, ptr nonnull %63, ptr nonnull %__.context_ptr), !noalias !2372
  %320 = load i64, ptr %63, align 8, !noalias !2368
  %321 = load i64, ptr %n, align 8, !noalias !2368
  %322 = add i64 %321, %320
  store i64 %322, ptr %n, align 8, !noalias !2368
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %63), !noalias !2364
  %323 = icmp eq i32 %319, 0
  br i1 %323, label %typeswitch.done, label %or_return.return142

or_return.return142:                              ; preds = %io.write_string.exit1174.thread, %io.write_string.exit1174
  %324 = phi i64 [ 0, %io.write_string.exit1174.thread ], [ %322, %io.write_string.exit1174 ]
  %err.0.i.i11731517 = phi i32 [ -1, %io.write_string.exit1174.thread ], [ %319, %io.write_string.exit1174 ]
  store i64 %324, ptr %3, align 8
  %.not1070 = icmp eq ptr %2, null
  br i1 %.not1070, label %common.ret, label %common.ret.sink.split

typeswitch.body147:                               ; preds = %if.done5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %62), !noalias !2373
  %325 = load ptr, ptr %0, align 8, !noalias !2377
  %.not.i.i1175 = icmp eq ptr %325, null
  br i1 %.not.i.i1175, label %io.write_string.exit1179.thread, label %io.write_string.exit1179

io.write_string.exit1179.thread:                  ; preds = %typeswitch.body147
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %62), !noalias !2373
  br label %or_return.return148

io.write_string.exit1179:                         ; preds = %typeswitch.body147
  %326 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %327 = load ptr, ptr %326, align 8, !noalias !2377
  store i64 0, ptr %62, align 8, !noalias !2377
  %328 = call i32 %325(ptr %327, i64 4, ptr nonnull @"ggv$11b", i64 0, i64 0, ptr nonnull %62, ptr nonnull %__.context_ptr), !noalias !2381
  %329 = load i64, ptr %62, align 8, !noalias !2377
  %330 = load i64, ptr %n, align 8, !noalias !2377
  %331 = add i64 %330, %329
  store i64 %331, ptr %n, align 8, !noalias !2377
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %62), !noalias !2373
  %332 = icmp eq i32 %328, 0
  br i1 %332, label %typeswitch.done, label %or_return.return148

or_return.return148:                              ; preds = %io.write_string.exit1179.thread, %io.write_string.exit1179
  %333 = phi i64 [ 0, %io.write_string.exit1179.thread ], [ %331, %io.write_string.exit1179 ]
  %err.0.i.i11781520 = phi i32 [ -1, %io.write_string.exit1179.thread ], [ %328, %io.write_string.exit1179 ]
  store i64 %333, ptr %3, align 8
  %.not1069 = icmp eq ptr %2, null
  br i1 %.not1069, label %common.ret, label %common.ret.sink.split

typeswitch.body153:                               ; preds = %if.done5
  %334 = load i64, ptr %137, align 1
  store i64 %334, ptr %81, align 8
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %if.then154, label %if.else160

if.then154:                                       ; preds = %typeswitch.body153
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %61), !noalias !2382
  %336 = load ptr, ptr %0, align 8, !noalias !2386
  %.not.i.i1180 = icmp eq ptr %336, null
  br i1 %.not.i.i1180, label %io.write_string.exit1184.thread, label %io.write_string.exit1184

io.write_string.exit1184.thread:                  ; preds = %if.then154
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %61), !noalias !2382
  br label %or_return.return155

io.write_string.exit1184:                         ; preds = %if.then154
  %337 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %338 = load ptr, ptr %337, align 8, !noalias !2386
  store i64 0, ptr %61, align 8, !noalias !2386
  %339 = call i32 %336(ptr %338, i64 4, ptr nonnull @"ggv$11c", i64 0, i64 0, ptr nonnull %61, ptr nonnull %__.context_ptr), !noalias !2390
  %340 = load i64, ptr %61, align 8, !noalias !2386
  %341 = load i64, ptr %n, align 8, !noalias !2386
  %342 = add i64 %341, %340
  store i64 %342, ptr %n, align 8, !noalias !2386
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %61), !noalias !2382
  %343 = icmp eq i32 %339, 0
  br i1 %343, label %typeswitch.done, label %or_return.return155

or_return.return155:                              ; preds = %io.write_string.exit1184.thread, %io.write_string.exit1184
  %344 = phi i64 [ 0, %io.write_string.exit1184.thread ], [ %342, %io.write_string.exit1184 ]
  %err.0.i.i11831523 = phi i32 [ -1, %io.write_string.exit1184.thread ], [ %339, %io.write_string.exit1184 ]
  store i64 %344, ptr %3, align 8
  %.not1068 = icmp eq ptr %2, null
  br i1 %.not1068, label %common.ret, label %common.ret.sink.split

if.else160:                                       ; preds = %typeswitch.body153
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %60), !noalias !2391
  %345 = load ptr, ptr %0, align 8, !noalias !2395
  %.not.i.i1185 = icmp eq ptr %345, null
  br i1 %.not.i.i1185, label %io.write_string.exit1189.thread, label %io.write_string.exit1189

io.write_string.exit1189.thread:                  ; preds = %if.else160
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %60), !noalias !2391
  br label %or_return.return161

io.write_string.exit1189:                         ; preds = %if.else160
  %346 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %347 = load ptr, ptr %346, align 8, !noalias !2395
  store i64 0, ptr %60, align 8, !noalias !2395
  %348 = call i32 %345(ptr %347, i64 4, ptr nonnull @"ggv$11d", i64 0, i64 0, ptr nonnull %60, ptr nonnull %__.context_ptr), !noalias !2399
  %349 = load i64, ptr %60, align 8, !noalias !2395
  %350 = load i64, ptr %n, align 8, !noalias !2395
  %351 = add i64 %350, %349
  store i64 %351, ptr %n, align 8, !noalias !2395
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %60), !noalias !2391
  %352 = icmp eq i32 %348, 0
  br i1 %352, label %or_return.continue165, label %or_return.return161

or_return.return161:                              ; preds = %io.write_string.exit1189.thread, %io.write_string.exit1189
  %353 = phi i64 [ 0, %io.write_string.exit1189.thread ], [ %351, %io.write_string.exit1189 ]
  %err.0.i.i11881526 = phi i32 [ -1, %io.write_string.exit1189.thread ], [ %348, %io.write_string.exit1189 ]
  store i64 %353, ptr %3, align 8
  %.not1066 = icmp eq ptr %2, null
  br i1 %.not1066, label %common.ret, label %common.ret.sink.split

or_return.continue165:                            ; preds = %io.write_string.exit1189
  %354 = load ptr, ptr %81, align 8
  store i64 0, ptr %87, align 8
  %355 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %354, ptr nonnull %n, ptr %87, ptr %__.context_ptr)
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %typeswitch.done, label %or_return.return166

or_return.return166:                              ; preds = %or_return.continue165
  %357 = load i64, ptr %n, align 8
  store i64 %357, ptr %3, align 8
  %.not1067 = icmp eq ptr %2, null
  br i1 %.not1067, label %common.ret, label %common.ret.sink.split

typeswitch.body172:                               ; preds = %if.done5
  %358 = load i64, ptr %137, align 1
  store i64 %358, ptr %81, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %59), !noalias !2400
  %359 = load ptr, ptr %0, align 8, !noalias !2404
  %.not.i.i1190 = icmp eq ptr %359, null
  br i1 %.not.i.i1190, label %io.write_string.exit1194.thread, label %io.write_string.exit1194

io.write_string.exit1194.thread:                  ; preds = %typeswitch.body172
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %59), !noalias !2400
  br label %or_return.return173

io.write_string.exit1194:                         ; preds = %typeswitch.body172
  %360 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %361 = load ptr, ptr %360, align 8, !noalias !2404
  store i64 0, ptr %59, align 8, !noalias !2404
  %362 = call i32 %359(ptr %361, i64 4, ptr nonnull @"ggv$11e", i64 0, i64 0, ptr nonnull %59, ptr nonnull %__.context_ptr), !noalias !2408
  %363 = load i64, ptr %59, align 8, !noalias !2404
  %364 = load i64, ptr %n, align 8, !noalias !2404
  %365 = add i64 %364, %363
  store i64 %365, ptr %n, align 8, !noalias !2404
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %59), !noalias !2400
  %366 = icmp eq i32 %362, 0
  br i1 %366, label %or_return.continue177, label %or_return.return173

or_return.return173:                              ; preds = %io.write_string.exit1194.thread, %io.write_string.exit1194
  %367 = phi i64 [ 0, %io.write_string.exit1194.thread ], [ %365, %io.write_string.exit1194 ]
  %err.0.i.i11931529 = phi i32 [ -1, %io.write_string.exit1194.thread ], [ %362, %io.write_string.exit1194 ]
  store i64 %367, ptr %3, align 8
  %.not1064 = icmp eq ptr %2, null
  br i1 %.not1064, label %common.ret, label %common.ret.sink.split

or_return.continue177:                            ; preds = %io.write_string.exit1194
  %368 = load ptr, ptr %81, align 8
  store i64 0, ptr %88, align 8
  %369 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %368, ptr nonnull %n, ptr %88, ptr %__.context_ptr)
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %typeswitch.done, label %or_return.return178

or_return.return178:                              ; preds = %or_return.continue177
  %371 = load i64, ptr %n, align 8
  store i64 %371, ptr %3, align 8
  %.not1065 = icmp eq ptr %2, null
  br i1 %.not1065, label %common.ret, label %common.ret.sink.split

typeswitch.body183:                               ; preds = %if.done5
  %372 = load i64, ptr %137, align 1
  store i64 %372, ptr %81, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %58), !noalias !2409
  %373 = load ptr, ptr %0, align 8, !noalias !2413
  %.not.i.i1195 = icmp eq ptr %373, null
  br i1 %.not.i.i1195, label %io.write_string.exit1199.thread, label %io.write_string.exit1199

io.write_string.exit1199.thread:                  ; preds = %typeswitch.body183
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %58), !noalias !2409
  br label %or_return.return184

io.write_string.exit1199:                         ; preds = %typeswitch.body183
  %374 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %375 = load ptr, ptr %374, align 8, !noalias !2413
  store i64 0, ptr %58, align 8, !noalias !2413
  %376 = call i32 %373(ptr %375, i64 4, ptr nonnull @"ggv$11f", i64 0, i64 0, ptr nonnull %58, ptr nonnull %__.context_ptr), !noalias !2417
  %377 = load i64, ptr %58, align 8, !noalias !2413
  %378 = load i64, ptr %n, align 8, !noalias !2413
  %379 = add i64 %378, %377
  store i64 %379, ptr %n, align 8, !noalias !2413
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %58), !noalias !2409
  %380 = icmp eq i32 %376, 0
  br i1 %380, label %or_return.continue188, label %or_return.return184

or_return.return184:                              ; preds = %io.write_string.exit1199.thread, %io.write_string.exit1199
  %381 = phi i64 [ 0, %io.write_string.exit1199.thread ], [ %379, %io.write_string.exit1199 ]
  %err.0.i.i11981532 = phi i32 [ -1, %io.write_string.exit1199.thread ], [ %376, %io.write_string.exit1199 ]
  store i64 %381, ptr %3, align 8
  %.not1062 = icmp eq ptr %2, null
  br i1 %.not1062, label %common.ret, label %common.ret.sink.split

or_return.continue188:                            ; preds = %io.write_string.exit1199
  %382 = load ptr, ptr %81, align 8
  store i64 0, ptr %89, align 8
  %383 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %382, ptr nonnull %n, ptr %89, ptr %__.context_ptr)
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %typeswitch.done, label %or_return.return189

or_return.return189:                              ; preds = %or_return.continue188
  %385 = load i64, ptr %n, align 8
  store i64 %385, ptr %3, align 8
  %.not1063 = icmp eq ptr %2, null
  br i1 %.not1063, label %common.ret, label %common.ret.sink.split

typeswitch.body194:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %57), !noalias !2418
  %386 = load ptr, ptr %0, align 8, !noalias !2422
  %.not.i.i1200 = icmp eq ptr %386, null
  br i1 %.not.i.i1200, label %io.write_string.exit1204.thread, label %io.write_string.exit1204

io.write_string.exit1204.thread:                  ; preds = %typeswitch.body194
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %57), !noalias !2418
  br label %or_return.return195

io.write_string.exit1204:                         ; preds = %typeswitch.body194
  %387 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %388 = load ptr, ptr %387, align 8, !noalias !2422
  store i64 0, ptr %57, align 8, !noalias !2422
  %389 = call i32 %386(ptr %388, i64 4, ptr nonnull @"ggv$120", i64 0, i64 0, ptr nonnull %57, ptr nonnull %__.context_ptr), !noalias !2426
  %390 = load i64, ptr %57, align 8, !noalias !2422
  %391 = load i64, ptr %n, align 8, !noalias !2422
  %392 = add i64 %391, %390
  store i64 %392, ptr %n, align 8, !noalias !2422
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %57), !noalias !2418
  %393 = icmp eq i32 %389, 0
  br i1 %393, label %or_return.continue199, label %or_return.return195

or_return.return195:                              ; preds = %io.write_string.exit1204.thread, %io.write_string.exit1204
  %394 = phi i64 [ 0, %io.write_string.exit1204.thread ], [ %392, %io.write_string.exit1204 ]
  %err.0.i.i12031535 = phi i32 [ -1, %io.write_string.exit1204.thread ], [ %389, %io.write_string.exit1204 ]
  store i64 %394, ptr %3, align 8
  %.not1023 = icmp eq ptr %2, null
  br i1 %.not1023, label %common.ret, label %common.ret.sink.split

or_return.continue199:                            ; preds = %io.write_string.exit1204
  %395 = load ptr, ptr %81, align 8
  %396 = icmp eq ptr %395, null
  br i1 %396, label %if.then200, label %if.else206

if.then200:                                       ; preds = %or_return.continue199
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %56), !noalias !2427
  %397 = load ptr, ptr %0, align 8, !noalias !2431
  %.not.i.i1205 = icmp eq ptr %397, null
  br i1 %.not.i.i1205, label %io.write_string.exit1209.thread, label %io.write_string.exit1209

io.write_string.exit1209.thread:                  ; preds = %if.then200
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %56), !noalias !2427
  br label %or_return.return201

io.write_string.exit1209:                         ; preds = %if.then200
  %398 = load ptr, ptr %387, align 8, !noalias !2431
  store i64 0, ptr %56, align 8, !noalias !2431
  %399 = call i32 %397(ptr %398, i64 4, ptr nonnull @"ggv$121", i64 0, i64 0, ptr nonnull %56, ptr nonnull %__.context_ptr), !noalias !2435
  %400 = load i64, ptr %56, align 8, !noalias !2431
  %401 = load i64, ptr %n, align 8, !noalias !2431
  %402 = add i64 %401, %400
  store i64 %402, ptr %n, align 8, !noalias !2431
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %56), !noalias !2427
  %403 = icmp eq i32 %399, 0
  br i1 %403, label %if.done230, label %or_return.return201

or_return.return201:                              ; preds = %io.write_string.exit1209.thread, %io.write_string.exit1209
  %404 = phi i64 [ %392, %io.write_string.exit1209.thread ], [ %402, %io.write_string.exit1209 ]
  %err.0.i.i12081538 = phi i32 [ -1, %io.write_string.exit1209.thread ], [ %399, %io.write_string.exit1209 ]
  store i64 %404, ptr %3, align 8
  %.not1061 = icmp eq ptr %2, null
  br i1 %.not1061, label %common.ret, label %common.ret.sink.split

if.else206:                                       ; preds = %or_return.continue199
  %405 = getelementptr inbounds %runtime.Type_Info, ptr %395, i64 0, i32 5
  %406 = getelementptr inbounds %runtime.Type_Info, ptr %395, i64 0, i32 5, i32 1
  %407 = load i64, ptr %406, align 8
  %408 = icmp eq i64 %407, 18
  br i1 %408, label %runtime.type_assertion_check2.exit, label %if.done.i

if.done.i:                                        ; preds = %if.else206
  call fastcc void @runtime.type_assertion_check2.handle_error-1(ptr nonnull @"ggv$122", i32 498, i32 9, i64 1369094286720630804, i64 3602879701896396860, ptr nonnull %405)
  unreachable

runtime.type_assertion_check2.exit:               ; preds = %if.else206
  %.unpack1046.unpack = load ptr, ptr %405, align 8
  %.unpack1046.elt1049 = getelementptr inbounds %runtime.Type_Info, ptr %395, i64 0, i32 5, i32 0, i64 1
  %.unpack1046.unpack1050 = load i64, ptr %.unpack1046.elt1049, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %55), !noalias !2436
  %409 = load ptr, ptr %0, align 8, !noalias !2440
  %.not.i.i1210 = icmp eq ptr %409, null
  br i1 %.not.i.i1210, label %io.write_string.exit1214.thread, label %io.write_string.exit1214

io.write_string.exit1214.thread:                  ; preds = %runtime.type_assertion_check2.exit
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %55), !noalias !2436
  br label %or_return.return207

io.write_string.exit1214:                         ; preds = %runtime.type_assertion_check2.exit
  %410 = load ptr, ptr %387, align 8, !noalias !2440
  store i64 0, ptr %55, align 8, !noalias !2440
  %411 = call i32 %409(ptr %410, i64 4, ptr nonnull @"ggv$127", i64 0, i64 0, ptr nonnull %55, ptr nonnull %__.context_ptr), !noalias !2444
  %412 = load i64, ptr %55, align 8, !noalias !2440
  %413 = load i64, ptr %n, align 8, !noalias !2440
  %414 = add i64 %413, %412
  store i64 %414, ptr %n, align 8, !noalias !2440
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %55), !noalias !2436
  %415 = icmp eq i32 %411, 0
  br i1 %415, label %for.index.loop.preheader, label %or_return.return207

for.index.loop.preheader:                         ; preds = %io.write_string.exit1214
  %smax1749 = call i64 @llvm.smax.i64(i64 %.unpack1046.unpack1050, i64 0)
  %416 = add nsw i64 %smax1749, -1
  br label %for.index.loop

or_return.return207:                              ; preds = %io.write_string.exit1214.thread, %io.write_string.exit1214
  %417 = phi i64 [ %392, %io.write_string.exit1214.thread ], [ %414, %io.write_string.exit1214 ]
  %err.0.i.i12131541 = phi i32 [ -1, %io.write_string.exit1214.thread ], [ %411, %io.write_string.exit1214 ]
  store i64 %417, ptr %3, align 8
  %.not1039 = icmp eq ptr %2, null
  br i1 %.not1039, label %common.ret, label %common.ret.sink.split

for.index.loop:                                   ; preds = %for.index.loop.preheader, %if.done219
  %.0904 = phi i64 [ %418, %if.done219 ], [ -1, %for.index.loop.preheader ]
  %418 = add nsw i64 %.0904, 1
  %exitcond1750.not = icmp eq i64 %.0904, %416
  br i1 %exitcond1750.not, label %for.index.done, label %for.index.body

for.index.body:                                   ; preds = %for.index.loop
  %419 = getelementptr ptr, ptr %.unpack1046.unpack, i64 %418
  %420 = load ptr, ptr %419, align 8
  %421 = icmp ult i64 %.0904, 9223372036854775807
  br i1 %421, label %if.then213, label %if.done219

if.then213:                                       ; preds = %for.index.body
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %54), !noalias !2445
  %422 = load ptr, ptr %0, align 8, !noalias !2449
  %.not.i.i1215 = icmp eq ptr %422, null
  br i1 %.not.i.i1215, label %io.write_string.exit1219.thread, label %io.write_string.exit1219

io.write_string.exit1219.thread:                  ; preds = %if.then213
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %54), !noalias !2445
  %.pre1772 = load i64, ptr %n, align 8
  br label %or_return.return214

io.write_string.exit1219:                         ; preds = %if.then213
  %423 = load ptr, ptr %387, align 8, !noalias !2449
  store i64 0, ptr %54, align 8, !noalias !2449
  %424 = call i32 %422(ptr %423, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %54, ptr nonnull %__.context_ptr), !noalias !2453
  %425 = load i64, ptr %54, align 8, !noalias !2449
  %426 = load i64, ptr %n, align 8, !noalias !2449
  %427 = add i64 %426, %425
  store i64 %427, ptr %n, align 8, !noalias !2449
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %54), !noalias !2445
  %428 = icmp eq i32 %424, 0
  br i1 %428, label %if.done219, label %or_return.return214

or_return.return214:                              ; preds = %io.write_string.exit1219, %io.write_string.exit1219.thread
  %429 = phi i64 [ %.pre1772, %io.write_string.exit1219.thread ], [ %427, %io.write_string.exit1219 ]
  %err.0.i.i12181544 = phi i32 [ -1, %io.write_string.exit1219.thread ], [ %424, %io.write_string.exit1219 ]
  store i64 %429, ptr %3, align 8
  %.not1045 = icmp eq ptr %2, null
  br i1 %.not1045, label %common.ret, label %common.ret.sink.split

if.done219:                                       ; preds = %io.write_string.exit1219, %for.index.body
  store i64 0, ptr %90, align 8
  %430 = call fastcc i32 @reflect.write_type_writer(ptr %0, ptr %420, ptr nonnull %n, ptr %90, ptr %__.context_ptr)
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %for.index.loop, label %or_return.return220

or_return.return220:                              ; preds = %if.done219
  %432 = load i64, ptr %n, align 8
  store i64 %432, ptr %3, align 8
  %.not1044 = icmp eq ptr %2, null
  br i1 %.not1044, label %common.ret, label %common.ret.sink.split

for.index.done:                                   ; preds = %for.index.loop
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %53), !noalias !2454
  %433 = load ptr, ptr %0, align 8, !noalias !2458
  %.not.i.i1220 = icmp eq ptr %433, null
  br i1 %.not.i.i1220, label %io.write_string.exit1224.thread, label %io.write_string.exit1224

io.write_string.exit1224.thread:                  ; preds = %for.index.done
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %53), !noalias !2454
  %.pre1771 = load i64, ptr %n, align 8
  br label %or_return.return225

io.write_string.exit1224:                         ; preds = %for.index.done
  %434 = load ptr, ptr %387, align 8, !noalias !2458
  store i64 0, ptr %53, align 8, !noalias !2458
  %435 = call i32 %433(ptr %434, i64 4, ptr nonnull @"ggv$12a", i64 0, i64 0, ptr nonnull %53, ptr nonnull %__.context_ptr), !noalias !2462
  %436 = load i64, ptr %53, align 8, !noalias !2458
  %437 = load i64, ptr %n, align 8, !noalias !2458
  %438 = add i64 %437, %436
  store i64 %438, ptr %n, align 8, !noalias !2458
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %53), !noalias !2454
  %439 = icmp eq i32 %435, 0
  br i1 %439, label %if.done230, label %or_return.return225

or_return.return225:                              ; preds = %io.write_string.exit1224.thread, %io.write_string.exit1224
  %440 = phi i64 [ %.pre1771, %io.write_string.exit1224.thread ], [ %438, %io.write_string.exit1224 ]
  %err.0.i.i12231547 = phi i32 [ -1, %io.write_string.exit1224.thread ], [ %435, %io.write_string.exit1224 ]
  store i64 %440, ptr %3, align 8
  %.not1040 = icmp eq ptr %2, null
  br i1 %.not1040, label %common.ret, label %common.ret.sink.split

if.done230:                                       ; preds = %io.write_string.exit1224, %io.write_string.exit1209
  %441 = phi i64 [ %438, %io.write_string.exit1224 ], [ %402, %io.write_string.exit1209 ]
  %442 = getelementptr inbounds %runtime.Type_Info_Procedure, ptr %81, i64 0, i32 1
  %443 = load ptr, ptr %442, align 8
  %.not1041 = icmp eq ptr %443, null
  br i1 %.not1041, label %typeswitch.done, label %if.then231

if.then231:                                       ; preds = %if.done230
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %52), !noalias !2463
  %444 = load ptr, ptr %0, align 8, !noalias !2467
  %.not.i.i1225 = icmp eq ptr %444, null
  br i1 %.not.i.i1225, label %io.write_string.exit1229.thread, label %io.write_string.exit1229

io.write_string.exit1229.thread:                  ; preds = %if.then231
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %52), !noalias !2463
  br label %or_return.return232

io.write_string.exit1229:                         ; preds = %if.then231
  %445 = load ptr, ptr %387, align 8, !noalias !2467
  store i64 0, ptr %52, align 8, !noalias !2467
  %446 = call i32 %444(ptr %445, i64 4, ptr nonnull @"ggv$126", i64 0, i64 0, ptr nonnull %52, ptr nonnull %__.context_ptr), !noalias !2471
  %447 = load i64, ptr %52, align 8, !noalias !2467
  %448 = load i64, ptr %n, align 8, !noalias !2467
  %449 = add i64 %448, %447
  store i64 %449, ptr %n, align 8, !noalias !2467
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %52), !noalias !2463
  %450 = icmp eq i32 %446, 0
  br i1 %450, label %or_return.continue236, label %or_return.return232

or_return.return232:                              ; preds = %io.write_string.exit1229.thread, %io.write_string.exit1229
  %451 = phi i64 [ %441, %io.write_string.exit1229.thread ], [ %449, %io.write_string.exit1229 ]
  %err.0.i.i12281550 = phi i32 [ -1, %io.write_string.exit1229.thread ], [ %446, %io.write_string.exit1229 ]
  store i64 %451, ptr %3, align 8
  %.not1042 = icmp eq ptr %2, null
  br i1 %.not1042, label %common.ret, label %common.ret.sink.split

or_return.continue236:                            ; preds = %io.write_string.exit1229
  %452 = load ptr, ptr %442, align 8
  store i64 0, ptr %91, align 8
  %453 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %452, ptr nonnull %n, ptr %91, ptr %__.context_ptr)
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %typeswitch.done, label %or_return.return237

or_return.return237:                              ; preds = %or_return.continue236
  %455 = load i64, ptr %n, align 8
  store i64 %455, ptr %3, align 8
  %.not1043 = icmp eq ptr %2, null
  br i1 %.not1043, label %common.ret, label %common.ret.sink.split

typeswitch.body243:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 32, i1 false)
  %456 = getelementptr inbounds %runtime.Type_Info_Parameters, ptr %81, i64 0, i32 1
  %457 = getelementptr inbounds %runtime.Type_Info_Parameters, ptr %81, i64 0, i32 1, i32 1
  %458 = load i64, ptr %457, align 8
  %.not1010 = icmp eq i64 %458, 1
  br i1 %.not1010, label %if.done250, label %if.then244

if.then244:                                       ; preds = %typeswitch.body243
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %51), !noalias !2472
  %459 = load ptr, ptr %0, align 8, !noalias !2476
  %.not.i.i1230 = icmp eq ptr %459, null
  br i1 %.not.i.i1230, label %io.write_string.exit1234.thread, label %io.write_string.exit1234

io.write_string.exit1234.thread:                  ; preds = %if.then244
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %51), !noalias !2472
  br label %or_return.return245

io.write_string.exit1234:                         ; preds = %if.then244
  %460 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %461 = load ptr, ptr %460, align 8, !noalias !2476
  store i64 0, ptr %51, align 8, !noalias !2476
  %462 = call i32 %459(ptr %461, i64 4, ptr nonnull @"ggv$127", i64 0, i64 0, ptr nonnull %51, ptr nonnull %__.context_ptr), !noalias !2480
  %463 = load i64, ptr %51, align 8, !noalias !2476
  %464 = load i64, ptr %n, align 8, !noalias !2476
  %465 = add i64 %464, %463
  store i64 %465, ptr %n, align 8, !noalias !2476
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %51), !noalias !2472
  %466 = icmp eq i32 %462, 0
  br i1 %466, label %io.write_string.exit1234.if.done250_crit_edge, label %or_return.return245

io.write_string.exit1234.if.done250_crit_edge:    ; preds = %io.write_string.exit1234
  %.pre1765 = load i64, ptr %457, align 8
  br label %if.done250

or_return.return245:                              ; preds = %io.write_string.exit1234.thread, %io.write_string.exit1234
  %467 = phi i64 [ 0, %io.write_string.exit1234.thread ], [ %465, %io.write_string.exit1234 ]
  %err.0.i.i12331553 = phi i32 [ -1, %io.write_string.exit1234.thread ], [ %462, %io.write_string.exit1234 ]
  store i64 %467, ptr %3, align 8
  %.not1022 = icmp eq ptr %2, null
  br i1 %.not1022, label %common.ret, label %common.ret.sink.split

if.done250:                                       ; preds = %io.write_string.exit1234.if.done250_crit_edge, %typeswitch.body243
  %468 = phi i64 [ %.pre1765, %io.write_string.exit1234.if.done250_crit_edge ], [ 1, %typeswitch.body243 ]
  %name.repack1016 = getelementptr inbounds %..string, ptr %name, i64 0, i32 1
  %469 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %smax1747 = call i64 @llvm.smax.i64(i64 %468, i64 0)
  %470 = add nsw i64 %smax1747, -1
  br label %for.index.loop251

for.index.loop251:                                ; preds = %if.done273, %if.done250
  %.0905 = phi i64 [ -1, %if.done250 ], [ %471, %if.done273 ]
  %471 = add nsw i64 %.0905, 1
  %exitcond1748.not = icmp eq i64 %.0905, %470
  br i1 %exitcond1748.not, label %for.index.done279, label %for.index.body252

for.index.body252:                                ; preds = %for.index.loop251
  %472 = load ptr, ptr %456, align 8
  %473 = getelementptr %..string, ptr %472, i64 %471
  %.unpack1013 = load ptr, ptr %473, align 8
  %.elt1014 = getelementptr %..string, ptr %472, i64 %471, i32 1
  %.unpack1015 = load i64, ptr %.elt1014, align 8
  store ptr %.unpack1013, ptr %name, align 8
  store i64 %.unpack1015, ptr %name.repack1016, align 8
  %474 = icmp ult i64 %.0905, 9223372036854775807
  br i1 %474, label %if.then254, label %if.done260

if.then254:                                       ; preds = %for.index.body252
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %50), !noalias !2481
  %475 = load ptr, ptr %0, align 8, !noalias !2485
  %.not.i.i1235 = icmp eq ptr %475, null
  br i1 %.not.i.i1235, label %io.write_string.exit1239.thread, label %io.write_string.exit1239

io.write_string.exit1239.thread:                  ; preds = %if.then254
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50), !noalias !2481
  %.pre1768 = load i64, ptr %n, align 8
  br label %or_return.return255

io.write_string.exit1239:                         ; preds = %if.then254
  %476 = load ptr, ptr %469, align 8, !noalias !2485
  store i64 0, ptr %50, align 8, !noalias !2485
  %477 = call i32 %475(ptr %476, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %50, ptr nonnull %__.context_ptr), !noalias !2489
  %478 = load i64, ptr %50, align 8, !noalias !2485
  %479 = load i64, ptr %n, align 8, !noalias !2485
  %480 = add i64 %479, %478
  store i64 %480, ptr %n, align 8, !noalias !2485
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %50), !noalias !2481
  %481 = icmp eq i32 %477, 0
  br i1 %481, label %if.done260thread-pre-split, label %or_return.return255

or_return.return255:                              ; preds = %io.write_string.exit1239, %io.write_string.exit1239.thread
  %482 = phi i64 [ %.pre1768, %io.write_string.exit1239.thread ], [ %480, %io.write_string.exit1239 ]
  %err.0.i.i12381556 = phi i32 [ -1, %io.write_string.exit1239.thread ], [ %477, %io.write_string.exit1239 ]
  store i64 %482, ptr %3, align 8
  %.not1021 = icmp eq ptr %2, null
  br i1 %.not1021, label %common.ret, label %common.ret.sink.split

if.done260thread-pre-split:                       ; preds = %io.write_string.exit1239
  %.pr1557 = load i64, ptr %name.repack1016, align 8
  br label %if.done260

if.done260:                                       ; preds = %if.done260thread-pre-split, %for.index.body252
  %483 = phi i64 [ %.pr1557, %if.done260thread-pre-split ], [ %.unpack1015, %for.index.body252 ]
  %484 = load ptr, ptr %81, align 8
  %485 = getelementptr ptr, ptr %484, i64 %471
  %486 = load ptr, ptr %485, align 8
  %487 = icmp sgt i64 %483, 0
  br i1 %487, label %if.then262, label %if.done273

if.then262:                                       ; preds = %if.done260
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %49), !noalias !2490
  %488 = load ptr, ptr %0, align 8, !noalias !2494
  %.not.i.i1240 = icmp eq ptr %488, null
  br i1 %.not.i.i1240, label %io.write_string.exit1244.thread, label %io.write_string.exit1244

io.write_string.exit1244.thread:                  ; preds = %if.then262
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %49), !noalias !2490
  %.pre1767 = load i64, ptr %n, align 8
  br label %or_return.return263

io.write_string.exit1244:                         ; preds = %if.then262
  %489 = load ptr, ptr %469, align 8, !noalias !2494
  store i64 0, ptr %49, align 8, !noalias !2494
  %490 = call i32 %488(ptr %489, i64 4, ptr nonnull %name, i64 0, i64 0, ptr nonnull %49, ptr nonnull %__.context_ptr), !noalias !2498
  %491 = load i64, ptr %49, align 8, !noalias !2494
  %492 = load i64, ptr %n, align 8, !noalias !2494
  %493 = add i64 %492, %491
  store i64 %493, ptr %n, align 8, !noalias !2494
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %49), !noalias !2490
  %494 = icmp eq i32 %490, 0
  br i1 %494, label %or_return.continue267, label %or_return.return263

or_return.return263:                              ; preds = %io.write_string.exit1244, %io.write_string.exit1244.thread
  %495 = phi i64 [ %.pre1767, %io.write_string.exit1244.thread ], [ %493, %io.write_string.exit1244 ]
  %err.0.i.i12431560 = phi i32 [ -1, %io.write_string.exit1244.thread ], [ %490, %io.write_string.exit1244 ]
  store i64 %495, ptr %3, align 8
  %.not1019 = icmp eq ptr %2, null
  br i1 %.not1019, label %common.ret, label %common.ret.sink.split

or_return.continue267:                            ; preds = %io.write_string.exit1244
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %48), !noalias !2499
  %496 = load ptr, ptr %0, align 8, !noalias !2503
  %.not.i.i1245 = icmp eq ptr %496, null
  br i1 %.not.i.i1245, label %io.write_string.exit1249.thread, label %io.write_string.exit1249

io.write_string.exit1249.thread:                  ; preds = %or_return.continue267
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %48), !noalias !2499
  br label %or_return.return268

io.write_string.exit1249:                         ; preds = %or_return.continue267
  %497 = load ptr, ptr %469, align 8, !noalias !2503
  store i64 0, ptr %48, align 8, !noalias !2503
  %498 = call i32 %496(ptr %497, i64 4, ptr nonnull @"ggv$13c", i64 0, i64 0, ptr nonnull %48, ptr nonnull %__.context_ptr), !noalias !2507
  %499 = load i64, ptr %48, align 8, !noalias !2503
  %500 = load i64, ptr %n, align 8, !noalias !2503
  %501 = add i64 %500, %499
  store i64 %501, ptr %n, align 8, !noalias !2503
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %48), !noalias !2499
  %502 = icmp eq i32 %498, 0
  br i1 %502, label %if.done273, label %or_return.return268

or_return.return268:                              ; preds = %io.write_string.exit1249, %io.write_string.exit1249.thread
  %503 = phi i64 [ %493, %io.write_string.exit1249.thread ], [ %501, %io.write_string.exit1249 ]
  %err.0.i.i12481563 = phi i32 [ -1, %io.write_string.exit1249.thread ], [ %498, %io.write_string.exit1249 ]
  store i64 %503, ptr %3, align 8
  %.not1020 = icmp eq ptr %2, null
  br i1 %.not1020, label %common.ret, label %common.ret.sink.split

if.done273:                                       ; preds = %io.write_string.exit1249, %if.done260
  store i64 0, ptr %92, align 8
  %504 = call fastcc i32 @reflect.write_type_writer(ptr %0, ptr %486, ptr nonnull %n, ptr %92, ptr %__.context_ptr)
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %for.index.loop251, label %or_return.return274

or_return.return274:                              ; preds = %if.done273
  %506 = load i64, ptr %n, align 8
  store i64 %506, ptr %3, align 8
  %.not1018 = icmp eq ptr %2, null
  br i1 %.not1018, label %common.ret, label %common.ret.sink.split

for.index.done279:                                ; preds = %for.index.loop251
  br i1 %.not1010, label %typeswitch.done, label %if.then280

if.then280:                                       ; preds = %for.index.done279
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %47), !noalias !2508
  %507 = load ptr, ptr %0, align 8, !noalias !2512
  %.not.i.i1250 = icmp eq ptr %507, null
  br i1 %.not.i.i1250, label %io.write_string.exit1254.thread, label %io.write_string.exit1254

io.write_string.exit1254.thread:                  ; preds = %if.then280
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %47), !noalias !2508
  %.pre1766 = load i64, ptr %n, align 8
  br label %or_return.return281

io.write_string.exit1254:                         ; preds = %if.then280
  %508 = load ptr, ptr %469, align 8, !noalias !2512
  store i64 0, ptr %47, align 8, !noalias !2512
  %509 = call i32 %507(ptr %508, i64 4, ptr nonnull @"ggv$12a", i64 0, i64 0, ptr nonnull %47, ptr nonnull %__.context_ptr), !noalias !2516
  %510 = load i64, ptr %47, align 8, !noalias !2512
  %511 = load i64, ptr %n, align 8, !noalias !2512
  %512 = add i64 %511, %510
  store i64 %512, ptr %n, align 8, !noalias !2512
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %47), !noalias !2508
  %513 = icmp eq i32 %509, 0
  br i1 %513, label %typeswitch.done, label %or_return.return281

or_return.return281:                              ; preds = %io.write_string.exit1254.thread, %io.write_string.exit1254
  %514 = phi i64 [ %.pre1766, %io.write_string.exit1254.thread ], [ %512, %io.write_string.exit1254 ]
  %err.0.i.i12531566 = phi i32 [ -1, %io.write_string.exit1254.thread ], [ %509, %io.write_string.exit1254 ]
  store i64 %514, ptr %3, align 8
  %.not1012 = icmp eq ptr %2, null
  br i1 %.not1012, label %common.ret, label %common.ret.sink.split

typeswitch.body287:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %46), !noalias !2517
  %515 = load ptr, ptr %0, align 8, !noalias !2521
  %.not.i.i1255 = icmp eq ptr %515, null
  br i1 %.not.i.i1255, label %io.write_string.exit1259.thread, label %io.write_string.exit1259

io.write_string.exit1259.thread:                  ; preds = %typeswitch.body287
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %46), !noalias !2517
  br label %or_return.return288

io.write_string.exit1259:                         ; preds = %typeswitch.body287
  %516 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %517 = load ptr, ptr %516, align 8, !noalias !2521
  store i64 0, ptr %46, align 8, !noalias !2521
  %518 = call i32 %515(ptr %517, i64 4, ptr nonnull @"ggv$12e", i64 0, i64 0, ptr nonnull %46, ptr nonnull %__.context_ptr), !noalias !2525
  %519 = load i64, ptr %46, align 8, !noalias !2521
  %520 = load i64, ptr %n, align 8, !noalias !2521
  %521 = add i64 %520, %519
  store i64 %521, ptr %n, align 8, !noalias !2521
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %46), !noalias !2517
  %522 = icmp eq i32 %518, 0
  br i1 %522, label %or_return.continue292, label %or_return.return288

or_return.return288:                              ; preds = %io.write_string.exit1259.thread, %io.write_string.exit1259
  %523 = phi i64 [ 0, %io.write_string.exit1259.thread ], [ %521, %io.write_string.exit1259 ]
  %err.0.i.i12581569 = phi i32 [ -1, %io.write_string.exit1259.thread ], [ %518, %io.write_string.exit1259 ]
  store i64 %523, ptr %3, align 8
  %.not1006 = icmp eq ptr %2, null
  br i1 %.not1006, label %common.ret, label %common.ret.sink.split

or_return.continue292:                            ; preds = %io.write_string.exit1259
  %524 = getelementptr inbounds %runtime.Type_Info_Array, ptr %81, i64 0, i32 2
  %525 = load i64, ptr %524, align 8
  %526 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %525, ptr nonnull %n, ptr %93, ptr %__.context_ptr)
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %or_return.continue297, label %or_return.return293

or_return.return293:                              ; preds = %or_return.continue292
  %528 = load i64, ptr %n, align 8
  store i64 %528, ptr %3, align 8
  %.not1007 = icmp eq ptr %2, null
  br i1 %.not1007, label %common.ret, label %common.ret.sink.split

or_return.continue297:                            ; preds = %or_return.continue292
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %45), !noalias !2526
  %529 = load ptr, ptr %0, align 8, !noalias !2530
  %.not.i.i1260 = icmp eq ptr %529, null
  br i1 %.not.i.i1260, label %io.write_string.exit1264.thread, label %io.write_string.exit1264

io.write_string.exit1264.thread:                  ; preds = %or_return.continue297
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %45), !noalias !2526
  %.pre1764 = load i64, ptr %n, align 8
  br label %or_return.return298

io.write_string.exit1264:                         ; preds = %or_return.continue297
  %530 = load ptr, ptr %516, align 8, !noalias !2530
  store i64 0, ptr %45, align 8, !noalias !2530
  %531 = call i32 %529(ptr %530, i64 4, ptr nonnull @"ggv$151", i64 0, i64 0, ptr nonnull %45, ptr nonnull %__.context_ptr), !noalias !2534
  %532 = load i64, ptr %45, align 8, !noalias !2530
  %533 = load i64, ptr %n, align 8, !noalias !2530
  %534 = add i64 %533, %532
  store i64 %534, ptr %n, align 8, !noalias !2530
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %45), !noalias !2526
  %535 = icmp eq i32 %531, 0
  br i1 %535, label %or_return.continue302, label %or_return.return298

or_return.return298:                              ; preds = %io.write_string.exit1264.thread, %io.write_string.exit1264
  %536 = phi i64 [ %.pre1764, %io.write_string.exit1264.thread ], [ %534, %io.write_string.exit1264 ]
  %err.0.i.i12631572 = phi i32 [ -1, %io.write_string.exit1264.thread ], [ %531, %io.write_string.exit1264 ]
  store i64 %536, ptr %3, align 8
  %.not1008 = icmp eq ptr %2, null
  br i1 %.not1008, label %common.ret, label %common.ret.sink.split

or_return.continue302:                            ; preds = %io.write_string.exit1264
  %537 = load ptr, ptr %81, align 8
  store i64 0, ptr %94, align 8
  %538 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %537, ptr nonnull %n, ptr %94, ptr %__.context_ptr)
  %539 = icmp eq i32 %538, 0
  br i1 %539, label %typeswitch.done, label %or_return.return303

or_return.return303:                              ; preds = %or_return.continue302
  %540 = load i64, ptr %n, align 8
  store i64 %540, ptr %3, align 8
  %.not1009 = icmp eq ptr %2, null
  br i1 %.not1009, label %common.ret, label %common.ret.sink.split

typeswitch.body308:                               ; preds = %if.done5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %81, ptr noundef nonnull align 1 dereferenceable(56) %137, i64 56, i1 false)
  %541 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %81, i64 0, i32 6
  %542 = load i8, ptr %541, align 8
  %.not1000 = icmp eq i8 %542, 0
  br i1 %.not1000, label %if.done315, label %if.then309

if.then309:                                       ; preds = %typeswitch.body308
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %44), !noalias !2535
  %543 = load ptr, ptr %0, align 8, !noalias !2539
  %.not.i.i1265 = icmp eq ptr %543, null
  br i1 %.not.i.i1265, label %io.write_string.exit1269.thread, label %io.write_string.exit1269

io.write_string.exit1269.thread:                  ; preds = %if.then309
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44), !noalias !2535
  br label %or_return.return310

io.write_string.exit1269:                         ; preds = %if.then309
  %544 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %545 = load ptr, ptr %544, align 8, !noalias !2539
  store i64 0, ptr %44, align 8, !noalias !2539
  %546 = call i32 %543(ptr %545, i64 4, ptr nonnull @"ggv$12d", i64 0, i64 0, ptr nonnull %44, ptr nonnull %__.context_ptr), !noalias !2543
  %547 = load i64, ptr %44, align 8, !noalias !2539
  %548 = load i64, ptr %n, align 8, !noalias !2539
  %549 = add i64 %548, %547
  store i64 %549, ptr %n, align 8, !noalias !2539
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %44), !noalias !2535
  %550 = icmp eq i32 %546, 0
  br i1 %550, label %if.done315, label %or_return.return310

or_return.return310:                              ; preds = %io.write_string.exit1269.thread, %io.write_string.exit1269
  %551 = phi i64 [ 0, %io.write_string.exit1269.thread ], [ %549, %io.write_string.exit1269 ]
  %err.0.i.i12681575 = phi i32 [ -1, %io.write_string.exit1269.thread ], [ %546, %io.write_string.exit1269 ]
  store i64 %551, ptr %3, align 8
  %.not1005 = icmp eq ptr %2, null
  br i1 %.not1005, label %common.ret, label %common.ret.sink.split

if.done315:                                       ; preds = %io.write_string.exit1269, %typeswitch.body308
  %552 = phi i64 [ %549, %io.write_string.exit1269 ], [ 0, %typeswitch.body308 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %43), !noalias !2544
  %553 = load ptr, ptr %0, align 8, !noalias !2548
  %.not.i.i1270 = icmp eq ptr %553, null
  br i1 %.not.i.i1270, label %io.write_string.exit1274.thread, label %io.write_string.exit1274

io.write_string.exit1274.thread:                  ; preds = %if.done315
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43), !noalias !2544
  br label %or_return.return316

io.write_string.exit1274:                         ; preds = %if.done315
  %554 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %555 = load ptr, ptr %554, align 8, !noalias !2548
  store i64 0, ptr %43, align 8, !noalias !2548
  %556 = call i32 %553(ptr %555, i64 4, ptr nonnull @"ggv$12e", i64 0, i64 0, ptr nonnull %43, ptr nonnull %__.context_ptr), !noalias !2552
  %557 = load i64, ptr %43, align 8, !noalias !2548
  %558 = load i64, ptr %n, align 8, !noalias !2548
  %559 = add i64 %558, %557
  store i64 %559, ptr %n, align 8, !noalias !2548
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %43), !noalias !2544
  %560 = icmp eq i32 %556, 0
  br i1 %560, label %or_return.continue320, label %or_return.return316

or_return.return316:                              ; preds = %io.write_string.exit1274.thread, %io.write_string.exit1274
  %561 = phi i64 [ %552, %io.write_string.exit1274.thread ], [ %559, %io.write_string.exit1274 ]
  %err.0.i.i12731578 = phi i32 [ -1, %io.write_string.exit1274.thread ], [ %556, %io.write_string.exit1274 ]
  store i64 %561, ptr %3, align 8
  %.not1001 = icmp eq ptr %2, null
  br i1 %.not1001, label %common.ret, label %common.ret.sink.split

or_return.continue320:                            ; preds = %io.write_string.exit1274
  %562 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, ptr %81, i64 0, i32 1
  %563 = load ptr, ptr %562, align 8
  store i64 0, ptr %95, align 8
  %564 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %563, ptr nonnull %n, ptr %95, ptr %__.context_ptr)
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %or_return.continue325, label %or_return.return321

or_return.return321:                              ; preds = %or_return.continue320
  %566 = load i64, ptr %n, align 8
  store i64 %566, ptr %3, align 8
  %.not1002 = icmp eq ptr %2, null
  br i1 %.not1002, label %common.ret, label %common.ret.sink.split

or_return.continue325:                            ; preds = %or_return.continue320
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %42), !noalias !2553
  %567 = load ptr, ptr %0, align 8, !noalias !2557
  %.not.i.i1275 = icmp eq ptr %567, null
  br i1 %.not.i.i1275, label %io.write_string.exit1279.thread, label %io.write_string.exit1279

io.write_string.exit1279.thread:                  ; preds = %or_return.continue325
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42), !noalias !2553
  %.pre1763 = load i64, ptr %n, align 8
  br label %or_return.return326

io.write_string.exit1279:                         ; preds = %or_return.continue325
  %568 = load ptr, ptr %554, align 8, !noalias !2557
  store i64 0, ptr %42, align 8, !noalias !2557
  %569 = call i32 %567(ptr %568, i64 4, ptr nonnull @"ggv$151", i64 0, i64 0, ptr nonnull %42, ptr nonnull %__.context_ptr), !noalias !2561
  %570 = load i64, ptr %42, align 8, !noalias !2557
  %571 = load i64, ptr %n, align 8, !noalias !2557
  %572 = add i64 %571, %570
  store i64 %572, ptr %n, align 8, !noalias !2557
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %42), !noalias !2553
  %573 = icmp eq i32 %569, 0
  br i1 %573, label %or_return.continue330, label %or_return.return326

or_return.return326:                              ; preds = %io.write_string.exit1279.thread, %io.write_string.exit1279
  %574 = phi i64 [ %.pre1763, %io.write_string.exit1279.thread ], [ %572, %io.write_string.exit1279 ]
  %err.0.i.i12781581 = phi i32 [ -1, %io.write_string.exit1279.thread ], [ %569, %io.write_string.exit1279 ]
  store i64 %574, ptr %3, align 8
  %.not1003 = icmp eq ptr %2, null
  br i1 %.not1003, label %common.ret, label %common.ret.sink.split

or_return.continue330:                            ; preds = %io.write_string.exit1279
  %575 = load ptr, ptr %81, align 8
  store i64 0, ptr %96, align 8
  %576 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %575, ptr nonnull %n, ptr %96, ptr %__.context_ptr)
  %577 = icmp eq i32 %576, 0
  br i1 %577, label %typeswitch.done, label %or_return.return331

or_return.return331:                              ; preds = %or_return.continue330
  %578 = load i64, ptr %n, align 8
  store i64 %578, ptr %3, align 8
  %.not1004 = icmp eq ptr %2, null
  br i1 %.not1004, label %common.ret, label %common.ret.sink.split

typeswitch.body336:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %41), !noalias !2562
  %579 = load ptr, ptr %0, align 8, !noalias !2566
  %.not.i.i1280 = icmp eq ptr %579, null
  br i1 %.not.i.i1280, label %io.write_string.exit1284.thread, label %io.write_string.exit1284

io.write_string.exit1284.thread:                  ; preds = %typeswitch.body336
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %41), !noalias !2562
  br label %or_return.return337

io.write_string.exit1284:                         ; preds = %typeswitch.body336
  %580 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %581 = load ptr, ptr %580, align 8, !noalias !2566
  store i64 0, ptr %41, align 8, !noalias !2566
  %582 = call i32 %579(ptr %581, i64 4, ptr nonnull @"ggv$130", i64 0, i64 0, ptr nonnull %41, ptr nonnull %__.context_ptr), !noalias !2570
  %583 = load i64, ptr %41, align 8, !noalias !2566
  %584 = load i64, ptr %n, align 8, !noalias !2566
  %585 = add i64 %584, %583
  store i64 %585, ptr %n, align 8, !noalias !2566
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %41), !noalias !2562
  %586 = icmp eq i32 %582, 0
  br i1 %586, label %or_return.continue341, label %or_return.return337

or_return.return337:                              ; preds = %io.write_string.exit1284.thread, %io.write_string.exit1284
  %587 = phi i64 [ 0, %io.write_string.exit1284.thread ], [ %585, %io.write_string.exit1284 ]
  %err.0.i.i12831584 = phi i32 [ -1, %io.write_string.exit1284.thread ], [ %582, %io.write_string.exit1284 ]
  store i64 %587, ptr %3, align 8
  %.not998 = icmp eq ptr %2, null
  br i1 %.not998, label %common.ret, label %common.ret.sink.split

or_return.continue341:                            ; preds = %io.write_string.exit1284
  %588 = load ptr, ptr %81, align 8
  store i64 0, ptr %97, align 8
  %589 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %588, ptr nonnull %n, ptr %97, ptr %__.context_ptr)
  %590 = icmp eq i32 %589, 0
  br i1 %590, label %typeswitch.done, label %or_return.return342

or_return.return342:                              ; preds = %or_return.continue341
  %591 = load i64, ptr %n, align 8
  store i64 %591, ptr %3, align 8
  %.not999 = icmp eq ptr %2, null
  br i1 %.not999, label %common.ret, label %common.ret.sink.split

typeswitch.body347:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %40), !noalias !2571
  %592 = load ptr, ptr %0, align 8, !noalias !2575
  %.not.i.i1285 = icmp eq ptr %592, null
  br i1 %.not.i.i1285, label %io.write_string.exit1289.thread, label %io.write_string.exit1289

io.write_string.exit1289.thread:                  ; preds = %typeswitch.body347
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %40), !noalias !2571
  br label %or_return.return348

io.write_string.exit1289:                         ; preds = %typeswitch.body347
  %593 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %594 = load ptr, ptr %593, align 8, !noalias !2575
  store i64 0, ptr %40, align 8, !noalias !2575
  %595 = call i32 %592(ptr %594, i64 4, ptr nonnull @"ggv$131", i64 0, i64 0, ptr nonnull %40, ptr nonnull %__.context_ptr), !noalias !2579
  %596 = load i64, ptr %40, align 8, !noalias !2575
  %597 = load i64, ptr %n, align 8, !noalias !2575
  %598 = add i64 %597, %596
  store i64 %598, ptr %n, align 8, !noalias !2575
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %40), !noalias !2571
  %599 = icmp eq i32 %595, 0
  br i1 %599, label %or_return.continue352, label %or_return.return348

or_return.return348:                              ; preds = %io.write_string.exit1289.thread, %io.write_string.exit1289
  %600 = phi i64 [ 0, %io.write_string.exit1289.thread ], [ %598, %io.write_string.exit1289 ]
  %err.0.i.i12881587 = phi i32 [ -1, %io.write_string.exit1289.thread ], [ %595, %io.write_string.exit1289 ]
  store i64 %600, ptr %3, align 8
  %.not996 = icmp eq ptr %2, null
  br i1 %.not996, label %common.ret, label %common.ret.sink.split

or_return.continue352:                            ; preds = %io.write_string.exit1289
  %601 = load ptr, ptr %81, align 8
  store i64 0, ptr %98, align 8
  %602 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %601, ptr nonnull %n, ptr %98, ptr %__.context_ptr)
  %603 = icmp eq i32 %602, 0
  br i1 %603, label %typeswitch.done, label %or_return.return353

or_return.return353:                              ; preds = %or_return.continue352
  %604 = load i64, ptr %n, align 8
  store i64 %604, ptr %3, align 8
  %.not997 = icmp eq ptr %2, null
  br i1 %.not997, label %common.ret, label %common.ret.sink.split

typeswitch.body358:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %39), !noalias !2580
  %605 = load ptr, ptr %0, align 8, !noalias !2584
  %.not.i.i1290 = icmp eq ptr %605, null
  br i1 %.not.i.i1290, label %io.write_string.exit1294.thread, label %io.write_string.exit1294

io.write_string.exit1294.thread:                  ; preds = %typeswitch.body358
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %39), !noalias !2580
  br label %or_return.return359

io.write_string.exit1294:                         ; preds = %typeswitch.body358
  %606 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %607 = load ptr, ptr %606, align 8, !noalias !2584
  store i64 0, ptr %39, align 8, !noalias !2584
  %608 = call i32 %605(ptr %607, i64 4, ptr nonnull @"ggv$132", i64 0, i64 0, ptr nonnull %39, ptr nonnull %__.context_ptr), !noalias !2588
  %609 = load i64, ptr %39, align 8, !noalias !2584
  %610 = load i64, ptr %n, align 8, !noalias !2584
  %611 = add i64 %610, %609
  store i64 %611, ptr %n, align 8, !noalias !2584
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %39), !noalias !2580
  %612 = icmp eq i32 %608, 0
  br i1 %612, label %or_return.continue363, label %or_return.return359

or_return.return359:                              ; preds = %io.write_string.exit1294.thread, %io.write_string.exit1294
  %613 = phi i64 [ 0, %io.write_string.exit1294.thread ], [ %611, %io.write_string.exit1294 ]
  %err.0.i.i12931590 = phi i32 [ -1, %io.write_string.exit1294.thread ], [ %608, %io.write_string.exit1294 ]
  store i64 %613, ptr %3, align 8
  %.not992 = icmp eq ptr %2, null
  br i1 %.not992, label %common.ret, label %common.ret.sink.split

or_return.continue363:                            ; preds = %io.write_string.exit1294
  %614 = load ptr, ptr %81, align 8
  store i64 0, ptr %99, align 8
  %615 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %614, ptr nonnull %n, ptr %99, ptr %__.context_ptr)
  %616 = icmp eq i32 %615, 0
  br i1 %616, label %or_return.continue368, label %or_return.return364

or_return.return364:                              ; preds = %or_return.continue363
  %617 = load i64, ptr %n, align 8
  store i64 %617, ptr %3, align 8
  %.not993 = icmp eq ptr %2, null
  br i1 %.not993, label %common.ret, label %common.ret.sink.split

or_return.continue368:                            ; preds = %or_return.continue363
  %618 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 93, ptr nonnull %n, ptr %__.context_ptr)
  %619 = icmp eq i32 %618, 0
  br i1 %619, label %or_return.continue373, label %or_return.return369

or_return.return369:                              ; preds = %or_return.continue368
  %620 = load i64, ptr %n, align 8
  store i64 %620, ptr %3, align 8
  %.not994 = icmp eq ptr %2, null
  br i1 %.not994, label %common.ret, label %common.ret.sink.split

or_return.continue373:                            ; preds = %or_return.continue368
  %621 = getelementptr inbounds %runtime.Type_Info_Map, ptr %81, i64 0, i32 1
  %622 = load ptr, ptr %621, align 8
  store i64 0, ptr %100, align 8
  %623 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %622, ptr nonnull %n, ptr %100, ptr %__.context_ptr)
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %typeswitch.done, label %or_return.return374

or_return.return374:                              ; preds = %or_return.continue373
  %625 = load i64, ptr %n, align 8
  store i64 %625, ptr %3, align 8
  %.not995 = icmp eq ptr %2, null
  br i1 %.not995, label %common.ret, label %common.ret.sink.split

typeswitch.body379:                               ; preds = %if.done5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(120) %81, ptr noundef nonnull align 1 dereferenceable(120) %137, i64 120, i1 false)
  %626 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 11
  %627 = load i8, ptr %626, align 8
  switch i8 %627, label %switch.done433 [
    i8 3, label %switch.case.body419
    i8 1, label %switch.case.body381
    i8 2, label %switch.case.body405
  ]

switch.case.body381:                              ; preds = %typeswitch.body379
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %38), !noalias !2589
  %628 = load ptr, ptr %0, align 8, !noalias !2593
  %.not.i.i1295 = icmp eq ptr %628, null
  br i1 %.not.i.i1295, label %io.write_string.exit1299.thread, label %io.write_string.exit1299

io.write_string.exit1299.thread:                  ; preds = %switch.case.body381
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %38), !noalias !2589
  br label %or_return.return382

io.write_string.exit1299:                         ; preds = %switch.case.body381
  %629 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %630 = load ptr, ptr %629, align 8, !noalias !2593
  store i64 0, ptr %38, align 8, !noalias !2593
  %631 = call i32 %628(ptr %630, i64 4, ptr nonnull @"ggv$133", i64 0, i64 0, ptr nonnull %38, ptr nonnull %__.context_ptr), !noalias !2597
  %632 = load i64, ptr %38, align 8, !noalias !2593
  %633 = load i64, ptr %n, align 8, !noalias !2593
  %634 = add i64 %633, %632
  store i64 %634, ptr %n, align 8, !noalias !2593
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %38), !noalias !2589
  %635 = icmp eq i32 %631, 0
  br i1 %635, label %or_return.continue386, label %or_return.return382

or_return.return382:                              ; preds = %io.write_string.exit1299.thread, %io.write_string.exit1299
  %636 = phi i64 [ 0, %io.write_string.exit1299.thread ], [ %634, %io.write_string.exit1299 ]
  %err.0.i.i12981593 = phi i32 [ -1, %io.write_string.exit1299.thread ], [ %631, %io.write_string.exit1299 ]
  store i64 %636, ptr %3, align 8
  %.not964 = icmp eq ptr %2, null
  br i1 %.not964, label %common.ret, label %common.ret.sink.split

or_return.continue386:                            ; preds = %io.write_string.exit1299
  %637 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 14
  %638 = load i64, ptr %637, align 8
  %639 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %638, ptr null, ptr %101, ptr %__.context_ptr)
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %or_return.continue391, label %or_return.return387

or_return.return387:                              ; preds = %or_return.continue386
  %641 = load i64, ptr %n, align 8
  store i64 %641, ptr %3, align 8
  %.not965 = icmp eq ptr %2, null
  br i1 %.not965, label %common.ret, label %common.ret.sink.split

or_return.continue391:                            ; preds = %or_return.continue386
  %642 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 93, ptr nonnull %n, ptr %__.context_ptr)
  %643 = icmp eq i32 %642, 0
  br i1 %643, label %or_return.continue396, label %or_return.return392

or_return.return392:                              ; preds = %or_return.continue391
  %644 = load i64, ptr %n, align 8
  store i64 %644, ptr %3, align 8
  %.not966 = icmp eq ptr %2, null
  br i1 %.not966, label %common.ret, label %common.ret.sink.split

or_return.continue396:                            ; preds = %or_return.continue391
  %645 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 13
  %646 = load ptr, ptr %645, align 8
  store i64 0, ptr %102, align 8
  %647 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %646, ptr nonnull %n, ptr %102, ptr %__.context_ptr)
  %648 = load i64, ptr %n, align 8
  store i64 %648, ptr %3, align 8
  %.not968 = icmp eq ptr %2, null
  br i1 %.not968, label %common.ret, label %common.ret.sink.split

switch.case.body405:                              ; preds = %typeswitch.body379
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %37), !noalias !2598
  %649 = load ptr, ptr %0, align 8, !noalias !2602
  %.not.i.i1300 = icmp eq ptr %649, null
  br i1 %.not.i.i1300, label %io.write_string.exit1304.thread, label %io.write_string.exit1304

io.write_string.exit1304.thread:                  ; preds = %switch.case.body405
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %37), !noalias !2598
  br label %or_return.return406

io.write_string.exit1304:                         ; preds = %switch.case.body405
  %650 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %651 = load ptr, ptr %650, align 8, !noalias !2602
  store i64 0, ptr %37, align 8, !noalias !2602
  %652 = call i32 %649(ptr %651, i64 4, ptr nonnull @"ggv$134", i64 0, i64 0, ptr nonnull %37, ptr nonnull %__.context_ptr), !noalias !2606
  %653 = load i64, ptr %37, align 8, !noalias !2602
  %654 = load i64, ptr %n, align 8, !noalias !2602
  %655 = add i64 %654, %653
  store i64 %655, ptr %n, align 8, !noalias !2602
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %37), !noalias !2598
  %656 = icmp eq i32 %652, 0
  br i1 %656, label %or_return.continue410, label %or_return.return406

or_return.return406:                              ; preds = %io.write_string.exit1304.thread, %io.write_string.exit1304
  %657 = phi i64 [ 0, %io.write_string.exit1304.thread ], [ %655, %io.write_string.exit1304 ]
  %err.0.i.i13031596 = phi i32 [ -1, %io.write_string.exit1304.thread ], [ %652, %io.write_string.exit1304 ]
  store i64 %657, ptr %3, align 8
  %.not961 = icmp eq ptr %2, null
  br i1 %.not961, label %common.ret, label %common.ret.sink.split

or_return.continue410:                            ; preds = %io.write_string.exit1304
  %658 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 13
  %659 = load ptr, ptr %658, align 8
  store i64 0, ptr %103, align 8
  %660 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %659, ptr nonnull %n, ptr %103, ptr %__.context_ptr)
  %661 = load i64, ptr %n, align 8
  store i64 %661, ptr %3, align 8
  %.not963 = icmp eq ptr %2, null
  br i1 %.not963, label %common.ret, label %common.ret.sink.split

switch.case.body419:                              ; preds = %typeswitch.body379
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %36), !noalias !2607
  %662 = load ptr, ptr %0, align 8, !noalias !2611
  %.not.i.i1305 = icmp eq ptr %662, null
  br i1 %.not.i.i1305, label %io.write_string.exit1309.thread, label %io.write_string.exit1309

io.write_string.exit1309.thread:                  ; preds = %switch.case.body419
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36), !noalias !2607
  br label %or_return.return420

io.write_string.exit1309:                         ; preds = %switch.case.body419
  %663 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %664 = load ptr, ptr %663, align 8, !noalias !2611
  store i64 0, ptr %36, align 8, !noalias !2611
  %665 = call i32 %662(ptr %664, i64 4, ptr nonnull @"ggv$135", i64 0, i64 0, ptr nonnull %36, ptr nonnull %__.context_ptr), !noalias !2615
  %666 = load i64, ptr %36, align 8, !noalias !2611
  %667 = load i64, ptr %n, align 8, !noalias !2611
  %668 = add i64 %667, %666
  store i64 %668, ptr %n, align 8, !noalias !2611
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %36), !noalias !2607
  %669 = icmp eq i32 %665, 0
  br i1 %669, label %or_return.continue424, label %or_return.return420

or_return.return420:                              ; preds = %io.write_string.exit1309.thread, %io.write_string.exit1309
  %670 = phi i64 [ 0, %io.write_string.exit1309.thread ], [ %668, %io.write_string.exit1309 ]
  %err.0.i.i13081599 = phi i32 [ -1, %io.write_string.exit1309.thread ], [ %665, %io.write_string.exit1309 ]
  store i64 %670, ptr %3, align 8
  %.not969 = icmp eq ptr %2, null
  br i1 %.not969, label %common.ret, label %common.ret.sink.split

or_return.continue424:                            ; preds = %io.write_string.exit1309
  %671 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 13
  %672 = load ptr, ptr %671, align 8
  store i64 0, ptr %104, align 8
  %673 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %672, ptr nonnull %n, ptr %104, ptr %__.context_ptr)
  %674 = load i64, ptr %n, align 8
  store i64 %674, ptr %3, align 8
  %.not971 = icmp eq ptr %2, null
  br i1 %.not971, label %common.ret, label %common.ret.sink.split

switch.done433:                                   ; preds = %typeswitch.body379
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %35), !noalias !2616
  %675 = load ptr, ptr %0, align 8, !noalias !2620
  %.not.i.i1310 = icmp eq ptr %675, null
  br i1 %.not.i.i1310, label %io.write_string.exit1314.thread, label %io.write_string.exit1314

io.write_string.exit1314.thread:                  ; preds = %switch.done433
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35), !noalias !2616
  br label %or_return.return434

io.write_string.exit1314:                         ; preds = %switch.done433
  %676 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %677 = load ptr, ptr %676, align 8, !noalias !2620
  store i64 0, ptr %35, align 8, !noalias !2620
  %678 = call i32 %675(ptr %677, i64 4, ptr nonnull @"ggv$136", i64 0, i64 0, ptr nonnull %35, ptr nonnull %__.context_ptr), !noalias !2624
  %679 = load i64, ptr %35, align 8, !noalias !2620
  %680 = load i64, ptr %n, align 8, !noalias !2620
  %681 = add i64 %680, %679
  store i64 %681, ptr %n, align 8, !noalias !2620
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %35), !noalias !2616
  %682 = icmp eq i32 %678, 0
  br i1 %682, label %or_return.continue438, label %or_return.return434

or_return.return434:                              ; preds = %io.write_string.exit1314.thread, %io.write_string.exit1314
  %683 = phi i64 [ 0, %io.write_string.exit1314.thread ], [ %681, %io.write_string.exit1314 ]
  %err.0.i.i13131602 = phi i32 [ -1, %io.write_string.exit1314.thread ], [ %678, %io.write_string.exit1314 ]
  store i64 %683, ptr %3, align 8
  %.not972 = icmp eq ptr %2, null
  br i1 %.not972, label %common.ret, label %common.ret.sink.split

or_return.continue438:                            ; preds = %io.write_string.exit1314
  %684 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 5
  %685 = load i8, ptr %684, align 8
  %.not973 = icmp eq i8 %685, 0
  br i1 %.not973, label %if.done445, label %if.then439

if.then439:                                       ; preds = %or_return.continue438
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %34), !noalias !2625
  %686 = load ptr, ptr %0, align 8, !noalias !2629
  %.not.i.i1315 = icmp eq ptr %686, null
  br i1 %.not.i.i1315, label %io.write_string.exit1319.thread, label %io.write_string.exit1319

io.write_string.exit1319.thread:                  ; preds = %if.then439
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %34), !noalias !2625
  br label %or_return.return440

io.write_string.exit1319:                         ; preds = %if.then439
  %687 = load ptr, ptr %676, align 8, !noalias !2629
  store i64 0, ptr %34, align 8, !noalias !2629
  %688 = call i32 %686(ptr %687, i64 4, ptr nonnull @"ggv$137", i64 0, i64 0, ptr nonnull %34, ptr nonnull %__.context_ptr), !noalias !2633
  %689 = load i64, ptr %34, align 8, !noalias !2629
  %690 = load i64, ptr %n, align 8, !noalias !2629
  %691 = add i64 %690, %689
  store i64 %691, ptr %n, align 8, !noalias !2629
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %34), !noalias !2625
  %692 = icmp eq i32 %688, 0
  br i1 %692, label %if.done445, label %or_return.return440

or_return.return440:                              ; preds = %io.write_string.exit1319.thread, %io.write_string.exit1319
  %693 = phi i64 [ %681, %io.write_string.exit1319.thread ], [ %691, %io.write_string.exit1319 ]
  %err.0.i.i13181605 = phi i32 [ -1, %io.write_string.exit1319.thread ], [ %688, %io.write_string.exit1319 ]
  store i64 %693, ptr %3, align 8
  %.not991 = icmp eq ptr %2, null
  br i1 %.not991, label %common.ret, label %common.ret.sink.split

if.done445:                                       ; preds = %io.write_string.exit1319, %or_return.continue438
  %694 = phi i64 [ %691, %io.write_string.exit1319 ], [ %681, %or_return.continue438 ]
  %695 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 6
  %696 = load i8, ptr %695, align 1
  %.not974 = icmp eq i8 %696, 0
  br i1 %.not974, label %if.done452, label %if.then446

if.then446:                                       ; preds = %if.done445
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %33), !noalias !2634
  %697 = load ptr, ptr %0, align 8, !noalias !2638
  %.not.i.i1320 = icmp eq ptr %697, null
  br i1 %.not.i.i1320, label %io.write_string.exit1324.thread, label %io.write_string.exit1324

io.write_string.exit1324.thread:                  ; preds = %if.then446
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %33), !noalias !2634
  br label %or_return.return447

io.write_string.exit1324:                         ; preds = %if.then446
  %698 = load ptr, ptr %676, align 8, !noalias !2638
  store i64 0, ptr %33, align 8, !noalias !2638
  %699 = call i32 %697(ptr %698, i64 4, ptr nonnull @"ggv$138", i64 0, i64 0, ptr nonnull %33, ptr nonnull %__.context_ptr), !noalias !2642
  %700 = load i64, ptr %33, align 8, !noalias !2638
  %701 = load i64, ptr %n, align 8, !noalias !2638
  %702 = add i64 %701, %700
  store i64 %702, ptr %n, align 8, !noalias !2638
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %33), !noalias !2634
  %703 = icmp eq i32 %699, 0
  br i1 %703, label %if.done452, label %or_return.return447

or_return.return447:                              ; preds = %io.write_string.exit1324.thread, %io.write_string.exit1324
  %704 = phi i64 [ %694, %io.write_string.exit1324.thread ], [ %702, %io.write_string.exit1324 ]
  %err.0.i.i13231608 = phi i32 [ -1, %io.write_string.exit1324.thread ], [ %699, %io.write_string.exit1324 ]
  store i64 %704, ptr %3, align 8
  %.not990 = icmp eq ptr %2, null
  br i1 %.not990, label %common.ret, label %common.ret.sink.split

if.done452:                                       ; preds = %io.write_string.exit1324, %if.done445
  %705 = phi i64 [ %702, %io.write_string.exit1324 ], [ %694, %if.done445 ]
  %706 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 8
  %707 = load i8, ptr %706, align 1
  %.not975 = icmp eq i8 %707, 0
  br i1 %.not975, label %if.done469, label %if.then453

if.then453:                                       ; preds = %if.done452
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %32), !noalias !2643
  %708 = load ptr, ptr %0, align 8, !noalias !2647
  %.not.i.i1325 = icmp eq ptr %708, null
  br i1 %.not.i.i1325, label %io.write_string.exit1329.thread, label %io.write_string.exit1329

io.write_string.exit1329.thread:                  ; preds = %if.then453
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32), !noalias !2643
  br label %or_return.return454

io.write_string.exit1329:                         ; preds = %if.then453
  %709 = load ptr, ptr %676, align 8, !noalias !2647
  store i64 0, ptr %32, align 8, !noalias !2647
  %710 = call i32 %708(ptr %709, i64 4, ptr nonnull @"ggv$140", i64 0, i64 0, ptr nonnull %32, ptr nonnull %__.context_ptr), !noalias !2651
  %711 = load i64, ptr %32, align 8, !noalias !2647
  %712 = load i64, ptr %n, align 8, !noalias !2647
  %713 = add i64 %712, %711
  store i64 %713, ptr %n, align 8, !noalias !2647
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %32), !noalias !2643
  %714 = icmp eq i32 %710, 0
  br i1 %714, label %or_return.continue458, label %or_return.return454

or_return.return454:                              ; preds = %io.write_string.exit1329.thread, %io.write_string.exit1329
  %715 = phi i64 [ %705, %io.write_string.exit1329.thread ], [ %713, %io.write_string.exit1329 ]
  %err.0.i.i13281611 = phi i32 [ -1, %io.write_string.exit1329.thread ], [ %710, %io.write_string.exit1329 ]
  store i64 %715, ptr %3, align 8
  %.not987 = icmp eq ptr %2, null
  br i1 %.not987, label %common.ret, label %common.ret.sink.split

or_return.continue458:                            ; preds = %io.write_string.exit1329
  %716 = getelementptr inbounds %runtime.Type_Info, ptr %1, i64 0, i32 1
  %717 = load i64, ptr %716, align 8
  %718 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %717, ptr nonnull %n, ptr %105, ptr %__.context_ptr)
  %719 = icmp eq i32 %718, 0
  br i1 %719, label %or_return.continue463, label %or_return.return459

or_return.return459:                              ; preds = %or_return.continue458
  %720 = load i64, ptr %n, align 8
  store i64 %720, ptr %3, align 8
  %.not988 = icmp eq ptr %2, null
  br i1 %.not988, label %common.ret, label %common.ret.sink.split

or_return.continue463:                            ; preds = %or_return.continue458
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %31), !noalias !2652
  %721 = load ptr, ptr %0, align 8, !noalias !2656
  %.not.i.i1330 = icmp eq ptr %721, null
  br i1 %.not.i.i1330, label %io.write_string.exit1334.thread, label %io.write_string.exit1334

io.write_string.exit1334.thread:                  ; preds = %or_return.continue463
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31), !noalias !2652
  %.pre1760 = load i64, ptr %n, align 8
  br label %or_return.return464

io.write_string.exit1334:                         ; preds = %or_return.continue463
  %722 = load ptr, ptr %676, align 8, !noalias !2656
  store i64 0, ptr %31, align 8, !noalias !2656
  %723 = call i32 %721(ptr %722, i64 4, ptr nonnull @"ggv$14e", i64 0, i64 0, ptr nonnull %31, ptr nonnull %__.context_ptr), !noalias !2660
  %724 = load i64, ptr %31, align 8, !noalias !2656
  %725 = load i64, ptr %n, align 8, !noalias !2656
  %726 = add i64 %725, %724
  store i64 %726, ptr %n, align 8, !noalias !2656
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %31), !noalias !2652
  %727 = icmp eq i32 %723, 0
  br i1 %727, label %if.done469, label %or_return.return464

or_return.return464:                              ; preds = %io.write_string.exit1334.thread, %io.write_string.exit1334
  %728 = phi i64 [ %.pre1760, %io.write_string.exit1334.thread ], [ %726, %io.write_string.exit1334 ]
  %err.0.i.i13331614 = phi i32 [ -1, %io.write_string.exit1334.thread ], [ %723, %io.write_string.exit1334 ]
  store i64 %728, ptr %3, align 8
  %.not989 = icmp eq ptr %2, null
  br i1 %.not989, label %common.ret, label %common.ret.sink.split

if.done469:                                       ; preds = %io.write_string.exit1334, %if.done452
  %729 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 123, ptr nonnull %n, ptr %__.context_ptr)
  %730 = icmp eq i32 %729, 0
  br i1 %730, label %or_return.continue474, label %or_return.return470

or_return.return470:                              ; preds = %if.done469
  %731 = load i64, ptr %n, align 8
  store i64 %731, ptr %3, align 8
  %.not976 = icmp eq ptr %2, null
  br i1 %.not976, label %common.ret, label %common.ret.sink.split

or_return.continue474:                            ; preds = %if.done469
  %732 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 1
  %733 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %81, i64 0, i32 1, i32 1
  %734 = load i64, ptr %733, align 8
  %name477.repack981 = getelementptr inbounds %..string, ptr %name477, i64 0, i32 1
  %smax1745 = call i64 @llvm.smax.i64(i64 %734, i64 0)
  %735 = add nsw i64 %smax1745, -1
  br label %for.index.loop475

for.index.loop475:                                ; preds = %or_return.continue495, %or_return.continue474
  %.0903 = phi i64 [ -1, %or_return.continue474 ], [ %736, %or_return.continue495 ]
  %736 = add nsw i64 %.0903, 1
  %exitcond1746.not = icmp eq i64 %.0903, %735
  br i1 %exitcond1746.not, label %for.index.done501, label %for.index.body476

for.index.body476:                                ; preds = %for.index.loop475
  %737 = load ptr, ptr %732, align 8
  %738 = getelementptr %..string, ptr %737, i64 %736
  %.unpack978 = load ptr, ptr %738, align 8
  %.elt979 = getelementptr %..string, ptr %737, i64 %736, i32 1
  %.unpack980 = load i64, ptr %.elt979, align 8
  store ptr %.unpack978, ptr %name477, align 8
  store i64 %.unpack980, ptr %name477.repack981, align 8
  %739 = icmp ult i64 %.0903, 9223372036854775807
  br i1 %739, label %if.then479, label %if.done485

if.then479:                                       ; preds = %for.index.body476
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %30), !noalias !2661
  %740 = load ptr, ptr %0, align 8, !noalias !2665
  %.not.i.i1335 = icmp eq ptr %740, null
  br i1 %.not.i.i1335, label %io.write_string.exit1339.thread, label %io.write_string.exit1339

io.write_string.exit1339.thread:                  ; preds = %if.then479
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %30), !noalias !2661
  %.pre1762 = load i64, ptr %n, align 8
  br label %or_return.return480

io.write_string.exit1339:                         ; preds = %if.then479
  %741 = load ptr, ptr %676, align 8, !noalias !2665
  store i64 0, ptr %30, align 8, !noalias !2665
  %742 = call i32 %740(ptr %741, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %30, ptr nonnull %__.context_ptr), !noalias !2669
  %743 = load i64, ptr %30, align 8, !noalias !2665
  %744 = load i64, ptr %n, align 8, !noalias !2665
  %745 = add i64 %744, %743
  store i64 %745, ptr %n, align 8, !noalias !2665
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %30), !noalias !2661
  %746 = icmp eq i32 %742, 0
  br i1 %746, label %if.done485, label %or_return.return480

or_return.return480:                              ; preds = %io.write_string.exit1339, %io.write_string.exit1339.thread
  %747 = phi i64 [ %.pre1762, %io.write_string.exit1339.thread ], [ %745, %io.write_string.exit1339 ]
  %err.0.i.i13381617 = phi i32 [ -1, %io.write_string.exit1339.thread ], [ %742, %io.write_string.exit1339 ]
  store i64 %747, ptr %3, align 8
  %.not986 = icmp eq ptr %2, null
  br i1 %.not986, label %common.ret, label %common.ret.sink.split

if.done485:                                       ; preds = %io.write_string.exit1339, %for.index.body476
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %29), !noalias !2670
  %748 = load ptr, ptr %0, align 8, !noalias !2674
  %.not.i.i1340 = icmp eq ptr %748, null
  br i1 %.not.i.i1340, label %io.write_string.exit1344.thread, label %io.write_string.exit1344

io.write_string.exit1344.thread:                  ; preds = %if.done485
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %29), !noalias !2670
  %.pre1761 = load i64, ptr %n, align 8
  br label %or_return.return486

io.write_string.exit1344:                         ; preds = %if.done485
  %749 = load ptr, ptr %676, align 8, !noalias !2674
  store i64 0, ptr %29, align 8, !noalias !2674
  %750 = call i32 %748(ptr %749, i64 4, ptr nonnull %name477, i64 0, i64 0, ptr nonnull %29, ptr nonnull %__.context_ptr), !noalias !2678
  %751 = load i64, ptr %29, align 8, !noalias !2674
  %752 = load i64, ptr %n, align 8, !noalias !2674
  %753 = add i64 %752, %751
  store i64 %753, ptr %n, align 8, !noalias !2674
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %29), !noalias !2670
  %754 = icmp eq i32 %750, 0
  br i1 %754, label %or_return.continue490, label %or_return.return486

or_return.return486:                              ; preds = %io.write_string.exit1344, %io.write_string.exit1344.thread
  %755 = phi i64 [ %.pre1761, %io.write_string.exit1344.thread ], [ %753, %io.write_string.exit1344 ]
  %err.0.i.i13431620 = phi i32 [ -1, %io.write_string.exit1344.thread ], [ %750, %io.write_string.exit1344 ]
  store i64 %755, ptr %3, align 8
  %.not983 = icmp eq ptr %2, null
  br i1 %.not983, label %common.ret, label %common.ret.sink.split

or_return.continue490:                            ; preds = %io.write_string.exit1344
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %28), !noalias !2679
  %756 = load ptr, ptr %0, align 8, !noalias !2683
  %.not.i.i1345 = icmp eq ptr %756, null
  br i1 %.not.i.i1345, label %io.write_string.exit1349.thread, label %io.write_string.exit1349

io.write_string.exit1349.thread:                  ; preds = %or_return.continue490
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28), !noalias !2679
  br label %or_return.return491

io.write_string.exit1349:                         ; preds = %or_return.continue490
  %757 = load ptr, ptr %676, align 8, !noalias !2683
  store i64 0, ptr %28, align 8, !noalias !2683
  %758 = call i32 %756(ptr %757, i64 4, ptr nonnull @"ggv$13c", i64 0, i64 0, ptr nonnull %28, ptr nonnull %__.context_ptr), !noalias !2687
  %759 = load i64, ptr %28, align 8, !noalias !2683
  %760 = load i64, ptr %n, align 8, !noalias !2683
  %761 = add i64 %760, %759
  store i64 %761, ptr %n, align 8, !noalias !2683
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28), !noalias !2679
  %762 = icmp eq i32 %758, 0
  br i1 %762, label %or_return.continue495, label %or_return.return491

or_return.return491:                              ; preds = %io.write_string.exit1349, %io.write_string.exit1349.thread
  %763 = phi i64 [ %753, %io.write_string.exit1349.thread ], [ %761, %io.write_string.exit1349 ]
  %err.0.i.i13481623 = phi i32 [ -1, %io.write_string.exit1349.thread ], [ %758, %io.write_string.exit1349 ]
  store i64 %763, ptr %3, align 8
  %.not984 = icmp eq ptr %2, null
  br i1 %.not984, label %common.ret, label %common.ret.sink.split

or_return.continue495:                            ; preds = %io.write_string.exit1349
  %764 = load ptr, ptr %81, align 8
  %765 = getelementptr ptr, ptr %764, i64 %736
  %766 = load ptr, ptr %765, align 8
  store i64 0, ptr %106, align 8
  %767 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %766, ptr nonnull %n, ptr %106, ptr %__.context_ptr)
  %768 = icmp eq i32 %767, 0
  br i1 %768, label %for.index.loop475, label %or_return.return496

or_return.return496:                              ; preds = %or_return.continue495
  %769 = load i64, ptr %n, align 8
  store i64 %769, ptr %3, align 8
  %.not985 = icmp eq ptr %2, null
  br i1 %.not985, label %common.ret, label %common.ret.sink.split

for.index.done501:                                ; preds = %for.index.loop475
  %770 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 125, ptr nonnull %n, ptr %__.context_ptr)
  %771 = icmp eq i32 %770, 0
  br i1 %771, label %typeswitch.done, label %or_return.return502

or_return.return502:                              ; preds = %for.index.done501
  %772 = load i64, ptr %n, align 8
  store i64 %772, ptr %3, align 8
  %.not977 = icmp eq ptr %2, null
  br i1 %.not977, label %common.ret, label %common.ret.sink.split

typeswitch.body507:                               ; preds = %if.done5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %81, ptr noundef nonnull align 1 dereferenceable(48) %137, i64 48, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27), !noalias !2688
  %773 = load ptr, ptr %0, align 8, !noalias !2692
  %.not.i.i1350 = icmp eq ptr %773, null
  br i1 %.not.i.i1350, label %io.write_string.exit1354.thread, label %io.write_string.exit1354

io.write_string.exit1354.thread:                  ; preds = %typeswitch.body507
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27), !noalias !2688
  br label %or_return.return508

io.write_string.exit1354:                         ; preds = %typeswitch.body507
  %774 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %775 = load ptr, ptr %774, align 8, !noalias !2692
  store i64 0, ptr %27, align 8, !noalias !2692
  %776 = call i32 %773(ptr %775, i64 4, ptr nonnull @"ggv$13d", i64 0, i64 0, ptr nonnull %27, ptr nonnull %__.context_ptr), !noalias !2696
  %777 = load i64, ptr %27, align 8, !noalias !2692
  %778 = load i64, ptr %n, align 8, !noalias !2692
  %779 = add i64 %778, %777
  store i64 %779, ptr %n, align 8, !noalias !2692
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27), !noalias !2688
  %780 = icmp eq i32 %776, 0
  br i1 %780, label %or_return.continue512, label %or_return.return508

or_return.return508:                              ; preds = %io.write_string.exit1354.thread, %io.write_string.exit1354
  %781 = phi i64 [ 0, %io.write_string.exit1354.thread ], [ %779, %io.write_string.exit1354 ]
  %err.0.i.i13531626 = phi i32 [ -1, %io.write_string.exit1354.thread ], [ %776, %io.write_string.exit1354 ]
  store i64 %781, ptr %3, align 8
  %.not948 = icmp eq ptr %2, null
  br i1 %.not948, label %common.ret, label %common.ret.sink.split

or_return.continue512:                            ; preds = %io.write_string.exit1354
  %782 = getelementptr inbounds %runtime.Type_Info_Union, ptr %81, i64 0, i32 5
  %783 = load i8, ptr %782, align 1
  %.not949 = icmp eq i8 %783, 0
  br i1 %.not949, label %if.done519, label %if.then513

if.then513:                                       ; preds = %or_return.continue512
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26), !noalias !2697
  %784 = load ptr, ptr %0, align 8, !noalias !2701
  %.not.i.i1355 = icmp eq ptr %784, null
  br i1 %.not.i.i1355, label %io.write_string.exit1359.thread, label %io.write_string.exit1359

io.write_string.exit1359.thread:                  ; preds = %if.then513
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26), !noalias !2697
  br label %or_return.return514

io.write_string.exit1359:                         ; preds = %if.then513
  %785 = load ptr, ptr %774, align 8, !noalias !2701
  store i64 0, ptr %26, align 8, !noalias !2701
  %786 = call i32 %784(ptr %785, i64 4, ptr nonnull @"ggv$13e", i64 0, i64 0, ptr nonnull %26, ptr nonnull %__.context_ptr), !noalias !2705
  %787 = load i64, ptr %26, align 8, !noalias !2701
  %788 = load i64, ptr %n, align 8, !noalias !2701
  %789 = add i64 %788, %787
  store i64 %789, ptr %n, align 8, !noalias !2701
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26), !noalias !2697
  %790 = icmp eq i32 %786, 0
  br i1 %790, label %if.done519, label %or_return.return514

or_return.return514:                              ; preds = %io.write_string.exit1359.thread, %io.write_string.exit1359
  %791 = phi i64 [ %779, %io.write_string.exit1359.thread ], [ %789, %io.write_string.exit1359 ]
  %err.0.i.i13581629 = phi i32 [ -1, %io.write_string.exit1359.thread ], [ %786, %io.write_string.exit1359 ]
  store i64 %791, ptr %3, align 8
  %.not960 = icmp eq ptr %2, null
  br i1 %.not960, label %common.ret, label %common.ret.sink.split

if.done519:                                       ; preds = %io.write_string.exit1359, %or_return.continue512
  %792 = phi i64 [ %789, %io.write_string.exit1359 ], [ %779, %or_return.continue512 ]
  %793 = getelementptr inbounds %runtime.Type_Info_Union, ptr %81, i64 0, i32 6
  %794 = load i8, ptr %793, align 2
  %.not950 = icmp eq i8 %794, 0
  br i1 %.not950, label %if.done526, label %if.then520

if.then520:                                       ; preds = %if.done519
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25), !noalias !2706
  %795 = load ptr, ptr %0, align 8, !noalias !2710
  %.not.i.i1360 = icmp eq ptr %795, null
  br i1 %.not.i.i1360, label %io.write_string.exit1364.thread, label %io.write_string.exit1364

io.write_string.exit1364.thread:                  ; preds = %if.then520
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25), !noalias !2706
  br label %or_return.return521

io.write_string.exit1364:                         ; preds = %if.then520
  %796 = load ptr, ptr %774, align 8, !noalias !2710
  store i64 0, ptr %25, align 8, !noalias !2710
  %797 = call i32 %795(ptr %796, i64 4, ptr nonnull @"ggv$13f", i64 0, i64 0, ptr nonnull %25, ptr nonnull %__.context_ptr), !noalias !2714
  %798 = load i64, ptr %25, align 8, !noalias !2710
  %799 = load i64, ptr %n, align 8, !noalias !2710
  %800 = add i64 %799, %798
  store i64 %800, ptr %n, align 8, !noalias !2710
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25), !noalias !2706
  %801 = icmp eq i32 %797, 0
  br i1 %801, label %if.done526, label %or_return.return521

or_return.return521:                              ; preds = %io.write_string.exit1364.thread, %io.write_string.exit1364
  %802 = phi i64 [ %792, %io.write_string.exit1364.thread ], [ %800, %io.write_string.exit1364 ]
  %err.0.i.i13631632 = phi i32 [ -1, %io.write_string.exit1364.thread ], [ %797, %io.write_string.exit1364 ]
  store i64 %802, ptr %3, align 8
  %.not959 = icmp eq ptr %2, null
  br i1 %.not959, label %common.ret, label %common.ret.sink.split

if.done526:                                       ; preds = %io.write_string.exit1364, %if.done519
  %803 = phi i64 [ %800, %io.write_string.exit1364 ], [ %792, %if.done519 ]
  %804 = getelementptr inbounds %runtime.Type_Info_Union, ptr %81, i64 0, i32 4
  %805 = load i8, ptr %804, align 8
  %.not951 = icmp eq i8 %805, 0
  br i1 %.not951, label %if.done543, label %if.then527

if.then527:                                       ; preds = %if.done526
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24), !noalias !2715
  %806 = load ptr, ptr %0, align 8, !noalias !2719
  %.not.i.i1365 = icmp eq ptr %806, null
  br i1 %.not.i.i1365, label %io.write_string.exit1369.thread, label %io.write_string.exit1369

io.write_string.exit1369.thread:                  ; preds = %if.then527
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24), !noalias !2715
  br label %or_return.return528

io.write_string.exit1369:                         ; preds = %if.then527
  %807 = load ptr, ptr %774, align 8, !noalias !2719
  store i64 0, ptr %24, align 8, !noalias !2719
  %808 = call i32 %806(ptr %807, i64 4, ptr nonnull @"ggv$140", i64 0, i64 0, ptr nonnull %24, ptr nonnull %__.context_ptr), !noalias !2723
  %809 = load i64, ptr %24, align 8, !noalias !2719
  %810 = load i64, ptr %n, align 8, !noalias !2719
  %811 = add i64 %810, %809
  store i64 %811, ptr %n, align 8, !noalias !2719
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24), !noalias !2715
  %812 = icmp eq i32 %808, 0
  br i1 %812, label %or_return.continue532, label %or_return.return528

or_return.return528:                              ; preds = %io.write_string.exit1369.thread, %io.write_string.exit1369
  %813 = phi i64 [ %803, %io.write_string.exit1369.thread ], [ %811, %io.write_string.exit1369 ]
  %err.0.i.i13681635 = phi i32 [ -1, %io.write_string.exit1369.thread ], [ %808, %io.write_string.exit1369 ]
  store i64 %813, ptr %3, align 8
  %.not956 = icmp eq ptr %2, null
  br i1 %.not956, label %common.ret, label %common.ret.sink.split

or_return.continue532:                            ; preds = %io.write_string.exit1369
  %814 = getelementptr inbounds %runtime.Type_Info, ptr %1, i64 0, i32 1
  %815 = load i64, ptr %814, align 8
  %816 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %815, ptr nonnull %n, ptr %107, ptr %__.context_ptr)
  %817 = icmp eq i32 %816, 0
  br i1 %817, label %or_return.continue537, label %or_return.return533

or_return.return533:                              ; preds = %or_return.continue532
  %818 = load i64, ptr %n, align 8
  store i64 %818, ptr %3, align 8
  %.not957 = icmp eq ptr %2, null
  br i1 %.not957, label %common.ret, label %common.ret.sink.split

or_return.continue537:                            ; preds = %or_return.continue532
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23), !noalias !2724
  %819 = load ptr, ptr %0, align 8, !noalias !2728
  %.not.i.i1370 = icmp eq ptr %819, null
  br i1 %.not.i.i1370, label %io.write_string.exit1374.thread, label %io.write_string.exit1374

io.write_string.exit1374.thread:                  ; preds = %or_return.continue537
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23), !noalias !2724
  %.pre1758 = load i64, ptr %n, align 8
  br label %or_return.return538

io.write_string.exit1374:                         ; preds = %or_return.continue537
  %820 = load ptr, ptr %774, align 8, !noalias !2728
  store i64 0, ptr %23, align 8, !noalias !2728
  %821 = call i32 %819(ptr %820, i64 4, ptr nonnull @"ggv$14e", i64 0, i64 0, ptr nonnull %23, ptr nonnull %__.context_ptr), !noalias !2732
  %822 = load i64, ptr %23, align 8, !noalias !2728
  %823 = load i64, ptr %n, align 8, !noalias !2728
  %824 = add i64 %823, %822
  store i64 %824, ptr %n, align 8, !noalias !2728
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23), !noalias !2724
  %825 = icmp eq i32 %821, 0
  br i1 %825, label %if.done543, label %or_return.return538

or_return.return538:                              ; preds = %io.write_string.exit1374.thread, %io.write_string.exit1374
  %826 = phi i64 [ %.pre1758, %io.write_string.exit1374.thread ], [ %824, %io.write_string.exit1374 ]
  %err.0.i.i13731638 = phi i32 [ -1, %io.write_string.exit1374.thread ], [ %821, %io.write_string.exit1374 ]
  store i64 %826, ptr %3, align 8
  %.not958 = icmp eq ptr %2, null
  br i1 %.not958, label %common.ret, label %common.ret.sink.split

if.done543:                                       ; preds = %io.write_string.exit1374, %if.done526
  %827 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 123, ptr nonnull %n, ptr %__.context_ptr)
  %828 = icmp eq i32 %827, 0
  br i1 %828, label %or_return.continue548, label %or_return.return544

or_return.return544:                              ; preds = %if.done543
  %829 = load i64, ptr %n, align 8
  store i64 %829, ptr %3, align 8
  %.not952 = icmp eq ptr %2, null
  br i1 %.not952, label %common.ret, label %common.ret.sink.split

or_return.continue548:                            ; preds = %if.done543
  %830 = getelementptr inbounds { ptr, i64 }, ptr %81, i64 0, i32 1
  %831 = load i64, ptr %830, align 8
  %smax1743 = call i64 @llvm.smax.i64(i64 %831, i64 0)
  %832 = add nsw i64 %smax1743, -1
  br label %for.index.loop549

for.index.loop549:                                ; preds = %if.done558, %or_return.continue548
  %.0902 = phi i64 [ -1, %or_return.continue548 ], [ %833, %if.done558 ]
  %833 = add nsw i64 %.0902, 1
  %exitcond1744.not = icmp eq i64 %.0902, %832
  br i1 %exitcond1744.not, label %for.index.done564, label %for.index.body550

for.index.body550:                                ; preds = %for.index.loop549
  %834 = load ptr, ptr %81, align 8
  %835 = getelementptr ptr, ptr %834, i64 %833
  %836 = load ptr, ptr %835, align 8
  %837 = icmp ult i64 %.0902, 9223372036854775807
  br i1 %837, label %if.then552, label %if.done558

if.then552:                                       ; preds = %for.index.body550
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22), !noalias !2733
  %838 = load ptr, ptr %0, align 8, !noalias !2737
  %.not.i.i1375 = icmp eq ptr %838, null
  br i1 %.not.i.i1375, label %io.write_string.exit1379.thread, label %io.write_string.exit1379

io.write_string.exit1379.thread:                  ; preds = %if.then552
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22), !noalias !2733
  %.pre1759 = load i64, ptr %n, align 8
  br label %or_return.return553

io.write_string.exit1379:                         ; preds = %if.then552
  %839 = load ptr, ptr %774, align 8, !noalias !2737
  store i64 0, ptr %22, align 8, !noalias !2737
  %840 = call i32 %838(ptr %839, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %22, ptr nonnull %__.context_ptr), !noalias !2741
  %841 = load i64, ptr %22, align 8, !noalias !2737
  %842 = load i64, ptr %n, align 8, !noalias !2737
  %843 = add i64 %842, %841
  store i64 %843, ptr %n, align 8, !noalias !2737
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22), !noalias !2733
  %844 = icmp eq i32 %840, 0
  br i1 %844, label %if.done558, label %or_return.return553

or_return.return553:                              ; preds = %io.write_string.exit1379, %io.write_string.exit1379.thread
  %845 = phi i64 [ %.pre1759, %io.write_string.exit1379.thread ], [ %843, %io.write_string.exit1379 ]
  %err.0.i.i13781641 = phi i32 [ -1, %io.write_string.exit1379.thread ], [ %840, %io.write_string.exit1379 ]
  store i64 %845, ptr %3, align 8
  %.not955 = icmp eq ptr %2, null
  br i1 %.not955, label %common.ret, label %common.ret.sink.split

if.done558:                                       ; preds = %io.write_string.exit1379, %for.index.body550
  store i64 0, ptr %108, align 8
  %846 = call fastcc i32 @reflect.write_type_writer(ptr %0, ptr %836, ptr nonnull %n, ptr %108, ptr %__.context_ptr)
  %847 = icmp eq i32 %846, 0
  br i1 %847, label %for.index.loop549, label %or_return.return559

or_return.return559:                              ; preds = %if.done558
  %848 = load i64, ptr %n, align 8
  store i64 %848, ptr %3, align 8
  %.not954 = icmp eq ptr %2, null
  br i1 %.not954, label %common.ret, label %common.ret.sink.split

for.index.done564:                                ; preds = %for.index.loop549
  %849 = call fastcc i32 @io.write_byte(ptr %0, i8 125, ptr nonnull %n, ptr %__.context_ptr)
  %850 = icmp eq i32 %849, 0
  br i1 %850, label %typeswitch.done, label %or_return.return565

or_return.return565:                              ; preds = %for.index.done564
  %851 = load i64, ptr %n, align 8
  store i64 %851, ptr %3, align 8
  %.not953 = icmp eq ptr %2, null
  br i1 %.not953, label %common.ret, label %common.ret.sink.split

typeswitch.body570:                               ; preds = %if.done5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %81, ptr noundef nonnull align 1 dereferenceable(40) %137, i64 40, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %21), !noalias !2742
  %852 = load ptr, ptr %0, align 8, !noalias !2746
  %.not.i.i1380 = icmp eq ptr %852, null
  br i1 %.not.i.i1380, label %io.write_string.exit1384.thread, label %io.write_string.exit1384

io.write_string.exit1384.thread:                  ; preds = %typeswitch.body570
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21), !noalias !2742
  br label %or_return.return571

io.write_string.exit1384:                         ; preds = %typeswitch.body570
  %853 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %854 = load ptr, ptr %853, align 8, !noalias !2746
  store i64 0, ptr %21, align 8, !noalias !2746
  %855 = call i32 %852(ptr %854, i64 4, ptr nonnull @"ggv$143", i64 0, i64 0, ptr nonnull %21, ptr nonnull %__.context_ptr), !noalias !2750
  %856 = load i64, ptr %21, align 8, !noalias !2746
  %857 = load i64, ptr %n, align 8, !noalias !2746
  %858 = add i64 %857, %856
  store i64 %858, ptr %n, align 8, !noalias !2746
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %21), !noalias !2742
  %859 = icmp eq i32 %855, 0
  br i1 %859, label %or_return.continue575, label %or_return.return571

or_return.return571:                              ; preds = %io.write_string.exit1384.thread, %io.write_string.exit1384
  %860 = phi i64 [ 0, %io.write_string.exit1384.thread ], [ %858, %io.write_string.exit1384 ]
  %err.0.i.i13831644 = phi i32 [ -1, %io.write_string.exit1384.thread ], [ %855, %io.write_string.exit1384 ]
  store i64 %860, ptr %3, align 8
  %.not938 = icmp eq ptr %2, null
  br i1 %.not938, label %common.ret, label %common.ret.sink.split

or_return.continue575:                            ; preds = %io.write_string.exit1384
  %861 = load ptr, ptr %81, align 8
  store i64 0, ptr %109, align 8
  %862 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %861, ptr nonnull %n, ptr %109, ptr %__.context_ptr)
  %863 = icmp eq i32 %862, 0
  br i1 %863, label %or_return.continue580, label %or_return.return576

or_return.return576:                              ; preds = %or_return.continue575
  %864 = load i64, ptr %n, align 8
  store i64 %864, ptr %3, align 8
  %.not939 = icmp eq ptr %2, null
  br i1 %.not939, label %common.ret, label %common.ret.sink.split

or_return.continue580:                            ; preds = %or_return.continue575
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %20), !noalias !2751
  %865 = load ptr, ptr %0, align 8, !noalias !2755
  %.not.i.i1385 = icmp eq ptr %865, null
  br i1 %.not.i.i1385, label %io.write_string.exit1389.thread, label %io.write_string.exit1389

io.write_string.exit1389.thread:                  ; preds = %or_return.continue580
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20), !noalias !2751
  %.pre1757 = load i64, ptr %n, align 8
  br label %or_return.return581

io.write_string.exit1389:                         ; preds = %or_return.continue580
  %866 = load ptr, ptr %853, align 8, !noalias !2755
  store i64 0, ptr %20, align 8, !noalias !2755
  %867 = call i32 %865(ptr %866, i64 4, ptr nonnull @"ggv$144", i64 0, i64 0, ptr nonnull %20, ptr nonnull %__.context_ptr), !noalias !2759
  %868 = load i64, ptr %20, align 8, !noalias !2755
  %869 = load i64, ptr %n, align 8, !noalias !2755
  %870 = add i64 %869, %868
  store i64 %870, ptr %n, align 8, !noalias !2755
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %20), !noalias !2751
  %871 = icmp eq i32 %867, 0
  br i1 %871, label %or_return.continue585, label %or_return.return581

or_return.return581:                              ; preds = %io.write_string.exit1389.thread, %io.write_string.exit1389
  %872 = phi i64 [ %.pre1757, %io.write_string.exit1389.thread ], [ %870, %io.write_string.exit1389 ]
  %err.0.i.i13881647 = phi i32 [ -1, %io.write_string.exit1389.thread ], [ %867, %io.write_string.exit1389 ]
  store i64 %872, ptr %3, align 8
  %.not940 = icmp eq ptr %2, null
  br i1 %.not940, label %common.ret, label %common.ret.sink.split

or_return.continue585:                            ; preds = %io.write_string.exit1389
  %873 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %81, i64 0, i32 1
  %874 = getelementptr inbounds %runtime.Type_Info_Enum, ptr %81, i64 0, i32 1, i32 1
  %875 = load i64, ptr %874, align 8
  %name588.repack944 = getelementptr inbounds %..string, ptr %name588, i64 0, i32 1
  %smax = call i64 @llvm.smax.i64(i64 %875, i64 0)
  %876 = add nsw i64 %smax, -1
  br label %for.index.loop586

for.index.loop586:                                ; preds = %io.write_string.exit1399, %or_return.continue585
  %877 = phi i64 [ %870, %or_return.continue585 ], [ %896, %io.write_string.exit1399 ]
  %.0 = phi i64 [ -1, %or_return.continue585 ], [ %878, %io.write_string.exit1399 ]
  %878 = add nsw i64 %.0, 1
  %exitcond.not = icmp eq i64 %.0, %876
  br i1 %exitcond.not, label %for.index.done602, label %for.index.body587

for.index.body587:                                ; preds = %for.index.loop586
  %879 = load ptr, ptr %873, align 8
  %880 = getelementptr %..string, ptr %879, i64 %878
  %.unpack = load ptr, ptr %880, align 8
  %.elt942 = getelementptr %..string, ptr %879, i64 %878, i32 1
  %.unpack943 = load i64, ptr %.elt942, align 8
  store ptr %.unpack, ptr %name588, align 8
  store i64 %.unpack943, ptr %name588.repack944, align 8
  %881 = icmp ult i64 %.0, 9223372036854775807
  br i1 %881, label %if.then590, label %if.done596

if.then590:                                       ; preds = %for.index.body587
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19), !noalias !2760
  %882 = load ptr, ptr %0, align 8, !noalias !2764
  %.not.i.i1390 = icmp eq ptr %882, null
  br i1 %.not.i.i1390, label %io.write_string.exit1394.thread, label %io.write_string.exit1394

io.write_string.exit1394.thread:                  ; preds = %if.then590
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19), !noalias !2760
  br label %or_return.return591

io.write_string.exit1394:                         ; preds = %if.then590
  %883 = load ptr, ptr %853, align 8, !noalias !2764
  store i64 0, ptr %19, align 8, !noalias !2764
  %884 = call i32 %882(ptr %883, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %19, ptr nonnull %__.context_ptr), !noalias !2768
  %885 = load i64, ptr %19, align 8, !noalias !2764
  %886 = load i64, ptr %n, align 8, !noalias !2764
  %887 = add i64 %886, %885
  store i64 %887, ptr %n, align 8, !noalias !2764
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19), !noalias !2760
  %888 = icmp eq i32 %884, 0
  br i1 %888, label %if.done596, label %or_return.return591

or_return.return591:                              ; preds = %io.write_string.exit1394, %io.write_string.exit1394.thread
  %889 = phi i64 [ %877, %io.write_string.exit1394.thread ], [ %887, %io.write_string.exit1394 ]
  %err.0.i.i13931650 = phi i32 [ -1, %io.write_string.exit1394.thread ], [ %884, %io.write_string.exit1394 ]
  store i64 %889, ptr %3, align 8
  %.not947 = icmp eq ptr %2, null
  br i1 %.not947, label %common.ret, label %common.ret.sink.split

if.done596:                                       ; preds = %io.write_string.exit1394, %for.index.body587
  %890 = phi i64 [ %887, %io.write_string.exit1394 ], [ %877, %for.index.body587 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18), !noalias !2769
  %891 = load ptr, ptr %0, align 8, !noalias !2773
  %.not.i.i1395 = icmp eq ptr %891, null
  br i1 %.not.i.i1395, label %io.write_string.exit1399.thread, label %io.write_string.exit1399

io.write_string.exit1399.thread:                  ; preds = %if.done596
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18), !noalias !2769
  br label %or_return.return597

io.write_string.exit1399:                         ; preds = %if.done596
  %892 = load ptr, ptr %853, align 8, !noalias !2773
  store i64 0, ptr %18, align 8, !noalias !2773
  %893 = call i32 %891(ptr %892, i64 4, ptr nonnull %name588, i64 0, i64 0, ptr nonnull %18, ptr nonnull %__.context_ptr), !noalias !2777
  %894 = load i64, ptr %18, align 8, !noalias !2773
  %895 = load i64, ptr %n, align 8, !noalias !2773
  %896 = add i64 %895, %894
  store i64 %896, ptr %n, align 8, !noalias !2773
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18), !noalias !2769
  %897 = icmp eq i32 %893, 0
  br i1 %897, label %for.index.loop586, label %or_return.return597

or_return.return597:                              ; preds = %io.write_string.exit1399, %io.write_string.exit1399.thread
  %898 = phi i64 [ %890, %io.write_string.exit1399.thread ], [ %896, %io.write_string.exit1399 ]
  %err.0.i.i13981653 = phi i32 [ -1, %io.write_string.exit1399.thread ], [ %893, %io.write_string.exit1399 ]
  store i64 %898, ptr %3, align 8
  %.not946 = icmp eq ptr %2, null
  br i1 %.not946, label %common.ret, label %common.ret.sink.split

for.index.done602:                                ; preds = %for.index.loop586
  %899 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 125, ptr nonnull %n, ptr %__.context_ptr)
  %900 = icmp eq i32 %899, 0
  br i1 %900, label %typeswitch.done, label %or_return.return603

or_return.return603:                              ; preds = %for.index.done602
  %901 = load i64, ptr %n, align 8
  store i64 %901, ptr %3, align 8
  %.not941 = icmp eq ptr %2, null
  br i1 %.not941, label %common.ret, label %common.ret.sink.split

typeswitch.body608:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 32, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17), !noalias !2778
  %902 = load ptr, ptr %0, align 8, !noalias !2782
  %.not.i.i1400 = icmp eq ptr %902, null
  br i1 %.not.i.i1400, label %io.write_string.exit1404.thread, label %io.write_string.exit1404

io.write_string.exit1404.thread:                  ; preds = %typeswitch.body608
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17), !noalias !2778
  br label %or_return.return609

io.write_string.exit1404:                         ; preds = %typeswitch.body608
  %903 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %904 = load ptr, ptr %903, align 8, !noalias !2782
  store i64 0, ptr %17, align 8, !noalias !2782
  %905 = call i32 %902(ptr %904, i64 4, ptr nonnull @"ggv$146", i64 0, i64 0, ptr nonnull %17, ptr nonnull %__.context_ptr), !noalias !2786
  %906 = load i64, ptr %17, align 8, !noalias !2782
  %907 = load i64, ptr %n, align 8, !noalias !2782
  %908 = add i64 %907, %906
  store i64 %908, ptr %n, align 8, !noalias !2782
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17), !noalias !2778
  %909 = icmp eq i32 %905, 0
  br i1 %909, label %or_return.continue613, label %or_return.return609

or_return.return609:                              ; preds = %io.write_string.exit1404.thread, %io.write_string.exit1404
  %910 = phi i64 [ 0, %io.write_string.exit1404.thread ], [ %908, %io.write_string.exit1404 ]
  %err.0.i.i14031656 = phi i32 [ -1, %io.write_string.exit1404.thread ], [ %905, %io.write_string.exit1404 ]
  store i64 %910, ptr %3, align 8
  %.not924 = icmp eq ptr %2, null
  br i1 %.not924, label %common.ret, label %common.ret.sink.split

or_return.continue613:                            ; preds = %io.write_string.exit1404
  %911 = load ptr, ptr %81, align 8
  %912 = icmp eq ptr %911, null
  br i1 %912, label %switch.default.body637, label %for.body.preheader.i.i

for.body.preheader.i.i:                           ; preds = %or_return.continue613
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %16)
  %913 = getelementptr inbounds %runtime.Type_Info, ptr %911, i64 0, i32 5, i32 1
  %914 = load i64, ptr %913, align 8
  %cond1.i.i = icmp eq i64 %914, 1
  br i1 %cond1.i.i, label %typeswitch.body.lr.ph.i.i, label %reflect.is_enum.exit.thread1659

typeswitch.body.lr.ph.i.i:                        ; preds = %for.body.preheader.i.i
  %915 = getelementptr inbounds %runtime.Type_Info_Named, ptr %16, i64 0, i32 1
  br label %typeswitch.body.i.i

typeswitch.body.i.i:                              ; preds = %typeswitch.body.i.i, %typeswitch.body.lr.ph.i.i
  %base.02.i.i = phi ptr [ %911, %typeswitch.body.lr.ph.i.i ], [ %917, %typeswitch.body.i.i ]
  %916 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %16, ptr noundef nonnull align 1 dereferenceable(80) %916, i64 80, i1 false)
  %917 = load ptr, ptr %915, align 8
  %918 = getelementptr inbounds %runtime.Type_Info, ptr %917, i64 0, i32 5, i32 1
  %919 = load i64, ptr %918, align 8
  %cond.i.i = icmp eq i64 %919, 1
  br i1 %cond.i.i, label %typeswitch.body.i.i, label %reflect.is_enum.exit

reflect.is_enum.exit:                             ; preds = %typeswitch.body.i.i
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %16)
  %.not1699 = icmp eq i64 %919, 21
  br i1 %.not1699, label %switch.case.body614, label %for.body.preheader.i.i1405

reflect.is_enum.exit.thread1659:                  ; preds = %for.body.preheader.i.i
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %16)
  %.not1697 = icmp eq i64 %914, 21
  br i1 %.not1697, label %switch.case.body614, label %for.body.preheader.i.i1405.thread

for.body.preheader.i.i1405.thread:                ; preds = %reflect.is_enum.exit.thread1659
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %15)
  br label %reflect.is_rune.exit

for.body.preheader.i.i1405:                       ; preds = %reflect.is_enum.exit
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %15)
  br i1 %cond1.i.i, label %typeswitch.body.lr.ph.i.i1409, label %reflect.is_rune.exit

typeswitch.body.lr.ph.i.i1409:                    ; preds = %for.body.preheader.i.i1405
  %920 = getelementptr inbounds %runtime.Type_Info_Named, ptr %15, i64 0, i32 1
  br label %typeswitch.body.i.i1410

typeswitch.body.i.i1410:                          ; preds = %typeswitch.body.i.i1410, %typeswitch.body.lr.ph.i.i1409
  %base.02.i.i1411 = phi ptr [ %911, %typeswitch.body.lr.ph.i.i1409 ], [ %922, %typeswitch.body.i.i1410 ]
  %921 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i1411, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %15, ptr noundef nonnull align 1 dereferenceable(80) %921, i64 80, i1 false)
  %922 = load ptr, ptr %920, align 8
  %923 = getelementptr inbounds %runtime.Type_Info, ptr %922, i64 0, i32 5, i32 1
  %924 = load i64, ptr %923, align 8
  %cond.i.i1412 = icmp eq i64 %924, 1
  br i1 %cond.i.i1412, label %typeswitch.body.i.i1410, label %reflect.is_rune.exit

reflect.is_rune.exit:                             ; preds = %typeswitch.body.i.i1410, %for.body.preheader.i.i1405.thread, %for.body.preheader.i.i1405
  %925 = phi i64 [ %914, %for.body.preheader.i.i1405 ], [ %914, %for.body.preheader.i.i1405.thread ], [ %924, %typeswitch.body.i.i1410 ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %15)
  %.not1698 = icmp eq i64 %925, 3
  br i1 %.not1698, label %switch.case.body621, label %switch.default.body637

switch.case.body614:                              ; preds = %reflect.is_enum.exit.thread1659, %reflect.is_enum.exit
  store i64 0, ptr %110, align 8
  %926 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr nonnull %911, ptr nonnull %n, ptr %110, ptr %__.context_ptr)
  %927 = icmp eq i32 %926, 0
  br i1 %927, label %switch.done653, label %or_return.return615

or_return.return615:                              ; preds = %switch.case.body614
  %928 = load i64, ptr %n, align 8
  store i64 %928, ptr %3, align 8
  %.not937 = icmp eq ptr %2, null
  br i1 %.not937, label %common.ret, label %common.ret.sink.split

switch.case.body621:                              ; preds = %reflect.is_rune.exit
  %929 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %81, i64 0, i32 2
  %930 = load i64, ptr %929, align 8
  %931 = trunc i64 %930 to i32
  %932 = call fastcc i32 @io.write_encoded_rune(ptr nonnull %0, i32 %931, i1 zeroext true, ptr nonnull %n, ptr %111, ptr %__.context_ptr)
  %933 = icmp eq i32 %932, 0
  br i1 %933, label %or_return.continue626, label %or_return.return622

or_return.return622:                              ; preds = %switch.case.body621
  %934 = load i64, ptr %n, align 8
  store i64 %934, ptr %3, align 8
  %.not934 = icmp eq ptr %2, null
  br i1 %.not934, label %common.ret, label %common.ret.sink.split

or_return.continue626:                            ; preds = %switch.case.body621
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14), !noalias !2787
  %935 = load ptr, ptr %0, align 8, !noalias !2791
  %.not.i.i1413 = icmp eq ptr %935, null
  br i1 %.not.i.i1413, label %io.write_string.exit1417.thread, label %io.write_string.exit1417

io.write_string.exit1417.thread:                  ; preds = %or_return.continue626
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !2787
  %.pre1754 = load i64, ptr %n, align 8
  br label %or_return.return627

io.write_string.exit1417:                         ; preds = %or_return.continue626
  %936 = load ptr, ptr %903, align 8, !noalias !2791
  store i64 0, ptr %14, align 8, !noalias !2791
  %937 = call i32 %935(ptr %936, i64 4, ptr nonnull @"ggv$148", i64 0, i64 0, ptr nonnull %14, ptr nonnull %__.context_ptr), !noalias !2795
  %938 = load i64, ptr %14, align 8, !noalias !2791
  %939 = load i64, ptr %n, align 8, !noalias !2791
  %940 = add i64 %939, %938
  store i64 %940, ptr %n, align 8, !noalias !2791
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14), !noalias !2787
  %941 = icmp eq i32 %937, 0
  br i1 %941, label %or_return.continue631, label %or_return.return627

or_return.return627:                              ; preds = %io.write_string.exit1417.thread, %io.write_string.exit1417
  %942 = phi i64 [ %.pre1754, %io.write_string.exit1417.thread ], [ %940, %io.write_string.exit1417 ]
  %err.0.i.i14161666 = phi i32 [ -1, %io.write_string.exit1417.thread ], [ %937, %io.write_string.exit1417 ]
  store i64 %942, ptr %3, align 8
  %.not935 = icmp eq ptr %2, null
  br i1 %.not935, label %common.ret, label %common.ret.sink.split

or_return.continue631:                            ; preds = %io.write_string.exit1417
  %943 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %81, i64 0, i32 3
  %944 = load i64, ptr %943, align 8
  %945 = trunc i64 %944 to i32
  %946 = call fastcc i32 @io.write_encoded_rune(ptr nonnull %0, i32 %945, i1 zeroext true, ptr nonnull %n, ptr %112, ptr %__.context_ptr)
  %947 = icmp eq i32 %946, 0
  br i1 %947, label %switch.done653, label %or_return.return632

or_return.return632:                              ; preds = %or_return.continue631
  %948 = load i64, ptr %n, align 8
  store i64 %948, ptr %3, align 8
  %.not936 = icmp eq ptr %2, null
  br i1 %.not936, label %common.ret, label %common.ret.sink.split

switch.default.body637:                           ; preds = %or_return.continue613, %reflect.is_rune.exit
  %949 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %81, i64 0, i32 2
  %950 = load i64, ptr %949, align 8
  %951 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %950, ptr nonnull %n, ptr %113, ptr %__.context_ptr)
  %952 = icmp eq i32 %951, 0
  br i1 %952, label %or_return.continue642, label %or_return.return638

or_return.return638:                              ; preds = %switch.default.body637
  %953 = load i64, ptr %n, align 8
  store i64 %953, ptr %3, align 8
  %.not927 = icmp eq ptr %2, null
  br i1 %.not927, label %common.ret, label %common.ret.sink.split

or_return.continue642:                            ; preds = %switch.default.body637
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13), !noalias !2796
  %954 = load ptr, ptr %0, align 8, !noalias !2800
  %.not.i.i1418 = icmp eq ptr %954, null
  br i1 %.not.i.i1418, label %io.write_string.exit1422.thread, label %io.write_string.exit1422

io.write_string.exit1422.thread:                  ; preds = %or_return.continue642
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !2796
  %.pre1756 = load i64, ptr %n, align 8
  br label %or_return.return643

io.write_string.exit1422:                         ; preds = %or_return.continue642
  %955 = load ptr, ptr %903, align 8, !noalias !2800
  store i64 0, ptr %13, align 8, !noalias !2800
  %956 = call i32 %954(ptr %955, i64 4, ptr nonnull @"ggv$148", i64 0, i64 0, ptr nonnull %13, ptr nonnull %__.context_ptr), !noalias !2804
  %957 = load i64, ptr %13, align 8, !noalias !2800
  %958 = load i64, ptr %n, align 8, !noalias !2800
  %959 = add i64 %958, %957
  store i64 %959, ptr %n, align 8, !noalias !2800
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13), !noalias !2796
  %960 = icmp eq i32 %956, 0
  br i1 %960, label %or_return.continue647, label %or_return.return643

or_return.return643:                              ; preds = %io.write_string.exit1422.thread, %io.write_string.exit1422
  %961 = phi i64 [ %.pre1756, %io.write_string.exit1422.thread ], [ %959, %io.write_string.exit1422 ]
  %err.0.i.i14211669 = phi i32 [ -1, %io.write_string.exit1422.thread ], [ %956, %io.write_string.exit1422 ]
  store i64 %961, ptr %3, align 8
  %.not928 = icmp eq ptr %2, null
  br i1 %.not928, label %common.ret, label %common.ret.sink.split

or_return.continue647:                            ; preds = %io.write_string.exit1422
  %962 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %81, i64 0, i32 3
  %963 = load i64, ptr %962, align 8
  %964 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %963, ptr nonnull %n, ptr %114, ptr %__.context_ptr)
  %965 = icmp eq i32 %964, 0
  br i1 %965, label %switch.done653, label %or_return.return648

or_return.return648:                              ; preds = %or_return.continue647
  %966 = load i64, ptr %n, align 8
  store i64 %966, ptr %3, align 8
  %.not929 = icmp eq ptr %2, null
  br i1 %.not929, label %common.ret, label %common.ret.sink.split

switch.done653:                                   ; preds = %or_return.continue647, %or_return.continue631, %switch.case.body614
  %967 = getelementptr inbounds %runtime.Type_Info_Bit_Set, ptr %81, i64 0, i32 1
  %968 = load ptr, ptr %967, align 8
  %.not930 = icmp eq ptr %968, null
  br i1 %.not930, label %if.done665, label %if.then654

if.then654:                                       ; preds = %switch.done653
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12), !noalias !2805
  %969 = load ptr, ptr %0, align 8, !noalias !2809
  %.not.i.i1423 = icmp eq ptr %969, null
  br i1 %.not.i.i1423, label %io.write_string.exit1427.thread, label %io.write_string.exit1427

io.write_string.exit1427.thread:                  ; preds = %if.then654
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !2805
  %.pre1755 = load i64, ptr %n, align 8
  br label %or_return.return655

io.write_string.exit1427:                         ; preds = %if.then654
  %970 = load ptr, ptr %903, align 8, !noalias !2809
  store i64 0, ptr %12, align 8, !noalias !2809
  %971 = call i32 %969(ptr %970, i64 4, ptr nonnull @"ggv$149", i64 0, i64 0, ptr nonnull %12, ptr nonnull %__.context_ptr), !noalias !2813
  %972 = load i64, ptr %12, align 8, !noalias !2809
  %973 = load i64, ptr %n, align 8, !noalias !2809
  %974 = add i64 %973, %972
  store i64 %974, ptr %n, align 8, !noalias !2809
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12), !noalias !2805
  %975 = icmp eq i32 %971, 0
  br i1 %975, label %or_return.continue659, label %or_return.return655

or_return.return655:                              ; preds = %io.write_string.exit1427.thread, %io.write_string.exit1427
  %976 = phi i64 [ %.pre1755, %io.write_string.exit1427.thread ], [ %974, %io.write_string.exit1427 ]
  %err.0.i.i14261672 = phi i32 [ -1, %io.write_string.exit1427.thread ], [ %971, %io.write_string.exit1427 ]
  store i64 %976, ptr %3, align 8
  %.not932 = icmp eq ptr %2, null
  br i1 %.not932, label %common.ret, label %common.ret.sink.split

or_return.continue659:                            ; preds = %io.write_string.exit1427
  %977 = load ptr, ptr %967, align 8
  store i64 0, ptr %115, align 8
  %978 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %977, ptr nonnull %n, ptr %115, ptr %__.context_ptr)
  %979 = icmp eq i32 %978, 0
  br i1 %979, label %if.done665, label %or_return.return660

or_return.return660:                              ; preds = %or_return.continue659
  %980 = load i64, ptr %n, align 8
  store i64 %980, ptr %3, align 8
  %.not933 = icmp eq ptr %2, null
  br i1 %.not933, label %common.ret, label %common.ret.sink.split

if.done665:                                       ; preds = %or_return.continue659, %switch.done653
  %981 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 93, ptr nonnull %n, ptr %__.context_ptr)
  %982 = icmp eq i32 %981, 0
  br i1 %982, label %typeswitch.done, label %or_return.return666

or_return.return666:                              ; preds = %if.done665
  %983 = load i64, ptr %n, align 8
  store i64 %983, ptr %3, align 8
  %.not931 = icmp eq ptr %2, null
  br i1 %.not931, label %common.ret, label %common.ret.sink.split

typeswitch.body671:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 24, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11), !noalias !2814
  %984 = load ptr, ptr %0, align 8, !noalias !2818
  %.not.i.i1428 = icmp eq ptr %984, null
  br i1 %.not.i.i1428, label %io.write_string.exit1432.thread, label %io.write_string.exit1432

io.write_string.exit1432.thread:                  ; preds = %typeswitch.body671
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !2814
  br label %or_return.return672

io.write_string.exit1432:                         ; preds = %typeswitch.body671
  %985 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %986 = load ptr, ptr %985, align 8, !noalias !2818
  store i64 0, ptr %11, align 8, !noalias !2818
  %987 = call i32 %984(ptr %986, i64 4, ptr nonnull @"ggv$14a", i64 0, i64 0, ptr nonnull %11, ptr nonnull %__.context_ptr), !noalias !2822
  %988 = load i64, ptr %11, align 8, !noalias !2818
  %989 = load i64, ptr %n, align 8, !noalias !2818
  %990 = add i64 %989, %988
  store i64 %990, ptr %n, align 8, !noalias !2818
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11), !noalias !2814
  %991 = icmp eq i32 %987, 0
  br i1 %991, label %or_return.continue676, label %or_return.return672

or_return.return672:                              ; preds = %io.write_string.exit1432.thread, %io.write_string.exit1432
  %992 = phi i64 [ 0, %io.write_string.exit1432.thread ], [ %990, %io.write_string.exit1432 ]
  %err.0.i.i14311675 = phi i32 [ -1, %io.write_string.exit1432.thread ], [ %987, %io.write_string.exit1432 ]
  store i64 %992, ptr %3, align 8
  %.not920 = icmp eq ptr %2, null
  br i1 %.not920, label %common.ret, label %common.ret.sink.split

or_return.continue676:                            ; preds = %io.write_string.exit1432
  %993 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, ptr %81, i64 0, i32 2
  %994 = load i64, ptr %993, align 8
  %995 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %994, ptr nonnull %n, ptr %116, ptr %__.context_ptr)
  %996 = icmp eq i32 %995, 0
  br i1 %996, label %or_return.continue681, label %or_return.return677

or_return.return677:                              ; preds = %or_return.continue676
  %997 = load i64, ptr %n, align 8
  store i64 %997, ptr %3, align 8
  %.not921 = icmp eq ptr %2, null
  br i1 %.not921, label %common.ret, label %common.ret.sink.split

or_return.continue681:                            ; preds = %or_return.continue676
  %998 = call fastcc i32 @io.write_byte(ptr nonnull %0, i8 93, ptr nonnull %n, ptr %__.context_ptr)
  %999 = icmp eq i32 %998, 0
  br i1 %999, label %or_return.continue686, label %or_return.return682

or_return.return682:                              ; preds = %or_return.continue681
  %1000 = load i64, ptr %n, align 8
  store i64 %1000, ptr %3, align 8
  %.not922 = icmp eq ptr %2, null
  br i1 %.not922, label %common.ret, label %common.ret.sink.split

or_return.continue686:                            ; preds = %or_return.continue681
  %1001 = load ptr, ptr %81, align 8
  store i64 0, ptr %117, align 8
  %1002 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %1001, ptr nonnull %n, ptr %117, ptr %__.context_ptr)
  %1003 = icmp eq i32 %1002, 0
  br i1 %1003, label %typeswitch.done, label %or_return.return687

or_return.return687:                              ; preds = %or_return.continue686
  %1004 = load i64, ptr %n, align 8
  store i64 %1004, ptr %3, align 8
  %.not923 = icmp eq ptr %2, null
  br i1 %.not923, label %common.ret, label %common.ret.sink.split

typeswitch.body692:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10), !noalias !2823
  %1005 = load ptr, ptr %0, align 8, !noalias !2827
  %.not.i.i1433 = icmp eq ptr %1005, null
  br i1 %.not.i.i1433, label %io.write_string.exit1437.thread, label %io.write_string.exit1437

io.write_string.exit1437.thread:                  ; preds = %typeswitch.body692
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !2823
  br label %or_return.return693

io.write_string.exit1437:                         ; preds = %typeswitch.body692
  %1006 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %1007 = load ptr, ptr %1006, align 8, !noalias !2827
  store i64 0, ptr %10, align 8, !noalias !2827
  %1008 = call i32 %1005(ptr %1007, i64 4, ptr nonnull @"ggv$14d", i64 0, i64 0, ptr nonnull %10, ptr nonnull %__.context_ptr), !noalias !2831
  %1009 = load i64, ptr %10, align 8, !noalias !2827
  %1010 = load i64, ptr %n, align 8, !noalias !2827
  %1011 = add i64 %1010, %1009
  store i64 %1011, ptr %n, align 8, !noalias !2827
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10), !noalias !2823
  %1012 = icmp eq i32 %1008, 0
  br i1 %1012, label %or_return.continue697, label %or_return.return693

or_return.return693:                              ; preds = %io.write_string.exit1437.thread, %io.write_string.exit1437
  %1013 = phi i64 [ 0, %io.write_string.exit1437.thread ], [ %1011, %io.write_string.exit1437 ]
  %err.0.i.i14361678 = phi i32 [ -1, %io.write_string.exit1437.thread ], [ %1008, %io.write_string.exit1437 ]
  store i64 %1013, ptr %3, align 8
  %.not916 = icmp eq ptr %2, null
  br i1 %.not916, label %common.ret, label %common.ret.sink.split

or_return.continue697:                            ; preds = %io.write_string.exit1437
  %1014 = getelementptr inbounds %runtime.Type_Info_Relative_Pointer, ptr %81, i64 0, i32 1
  %1015 = load ptr, ptr %1014, align 8
  store i64 0, ptr %118, align 8
  %1016 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %1015, ptr nonnull %n, ptr %118, ptr %__.context_ptr)
  %1017 = icmp eq i32 %1016, 0
  br i1 %1017, label %or_return.continue702, label %or_return.return698

or_return.return698:                              ; preds = %or_return.continue697
  %1018 = load i64, ptr %n, align 8
  store i64 %1018, ptr %3, align 8
  %.not917 = icmp eq ptr %2, null
  br i1 %.not917, label %common.ret, label %common.ret.sink.split

or_return.continue702:                            ; preds = %or_return.continue697
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9), !noalias !2832
  %1019 = load ptr, ptr %0, align 8, !noalias !2836
  %.not.i.i1438 = icmp eq ptr %1019, null
  br i1 %.not.i.i1438, label %io.write_string.exit1442.thread, label %io.write_string.exit1442

io.write_string.exit1442.thread:                  ; preds = %or_return.continue702
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !2832
  %.pre1753 = load i64, ptr %n, align 8
  br label %or_return.return703

io.write_string.exit1442:                         ; preds = %or_return.continue702
  %1020 = load ptr, ptr %1006, align 8, !noalias !2836
  store i64 0, ptr %9, align 8, !noalias !2836
  %1021 = call i32 %1019(ptr %1020, i64 4, ptr nonnull @"ggv$14e", i64 0, i64 0, ptr nonnull %9, ptr nonnull %__.context_ptr), !noalias !2840
  %1022 = load i64, ptr %9, align 8, !noalias !2836
  %1023 = load i64, ptr %n, align 8, !noalias !2836
  %1024 = add i64 %1023, %1022
  store i64 %1024, ptr %n, align 8, !noalias !2836
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9), !noalias !2832
  %1025 = icmp eq i32 %1021, 0
  br i1 %1025, label %or_return.continue707, label %or_return.return703

or_return.return703:                              ; preds = %io.write_string.exit1442.thread, %io.write_string.exit1442
  %1026 = phi i64 [ %.pre1753, %io.write_string.exit1442.thread ], [ %1024, %io.write_string.exit1442 ]
  %err.0.i.i14411681 = phi i32 [ -1, %io.write_string.exit1442.thread ], [ %1021, %io.write_string.exit1442 ]
  store i64 %1026, ptr %3, align 8
  %.not918 = icmp eq ptr %2, null
  br i1 %.not918, label %common.ret, label %common.ret.sink.split

or_return.continue707:                            ; preds = %io.write_string.exit1442
  %1027 = load ptr, ptr %81, align 8
  store i64 0, ptr %119, align 8
  %1028 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %1027, ptr nonnull %n, ptr %119, ptr %__.context_ptr)
  %1029 = icmp eq i32 %1028, 0
  br i1 %1029, label %typeswitch.done, label %or_return.return708

or_return.return708:                              ; preds = %or_return.continue707
  %1030 = load i64, ptr %n, align 8
  store i64 %1030, ptr %3, align 8
  %.not919 = icmp eq ptr %2, null
  br i1 %.not919, label %common.ret, label %common.ret.sink.split

typeswitch.body713:                               ; preds = %if.done5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %81, ptr nonnull align 1 %137, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8), !noalias !2841
  %1031 = load ptr, ptr %0, align 8, !noalias !2845
  %.not.i.i1443 = icmp eq ptr %1031, null
  br i1 %.not.i.i1443, label %io.write_string.exit1447.thread, label %io.write_string.exit1447

io.write_string.exit1447.thread:                  ; preds = %typeswitch.body713
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !2841
  br label %or_return.return714

io.write_string.exit1447:                         ; preds = %typeswitch.body713
  %1032 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %1033 = load ptr, ptr %1032, align 8, !noalias !2845
  store i64 0, ptr %8, align 8, !noalias !2845
  %1034 = call i32 %1031(ptr %1033, i64 4, ptr nonnull @"ggv$14d", i64 0, i64 0, ptr nonnull %8, ptr nonnull %__.context_ptr), !noalias !2849
  %1035 = load i64, ptr %8, align 8, !noalias !2845
  %1036 = load i64, ptr %n, align 8, !noalias !2845
  %1037 = add i64 %1036, %1035
  store i64 %1037, ptr %n, align 8, !noalias !2845
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8), !noalias !2841
  %1038 = icmp eq i32 %1034, 0
  br i1 %1038, label %or_return.continue718, label %or_return.return714

or_return.return714:                              ; preds = %io.write_string.exit1447.thread, %io.write_string.exit1447
  %1039 = phi i64 [ 0, %io.write_string.exit1447.thread ], [ %1037, %io.write_string.exit1447 ]
  %err.0.i.i14461684 = phi i32 [ -1, %io.write_string.exit1447.thread ], [ %1034, %io.write_string.exit1447 ]
  store i64 %1039, ptr %3, align 8
  %.not912 = icmp eq ptr %2, null
  br i1 %.not912, label %common.ret, label %common.ret.sink.split

or_return.continue718:                            ; preds = %io.write_string.exit1447
  %1040 = getelementptr inbounds %runtime.Type_Info_Relative_Multi_Pointer, ptr %81, i64 0, i32 1
  %1041 = load ptr, ptr %1040, align 8
  store i64 0, ptr %120, align 8
  %1042 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %1041, ptr nonnull %n, ptr %120, ptr %__.context_ptr)
  %1043 = icmp eq i32 %1042, 0
  br i1 %1043, label %or_return.continue723, label %or_return.return719

or_return.return719:                              ; preds = %or_return.continue718
  %1044 = load i64, ptr %n, align 8
  store i64 %1044, ptr %3, align 8
  %.not913 = icmp eq ptr %2, null
  br i1 %.not913, label %common.ret, label %common.ret.sink.split

or_return.continue723:                            ; preds = %or_return.continue718
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7), !noalias !2850
  %1045 = load ptr, ptr %0, align 8, !noalias !2854
  %.not.i.i1448 = icmp eq ptr %1045, null
  br i1 %.not.i.i1448, label %io.write_string.exit1452.thread, label %io.write_string.exit1452

io.write_string.exit1452.thread:                  ; preds = %or_return.continue723
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !2850
  %.pre1752 = load i64, ptr %n, align 8
  br label %or_return.return724

io.write_string.exit1452:                         ; preds = %or_return.continue723
  %1046 = load ptr, ptr %1032, align 8, !noalias !2854
  store i64 0, ptr %7, align 8, !noalias !2854
  %1047 = call i32 %1045(ptr %1046, i64 4, ptr nonnull @"ggv$14e", i64 0, i64 0, ptr nonnull %7, ptr nonnull %__.context_ptr), !noalias !2858
  %1048 = load i64, ptr %7, align 8, !noalias !2854
  %1049 = load i64, ptr %n, align 8, !noalias !2854
  %1050 = add i64 %1049, %1048
  store i64 %1050, ptr %n, align 8, !noalias !2854
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7), !noalias !2850
  %1051 = icmp eq i32 %1047, 0
  br i1 %1051, label %or_return.continue728, label %or_return.return724

or_return.return724:                              ; preds = %io.write_string.exit1452.thread, %io.write_string.exit1452
  %1052 = phi i64 [ %.pre1752, %io.write_string.exit1452.thread ], [ %1050, %io.write_string.exit1452 ]
  %err.0.i.i14511687 = phi i32 [ -1, %io.write_string.exit1452.thread ], [ %1047, %io.write_string.exit1452 ]
  store i64 %1052, ptr %3, align 8
  %.not914 = icmp eq ptr %2, null
  br i1 %.not914, label %common.ret, label %common.ret.sink.split

or_return.continue728:                            ; preds = %io.write_string.exit1452
  %1053 = load ptr, ptr %81, align 8
  store i64 0, ptr %121, align 8
  %1054 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %1053, ptr nonnull %n, ptr %121, ptr %__.context_ptr)
  %1055 = icmp eq i32 %1054, 0
  br i1 %1055, label %typeswitch.done, label %or_return.return729

or_return.return729:                              ; preds = %or_return.continue728
  %1056 = load i64, ptr %n, align 8
  store i64 %1056, ptr %3, align 8
  %.not915 = icmp eq ptr %2, null
  br i1 %.not915, label %common.ret, label %common.ret.sink.split

typeswitch.body734:                               ; preds = %if.done5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %81, ptr noundef nonnull align 1 dereferenceable(40) %137, i64 40, i1 false)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !2859
  %1057 = load ptr, ptr %0, align 8, !noalias !2863
  %.not.i.i1453 = icmp eq ptr %1057, null
  br i1 %.not.i.i1453, label %io.write_string.exit1457.thread, label %io.write_string.exit1457

io.write_string.exit1457.thread:                  ; preds = %typeswitch.body734
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !2859
  br label %or_return.return735

io.write_string.exit1457:                         ; preds = %typeswitch.body734
  %1058 = getelementptr inbounds %io.Stream, ptr %0, i64 0, i32 1
  %1059 = load ptr, ptr %1058, align 8, !noalias !2863
  store i64 0, ptr %6, align 8, !noalias !2863
  %1060 = call i32 %1057(ptr %1059, i64 4, ptr nonnull @"ggv$14f", i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !2867
  %1061 = load i64, ptr %6, align 8, !noalias !2863
  %1062 = load i64, ptr %n, align 8, !noalias !2863
  %1063 = add i64 %1062, %1061
  store i64 %1063, ptr %n, align 8, !noalias !2863
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !2859
  %1064 = icmp eq i32 %1060, 0
  br i1 %1064, label %or_return.continue739, label %or_return.return735

or_return.return735:                              ; preds = %io.write_string.exit1457.thread, %io.write_string.exit1457
  %1065 = phi i64 [ 0, %io.write_string.exit1457.thread ], [ %1063, %io.write_string.exit1457 ]
  %err.0.i.i14561690 = phi i32 [ -1, %io.write_string.exit1457.thread ], [ %1060, %io.write_string.exit1457 ]
  store i64 %1065, ptr %3, align 8
  %.not = icmp eq ptr %2, null
  br i1 %.not, label %common.ret, label %common.ret.sink.split

or_return.continue739:                            ; preds = %io.write_string.exit1457
  %1066 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %81, i64 0, i32 3
  %1067 = load i64, ptr %1066, align 8
  %1068 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %1067, ptr nonnull %n, ptr %122, ptr %__.context_ptr)
  %1069 = icmp eq i32 %1068, 0
  br i1 %1069, label %or_return.continue744, label %or_return.return740

or_return.return740:                              ; preds = %or_return.continue739
  %1070 = load i64, ptr %n, align 8
  store i64 %1070, ptr %3, align 8
  %.not906 = icmp eq ptr %2, null
  br i1 %.not906, label %common.ret, label %common.ret.sink.split

or_return.continue744:                            ; preds = %or_return.continue739
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5), !noalias !2868
  %1071 = load ptr, ptr %0, align 8, !noalias !2872
  %.not.i.i1458 = icmp eq ptr %1071, null
  br i1 %.not.i.i1458, label %io.write_string.exit1462.thread, label %io.write_string.exit1462

io.write_string.exit1462.thread:                  ; preds = %or_return.continue744
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !2868
  %.pre1751 = load i64, ptr %n, align 8
  br label %or_return.return745

io.write_string.exit1462:                         ; preds = %or_return.continue744
  %1072 = load ptr, ptr %1058, align 8, !noalias !2872
  store i64 0, ptr %5, align 8, !noalias !2872
  %1073 = call i32 %1071(ptr %1072, i64 4, ptr nonnull @"ggv$150", i64 0, i64 0, ptr nonnull %5, ptr nonnull %__.context_ptr), !noalias !2876
  %1074 = load i64, ptr %5, align 8, !noalias !2872
  %1075 = load i64, ptr %n, align 8, !noalias !2872
  %1076 = add i64 %1075, %1074
  store i64 %1076, ptr %n, align 8, !noalias !2872
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5), !noalias !2868
  %1077 = icmp eq i32 %1073, 0
  br i1 %1077, label %or_return.continue749, label %or_return.return745

or_return.return745:                              ; preds = %io.write_string.exit1462.thread, %io.write_string.exit1462
  %1078 = phi i64 [ %.pre1751, %io.write_string.exit1462.thread ], [ %1076, %io.write_string.exit1462 ]
  %err.0.i.i14611693 = phi i32 [ -1, %io.write_string.exit1462.thread ], [ %1073, %io.write_string.exit1462 ]
  store i64 %1078, ptr %3, align 8
  %.not907 = icmp eq ptr %2, null
  br i1 %.not907, label %common.ret, label %common.ret.sink.split

or_return.continue749:                            ; preds = %io.write_string.exit1462
  %1079 = getelementptr inbounds %runtime.Type_Info_Matrix, ptr %81, i64 0, i32 4
  %1080 = load i64, ptr %1079, align 8
  %1081 = call fastcc i32 @io.write_i64(ptr nonnull %0, i64 %1080, ptr nonnull %n, ptr %123, ptr %__.context_ptr)
  %1082 = icmp eq i32 %1081, 0
  br i1 %1082, label %or_return.continue754, label %or_return.return750

or_return.return750:                              ; preds = %or_return.continue749
  %1083 = load i64, ptr %n, align 8
  store i64 %1083, ptr %3, align 8
  %.not908 = icmp eq ptr %2, null
  br i1 %.not908, label %common.ret, label %common.ret.sink.split

or_return.continue754:                            ; preds = %or_return.continue749
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4), !noalias !2877
  %1084 = load ptr, ptr %0, align 8, !noalias !2881
  %.not.i.i1463 = icmp eq ptr %1084, null
  br i1 %.not.i.i1463, label %io.write_string.exit1467.thread, label %io.write_string.exit1467

io.write_string.exit1467.thread:                  ; preds = %or_return.continue754
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !2877
  %.pre = load i64, ptr %n, align 8
  br label %or_return.return755

io.write_string.exit1467:                         ; preds = %or_return.continue754
  %1085 = load ptr, ptr %1058, align 8, !noalias !2881
  store i64 0, ptr %4, align 8, !noalias !2881
  %1086 = call i32 %1084(ptr %1085, i64 4, ptr nonnull @"ggv$151", i64 0, i64 0, ptr nonnull %4, ptr nonnull %__.context_ptr), !noalias !2885
  %1087 = load i64, ptr %4, align 8, !noalias !2881
  %1088 = load i64, ptr %n, align 8, !noalias !2881
  %1089 = add i64 %1088, %1087
  store i64 %1089, ptr %n, align 8, !noalias !2881
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4), !noalias !2877
  %1090 = icmp eq i32 %1086, 0
  br i1 %1090, label %or_return.continue759, label %or_return.return755

or_return.return755:                              ; preds = %io.write_string.exit1467.thread, %io.write_string.exit1467
  %1091 = phi i64 [ %.pre, %io.write_string.exit1467.thread ], [ %1089, %io.write_string.exit1467 ]
  %err.0.i.i14661696 = phi i32 [ -1, %io.write_string.exit1467.thread ], [ %1086, %io.write_string.exit1467 ]
  store i64 %1091, ptr %3, align 8
  %.not909 = icmp eq ptr %2, null
  br i1 %.not909, label %common.ret, label %common.ret.sink.split

or_return.continue759:                            ; preds = %io.write_string.exit1467
  %1092 = load ptr, ptr %81, align 8
  store i64 0, ptr %124, align 8
  %1093 = call fastcc i32 @reflect.write_type_writer(ptr nonnull %0, ptr %1092, ptr nonnull %n, ptr %124, ptr %__.context_ptr)
  %1094 = icmp eq i32 %1093, 0
  br i1 %1094, label %typeswitch.done, label %or_return.return760

or_return.return760:                              ; preds = %or_return.continue759
  %1095 = load i64, ptr %n, align 8
  store i64 %1095, ptr %3, align 8
  %.not910 = icmp eq ptr %2, null
  br i1 %.not910, label %common.ret, label %common.ret.sink.split

typeswitch.done:                                  ; preds = %or_return.continue759, %or_return.continue728, %or_return.continue707, %or_return.continue686, %if.done665, %for.index.done602, %for.index.done564, %for.index.done501, %or_return.continue373, %or_return.continue352, %or_return.continue341, %or_return.continue330, %or_return.continue302, %for.index.done279, %io.write_string.exit1254, %if.done230, %or_return.continue236, %or_return.continue188, %or_return.continue177, %io.write_string.exit1184, %or_return.continue165, %io.write_string.exit1179, %io.write_string.exit1174, %io.write_string.exit1169, %or_return.continue134, %io.write_string.exit1159, %io.write_string.exit1164, %or_return.continue102, %or_return.continue91, %or_return.continue71, %io.write_string.exit1139, %io.write_string.exit1144, %io.write_string.exit1131, %io.write_string.exit1106, %io.write_string.exit1111, %io.write_string.exit1116, %io.write_string.exit1126, %io.write_string.exit1121, %or_return.continue40, %io.write_string.exit1101, %if.done5
  %1096 = load i64, ptr %n, align 8
  store i64 %1096, ptr %3, align 8
  %.not911 = icmp eq ptr %2, null
  br i1 %.not911, label %common.ret, label %common.ret.sink.split
}

define internal fastcc i8 @reflect.as_i64(ptr %.0.val, i64 %.8.val, ptr noalias nocapture nonnull writeonly %0) unnamed_addr {
decls:
  %1 = alloca [80 x i8], align 8
  %2 = alloca [16 x i8], align 8
  %3 = alloca [16 x i8], align 8
  %4 = alloca [32 x i8], align 8
  %5 = icmp eq ptr %.0.val, null
  %6 = icmp eq i64 %.8.val, 0
  %7 = or i1 %5, %6
  br i1 %7, label %common.ret, label %if.done

common.ret:                                       ; preds = %runtime.type_info_core.exit, %any_cast.end, %typeswitch.body29, %typeswitch.body28, %typeswitch.body27, %typeswitch.body26, %typeswitch.body25, %typeswitch.body24, %typeswitch.body23, %typeswitch.body22, %typeswitch.body21, %typeswitch.body20, %typeswitch.body19, %typeswitch.body18, %typeswitch.body17, %typeswitch.body16, %typeswitch.body15, %typeswitch.body14, %typeswitch.body13, %typeswitch.body12, %typeswitch.body11, %typeswitch.body10, %typeswitch.body9, %typeswitch.body8, %typeswitch.body7, %typeswitch.body6, %typeswitch.body5, %typeswitch.body4, %typeswitch.body3, %typeswitch.body2, %typeswitch.body1, %typeswitch.body37, %typeswitch.body36, %typeswitch.body35, %typeswitch.body34, %typeswitch.body33, %typeswitch.body32, %typeswitch.body46, %typeswitch.body45, %typeswitch.body44, %typeswitch.body43, %typeswitch.body42, %typeswitch.body54, %if.then55, %typeswitch.body51, %if.then52, %typeswitch.body50, %typeswitch.body63, %if.then66, %typeswitch.body59, %if.then61, %typeswitch.body58, %typeswitch.body, %typeswitch.body31, %typeswitch.body41, %decls
  %storemerge = phi i64 [ 0, %decls ], [ 0, %runtime.type_info_core.exit ], [ 0, %typeswitch.body58 ], [ %141, %if.then66 ], [ 0, %typeswitch.body63 ], [ %130, %if.then61 ], [ 0, %typeswitch.body59 ], [ 0, %typeswitch.body50 ], [ %119, %if.then55 ], [ 0, %typeswitch.body54 ], [ %114, %if.then52 ], [ 0, %typeswitch.body51 ], [ %108, %typeswitch.body46 ], [ %105, %typeswitch.body45 ], [ %102, %typeswitch.body44 ], [ %99, %typeswitch.body43 ], [ %96, %typeswitch.body42 ], [ %93, %typeswitch.body37 ], [ %90, %typeswitch.body36 ], [ %87, %typeswitch.body35 ], [ %85, %typeswitch.body34 ], [ %83, %typeswitch.body33 ], [ %81, %typeswitch.body32 ], [ %79, %any_cast.end ], [ %76, %typeswitch.body29 ], [ %73, %typeswitch.body28 ], [ %71, %typeswitch.body27 ], [ %68, %typeswitch.body26 ], [ %65, %typeswitch.body25 ], [ %62, %typeswitch.body24 ], [ %60, %typeswitch.body23 ], [ %57, %typeswitch.body22 ], [ %54, %typeswitch.body21 ], [ %52, %typeswitch.body20 ], [ %51, %typeswitch.body19 ], [ %49, %typeswitch.body18 ], [ %47, %typeswitch.body17 ], [ %45, %typeswitch.body16 ], [ %44, %typeswitch.body15 ], [ %42, %typeswitch.body14 ], [ %40, %typeswitch.body13 ], [ %39, %typeswitch.body12 ], [ %38, %typeswitch.body11 ], [ %36, %typeswitch.body10 ], [ %35, %typeswitch.body9 ], [ %33, %typeswitch.body8 ], [ %31, %typeswitch.body7 ], [ %29, %typeswitch.body6 ], [ %28, %typeswitch.body5 ], [ %26, %typeswitch.body4 ], [ %25, %typeswitch.body3 ], [ %23, %typeswitch.body2 ], [ %21, %typeswitch.body1 ], [ 0, %typeswitch.body ], [ 0, %typeswitch.body31 ], [ 0, %typeswitch.body41 ]
  %common.ret.op = phi i8 [ 0, %decls ], [ 0, %runtime.type_info_core.exit ], [ 0, %typeswitch.body58 ], [ 1, %if.then66 ], [ 0, %typeswitch.body63 ], [ 1, %if.then61 ], [ 0, %typeswitch.body59 ], [ 0, %typeswitch.body50 ], [ 1, %if.then55 ], [ 0, %typeswitch.body54 ], [ 1, %if.then52 ], [ 0, %typeswitch.body51 ], [ 1, %typeswitch.body46 ], [ 1, %typeswitch.body45 ], [ 1, %typeswitch.body44 ], [ 1, %typeswitch.body43 ], [ 1, %typeswitch.body42 ], [ 1, %typeswitch.body37 ], [ 1, %typeswitch.body36 ], [ 1, %typeswitch.body35 ], [ 1, %typeswitch.body34 ], [ 1, %typeswitch.body33 ], [ 1, %typeswitch.body32 ], [ 1, %any_cast.end ], [ 1, %typeswitch.body29 ], [ 1, %typeswitch.body28 ], [ 1, %typeswitch.body27 ], [ 1, %typeswitch.body26 ], [ 1, %typeswitch.body25 ], [ 1, %typeswitch.body24 ], [ 1, %typeswitch.body23 ], [ 1, %typeswitch.body22 ], [ 1, %typeswitch.body21 ], [ 1, %typeswitch.body20 ], [ 1, %typeswitch.body19 ], [ 1, %typeswitch.body18 ], [ 1, %typeswitch.body17 ], [ 1, %typeswitch.body16 ], [ 1, %typeswitch.body15 ], [ 1, %typeswitch.body14 ], [ 1, %typeswitch.body13 ], [ 1, %typeswitch.body12 ], [ 1, %typeswitch.body11 ], [ 1, %typeswitch.body10 ], [ 1, %typeswitch.body9 ], [ 1, %typeswitch.body8 ], [ 1, %typeswitch.body7 ], [ 1, %typeswitch.body6 ], [ 1, %typeswitch.body5 ], [ 1, %typeswitch.body4 ], [ 1, %typeswitch.body3 ], [ 1, %typeswitch.body2 ], [ 1, %typeswitch.body1 ], [ 0, %typeswitch.body ], [ 0, %typeswitch.body31 ], [ 0, %typeswitch.body41 ]
  store i64 %storemerge, ptr %0, align 8
  ret i8 %common.ret.op

if.done:                                          ; preds = %decls
  %8 = and i64 %.8.val, 72057594037927935
  %9 = icmp ugt i64 %8, 150
  %n.0.i = select i1 %9, i64 0, i64 %8
  %10 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %1)
  %11 = icmp ne ptr %10, null
  tail call void @llvm.assume(i1 %11)
  %12 = getelementptr inbounds %runtime.Type_Info_Named, ptr %1, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.backedge, %if.done
  %base.0.i = phi ptr [ %10, %if.done ], [ %base.0.i.be, %for.body.i.backedge ]
  %13 = getelementptr inbounds %runtime.Type_Info, ptr %base.0.i, i64 0, i32 5
  %14 = getelementptr inbounds %runtime.Type_Info, ptr %base.0.i, i64 0, i32 5, i32 1
  %15 = load i64, ptr %14, align 8
  switch i64 %15, label %runtime.type_info_core.exit [
    i64 1, label %typeswitch.body.i
    i64 21, label %typeswitch.body1.i
  ]

typeswitch.body.i:                                ; preds = %for.body.i
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %1, ptr noundef nonnull align 1 dereferenceable(80) %13, i64 80, i1 false)
  %16 = load ptr, ptr %12, align 8
  br label %for.body.i.backedge

typeswitch.body1.i:                               ; preds = %for.body.i
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %1, ptr noundef nonnull align 1 dereferenceable(40) %13, i64 40, i1 false)
  %17 = load ptr, ptr %1, align 8
  br label %for.body.i.backedge

for.body.i.backedge:                              ; preds = %typeswitch.body1.i, %typeswitch.body.i
  %base.0.i.be = phi ptr [ %17, %typeswitch.body1.i ], [ %16, %typeswitch.body.i ]
  br label %for.body.i

runtime.type_info_core.exit:                      ; preds = %for.body.i
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %1)
  %18 = getelementptr inbounds %runtime.Type_Info, ptr %base.0.i, i64 0, i32 4
  %19 = load i64, ptr %18, align 8
  switch i64 %15, label %common.ret [
    i64 2, label %typeswitch.body
    i64 3, label %typeswitch.body30
    i64 4, label %typeswitch.body31
    i64 8, label %typeswitch.body41
    i64 5, label %typeswitch.body50
    i64 6, label %typeswitch.body58
  ]

typeswitch.body:                                  ; preds = %runtime.type_info_core.exit
  switch i64 %19, label %common.ret [
    i64 4683743612465315978, label %typeswitch.body1
    i64 4683743612465315972, label %typeswitch.body2
    i64 4683743612465315867, label %typeswitch.body3
    i64 4683743612465315896, label %typeswitch.body4
    i64 4683743612465315987, label %typeswitch.body5
    i64 4683743612465315841, label %typeswitch.body6
    i64 72057594037927945, label %typeswitch.body7
    i64 72057594037928041, label %typeswitch.body8
    i64 72057594037927955, label %typeswitch.body9
    i64 72057594037927943, label %typeswitch.body10
    i64 72057594037928044, label %typeswitch.body11
    i64 72057594037928043, label %typeswitch.body12
    i64 72057594037928005, label %typeswitch.body13
    i64 72057594037928080, label %typeswitch.body14
    i64 72057594037928075, label %typeswitch.body15
    i64 72057594037928049, label %typeswitch.body16
    i64 72057594037928069, label %typeswitch.body17
    i64 4683743612465315954, label %typeswitch.body18
    i64 4683743612465315967, label %typeswitch.body19
    i64 4683743612465315983, label %typeswitch.body20
    i64 4683743612465315963, label %typeswitch.body21
    i64 72057594037928062, label %typeswitch.body22
    i64 72057594037928073, label %typeswitch.body23
    i64 72057594037928056, label %typeswitch.body24
    i64 72057594037928060, label %typeswitch.body25
    i64 4683743612465315986, label %typeswitch.body26
    i64 4683743612465315971, label %typeswitch.body27
    i64 4683743612465315981, label %typeswitch.body28
    i64 4683743612465315959, label %typeswitch.body29
  ]

typeswitch.body1:                                 ; preds = %typeswitch.body
  %20 = load i8, ptr %.0.val, align 1
  %21 = sext i8 %20 to i64
  br label %common.ret

typeswitch.body2:                                 ; preds = %typeswitch.body
  %22 = load i16, ptr %.0.val, align 1
  %23 = sext i16 %22 to i64
  br label %common.ret

typeswitch.body3:                                 ; preds = %typeswitch.body
  %24 = load i32, ptr %.0.val, align 1
  %25 = sext i32 %24 to i64
  br label %common.ret

typeswitch.body4:                                 ; preds = %typeswitch.body
  %26 = load i64, ptr %.0.val, align 1
  br label %common.ret

typeswitch.body5:                                 ; preds = %typeswitch.body
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %2, ptr align 1 %.0.val, i64 16, i1 false)
  %27 = load i128, ptr %2, align 8
  %28 = trunc i128 %27 to i64
  br label %common.ret

typeswitch.body6:                                 ; preds = %typeswitch.body
  %29 = load i64, ptr %.0.val, align 1
  br label %common.ret

typeswitch.body7:                                 ; preds = %typeswitch.body
  %30 = load i8, ptr %.0.val, align 1
  %31 = zext i8 %30 to i64
  br label %common.ret

typeswitch.body8:                                 ; preds = %typeswitch.body
  %32 = load i16, ptr %.0.val, align 1
  %33 = zext i16 %32 to i64
  br label %common.ret

typeswitch.body9:                                 ; preds = %typeswitch.body
  %34 = load i32, ptr %.0.val, align 1
  %35 = zext i32 %34 to i64
  br label %common.ret

typeswitch.body10:                                ; preds = %typeswitch.body
  %36 = load i64, ptr %.0.val, align 1
  br label %common.ret

typeswitch.body11:                                ; preds = %typeswitch.body
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %2, ptr align 1 %.0.val, i64 16, i1 false)
  %37 = load i128, ptr %2, align 8
  %38 = trunc i128 %37 to i64
  br label %common.ret

typeswitch.body12:                                ; preds = %typeswitch.body
  %39 = load i64, ptr %.0.val, align 1
  br label %common.ret

typeswitch.body13:                                ; preds = %typeswitch.body
  %40 = load i64, ptr %.0.val, align 1
  br label %common.ret

typeswitch.body14:                                ; preds = %typeswitch.body
  %41 = load i16, ptr %.0.val, align 1
  %42 = zext i16 %41 to i64
  br label %common.ret

typeswitch.body15:                                ; preds = %typeswitch.body
  %43 = load i32, ptr %.0.val, align 1
  %44 = zext i32 %43 to i64
  br label %common.ret

typeswitch.body16:                                ; preds = %typeswitch.body
  %45 = load i64, ptr %.0.val, align 1
  br label %common.ret

typeswitch.body17:                                ; preds = %typeswitch.body
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %2, ptr align 1 %.0.val, i64 16, i1 false)
  %46 = load i128, ptr %2, align 8
  %47 = trunc i128 %46 to i64
  br label %common.ret

typeswitch.body18:                                ; preds = %typeswitch.body
  %48 = load i16, ptr %.0.val, align 1
  %49 = sext i16 %48 to i64
  br label %common.ret

typeswitch.body19:                                ; preds = %typeswitch.body
  %50 = load i32, ptr %.0.val, align 1
  %51 = sext i32 %50 to i64
  br label %common.ret

typeswitch.body20:                                ; preds = %typeswitch.body
  %52 = load i64, ptr %.0.val, align 1
  br label %common.ret

typeswitch.body21:                                ; preds = %typeswitch.body
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %2, ptr align 1 %.0.val, i64 16, i1 false)
  %53 = load i128, ptr %2, align 8
  %54 = trunc i128 %53 to i64
  br label %common.ret

typeswitch.body22:                                ; preds = %typeswitch.body
  %55 = load i16, ptr %.0.val, align 1
  %56 = tail call i16 @llvm.bswap.i16(i16 %55)
  %57 = zext i16 %56 to i64
  br label %common.ret

typeswitch.body23:                                ; preds = %typeswitch.body
  %58 = load i32, ptr %.0.val, align 1
  %59 = tail call i32 @llvm.bswap.i32(i32 %58)
  %60 = zext i32 %59 to i64
  br label %common.ret

typeswitch.body24:                                ; preds = %typeswitch.body
  %61 = load i64, ptr %.0.val, align 1
  %62 = tail call i64 @llvm.bswap.i64(i64 %61)
  br label %common.ret

typeswitch.body25:                                ; preds = %typeswitch.body
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %2, ptr align 1 %.0.val, i64 16, i1 false)
  %63 = load i128, ptr %2, align 8
  %64 = tail call i128 @llvm.bswap.i128(i128 %63)
  %65 = trunc i128 %64 to i64
  br label %common.ret

typeswitch.body26:                                ; preds = %typeswitch.body
  %66 = load i16, ptr %.0.val, align 1
  %67 = tail call i16 @llvm.bswap.i16(i16 %66)
  %68 = sext i16 %67 to i64
  br label %common.ret

typeswitch.body27:                                ; preds = %typeswitch.body
  %69 = load i32, ptr %.0.val, align 1
  %70 = tail call i32 @llvm.bswap.i32(i32 %69)
  %71 = sext i32 %70 to i64
  br label %common.ret

typeswitch.body28:                                ; preds = %typeswitch.body
  %72 = load i64, ptr %.0.val, align 1
  %73 = tail call i64 @llvm.bswap.i64(i64 %72)
  br label %common.ret

typeswitch.body29:                                ; preds = %typeswitch.body
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %2, ptr align 1 %.0.val, i64 16, i1 false)
  %74 = load i128, ptr %2, align 8
  %75 = tail call i128 @llvm.bswap.i128(i128 %74)
  %76 = trunc i128 %75 to i64
  br label %common.ret

typeswitch.body30:                                ; preds = %runtime.type_info_core.exit
  %77 = icmp eq i64 %19, 4755801206503243882
  br i1 %77, label %any_cast.end, label %if.done.i

if.done.i:                                        ; preds = %typeswitch.body30
  tail call fastcc void @runtime.type_assertion_check2.handle_error-1(ptr nonnull @"ggv$152", i32 989, i32 8, i64 %19, i64 4755801206503243882, ptr %.0.val)
  unreachable

any_cast.end:                                     ; preds = %typeswitch.body30
  %78 = load i32, ptr %.0.val, align 4
  %79 = sext i32 %78 to i64
  br label %common.ret

typeswitch.body31:                                ; preds = %runtime.type_info_core.exit
  switch i64 %19, label %common.ret [
    i64 216172782113783919, label %typeswitch.body32
    i64 216172782113783930, label %typeswitch.body33
    i64 216172782113783923, label %typeswitch.body34
    i64 216172782113783920, label %typeswitch.body35
    i64 216172782113783924, label %typeswitch.body36
    i64 216172782113783950, label %typeswitch.body37
  ]

typeswitch.body32:                                ; preds = %typeswitch.body31
  %80 = load float, ptr %.0.val, align 1
  %81 = fptosi float %80 to i64
  br label %common.ret

typeswitch.body33:                                ; preds = %typeswitch.body31
  %82 = load double, ptr %.0.val, align 1
  %83 = fptosi double %82 to i64
  br label %common.ret

typeswitch.body34:                                ; preds = %typeswitch.body31
  %84 = load float, ptr %.0.val, align 1
  %85 = fptosi float %84 to i64
  br label %common.ret

typeswitch.body35:                                ; preds = %typeswitch.body31
  %86 = load double, ptr %.0.val, align 1
  %87 = fptosi double %86 to i64
  br label %common.ret

typeswitch.body36:                                ; preds = %typeswitch.body31
  %88 = load i32, ptr %.0.val, align 1
  %89 = tail call i32 @llvm.bswap.i32(i32 %88)
  %.cast74 = bitcast i32 %89 to float
  %90 = fptosi float %.cast74 to i64
  br label %common.ret

typeswitch.body37:                                ; preds = %typeswitch.body31
  %91 = load i64, ptr %.0.val, align 1
  %92 = tail call i64 @llvm.bswap.i64(i64 %91)
  %.cast = bitcast i64 %92 to double
  %93 = fptosi double %.cast to i64
  br label %common.ret

typeswitch.body41:                                ; preds = %runtime.type_info_core.exit
  switch i64 %19, label %common.ret [
    i64 504403158265495582, label %typeswitch.body42
    i64 504403158265495692, label %typeswitch.body43
    i64 504403158265495661, label %typeswitch.body44
    i64 504403158265495686, label %typeswitch.body45
    i64 504403158265495681, label %typeswitch.body46
  ]

typeswitch.body42:                                ; preds = %typeswitch.body41
  %94 = load i8, ptr %.0.val, align 1
  %95 = icmp ne i8 %94, 0
  %96 = zext i1 %95 to i64
  br label %common.ret

typeswitch.body43:                                ; preds = %typeswitch.body41
  %97 = load i8, ptr %.0.val, align 1
  %98 = icmp ne i8 %97, 0
  %99 = zext i1 %98 to i64
  br label %common.ret

typeswitch.body44:                                ; preds = %typeswitch.body41
  %100 = load i16, ptr %.0.val, align 1
  %101 = icmp ne i16 %100, 0
  %102 = zext i1 %101 to i64
  br label %common.ret

typeswitch.body45:                                ; preds = %typeswitch.body41
  %103 = load i32, ptr %.0.val, align 1
  %104 = icmp ne i32 %103, 0
  %105 = zext i1 %104 to i64
  br label %common.ret

typeswitch.body46:                                ; preds = %typeswitch.body41
  %106 = load i64, ptr %.0.val, align 1
  %107 = icmp ne i64 %106, 0
  %108 = zext i1 %107 to i64
  br label %common.ret

typeswitch.body50:                                ; preds = %runtime.type_info_core.exit
  switch i64 %19, label %common.ret [
    i64 288230376151711874, label %typeswitch.body51
    i64 288230376151711872, label %typeswitch.body54
  ]

typeswitch.body51:                                ; preds = %typeswitch.body50
  %109 = load i64, ptr %.0.val, align 1
  %110 = and i64 %109, 9223372032559808512
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %if.then52, label %common.ret

if.then52:                                        ; preds = %typeswitch.body51
  %112 = trunc i64 %109 to i32
  %113 = bitcast i32 %112 to float
  %114 = fptosi float %113 to i64
  br label %common.ret

typeswitch.body54:                                ; preds = %typeswitch.body50
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %3, ptr align 1 %.0.val, i64 16, i1 false)
  %115 = getelementptr inbounds %..complex128, ptr %3, i64 0, i32 1
  %116 = load double, ptr %115, align 8
  %117 = fcmp oeq double %116, 0.000000e+00
  br i1 %117, label %if.then55, label %common.ret

if.then55:                                        ; preds = %typeswitch.body54
  %118 = load double, ptr %3, align 8
  %119 = fptosi double %118 to i64
  br label %common.ret

typeswitch.body58:                                ; preds = %runtime.type_info_core.exit
  switch i64 %19, label %common.ret [
    i64 110, label %typeswitch.body59
    i64 121, label %typeswitch.body63
  ]

typeswitch.body59:                                ; preds = %typeswitch.body58
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %4, ptr align 1 %.0.val, i64 16, i1 false)
  %120 = load float, ptr %4, align 8
  %121 = fcmp oeq float %120, 0.000000e+00
  %122 = getelementptr inbounds %..quaternion128, ptr %4, i64 0, i32 1
  %123 = load float, ptr %122, align 4
  %124 = fcmp oeq float %123, 0.000000e+00
  %or.cond = select i1 %121, i1 %124, i1 false
  %125 = getelementptr inbounds %..quaternion128, ptr %4, i64 0, i32 2
  %126 = load float, ptr %125, align 8
  %127 = fcmp oeq float %126, 0.000000e+00
  %or.cond83 = select i1 %or.cond, i1 %127, i1 false
  br i1 %or.cond83, label %if.then61, label %common.ret

if.then61:                                        ; preds = %typeswitch.body59
  %128 = getelementptr inbounds %..quaternion128, ptr %4, i64 0, i32 3
  %129 = load float, ptr %128, align 4
  %130 = fptosi float %129 to i64
  br label %common.ret

typeswitch.body63:                                ; preds = %typeswitch.body58
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %4, ptr align 1 %.0.val, i64 32, i1 false)
  %131 = load double, ptr %4, align 8
  %132 = fcmp oeq double %131, 0.000000e+00
  %133 = getelementptr inbounds %..quaternion256, ptr %4, i64 0, i32 1
  %134 = load double, ptr %133, align 8
  %135 = fcmp oeq double %134, 0.000000e+00
  %or.cond86 = select i1 %132, i1 %135, i1 false
  %136 = getelementptr inbounds %..quaternion256, ptr %4, i64 0, i32 2
  %137 = load double, ptr %136, align 8
  %138 = fcmp oeq double %137, 0.000000e+00
  %or.cond89 = select i1 %or.cond86, i1 %138, i1 false
  br i1 %or.cond89, label %if.then66, label %common.ret

if.then66:                                        ; preds = %typeswitch.body63
  %139 = getelementptr inbounds %..quaternion256, ptr %4, i64 0, i32 3
  %140 = load double, ptr %139, align 8
  %141 = fptosi double %140 to i64
  br label %common.ret
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: read)
define internal fastcc ptr @reflect.relative_pointer_to_absolute_raw(ptr %0, i64 %1) unnamed_addr #21 {
decls:
  switch i64 %1, label %typeswitch.done [
    i64 72057594037927945, label %typeswitch.body
    i64 72057594037928041, label %typeswitch.body1
    i64 72057594037927955, label %typeswitch.body2
    i64 72057594037927943, label %typeswitch.body3
    i64 4683743612465315978, label %typeswitch.body4
    i64 4683743612465315972, label %typeswitch.body5
    i64 4683743612465315867, label %typeswitch.body6
    i64 4683743612465315896, label %typeswitch.body7
    i64 72057594037928080, label %typeswitch.body8
    i64 72057594037928075, label %typeswitch.body9
    i64 72057594037928049, label %typeswitch.body10
    i64 4683743612465315954, label %typeswitch.body11
    i64 4683743612465315967, label %typeswitch.body12
    i64 4683743612465315983, label %typeswitch.body13
    i64 72057594037928062, label %typeswitch.body14
    i64 72057594037928073, label %typeswitch.body15
    i64 72057594037928056, label %typeswitch.body16
    i64 4683743612465315986, label %typeswitch.body17
    i64 4683743612465315971, label %typeswitch.body18
    i64 4683743612465315981, label %typeswitch.body19
  ]

typeswitch.body:                                  ; preds = %decls
  %2 = load i8, ptr %0, align 1
  %3 = icmp eq i8 %2, 0
  %4 = ptrtoint ptr %0 to i64
  %5 = zext i8 %2 to i64
  %6 = add i64 %5, %4
  %7 = inttoptr i64 %6 to ptr
  %common.ret.op.i = select i1 %3, ptr null, ptr %7
  br label %typeswitch.done

typeswitch.body1:                                 ; preds = %decls
  %8 = load i16, ptr %0, align 2
  %9 = icmp eq i16 %8, 0
  %10 = ptrtoint ptr %0 to i64
  %11 = zext i16 %8 to i64
  %12 = add i64 %11, %10
  %13 = inttoptr i64 %12 to ptr
  %common.ret.op.i25 = select i1 %9, ptr null, ptr %13
  br label %typeswitch.done

typeswitch.body2:                                 ; preds = %decls
  %14 = load i32, ptr %0, align 4
  %15 = icmp eq i32 %14, 0
  %16 = ptrtoint ptr %0 to i64
  %17 = zext i32 %14 to i64
  %18 = add i64 %17, %16
  %19 = inttoptr i64 %18 to ptr
  %common.ret.op.i26 = select i1 %15, ptr null, ptr %19
  br label %typeswitch.done

typeswitch.body3:                                 ; preds = %decls
  %20 = load i64, ptr %0, align 8
  %21 = icmp eq i64 %20, 0
  %22 = ptrtoint ptr %0 to i64
  %23 = add i64 %20, %22
  %24 = inttoptr i64 %23 to ptr
  %common.ret.op.i27 = select i1 %21, ptr null, ptr %24
  br label %typeswitch.done

typeswitch.body4:                                 ; preds = %decls
  %25 = load i8, ptr %0, align 1
  %26 = icmp eq i8 %25, 0
  %27 = ptrtoint ptr %0 to i64
  %28 = sext i8 %25 to i64
  %29 = add i64 %28, %27
  %30 = inttoptr i64 %29 to ptr
  %common.ret.op.i28 = select i1 %26, ptr null, ptr %30
  br label %typeswitch.done

typeswitch.body5:                                 ; preds = %decls
  %31 = load i16, ptr %0, align 2
  %32 = icmp eq i16 %31, 0
  %33 = ptrtoint ptr %0 to i64
  %34 = sext i16 %31 to i64
  %35 = add i64 %34, %33
  %36 = inttoptr i64 %35 to ptr
  %common.ret.op.i29 = select i1 %32, ptr null, ptr %36
  br label %typeswitch.done

typeswitch.body6:                                 ; preds = %decls
  %37 = load i32, ptr %0, align 4
  %38 = icmp eq i32 %37, 0
  %39 = ptrtoint ptr %0 to i64
  %40 = sext i32 %37 to i64
  %41 = add i64 %40, %39
  %42 = inttoptr i64 %41 to ptr
  %common.ret.op.i30 = select i1 %38, ptr null, ptr %42
  br label %typeswitch.done

typeswitch.body7:                                 ; preds = %decls
  %43 = load i64, ptr %0, align 8
  %44 = icmp eq i64 %43, 0
  %45 = ptrtoint ptr %0 to i64
  %46 = add i64 %43, %45
  %47 = inttoptr i64 %46 to ptr
  %common.ret.op.i31 = select i1 %44, ptr null, ptr %47
  br label %typeswitch.done

typeswitch.body8:                                 ; preds = %decls
  %48 = load i16, ptr %0, align 2
  %49 = icmp eq i16 %48, 0
  %50 = ptrtoint ptr %0 to i64
  %51 = zext i16 %48 to i64
  %52 = add i64 %51, %50
  %53 = inttoptr i64 %52 to ptr
  %common.ret.op.i32 = select i1 %49, ptr null, ptr %53
  br label %typeswitch.done

typeswitch.body9:                                 ; preds = %decls
  %54 = load i32, ptr %0, align 4
  %55 = icmp eq i32 %54, 0
  %56 = ptrtoint ptr %0 to i64
  %57 = zext i32 %54 to i64
  %58 = add i64 %57, %56
  %59 = inttoptr i64 %58 to ptr
  %common.ret.op.i33 = select i1 %55, ptr null, ptr %59
  br label %typeswitch.done

typeswitch.body10:                                ; preds = %decls
  %60 = load i64, ptr %0, align 8
  %61 = icmp eq i64 %60, 0
  %62 = ptrtoint ptr %0 to i64
  %63 = add i64 %60, %62
  %64 = inttoptr i64 %63 to ptr
  %common.ret.op.i34 = select i1 %61, ptr null, ptr %64
  br label %typeswitch.done

typeswitch.body11:                                ; preds = %decls
  %65 = load i16, ptr %0, align 2
  %66 = icmp eq i16 %65, 0
  %67 = ptrtoint ptr %0 to i64
  %68 = sext i16 %65 to i64
  %69 = add i64 %68, %67
  %70 = inttoptr i64 %69 to ptr
  %common.ret.op.i35 = select i1 %66, ptr null, ptr %70
  br label %typeswitch.done

typeswitch.body12:                                ; preds = %decls
  %71 = load i32, ptr %0, align 4
  %72 = icmp eq i32 %71, 0
  %73 = ptrtoint ptr %0 to i64
  %74 = sext i32 %71 to i64
  %75 = add i64 %74, %73
  %76 = inttoptr i64 %75 to ptr
  %common.ret.op.i36 = select i1 %72, ptr null, ptr %76
  br label %typeswitch.done

typeswitch.body13:                                ; preds = %decls
  %77 = load i64, ptr %0, align 8
  %78 = icmp eq i64 %77, 0
  %79 = ptrtoint ptr %0 to i64
  %80 = add i64 %77, %79
  %81 = inttoptr i64 %80 to ptr
  %common.ret.op.i37 = select i1 %78, ptr null, ptr %81
  br label %typeswitch.done

typeswitch.body14:                                ; preds = %decls
  %82 = load i16, ptr %0, align 2
  %83 = icmp eq i16 %82, 0
  %84 = ptrtoint ptr %0 to i64
  %85 = tail call i16 @llvm.bswap.i16(i16 %82)
  %86 = zext i16 %85 to i64
  %87 = add i64 %86, %84
  %88 = inttoptr i64 %87 to ptr
  %common.ret.op.i38 = select i1 %83, ptr null, ptr %88
  br label %typeswitch.done

typeswitch.body15:                                ; preds = %decls
  %89 = load i32, ptr %0, align 4
  %90 = icmp eq i32 %89, 0
  %91 = ptrtoint ptr %0 to i64
  %92 = tail call i32 @llvm.bswap.i32(i32 %89)
  %93 = zext i32 %92 to i64
  %94 = add i64 %93, %91
  %95 = inttoptr i64 %94 to ptr
  %common.ret.op.i39 = select i1 %90, ptr null, ptr %95
  br label %typeswitch.done

typeswitch.body16:                                ; preds = %decls
  %96 = load i64, ptr %0, align 8
  %97 = icmp eq i64 %96, 0
  %98 = ptrtoint ptr %0 to i64
  %99 = tail call i64 @llvm.bswap.i64(i64 %96)
  %100 = add i64 %99, %98
  %101 = inttoptr i64 %100 to ptr
  %common.ret.op.i40 = select i1 %97, ptr null, ptr %101
  br label %typeswitch.done

typeswitch.body17:                                ; preds = %decls
  %102 = load i16, ptr %0, align 2
  %103 = icmp eq i16 %102, 0
  %104 = ptrtoint ptr %0 to i64
  %105 = tail call i16 @llvm.bswap.i16(i16 %102)
  %106 = sext i16 %105 to i64
  %107 = add i64 %106, %104
  %108 = inttoptr i64 %107 to ptr
  %common.ret.op.i41 = select i1 %103, ptr null, ptr %108
  br label %typeswitch.done

typeswitch.body18:                                ; preds = %decls
  %109 = load i32, ptr %0, align 4
  %110 = icmp eq i32 %109, 0
  %111 = ptrtoint ptr %0 to i64
  %112 = tail call i32 @llvm.bswap.i32(i32 %109)
  %113 = sext i32 %112 to i64
  %114 = add i64 %113, %111
  %115 = inttoptr i64 %114 to ptr
  %common.ret.op.i42 = select i1 %110, ptr null, ptr %115
  br label %typeswitch.done

typeswitch.body19:                                ; preds = %decls
  %116 = load i64, ptr %0, align 8
  %117 = icmp eq i64 %116, 0
  %118 = ptrtoint ptr %0 to i64
  %119 = tail call i64 @llvm.bswap.i64(i64 %116)
  %120 = add i64 %119, %118
  %121 = inttoptr i64 %120 to ptr
  %common.ret.op.i43 = select i1 %117, ptr null, ptr %121
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %typeswitch.body19, %typeswitch.body18, %typeswitch.body17, %typeswitch.body16, %typeswitch.body15, %typeswitch.body14, %typeswitch.body13, %typeswitch.body12, %typeswitch.body11, %typeswitch.body10, %typeswitch.body9, %typeswitch.body8, %typeswitch.body7, %typeswitch.body6, %typeswitch.body5, %typeswitch.body4, %typeswitch.body3, %typeswitch.body2, %typeswitch.body1, %typeswitch.body, %decls
  %ptr.0 = phi ptr [ null, %decls ], [ %common.ret.op.i43, %typeswitch.body19 ], [ %common.ret.op.i42, %typeswitch.body18 ], [ %common.ret.op.i41, %typeswitch.body17 ], [ %common.ret.op.i40, %typeswitch.body16 ], [ %common.ret.op.i39, %typeswitch.body15 ], [ %common.ret.op.i38, %typeswitch.body14 ], [ %common.ret.op.i37, %typeswitch.body13 ], [ %common.ret.op.i36, %typeswitch.body12 ], [ %common.ret.op.i35, %typeswitch.body11 ], [ %common.ret.op.i34, %typeswitch.body10 ], [ %common.ret.op.i33, %typeswitch.body9 ], [ %common.ret.op.i32, %typeswitch.body8 ], [ %common.ret.op.i31, %typeswitch.body7 ], [ %common.ret.op.i30, %typeswitch.body6 ], [ %common.ret.op.i29, %typeswitch.body5 ], [ %common.ret.op.i28, %typeswitch.body4 ], [ %common.ret.op.i27, %typeswitch.body3 ], [ %common.ret.op.i26, %typeswitch.body2 ], [ %common.ret.op.i25, %typeswitch.body1 ], [ %common.ret.op.i, %typeswitch.body ]
  ret ptr %ptr.0
}

define internal i8 @runtime.default_allocator_proc(ptr nocapture readnone %0, i8 %1, i64 %2, i64 %3, ptr %4, i64 %5, ptr nocapture readnone %6, ptr noalias nocapture nonnull writeonly %7, ptr noalias nocapture nonnull readnone %__.context_ptr) {
decls:
  switch i8 %1, label %switch.done [
    i8 0, label %switch.case.body
    i8 6, label %switch.case.body
    i8 1, label %switch.case.body1
    i8 2, label %switch.case.body2
    i8 3, label %switch.case.body3
    i8 4, label %switch.case.body4
    i8 5, label %switch.case.body5
  ]

switch.case.body:                                 ; preds = %decls, %decls
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %switch.done, label %if.done.i.i

if.done.i.i:                                      ; preds = %switch.case.body
  %9 = icmp eq i8 %1, 0
  %10 = tail call i64 @llvm.smax.i64(i64 %3, i64 8)
  %11 = add i64 %10, %2
  %12 = add i64 %11, -1
  %13 = add i64 %11, 7
  %14 = tail call x86_stdcallcc ptr @GetProcessHeap(), !noalias !2886
  %15 = select i1 %9, i32 8, i32 0
  %16 = tail call x86_stdcallcc ptr @HeapAlloc(ptr %14, i32 %15, i64 %13), !noalias !2886
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = ptrtoint ptr %17 to i64
  %19 = add nsw i64 %10, -1
  %20 = add i64 %19, %18
  %21 = sub nsw i64 0, %10
  %22 = and i64 %20, %21
  %23 = sub i64 %2, %18
  %24 = add i64 %23, %22
  %25 = icmp sgt i64 %24, %12
  %26 = icmp eq ptr %16, null
  %or.cond.i.i = or i1 %26, %25
  br i1 %or.cond.i.i, label %switch.done, label %if.done4.i.i

if.done4.i.i:                                     ; preds = %if.done.i.i
  %27 = inttoptr i64 %22 to ptr
  %28 = getelementptr ptr, ptr %27, i64 -1
  store ptr %16, ptr %28, align 8, !noalias !2886
  br label %switch.done

switch.case.body1:                                ; preds = %decls
  %.not.i = icmp eq ptr %4, null
  br i1 %.not.i, label %switch.done, label %if.then.i

if.then.i:                                        ; preds = %switch.case.body1
  %29 = getelementptr ptr, ptr %4, i64 -1
  %30 = load ptr, ptr %29, align 8
  %31 = icmp eq ptr %30, null
  br i1 %31, label %switch.done, label %if.done.i.i24

if.done.i.i24:                                    ; preds = %if.then.i
  %32 = tail call x86_stdcallcc ptr @GetProcessHeap()
  %33 = tail call x86_stdcallcc i32 @HeapFree(ptr %32, i32 0, ptr nonnull %30)
  br label %switch.done

common.ret:                                       ; preds = %switch.done, %switch.case.body5, %switch.case.body2
  %common.ret.op = phi i8 [ 4, %switch.case.body2 ], [ 4, %switch.case.body5 ], [ %err.0, %switch.done ]
  ret i8 %common.ret.op

switch.case.body2:                                ; preds = %decls
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false)
  br label %common.ret

switch.case.body3:                                ; preds = %decls
  %34 = icmp eq i64 %2, 0
  br i1 %34, label %if.then.i.i, label %if.done.i.i25

if.then.i.i:                                      ; preds = %switch.case.body3
  %.not.i.i.i = icmp eq ptr %4, null
  br i1 %.not.i.i.i, label %switch.done, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.then.i.i
  %35 = getelementptr ptr, ptr %4, i64 -1
  %36 = load ptr, ptr %35, align 8, !noalias !2891
  %37 = icmp eq ptr %36, null
  br i1 %37, label %switch.done, label %if.done.i.i.i.i

if.done.i.i.i.i:                                  ; preds = %if.then.i.i.i
  %38 = tail call x86_stdcallcc ptr @GetProcessHeap(), !noalias !2891
  %39 = tail call x86_stdcallcc i32 @HeapFree(ptr %38, i32 0, ptr nonnull %36), !noalias !2891
  br label %switch.done

if.done.i.i25:                                    ; preds = %switch.case.body3
  %40 = tail call i64 @llvm.smax.i64(i64 %3, i64 8)
  %41 = add i64 %40, %2
  %42 = add i64 %41, -1
  %.not.i.i = icmp eq ptr %4, null
  br i1 %.not.i.i, label %if.else.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.done.i.i25
  %43 = getelementptr ptr, ptr %4, i64 -1
  %44 = load ptr, ptr %43, align 8, !noalias !2891
  %45 = add i64 %41, 7
  %46 = icmp eq i64 %45, 0
  %47 = icmp eq ptr %44, null
  br i1 %46, label %if.then.i12.i.i, label %if.done.i.i.i

if.then.i12.i.i:                                  ; preds = %if.then1.i.i
  br i1 %47, label %if.done2.i.i, label %if.done.i.i13.i.i

if.done.i.i13.i.i:                                ; preds = %if.then.i12.i.i
  %48 = tail call x86_stdcallcc ptr @GetProcessHeap(), !noalias !2891
  %49 = tail call x86_stdcallcc i32 @HeapFree(ptr %48, i32 0, ptr nonnull %44), !noalias !2891
  br label %if.done2.i.i

if.done.i.i.i:                                    ; preds = %if.then1.i.i
  %50 = tail call x86_stdcallcc ptr @GetProcessHeap(), !noalias !2891
  br i1 %47, label %if.then1.i.i.i, label %if.done2.i.i.i

if.then1.i.i.i:                                   ; preds = %if.done.i.i.i
  %51 = tail call x86_stdcallcc ptr @HeapAlloc(ptr %50, i32 8, i64 %45), !noalias !2891
  br label %if.done2.i.i

if.done2.i.i.i:                                   ; preds = %if.done.i.i.i
  %52 = tail call x86_stdcallcc ptr @HeapReAlloc(ptr %50, i32 8, ptr nonnull %44, i64 %45), !noalias !2891
  br label %if.done2.i.i

if.else.i.i:                                      ; preds = %if.done.i.i25
  %53 = add i64 %41, 7
  %54 = tail call x86_stdcallcc ptr @GetProcessHeap(), !noalias !2891
  %55 = tail call x86_stdcallcc ptr @HeapAlloc(ptr %54, i32 8, i64 %53), !noalias !2891
  br label %if.done2.i.i

if.done2.i.i:                                     ; preds = %if.else.i.i, %if.done2.i.i.i, %if.then1.i.i.i, %if.done.i.i13.i.i, %if.then.i12.i.i
  %allocated_mem.0.i.i = phi ptr [ %55, %if.else.i.i ], [ %51, %if.then1.i.i.i ], [ %52, %if.done2.i.i.i ], [ null, %if.then.i12.i.i ], [ null, %if.done.i.i13.i.i ]
  %56 = getelementptr i8, ptr %allocated_mem.0.i.i, i64 8
  %57 = ptrtoint ptr %56 to i64
  %58 = add nsw i64 %40, -1
  %59 = add i64 %58, %57
  %60 = sub nsw i64 0, %40
  %61 = and i64 %59, %60
  %62 = sub i64 %2, %57
  %63 = add i64 %62, %61
  %64 = icmp sgt i64 %63, %42
  %65 = icmp eq ptr %allocated_mem.0.i.i, null
  %or.cond.i.i26 = or i1 %65, %64
  br i1 %or.cond.i.i26, label %switch.done, label %if.done4.i.i27

if.done4.i.i27:                                   ; preds = %if.done2.i.i
  %66 = inttoptr i64 %61 to ptr
  %67 = getelementptr ptr, ptr %66, i64 -1
  store ptr %allocated_mem.0.i.i, ptr %67, align 8, !noalias !2891
  br label %switch.done

switch.case.body4:                                ; preds = %decls
  %.not = icmp eq ptr %4, null
  br i1 %.not, label %switch.done, label %if.then

if.then:                                          ; preds = %switch.case.body4
  store i8 91, ptr %4, align 1
  br label %switch.done

switch.case.body5:                                ; preds = %decls
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false)
  br label %common.ret

switch.done:                                      ; preds = %if.done4.i.i27, %if.done2.i.i, %if.done.i.i.i.i, %if.then.i.i.i, %if.then.i.i, %if.done4.i.i, %if.done.i.i, %switch.case.body, %if.done.i.i24, %if.then.i, %switch.case.body1, %switch.case.body4, %if.then, %decls
  %.unpack9 = phi i64 [ 0, %decls ], [ 0, %if.then ], [ 0, %switch.case.body4 ], [ 0, %switch.case.body1 ], [ 0, %if.then.i ], [ 0, %if.done.i.i24 ], [ %2, %if.done4.i.i ], [ 0, %switch.case.body ], [ 0, %if.done.i.i ], [ %2, %if.done4.i.i27 ], [ 0, %if.done.i.i.i.i ], [ 0, %if.then.i.i.i ], [ 0, %if.then.i.i ], [ 0, %if.done2.i.i ]
  %.unpack = phi ptr [ null, %decls ], [ null, %if.then ], [ null, %switch.case.body4 ], [ null, %switch.case.body1 ], [ null, %if.then.i ], [ null, %if.done.i.i24 ], [ %27, %if.done4.i.i ], [ null, %switch.case.body ], [ null, %if.done.i.i ], [ %66, %if.done4.i.i27 ], [ null, %if.done.i.i.i.i ], [ null, %if.then.i.i.i ], [ null, %if.then.i.i ], [ null, %if.done2.i.i ]
  %err.0 = phi i8 [ 0, %decls ], [ 0, %if.then ], [ 0, %switch.case.body4 ], [ 0, %switch.case.body1 ], [ 0, %if.then.i ], [ 0, %if.done.i.i24 ], [ 0, %if.done4.i.i ], [ 0, %switch.case.body ], [ 1, %if.done.i.i ], [ 0, %if.done4.i.i27 ], [ 0, %if.done.i.i.i.i ], [ 0, %if.then.i.i.i ], [ 0, %if.then.i.i ], [ 1, %if.done2.i.i ]
  store ptr %.unpack, ptr %7, align 8
  %.repack10 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 %.unpack9, ptr %.repack10, align 8
  br label %common.ret
}

define internal i8 @runtime.default_temp_allocator_proc(ptr nocapture %0, i8 %1, i64 %2, i64 %3, ptr %4, i64 %5, ptr %6, ptr noalias nocapture nonnull writeonly %7, ptr noalias nocapture nonnull %__.context_ptr) {
decls:
  %8 = alloca { ptr, i64 }, align 8
  %data.i = alloca { ptr, i64 }, align 8
  %9 = alloca { ptr, i64 }, align 8
  %10 = alloca { ptr, i64 }, align 8
  %11 = alloca { ptr, i64 }, align 8
  %data = alloca { ptr, i64 }, align 8
  %12 = alloca { ptr, i64 }, align 8
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %data, i8 0, i64 16, i1 false)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %12, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %data.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %11)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %data.i, i8 0, i64 16, i1 false), !noalias !2896
  switch i8 %1, label %runtime.arena_allocator_proc.exit [
    i8 0, label %switch.case.body.i
    i8 6, label %switch.case.body.i
    i8 1, label %switch.case.body1.i
    i8 2, label %switch.case.body2.i
    i8 3, label %switch.case.body3.i
    i8 4, label %switch.case.body11.i
    i8 5, label %switch.case.body14.i
  ]

switch.case.body.i:                               ; preds = %decls, %decls
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %9, i8 0, i64 16, i1 false), !noalias !2896
  %13 = call fastcc i8 @runtime.arena_alloc(ptr %0, i64 %2, i64 %3, ptr %6, ptr %9, ptr %__.context_ptr), !noalias !2900
  %.unpack76.i = load ptr, ptr %9, align 8, !noalias !2896
  %.elt77.i = getelementptr inbounds { ptr, i64 }, ptr %9, i64 0, i32 1
  %.unpack78.i = load i64, ptr %.elt77.i, align 8, !noalias !2896
  br label %runtime.arena_allocator_proc.exit

switch.case.body1.i:                              ; preds = %decls
  br label %runtime.arena_allocator_proc.exit

switch.case.body2.i:                              ; preds = %decls
  %14 = getelementptr inbounds %runtime.Arena, ptr %0, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !noalias !2901
  %.not7.i.i = icmp eq ptr %15, null
  br i1 %.not7.i.i, label %runtime.arena_free_all.exit.i, label %cmp.and.lr.ph.i.i

cmp.and.lr.ph.i.i:                                ; preds = %switch.case.body2.i
  %16 = getelementptr inbounds %runtime.Arena, ptr %0, i64 0, i32 3
  br label %cmp.and.i.i

cmp.and.i.i:                                      ; preds = %runtime.arena_free_last_memory_block.exit.i.i, %cmp.and.lr.ph.i.i
  %17 = phi ptr [ %15, %cmp.and.lr.ph.i.i ], [ %26, %runtime.arena_free_last_memory_block.exit.i.i ]
  %18 = load ptr, ptr %17, align 8, !noalias !2900
  %.not3.i.i = icmp eq ptr %18, null
  br i1 %.not3.i.i, label %if.then.i.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %cmp.and.i.i
  store ptr %18, ptr %14, align 8, !noalias !2904
  %19 = getelementptr inbounds %runtime.Memory_Block, ptr %17, i64 0, i32 4
  %20 = load i64, ptr %19, align 8, !noalias !2907
  %21 = load i64, ptr %16, align 8, !noalias !2904
  %22 = sub i64 %21, %20
  store i64 %22, ptr %16, align 8, !noalias !2904
  %23 = getelementptr inbounds %runtime.Memory_Block, ptr %17, i64 0, i32 1
  %.unpack.i.i.i.i = load ptr, ptr %23, align 8, !noalias !2908
  %.elt1.i.i.i.i = getelementptr inbounds %runtime.Memory_Block, ptr %17, i64 0, i32 1, i32 1
  %.unpack2.i.i.i.i = load ptr, ptr %.elt1.i.i.i.i, align 8, !noalias !2908
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %8), !noalias !2911
  %24 = icmp eq ptr %.unpack.i.i.i.i, null
  br i1 %24, label %runtime.arena_free_last_memory_block.exit.i.i, label %if.done.i.i.i.i.i

if.done.i.i.i.i.i:                                ; preds = %if.then.i.i.i.i
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %8, i8 0, i64 16, i1 false), !noalias !2912
  %25 = call i8 %.unpack.i.i.i.i(ptr %.unpack2.i.i.i.i, i8 1, i64 0, i64 0, ptr nonnull %17, i64 0, ptr %6, ptr nonnull %8, ptr nonnull %__.context_ptr) #30, !noalias !2900
  %.pre.i.i = load ptr, ptr %14, align 8, !noalias !2901
  br label %runtime.arena_free_last_memory_block.exit.i.i

runtime.arena_free_last_memory_block.exit.i.i:    ; preds = %if.done.i.i.i.i.i, %if.then.i.i.i.i
  %26 = phi ptr [ %18, %if.then.i.i.i.i ], [ %.pre.i.i, %if.done.i.i.i.i.i ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %8), !noalias !2911
  %.not.i.i = icmp eq ptr %26, null
  br i1 %.not.i.i, label %runtime.arena_free_all.exit.i, label %cmp.and.i.i

if.then.i.i:                                      ; preds = %cmp.and.i.i
  %27 = getelementptr inbounds %runtime.Memory_Block, ptr %17, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !noalias !2900
  %29 = getelementptr inbounds %runtime.Memory_Block, ptr %17, i64 0, i32 3
  %30 = load i64, ptr %29, align 8, !noalias !2900
  call void @llvm.memset.p0.i64(ptr align 1 %28, i8 0, i64 %30, i1 false), !noalias !2900
  %31 = load ptr, ptr %14, align 8, !noalias !2901
  %32 = getelementptr inbounds %runtime.Memory_Block, ptr %31, i64 0, i32 3
  store i64 0, ptr %32, align 8, !noalias !2900
  br label %runtime.arena_free_all.exit.i

runtime.arena_free_all.exit.i:                    ; preds = %runtime.arena_free_last_memory_block.exit.i.i, %if.then.i.i, %switch.case.body2.i
  %33 = getelementptr inbounds %runtime.Arena, ptr %0, i64 0, i32 2
  store i64 0, ptr %33, align 8, !noalias !2901
  br label %runtime.arena_allocator_proc.exit

switch.case.body3.i:                              ; preds = %decls
  %34 = icmp eq ptr %4, null
  br i1 %34, label %switch.case.body4.i, label %switch.case.next.i

switch.case.next.i:                               ; preds = %switch.case.body3.i
  %35 = icmp eq i64 %2, %5
  br i1 %35, label %runtime.arena_allocator_proc.exit, label %switch.case.next5.i

switch.case.body4.i:                              ; preds = %switch.case.body3.i
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %10, i8 0, i64 16, i1 false), !noalias !2896
  %36 = call fastcc i8 @runtime.arena_alloc(ptr %0, i64 %2, i64 %3, ptr %6, ptr %10, ptr %__.context_ptr), !noalias !2900
  %.unpack69.i = load ptr, ptr %10, align 8, !noalias !2896
  %.elt70.i = getelementptr inbounds { ptr, i64 }, ptr %10, i64 0, i32 1
  %.unpack71.i = load i64, ptr %.elt70.i, align 8, !noalias !2896
  br label %runtime.arena_allocator_proc.exit

switch.case.next5.i:                              ; preds = %switch.case.next.i
  %37 = icmp eq i64 %2, 0
  br i1 %37, label %runtime.arena_allocator_proc.exit, label %switch.case.next7.i

switch.case.next7.i:                              ; preds = %switch.case.next5.i
  %38 = ptrtoint ptr %4 to i64
  %39 = add i64 %3, -1
  %40 = and i64 %39, %38
  %41 = icmp eq i64 %40, 0
  %42 = icmp ult i64 %2, %5
  %spec.select.i = select i1 %41, i1 %42, i1 false
  br i1 %spec.select.i, label %runtime.arena_allocator_proc.exit, label %switch.done.i

switch.done.i:                                    ; preds = %switch.case.next7.i
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %11, i8 0, i64 16, i1 false), !noalias !2896
  %43 = call fastcc i8 @runtime.arena_alloc(ptr %0, i64 %2, i64 %3, ptr %6, ptr %11, ptr %__.context_ptr), !noalias !2900
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %or_return.continue.i, label %runtime.arena_allocator_proc.exit

or_return.continue.i:                             ; preds = %switch.done.i
  %.unpack24.i = load ptr, ptr %11, align 8, !noalias !2896
  %.elt25.i = getelementptr inbounds { ptr, i64 }, ptr %11, i64 0, i32 1
  %.unpack26.i = load i64, ptr %.elt25.i, align 8, !noalias !2896
  %45 = icmp eq ptr %.unpack24.i, null
  br i1 %45, label %runtime.arena_allocator_proc.exit, label %if.done.i

if.done.i:                                        ; preds = %or_return.continue.i
  %46 = tail call i64 @llvm.smin.i64(i64 %.unpack26.i, i64 %5)
  %.not.i83.i = icmp slt i64 %46, 1
  br i1 %.not.i83.i, label %runtime.arena_allocator_proc.exit, label %if.then.i84.i

if.then.i84.i:                                    ; preds = %if.done.i
  tail call void @llvm.memmove.p0.p0.i64(ptr nonnull align 1 %.unpack24.i, ptr nonnull align 1 %4, i64 %46, i1 false), !noalias !2896
  br label %runtime.arena_allocator_proc.exit

switch.case.body11.i:                             ; preds = %decls
  %.not.i = icmp eq ptr %4, null
  br i1 %.not.i, label %runtime.arena_allocator_proc.exit, label %if.then12.i

if.then12.i:                                      ; preds = %switch.case.body11.i
  store i8 93, ptr %4, align 1, !noalias !2896
  br label %runtime.arena_allocator_proc.exit

switch.case.body14.i:                             ; preds = %decls
  br label %runtime.arena_allocator_proc.exit

runtime.arena_allocator_proc.exit:                ; preds = %decls, %switch.case.body1.i, %runtime.arena_free_all.exit.i, %switch.case.body11.i, %if.then12.i, %switch.case.body14.i, %if.done.i, %if.then.i84.i, %or_return.continue.i, %switch.done.i, %switch.case.next7.i, %switch.case.next5.i, %switch.case.next.i, %switch.case.body.i, %switch.case.body4.i
  %.unpack2 = phi i64 [ %.unpack78.i, %switch.case.body.i ], [ %.unpack71.i, %switch.case.body4.i ], [ %2, %switch.case.next.i ], [ 0, %switch.case.next5.i ], [ %2, %switch.case.next7.i ], [ 0, %switch.done.i ], [ 0, %or_return.continue.i ], [ %.unpack26.i, %if.then.i84.i ], [ %.unpack26.i, %if.done.i ], [ 0, %switch.case.body14.i ], [ 0, %if.then12.i ], [ 0, %switch.case.body11.i ], [ 0, %runtime.arena_free_all.exit.i ], [ 0, %switch.case.body1.i ], [ 0, %decls ]
  %.unpack = phi ptr [ %.unpack76.i, %switch.case.body.i ], [ %.unpack69.i, %switch.case.body4.i ], [ %4, %switch.case.next.i ], [ null, %switch.case.next5.i ], [ %4, %switch.case.next7.i ], [ null, %switch.done.i ], [ null, %or_return.continue.i ], [ %.unpack24.i, %if.then.i84.i ], [ %.unpack24.i, %if.done.i ], [ null, %switch.case.body14.i ], [ null, %if.then12.i ], [ null, %switch.case.body11.i ], [ null, %runtime.arena_free_all.exit.i ], [ null, %switch.case.body1.i ], [ null, %decls ]
  %common.ret.op.i = phi i8 [ %13, %switch.case.body.i ], [ %36, %switch.case.body4.i ], [ 0, %switch.case.next.i ], [ 4, %switch.case.next5.i ], [ 0, %switch.case.next7.i ], [ %43, %switch.done.i ], [ 0, %or_return.continue.i ], [ 0, %if.then.i84.i ], [ 0, %if.done.i ], [ 4, %switch.case.body14.i ], [ 0, %if.then12.i ], [ 0, %switch.case.body11.i ], [ 0, %runtime.arena_free_all.exit.i ], [ 4, %switch.case.body1.i ], [ 0, %decls ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %data.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %11)
  store ptr %.unpack, ptr %7, align 8
  %.repack5 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  store i64 %.unpack2, ptr %.repack5, align 8
  ret i8 %common.ret.op.i
}

; Function Attrs: noinline
define dso_local i32 @main(i32 %0, ptr %1) local_unnamed_addr #22 {
decls:
  %2 = alloca %runtime.Context, align 8
  %3 = alloca %runtime.Context, align 8
  %4 = sext i32 %0 to i64
  store ptr %1, ptr @runtime.args__, align 8
  store i64 %4, ptr getelementptr inbounds ({ ptr, i64 }, ptr @runtime.args__, i64 0, i32 1), align 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %3, i8 0, i64 96, i1 false)
  call fastcc void @runtime.default_context(ptr noalias nonnull %3) #22
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(96) %2, ptr noundef nonnull align 8 dereferenceable(96) %3, i64 96, i1 false)
  call void @"__$startup_runtime"(ptr %2) #22
  call fastcc void @opt_ex.main(ptr %2) #22
  call void @"__$cleanup_runtime"(ptr %2) #22
  ret i32 0
}

define internal fastcc void @runtime.make_slice-19739(i64 %0, ptr nocapture readonly %1, ptr %2, ptr noalias nocapture nonnull writeonly %3, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %4 = alloca { ptr, i64 }, align 8
  %5 = icmp sgt i64 %0, -1
  br i1 %5, label %runtime.make_slice_error_loc.exit.i, label %if.done.i.i

if.done.i.i:                                      ; preds = %decls
  tail call fastcc void @runtime.print_caller_location(ptr %2), !noalias !2915
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$154")
  tail call fastcc void @runtime.print_i64(i64 %0), !noalias !2915
  tail call fastcc void @runtime.print_byte(i8 10)
  tail call fastcc void @runtime.bounds_trap(), !noalias !2915
  unreachable

runtime.make_slice_error_loc.exit.i:              ; preds = %decls
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4), !noalias !2915
  %6 = icmp eq i64 %0, 0
  br i1 %6, label %runtime.mem_alloc_bytes.exit.thread.i, label %if.done.i17.i

if.done.i17.i:                                    ; preds = %runtime.make_slice_error_loc.exit.i
  %7 = load ptr, ptr %1, align 8, !noalias !2919
  %8 = icmp eq ptr %7, null
  br i1 %8, label %runtime.mem_alloc_bytes.exit.thread.i, label %runtime.mem_alloc_bytes.exit.i

runtime.mem_alloc_bytes.exit.thread.i:            ; preds = %if.done.i17.i, %runtime.make_slice_error_loc.exit.i
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !2915
  br label %runtime.make_aligned-20386.exit

runtime.mem_alloc_bytes.exit.i:                   ; preds = %if.done.i17.i
  %9 = getelementptr inbounds %runtime.Allocator, ptr %1, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !noalias !2919
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 8 %4, i8 0, i64 16, i1 false), !noalias !2919
  %11 = call i8 %7(ptr %10, i8 0, i64 %0, i64 1, ptr null, i64 0, ptr %2, ptr nonnull %4, ptr nonnull %__.context_ptr) #30, !noalias !2923
  %.unpack.i.i = load ptr, ptr %4, align 8, !noalias !2919
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !2915
  %12 = icmp eq ptr %.unpack.i.i, null
  %spec.select22.i = select i1 %12, i64 0, i64 %0
  br label %runtime.make_aligned-20386.exit

runtime.make_aligned-20386.exit:                  ; preds = %runtime.mem_alloc_bytes.exit.thread.i, %runtime.mem_alloc_bytes.exit.i
  %.unpack.sink.i = phi ptr [ null, %runtime.mem_alloc_bytes.exit.thread.i ], [ %.unpack.i.i, %runtime.mem_alloc_bytes.exit.i ]
  %.unpack13.sink.i = phi i64 [ 0, %runtime.mem_alloc_bytes.exit.thread.i ], [ %spec.select22.i, %runtime.mem_alloc_bytes.exit.i ]
  store ptr %.unpack.sink.i, ptr %3, align 8
  %.repack3 = getelementptr inbounds { ptr, i64 }, ptr %3, i64 0, i32 1
  store i64 %.unpack13.sink.i, ptr %.repack3, align 8
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #23

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.inline.p0.i64(ptr nocapture writeonly, i8, i64 immarg, i1 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.cttz.i64(i64, i1 immarg) #23

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #23

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64 immarg, i1 immarg) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.bswap.i16(i16) #23

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.bswap.i32(i32) #23

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.bswap.i64(i64) #23

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.bswap.i128(i128) #23

define internal fastcc void @fmt.handle_tag-1276.handle_optional_len-0(ptr %0, ptr nocapture readonly %1, ptr readonly %.0.val, i64 %.8.val, ptr writeonly %2) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %4 = icmp eq ptr %2, null
  br i1 %4, label %common.ret, label %if.done

common.ret:                                       ; preds = %runtime.string_ne.exit, %if.done, %if.then3, %if.done2, %decls
  ret void

if.done:                                          ; preds = %decls
  %5 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %1, i64 0, i32 1, i32 1
  %6 = load i64, ptr %5, align 8
  %7 = icmp sgt i64 %6, 0
  br i1 %7, label %for.index.body.lr.ph, label %common.ret

for.index.body.lr.ph:                             ; preds = %if.done
  %8 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %1, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8
  %10 = icmp ne i64 %.8.val, 0
  br label %for.index.body

for.index.body:                                   ; preds = %for.index.body.lr.ph, %runtime.string_ne.exit
  %11 = phi i64 [ 0, %for.index.body.lr.ph ], [ %19, %runtime.string_ne.exit ]
  %12 = getelementptr %..string, ptr %9, i64 %11
  %.unpack = load ptr, ptr %12, align 8
  %.elt7 = getelementptr %..string, ptr %9, i64 %11, i32 1
  %.unpack8 = load i64, ptr %.elt7, align 8
  %.not.i.i = icmp eq i64 %.unpack8, %.8.val
  br i1 %.not.i.i, label %if.done.i.i, label %runtime.string_ne.exit

if.done.i.i:                                      ; preds = %for.index.body
  %13 = icmp ne ptr %.unpack, %.0.val
  %or.cond.not11.i.i.i = select i1 %10, i1 %13, i1 false
  br i1 %or.cond.not11.i.i.i, label %for.body.i.i.i, label %if.done2

for.loop.i.i.i:                                   ; preds = %for.body.i.i.i
  %14 = add nuw i64 %i.06.i.i.i, 1
  %exitcond.not.i.i.i = icmp eq i64 %14, %.8.val
  br i1 %exitcond.not.i.i.i, label %if.done2, label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %if.done.i.i, %for.loop.i.i.i
  %i.06.i.i.i = phi i64 [ %14, %for.loop.i.i.i ], [ 0, %if.done.i.i ]
  %15 = getelementptr i8, ptr %.unpack, i64 %i.06.i.i.i
  %16 = load i8, ptr %15, align 1
  %17 = getelementptr i8, ptr %.0.val, i64 %i.06.i.i.i
  %18 = load i8, ptr %17, align 1
  %.not.i.i.i = icmp eq i8 %16, %18
  br i1 %.not.i.i.i, label %for.loop.i.i.i, label %runtime.string_ne.exit

runtime.string_ne.exit:                           ; preds = %for.body.i.i.i, %for.index.body
  %19 = add nuw nsw i64 %11, 1
  %exitcond.not = icmp eq i64 %19, %6
  br i1 %exitcond.not, label %common.ret, label %for.index.body

if.done2:                                         ; preds = %if.done.i.i, %for.loop.i.i.i
  %20 = ptrtoint ptr %0 to i64
  %21 = getelementptr inbounds %runtime.Type_Info_Struct, ptr %1, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i64, ptr %22, i64 %11
  %24 = load i64, ptr %23, align 8
  %25 = add i64 %24, %20
  %26 = inttoptr i64 %25 to ptr
  %27 = load ptr, ptr %1, align 8
  %28 = getelementptr ptr, ptr %27, i64 %11
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr inbounds %runtime.Type_Info, ptr %29, i64 0, i32 4
  %31 = load i64, ptr %30, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3)
  store i64 0, ptr %3, align 8, !noalias !2924
  %32 = call fastcc i8 @reflect.as_i64(ptr %26, i64 %31, ptr %3), !noalias !2924
  %33 = load i64, ptr %3, align 8, !noalias !2924
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3)
  %.not17 = icmp eq i8 %32, 0
  br i1 %.not17, label %common.ret, label %if.then3

if.then3:                                         ; preds = %if.done2
  %34 = tail call i64 @llvm.smax.i64(i64 %33, i64 0)
  store i64 %34, ptr %2, align 8
  br label %common.ret
}

define internal fastcc void @fmt.fmt_named.write_padded_number-0(ptr nocapture %0, i64 %1, i64 %2, ptr noalias nocapture nonnull %__.context_ptr) unnamed_addr {
decls:
  %3 = alloca i64, align 8
  %a.i.i = alloca [129 x i8], align 1
  %4 = alloca { ptr, i64 }, align 8
  %buf.i2 = alloca [32 x i8], align 1
  %5 = alloca %..string, align 8
  %s.i = alloca %..string, align 8
  %6 = alloca i64, align 8
  %buf.i = alloca [1 x i8], align 1
  %7 = alloca { ptr, i64 }, align 8
  %n.05 = add i64 %2, -1
  %8 = icmp sgt i64 %1, 9
  br i1 %8, label %for.body, label %for.interval.loop.preheader

for.interval.loop.preheader:                      ; preds = %for.body, %decls
  %n.0.lcssa = phi i64 [ %n.05, %decls ], [ %n.0, %for.body ]
  %9 = icmp sgt i64 %n.0.lcssa, 0
  br i1 %9, label %for.interval.body.lr.ph, label %for.interval.done

for.interval.body.lr.ph:                          ; preds = %for.interval.loop.preheader
  %10 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %11 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  %12 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  %13 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %14 = load ptr, ptr %10, align 8, !noalias !2927
  %15 = icmp eq ptr %14, null
  br i1 %15, label %for.interval.done, label %for.interval.body

for.body:                                         ; preds = %decls, %for.body
  %n.07 = phi i64 [ %n.0, %for.body ], [ %n.05, %decls ]
  %x.06 = phi i64 [ %16, %for.body ], [ %1, %decls ]
  %16 = udiv i64 %x.06, 10
  %n.0 = add i64 %n.07, -1
  %17 = icmp ugt i64 %x.06, 99
  br i1 %17, label %for.body, label %for.interval.loop.preheader

for.interval.body:                                ; preds = %for.interval.body.lr.ph, %io.write_byte.exit
  %.018 = phi i64 [ %24, %io.write_byte.exit ], [ 0, %for.interval.body.lr.ph ]
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7)
  store i8 48, ptr %buf.i, align 1, !noalias !2933
  store ptr %buf.i, ptr %7, align 8, !noalias !2933
  store i64 1, ptr %11, align 8, !noalias !2933
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6), !noalias !2933
  %18 = load ptr, ptr %10, align 8, !noalias !2927
  %.not.i.i = icmp eq ptr %18, null
  br i1 %.not.i.i, label %io.write_byte.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %for.interval.body
  %19 = load ptr, ptr %13, align 8, !noalias !2927
  store i64 0, ptr %6, align 8, !noalias !2927
  %20 = call i32 %18(ptr %19, i64 4, ptr nonnull %7, i64 0, i64 0, ptr nonnull %6, ptr nonnull %__.context_ptr), !noalias !2934
  %21 = load i64, ptr %6, align 8, !noalias !2927
  %22 = load i64, ptr %12, align 8, !noalias !2927
  %23 = add i64 %22, %21
  store i64 %23, ptr %12, align 8, !noalias !2927
  br label %io.write_byte.exit

io.write_byte.exit:                               ; preds = %for.interval.body, %if.then.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6), !noalias !2933
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.i)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7)
  %24 = add nuw nsw i64 %.018, 1
  %exitcond.not = icmp eq i64 %24, %n.0.lcssa
  br i1 %exitcond.not, label %for.interval.done, label %for.interval.body, !llvm.loop !2935

for.interval.done:                                ; preds = %io.write_byte.exit, %for.interval.body.lr.ph, %for.interval.loop.preheader
  %25 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16
  %26 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 23
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %buf.i2)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %s.i)
  call void @llvm.memset.inline.p0.i64(ptr nonnull align 1 %buf.i2, i8 0, i64 32, i1 false), !noalias !2936
  call void @llvm.lifetime.start.p0(i64 129, ptr nonnull %a.i.i), !noalias !2936
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %4), !noalias !2936
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(129) %a.i.i, i8 0, i64 129, i1 false), !noalias !2940
  %27 = icmp slt i64 %1, 0
  %28 = call i64 @llvm.abs.i64(i64 %1, i1 false)
  %.not22.i.i = icmp ult i64 %28, 10
  %.pre.i.i = load ptr, ptr @strconv.digits, align 8, !noalias !2940
  br i1 %.not22.i.i, label %for.done.i.i, label %for.body.i.i

for.body.i.i:                                     ; preds = %for.interval.done, %for.body.i.i
  %u.024.i.i = phi i64 [ %34, %for.body.i.i ], [ %28, %for.interval.done ]
  %i.023.i.i = phi i64 [ %29, %for.body.i.i ], [ 129, %for.interval.done ]
  %29 = add i64 %i.023.i.i, -1
  %30 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %29
  %31 = urem i64 %u.024.i.i, 10
  %32 = getelementptr i8, ptr %.pre.i.i, i64 %31
  %33 = load i8, ptr %32, align 1, !noalias !2940
  store i8 %33, ptr %30, align 1, !noalias !2940
  %34 = udiv i64 %u.024.i.i, 10
  %.not.i.i3 = icmp ult i64 %u.024.i.i, 100
  br i1 %.not.i.i3, label %for.done.i.i, label %for.body.i.i

for.done.i.i:                                     ; preds = %for.body.i.i, %for.interval.done
  %i.0.lcssa.i.i = phi i64 [ 129, %for.interval.done ], [ %29, %for.body.i.i ]
  %u.0.lcssa.i.i = phi i64 [ %28, %for.interval.done ], [ %34, %for.body.i.i ]
  %35 = add i64 %i.0.lcssa.i.i, -1
  %36 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %35
  %37 = getelementptr i8, ptr %.pre.i.i, i64 %u.0.lcssa.i.i
  %38 = load i8, ptr %37, align 1, !noalias !2940
  store i8 %38, ptr %36, align 1, !noalias !2940
  br i1 %27, label %switch.done11.sink.split.i.i, label %switch.done11.i.i

switch.done11.sink.split.i.i:                     ; preds = %for.done.i.i
  %39 = add i64 %i.0.lcssa.i.i, -2
  %40 = getelementptr [129 x i8], ptr %a.i.i, i64 0, i64 %39
  store i8 45, ptr %40, align 1, !noalias !2940
  br label %switch.done11.i.i

switch.done11.i.i:                                ; preds = %switch.done11.sink.split.i.i, %for.done.i.i
  %i.3.i.i = phi i64 [ %39, %switch.done11.sink.split.i.i ], [ %35, %for.done.i.i ]
  %41 = sub i64 129, %i.3.i.i
  %42 = call i64 @llvm.smin.i64(i64 %41, i64 32)
  %.not.i.i.i = icmp slt i64 %42, 1
  br i1 %.not.i.i.i, label %strconv.append_bits.exit.i, label %if.then.i19.i.i

if.then.i19.i.i:                                  ; preds = %switch.done11.i.i
  %43 = getelementptr i8, ptr %a.i.i, i64 %i.3.i.i
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %buf.i2, ptr align 1 %43, i64 %42, i1 false), !noalias !2940
  br label %strconv.append_bits.exit.i

strconv.append_bits.exit.i:                       ; preds = %if.then.i19.i.i, %switch.done11.i.i
  store ptr %buf.i2, ptr %4, align 8, !noalias !2940
  %44 = getelementptr inbounds { ptr, i64 }, ptr %4, i64 0, i32 1
  store i64 %41, ptr %44, align 8, !noalias !2940
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %5, ptr nonnull align 8 %4, i64 16, i1 false), !noalias !2944
  call void @llvm.lifetime.end.p0(i64 129, ptr nonnull %a.i.i), !noalias !2936
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %4), !noalias !2936
  %.unpack.i = load ptr, ptr %5, align 8, !noalias !2936
  %.elt1.i = getelementptr inbounds %..string, ptr %5, i64 0, i32 1
  %.unpack2.i = load i64, ptr %.elt1.i, align 8, !noalias !2936
  store ptr %.unpack.i, ptr %s.i, align 8, !noalias !2936
  %s.repack3.i = getelementptr inbounds %..string, ptr %s.i, i64 0, i32 1
  store i64 %.unpack2.i, ptr %s.repack3.i, align 8, !noalias !2936
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3), !noalias !2945
  %45 = load ptr, ptr %25, align 8, !noalias !2949
  %.not.i.i5.i = icmp eq ptr %45, null
  br i1 %.not.i.i5.i, label %io.write_i64.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %strconv.append_bits.exit.i
  %46 = getelementptr inbounds %fmt.Info, ptr %0, i64 0, i32 16, i32 1
  %47 = load ptr, ptr %46, align 8, !noalias !2949
  store i64 0, ptr %3, align 8, !noalias !2949
  %48 = call i32 %45(ptr %47, i64 4, ptr nonnull %s.i, i64 0, i64 0, ptr nonnull %3, ptr nonnull %__.context_ptr), !noalias !2953
  %49 = load i64, ptr %3, align 8, !noalias !2949
  %50 = load i64, ptr %26, align 8, !noalias !2949
  %51 = add i64 %50, %49
  store i64 %51, ptr %26, align 8, !noalias !2949
  br label %io.write_i64.exit

io.write_i64.exit:                                ; preds = %strconv.append_bits.exit.i, %if.then.i.i.i
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3), !noalias !2945
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %buf.i2)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %s.i)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i64 @"__$hasher1"(ptr nocapture nonnull readonly %0, i64 %1) local_unnamed_addr #24 {
decls:
  %2 = add i64 %1, -3750763034362895579
  %3 = load i8, ptr %0, align 1
  %4 = zext i8 %3 to i64
  %5 = xor i64 %2, %4
  %6 = mul i64 %5, 1099511628211
  %7 = getelementptr i8, ptr %0, i64 1
  %8 = load i8, ptr %7, align 1
  %9 = zext i8 %8 to i64
  %10 = xor i64 %6, %9
  %11 = mul i64 %10, 1099511628211
  %12 = getelementptr i8, ptr %0, i64 2
  %13 = load i8, ptr %12, align 1
  %14 = zext i8 %13 to i64
  %15 = xor i64 %11, %14
  %16 = mul i64 %15, 1099511628211
  %17 = getelementptr i8, ptr %0, i64 3
  %18 = load i8, ptr %17, align 1
  %19 = zext i8 %18 to i64
  %20 = xor i64 %16, %19
  %21 = mul i64 %20, 1099511628211
  %22 = getelementptr i8, ptr %0, i64 4
  %23 = load i8, ptr %22, align 1
  %24 = zext i8 %23 to i64
  %25 = xor i64 %21, %24
  %26 = mul i64 %25, 1099511628211
  %27 = getelementptr i8, ptr %0, i64 5
  %28 = load i8, ptr %27, align 1
  %29 = zext i8 %28 to i64
  %30 = xor i64 %26, %29
  %31 = mul i64 %30, 1099511628211
  %32 = getelementptr i8, ptr %0, i64 6
  %33 = load i8, ptr %32, align 1
  %34 = zext i8 %33 to i64
  %35 = xor i64 %31, %34
  %36 = mul i64 %35, 1099511628211
  %37 = getelementptr i8, ptr %0, i64 7
  %38 = load i8, ptr %37, align 1
  %39 = zext i8 %38 to i64
  %40 = xor i64 %36, %39
  %41 = mul i64 %40, 1099511628211
  %42 = and i64 %41, 9223372036854775807
  %43 = icmp eq i64 %42, 0
  %44 = zext i1 %43 to i64
  %45 = or i64 %42, %44
  ret i64 %45
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #25

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.ctlz.i128(i128, i1 immarg) #23

; Function Attrs: cold noreturn
define internal fastcc void @runtime.type_assertion_check2.handle_error-1(ptr nocapture readonly %0, i32 %1, i32 %2, i64 %3, i64 %4, ptr %5) unnamed_addr #26 {
decls:
  %6 = alloca [80 x i8], align 8
  %7 = alloca [48 x i8], align 8
  %8 = alloca %runtime.Source_Code_Location, align 8
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %7)
  %9 = icmp eq i64 %3, 0
  br i1 %9, label %runtime.type_assertion_check2.variant_type-0.exit, label %cmp.or.i

cmp.or.i:                                         ; preds = %decls
  %10 = icmp eq ptr %5, null
  br i1 %10, label %runtime.type_assertion_check2.variant_type-0.exit, label %if.done.i

common.ret.sink.split.i:                          ; preds = %if.then7.i, %typeswitch.body.i
  %.sink.i = phi ptr [ %55, %if.then7.i ], [ %25, %typeswitch.body.i ]
  %11 = load i64, ptr %.sink.i, align 8
  br label %runtime.type_assertion_check2.variant_type-0.exit

if.done.i:                                        ; preds = %cmp.or.i
  %12 = and i64 %3, 72057594037927935
  %13 = icmp ugt i64 %12, 150
  %n.0.i.i = select i1 %13, i64 0, i64 %12
  %14 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i.i
  call void @llvm.lifetime.start.p0(i64 80, ptr nonnull %6)
  %15 = icmp eq ptr %14, null
  br i1 %15, label %runtime.type_info_base.exit.i, label %for.body.preheader.i.i

for.body.preheader.i.i:                           ; preds = %if.done.i
  %16 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i.i, i32 5, i32 1
  %17 = load i64, ptr %16, align 8
  %cond1.i.i = icmp eq i64 %17, 1
  br i1 %cond1.i.i, label %typeswitch.body.lr.ph.i.i, label %runtime.type_info_base.exit.i

typeswitch.body.lr.ph.i.i:                        ; preds = %for.body.preheader.i.i
  %18 = getelementptr inbounds %runtime.Type_Info_Named, ptr %6, i64 0, i32 1
  br label %typeswitch.body.i.i

typeswitch.body.i.i:                              ; preds = %typeswitch.body.i.i, %typeswitch.body.lr.ph.i.i
  %base.02.i.i = phi ptr [ %14, %typeswitch.body.lr.ph.i.i ], [ %20, %typeswitch.body.i.i ]
  %19 = getelementptr inbounds %runtime.Type_Info, ptr %base.02.i.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(80) %6, ptr noundef nonnull align 1 dereferenceable(80) %19, i64 80, i1 false)
  %20 = load ptr, ptr %18, align 8
  %21 = getelementptr inbounds %runtime.Type_Info, ptr %20, i64 0, i32 5, i32 1
  %22 = load i64, ptr %21, align 8
  %cond.i.i = icmp eq i64 %22, 1
  br i1 %cond.i.i, label %typeswitch.body.i.i, label %runtime.type_info_base.exit.i

runtime.type_info_base.exit.i:                    ; preds = %typeswitch.body.i.i, %for.body.preheader.i.i, %if.done.i
  %common.ret.op.i.i = phi ptr [ null, %if.done.i ], [ %14, %for.body.preheader.i.i ], [ %20, %typeswitch.body.i.i ]
  call void @llvm.lifetime.end.p0(i64 80, ptr nonnull %6)
  %23 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i.i, i64 0, i32 5, i32 1
  %24 = load i64, ptr %23, align 8
  switch i64 %24, label %runtime.type_assertion_check2.variant_type-0.exit [
    i64 9, label %typeswitch.body.i
    i64 20, label %typeswitch.body1.i
  ]

typeswitch.body.i:                                ; preds = %runtime.type_info_base.exit.i
  %25 = getelementptr inbounds %..any, ptr %5, i64 0, i32 1
  br label %common.ret.sink.split.i

typeswitch.body1.i:                               ; preds = %runtime.type_info_base.exit.i
  %26 = getelementptr inbounds %runtime.Type_Info, ptr %common.ret.op.i.i, i64 0, i32 5
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %7, ptr noundef nonnull align 1 dereferenceable(48) %26, i64 48, i1 false)
  %27 = ptrtoint ptr %5 to i64
  %28 = getelementptr inbounds %runtime.Type_Info_Union, ptr %7, i64 0, i32 1
  %29 = load i64, ptr %28, align 8
  %30 = add i64 %29, %27
  %31 = getelementptr inbounds %runtime.Type_Info_Union, ptr %7, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8
  %33 = load i64, ptr %32, align 8
  switch i64 %33, label %if.else.i [
    i64 1, label %switch.case.body.i
    i64 2, label %switch.case.body2.i
    i64 4, label %switch.case.body3.i
    i64 8, label %switch.case.body4.i
    i64 16, label %switch.case.body5.i
  ]

switch.case.body.i:                               ; preds = %typeswitch.body1.i
  %34 = inttoptr i64 %30 to ptr
  %35 = load i8, ptr %34, align 1
  %36 = zext i8 %35 to i64
  br label %switch.done.i

switch.case.body2.i:                              ; preds = %typeswitch.body1.i
  %37 = inttoptr i64 %30 to ptr
  %38 = load i16, ptr %37, align 2
  %39 = zext i16 %38 to i64
  br label %switch.done.i

switch.case.body3.i:                              ; preds = %typeswitch.body1.i
  %40 = inttoptr i64 %30 to ptr
  %41 = load i32, ptr %40, align 4
  %42 = zext i32 %41 to i64
  br label %switch.done.i

switch.case.body4.i:                              ; preds = %typeswitch.body1.i
  %43 = inttoptr i64 %30 to ptr
  %44 = load i64, ptr %43, align 8
  br label %switch.done.i

switch.case.body5.i:                              ; preds = %typeswitch.body1.i
  %45 = inttoptr i64 %30 to ptr
  %46 = load i128, ptr %45, align 8
  %47 = trunc i128 %46 to i64
  br label %switch.done.i

switch.done.i:                                    ; preds = %switch.case.body5.i, %switch.case.body4.i, %switch.case.body3.i, %switch.case.body2.i, %switch.case.body.i
  %idx.0.in.i = phi i64 [ %47, %switch.case.body5.i ], [ %44, %switch.case.body4.i ], [ %42, %switch.case.body3.i ], [ %39, %switch.case.body2.i ], [ %36, %switch.case.body.i ]
  %idx.0.i = add i64 %idx.0.in.i, -1
  %48 = icmp slt i64 %idx.0.i, 0
  br i1 %48, label %runtime.type_assertion_check2.variant_type-0.exit, label %if.else.i

if.else.i:                                        ; preds = %switch.done.i, %typeswitch.body1.i
  %idx.013.i = phi i64 [ %idx.0.i, %switch.done.i ], [ 0, %typeswitch.body1.i ]
  %49 = getelementptr inbounds { ptr, i64 }, ptr %7, i64 0, i32 1
  %50 = load i64, ptr %49, align 8
  %51 = icmp slt i64 %idx.013.i, %50
  br i1 %51, label %if.then7.i, label %runtime.type_assertion_check2.variant_type-0.exit

if.then7.i:                                       ; preds = %if.else.i
  %52 = load ptr, ptr %7, align 8
  %53 = getelementptr ptr, ptr %52, i64 %idx.013.i
  %54 = load ptr, ptr %53, align 8
  %55 = getelementptr inbounds %runtime.Type_Info, ptr %54, i64 0, i32 4
  br label %common.ret.sink.split.i

runtime.type_assertion_check2.variant_type-0.exit: ; preds = %decls, %cmp.or.i, %common.ret.sink.split.i, %runtime.type_info_base.exit.i, %switch.done.i, %if.else.i
  %common.ret.op.i = phi i64 [ %3, %cmp.or.i ], [ 0, %decls ], [ 0, %switch.done.i ], [ %3, %if.else.i ], [ %3, %runtime.type_info_base.exit.i ], [ %11, %common.ret.sink.split.i ]
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %7)
  %56 = getelementptr inbounds i8, ptr %8, i64 24
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %56, i8 0, i64 16, i1 false)
  %.unpack = load ptr, ptr %0, align 8
  %.elt1 = getelementptr inbounds %..string, ptr %0, i64 0, i32 1
  %.unpack2 = load i64, ptr %.elt1, align 8
  store ptr %.unpack, ptr %8, align 8
  %.repack3 = getelementptr inbounds %..string, ptr %8, i64 0, i32 1
  store i64 %.unpack2, ptr %.repack3, align 8
  %57 = getelementptr inbounds %runtime.Source_Code_Location, ptr %8, i64 0, i32 1
  store i32 %1, ptr %57, align 8
  %58 = getelementptr inbounds %runtime.Source_Code_Location, ptr %8, i64 0, i32 2
  store i32 %2, ptr %58, align 4
  call fastcc void @runtime.print_caller_location(ptr nonnull %8)
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$158")
  br i1 %9, label %if.then.i, label %if.else.i5

if.then.i:                                        ; preds = %runtime.type_assertion_check2.variant_type-0.exit
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$10c")
  br label %runtime.print_typeid.exit

if.else.i5:                                       ; preds = %runtime.type_assertion_check2.variant_type-0.exit
  %59 = and i64 %3, 72057594037927935
  %60 = icmp ugt i64 %59, 150
  %n.0.i = select i1 %60, i64 0, i64 %59
  %61 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i
  tail call fastcc void @runtime.print_type(ptr %61)
  br label %runtime.print_typeid.exit

runtime.print_typeid.exit:                        ; preds = %if.then.i, %if.else.i5
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$159")
  %62 = icmp eq i64 %4, 0
  br i1 %62, label %if.then.i9, label %if.else.i7

if.then.i9:                                       ; preds = %runtime.print_typeid.exit
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$10c")
  br label %runtime.print_typeid.exit10

if.else.i7:                                       ; preds = %runtime.print_typeid.exit
  %63 = and i64 %4, 72057594037927935
  %64 = icmp ugt i64 %63, 150
  %n.0.i15 = select i1 %64, i64 0, i64 %63
  %65 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i15
  tail call fastcc void @runtime.print_type(ptr %65)
  br label %runtime.print_typeid.exit10

runtime.print_typeid.exit10:                      ; preds = %if.then.i9, %if.else.i7
  %.not = icmp eq i64 %common.ret.op.i, %3
  br i1 %.not, label %if.done, label %if.then

if.then:                                          ; preds = %runtime.print_typeid.exit10
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$15a")
  %66 = icmp eq i64 %common.ret.op.i, 0
  br i1 %66, label %if.then.i13, label %if.else.i11

if.then.i13:                                      ; preds = %if.then
  tail call fastcc void @runtime.print_string(ptr nonnull @"ggv$10c")
  br label %if.done

if.else.i11:                                      ; preds = %if.then
  %67 = and i64 %common.ret.op.i, 72057594037927935
  %68 = icmp ugt i64 %67, 150
  %n.0.i16 = select i1 %68, i64 0, i64 %67
  %69 = getelementptr %runtime.Type_Info, ptr @"__$type_info_data", i64 %n.0.i16
  tail call fastcc void @runtime.print_type(ptr %69)
  br label %if.done

if.done:                                          ; preds = %if.else.i11, %if.then.i13, %runtime.print_typeid.exit10
  tail call fastcc void @runtime.print_byte(i8 10)
  tail call fastcc void @runtime.type_assertion_trap()
  unreachable
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.fshl.i64(i64, i64, i64) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.ctpop.i64(i64) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.abs.i64(i64, i1 immarg) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #27

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.abs.i128(i128, i1 immarg) #27

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.experimental.noalias.scope.decl(metadata) #28

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #29

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #29

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #28

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #27

attributes #0 = { noinline nounwind optnone }
attributes #1 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree norecurse nosync nounwind memory(read, inaccessiblemem: none) }
attributes #3 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { noinline optnone }
attributes #5 = { noreturn }
attributes #6 = { nofree nosync nounwind memory(argmem: readwrite) }
attributes #7 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #8 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #9 = { nofree nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #10 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #11 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #12 = { nofree noinline norecurse nounwind memory(inaccessiblemem: readwrite) }
attributes #13 = { mustprogress nofree noinline norecurse nosync nounwind willreturn memory(none) }
attributes #14 = { mustprogress nofree noinline nosync nounwind willreturn memory(argmem: read) }
attributes #15 = { nofree noinline nosync nounwind memory(argmem: read) }
attributes #16 = { nofree noinline nosync nounwind memory(argmem: readwrite) }
attributes #17 = { nofree noinline nosync nounwind memory(readwrite, inaccessiblemem: none) }
attributes #18 = { nofree nosync nounwind memory(write, argmem: readwrite, inaccessiblemem: none) }
attributes #19 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none) }
attributes #20 = { nofree nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #21 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #22 = { noinline }
attributes #23 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #24 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #25 = { cold noreturn nounwind }
attributes #26 = { cold noreturn }
attributes #27 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #28 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #29 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #30 = { alwaysinline }

!0 = !{!1, !3}
!1 = distinct !{!1, !2, !"os.read_entire_file_from_filename: argument 0"}
!2 = distinct !{!2, !"os.read_entire_file_from_filename"}
!3 = distinct !{!3, !2, !"os.read_entire_file_from_filename: %__.context_ptr"}
!4 = !{!1}
!5 = !{!6}
!6 = distinct !{!6, !7, !"os.open: %__.context_ptr"}
!7 = distinct !{!7, !"os.open"}
!8 = !{!9, !6, !1, !3}
!9 = distinct !{!9, !7, !"os.open: argument 0"}
!10 = !{!11, !9, !6, !1, !3}
!11 = distinct !{!11, !12, !"sys_windows.utf8_to_wstring: %__.context_ptr"}
!12 = distinct !{!12, !"sys_windows.utf8_to_wstring"}
!13 = !{!14, !16, !11, !9, !6, !1, !3}
!14 = distinct !{!14, !15, !"sys_windows.utf8_to_utf16: %agg.result"}
!15 = distinct !{!15, !"sys_windows.utf8_to_utf16"}
!16 = distinct !{!16, !15, !"sys_windows.utf8_to_utf16: %__.context_ptr"}
!17 = !{!18, !20, !21, !23, !14, !16, !11, !9, !6, !1, !3}
!18 = distinct !{!18, !19, !"runtime.make_aligned-20789: argument 0"}
!19 = distinct !{!19, !"runtime.make_aligned-20789"}
!20 = distinct !{!20, !19, !"runtime.make_aligned-20789: %__.context_ptr"}
!21 = distinct !{!21, !22, !"runtime.make_slice-20458: argument 0"}
!22 = distinct !{!22, !"runtime.make_slice-20458"}
!23 = distinct !{!23, !22, !"runtime.make_slice-20458: %__.context_ptr"}
!24 = !{!25, !27, !18, !20, !21, !23, !14, !16, !11, !9, !1, !3}
!25 = distinct !{!25, !26, !"runtime.mem_alloc_bytes: argument 0"}
!26 = distinct !{!26, !"runtime.mem_alloc_bytes"}
!27 = distinct !{!27, !26, !"runtime.mem_alloc_bytes: %__.context_ptr"}
!28 = !{!25, !27, !18, !20, !21, !23, !14, !16, !11, !9, !6, !1, !3}
!29 = !{!25, !18, !21, !14, !9, !1, !3}
!30 = !{!14, !9, !1, !3}
!31 = !{!14, !11, !9, !6, !1, !3}
!32 = !{!33, !14, !16, !11, !9, !6, !1, !3}
!33 = distinct !{!33, !34, !"runtime.delete_slice-20911: %__.context_ptr"}
!34 = distinct !{!34, !"runtime.delete_slice-20911"}
!35 = !{!36, !33, !14, !16, !11, !9, !1, !3}
!36 = distinct !{!36, !37, !"runtime.mem_free_with_size: %__.context_ptr"}
!37 = distinct !{!37, !"runtime.mem_free_with_size"}
!38 = !{!36, !33, !14, !16, !11, !9, !6, !1, !3}
!39 = !{!16, !11, !9, !6, !1, !3}
!40 = !{!9, !1, !3}
!41 = !{!42, !1, !3}
!42 = distinct !{!42, !43, !"os.read_entire_file_from_handle: argument 0"}
!43 = distinct !{!43, !"os.read_entire_file_from_handle"}
!44 = !{!42, !45, !1, !3}
!45 = distinct !{!45, !43, !"os.read_entire_file_from_handle: %__.context_ptr"}
!46 = !{!47, !42, !45, !1, !3}
!47 = distinct !{!47, !48, !"os.file_size: argument 0"}
!48 = distinct !{!48, !"os.file_size"}
!49 = !{!50, !42, !45, !1, !3}
!50 = distinct !{!50, !51, !"os.read_full: argument 0"}
!51 = distinct !{!51, !"os.read_full"}
!52 = !{!53, !50, !42, !45, !1, !3}
!53 = distinct !{!53, !54, !"os.read_at_least: argument 0"}
!54 = distinct !{!54, !"os.read_at_least"}
!55 = !{!56, !42, !45, !1, !3}
!56 = distinct !{!56, !57, !"runtime.delete_slice-19740: %__.context_ptr"}
!57 = distinct !{!57, !"runtime.delete_slice-19740"}
!58 = !{!59, !56, !42, !45, !1, !3}
!59 = distinct !{!59, !60, !"runtime.mem_free_with_size: %__.context_ptr"}
!60 = distinct !{!60, !"runtime.mem_free_with_size"}
!61 = !{!62, !64}
!62 = distinct !{!62, !63, !"runtime.arena_destroy: %__.context_ptr"}
!63 = distinct !{!63, !"runtime.arena_destroy"}
!64 = distinct !{!64, !65, !"runtime.default_temp_allocator_destroy: %__.context_ptr"}
!65 = distinct !{!65, !"runtime.default_temp_allocator_destroy"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"runtime.memory_block_dealloc: %__.context_ptr"}
!68 = distinct !{!68, !"runtime.memory_block_dealloc"}
!69 = !{!67, !62, !64}
!70 = !{!71, !67, !62, !64}
!71 = distinct !{!71, !72, !"runtime.mem_free: %__.context_ptr"}
!72 = distinct !{!72, !"runtime.mem_free"}
!73 = !{!64}
!74 = !{!75, !77, !78, !80}
!75 = distinct !{!75, !76, !"runtime.mem_alloc: argument 0"}
!76 = distinct !{!76, !"runtime.mem_alloc"}
!77 = distinct !{!77, !76, !"runtime.mem_alloc: %__.context_ptr"}
!78 = distinct !{!78, !79, !"runtime.memory_block_alloc: argument 0"}
!79 = distinct !{!79, !"runtime.memory_block_alloc"}
!80 = distinct !{!80, !79, !"runtime.memory_block_alloc: %__.context_ptr"}
!81 = !{!78, !80}
!82 = !{!75, !78}
!83 = !{!78}
!84 = !{!85}
!85 = distinct !{!85, !86, !"runtime.alloc_from_memory_block: argument 0"}
!86 = distinct !{!86, !"runtime.alloc_from_memory_block"}
!87 = !{i64 0, i64 65}
!88 = distinct !{!88, !89}
!89 = !{!"llvm.loop.unroll.disable"}
!90 = !{!91}
!91 = distinct !{!91, !92, !"runtime.os_write: argument 0"}
!92 = distinct !{!92, !"runtime.os_write"}
!93 = !{!94, !91}
!94 = distinct !{!94, !95, !"runtime._os_write: argument 0"}
!95 = distinct !{!95, !"runtime._os_write"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"opt_ex.aocloop_bench_init: %__.context_ptr"}
!98 = distinct !{!98, !"opt_ex.aocloop_bench_init"}
!99 = !{!100, !102, !103, !105, !97}
!100 = distinct !{!100, !101, !"runtime.make_aligned-20284: argument 0"}
!101 = distinct !{!101, !"runtime.make_aligned-20284"}
!102 = distinct !{!102, !101, !"runtime.make_aligned-20284: %__.context_ptr"}
!103 = distinct !{!103, !104, !"runtime.make_slice-20028: argument 0"}
!104 = distinct !{!104, !"runtime.make_slice-20028"}
!105 = distinct !{!105, !104, !"runtime.make_slice-20028: %__.context_ptr"}
!106 = !{!107, !109, !100, !102, !103, !105}
!107 = distinct !{!107, !108, !"runtime.mem_alloc_bytes: argument 0"}
!108 = distinct !{!108, !"runtime.mem_alloc_bytes"}
!109 = distinct !{!109, !108, !"runtime.mem_alloc_bytes: %__.context_ptr"}
!110 = !{!107, !109, !100, !102, !103, !105, !97}
!111 = !{!107, !100, !103}
!112 = !{ptr @opt_ex.aocloop_do_work_1, ptr @opt_ex.aocloop_do_work_2, ptr @opt_ex.aocloop_do_work_3}
!113 = !{!114}
!114 = distinct !{!114, !115, !"opt_ex.aocloop_bench_destroy: %__.context_ptr"}
!115 = distinct !{!115, !"opt_ex.aocloop_bench_destroy"}
!116 = !{!117, !114}
!117 = distinct !{!117, !118, !"runtime.delete_slice-19740: %__.context_ptr"}
!118 = distinct !{!118, !"runtime.delete_slice-19740"}
!119 = !{!120, !117}
!120 = distinct !{!120, !121, !"runtime.mem_free_with_size: %__.context_ptr"}
!121 = distinct !{!121, !"runtime.mem_free_with_size"}
!122 = !{!120, !117, !114}
!123 = !{!124, !114}
!124 = distinct !{!124, !125, !"runtime.delete_slice-19740: %__.context_ptr"}
!125 = distinct !{!125, !"runtime.delete_slice-19740"}
!126 = !{!127, !124}
!127 = distinct !{!127, !128, !"runtime.mem_free_with_size: %__.context_ptr"}
!128 = distinct !{!128, !"runtime.mem_free_with_size"}
!129 = !{!127, !124, !114}
!130 = !{!131, !114}
!131 = distinct !{!131, !132, !"runtime.delete_slice-20057: %__.context_ptr"}
!132 = distinct !{!132, !"runtime.delete_slice-20057"}
!133 = !{!134, !131}
!134 = distinct !{!134, !135, !"runtime.mem_free_with_size: %__.context_ptr"}
!135 = distinct !{!135, !"runtime.mem_free_with_size"}
!136 = !{!134, !131, !114}
!137 = !{!138}
!138 = distinct !{!138, !139, !"runtime.os_write: argument 0"}
!139 = distinct !{!139, !"runtime.os_write"}
!140 = !{!141, !138}
!141 = distinct !{!141, !142, !"runtime._os_write: argument 0"}
!142 = distinct !{!142, !"runtime._os_write"}
!143 = !{!144}
!144 = distinct !{!144, !145, !"runtime.os_write: argument 0"}
!145 = distinct !{!145, !"runtime.os_write"}
!146 = !{!147, !144}
!147 = distinct !{!147, !148, !"runtime._os_write: argument 0"}
!148 = distinct !{!148, !"runtime._os_write"}
!149 = !{!150}
!150 = distinct !{!150, !151, !"runtime.os_write: argument 0"}
!151 = distinct !{!151, !"runtime.os_write"}
!152 = !{!153, !150}
!153 = distinct !{!153, !154, !"runtime._os_write: argument 0"}
!154 = distinct !{!154, !"runtime._os_write"}
!155 = !{!156}
!156 = distinct !{!156, !157, !"runtime.os_write: argument 0"}
!157 = distinct !{!157, !"runtime.os_write"}
!158 = !{!159, !156}
!159 = distinct !{!159, !160, !"runtime._os_write: argument 0"}
!160 = distinct !{!160, !"runtime._os_write"}
!161 = !{!162}
!162 = distinct !{!162, !163, !"runtime.os_write: argument 0"}
!163 = distinct !{!163, !"runtime.os_write"}
!164 = !{!165, !162}
!165 = distinct !{!165, !166, !"runtime._os_write: argument 0"}
!166 = distinct !{!166, !"runtime._os_write"}
!167 = !{!168}
!168 = distinct !{!168, !169, !"runtime.os_write: argument 0"}
!169 = distinct !{!169, !"runtime.os_write"}
!170 = !{!171, !168}
!171 = distinct !{!171, !172, !"runtime._os_write: argument 0"}
!172 = distinct !{!172, !"runtime._os_write"}
!173 = !{!174}
!174 = distinct !{!174, !175, !"runtime.os_write: argument 0"}
!175 = distinct !{!175, !"runtime.os_write"}
!176 = !{!177, !174}
!177 = distinct !{!177, !178, !"runtime._os_write: argument 0"}
!178 = distinct !{!178, !"runtime._os_write"}
!179 = !{!180}
!180 = distinct !{!180, !181, !"runtime.os_write: argument 0"}
!181 = distinct !{!181, !"runtime.os_write"}
!182 = !{!183, !180}
!183 = distinct !{!183, !184, !"runtime._os_write: argument 0"}
!184 = distinct !{!184, !"runtime._os_write"}
!185 = !{!186}
!186 = distinct !{!186, !187, !"runtime.os_write: argument 0"}
!187 = distinct !{!187, !"runtime.os_write"}
!188 = !{!189, !186}
!189 = distinct !{!189, !190, !"runtime._os_write: argument 0"}
!190 = distinct !{!190, !"runtime._os_write"}
!191 = !{!192}
!192 = distinct !{!192, !193, !"runtime.os_write: argument 0"}
!193 = distinct !{!193, !"runtime.os_write"}
!194 = !{!195, !192}
!195 = distinct !{!195, !196, !"runtime._os_write: argument 0"}
!196 = distinct !{!196, !"runtime._os_write"}
!197 = !{!198}
!198 = distinct !{!198, !199, !"runtime.os_write: argument 0"}
!199 = distinct !{!199, !"runtime.os_write"}
!200 = !{!201, !198}
!201 = distinct !{!201, !202, !"runtime._os_write: argument 0"}
!202 = distinct !{!202, !"runtime._os_write"}
!203 = !{!204}
!204 = distinct !{!204, !205, !"runtime.os_write: argument 0"}
!205 = distinct !{!205, !"runtime.os_write"}
!206 = !{!207, !204}
!207 = distinct !{!207, !208, !"runtime._os_write: argument 0"}
!208 = distinct !{!208, !"runtime._os_write"}
!209 = !{!210}
!210 = distinct !{!210, !211, !"runtime.os_write: argument 0"}
!211 = distinct !{!211, !"runtime.os_write"}
!212 = !{!213, !210}
!213 = distinct !{!213, !214, !"runtime._os_write: argument 0"}
!214 = distinct !{!214, !"runtime._os_write"}
!215 = !{!216}
!216 = distinct !{!216, !217, !"runtime.os_write: argument 0"}
!217 = distinct !{!217, !"runtime.os_write"}
!218 = !{!219, !216}
!219 = distinct !{!219, !220, !"runtime._os_write: argument 0"}
!220 = distinct !{!220, !"runtime._os_write"}
!221 = !{!222}
!222 = distinct !{!222, !223, !"runtime.os_write: argument 0"}
!223 = distinct !{!223, !"runtime.os_write"}
!224 = !{!225, !222}
!225 = distinct !{!225, !226, !"runtime._os_write: argument 0"}
!226 = distinct !{!226, !"runtime._os_write"}
!227 = !{!228}
!228 = distinct !{!228, !229, !"runtime.os_write: argument 0"}
!229 = distinct !{!229, !"runtime.os_write"}
!230 = !{!231, !228}
!231 = distinct !{!231, !232, !"runtime._os_write: argument 0"}
!232 = distinct !{!232, !"runtime._os_write"}
!233 = !{!234}
!234 = distinct !{!234, !235, !"runtime.os_write: argument 0"}
!235 = distinct !{!235, !"runtime.os_write"}
!236 = !{!237, !234}
!237 = distinct !{!237, !238, !"runtime._os_write: argument 0"}
!238 = distinct !{!238, !"runtime._os_write"}
!239 = !{!240}
!240 = distinct !{!240, !241, !"runtime.os_write: argument 0"}
!241 = distinct !{!241, !"runtime.os_write"}
!242 = !{!243, !240}
!243 = distinct !{!243, !244, !"runtime._os_write: argument 0"}
!244 = distinct !{!244, !"runtime._os_write"}
!245 = !{!246}
!246 = distinct !{!246, !247, !"runtime.os_write: argument 0"}
!247 = distinct !{!247, !"runtime.os_write"}
!248 = !{!249, !246}
!249 = distinct !{!249, !250, !"runtime._os_write: argument 0"}
!250 = distinct !{!250, !"runtime._os_write"}
!251 = !{!252}
!252 = distinct !{!252, !253, !"runtime.os_write: argument 0"}
!253 = distinct !{!253, !"runtime.os_write"}
!254 = !{!255, !252}
!255 = distinct !{!255, !256, !"runtime._os_write: argument 0"}
!256 = distinct !{!256, !"runtime._os_write"}
!257 = !{!258}
!258 = distinct !{!258, !259, !"runtime.os_write: argument 0"}
!259 = distinct !{!259, !"runtime.os_write"}
!260 = !{!261, !258}
!261 = distinct !{!261, !262, !"runtime._os_write: argument 0"}
!262 = distinct !{!262, !"runtime._os_write"}
!263 = !{!264}
!264 = distinct !{!264, !265, !"runtime.os_write: argument 0"}
!265 = distinct !{!265, !"runtime.os_write"}
!266 = !{!267, !264}
!267 = distinct !{!267, !268, !"runtime._os_write: argument 0"}
!268 = distinct !{!268, !"runtime._os_write"}
!269 = !{!270}
!270 = distinct !{!270, !271, !"runtime.os_write: argument 0"}
!271 = distinct !{!271, !"runtime.os_write"}
!272 = !{!273, !270}
!273 = distinct !{!273, !274, !"runtime._os_write: argument 0"}
!274 = distinct !{!274, !"runtime._os_write"}
!275 = !{!276}
!276 = distinct !{!276, !277, !"runtime.os_write: argument 0"}
!277 = distinct !{!277, !"runtime.os_write"}
!278 = !{!279, !276}
!279 = distinct !{!279, !280, !"runtime._os_write: argument 0"}
!280 = distinct !{!280, !"runtime._os_write"}
!281 = !{!282}
!282 = distinct !{!282, !283, !"runtime.os_write: argument 0"}
!283 = distinct !{!283, !"runtime.os_write"}
!284 = !{!285, !282}
!285 = distinct !{!285, !286, !"runtime._os_write: argument 0"}
!286 = distinct !{!286, !"runtime._os_write"}
!287 = !{}
!288 = !{!289}
!289 = distinct !{!289, !290, !"runtime.os_write: argument 0"}
!290 = distinct !{!290, !"runtime.os_write"}
!291 = !{!292, !289}
!292 = distinct !{!292, !293, !"runtime._os_write: argument 0"}
!293 = distinct !{!293, !"runtime._os_write"}
!294 = !{!295}
!295 = distinct !{!295, !296, !"runtime.os_write: argument 0"}
!296 = distinct !{!296, !"runtime.os_write"}
!297 = !{!298, !295}
!298 = distinct !{!298, !299, !"runtime._os_write: argument 0"}
!299 = distinct !{!299, !"runtime._os_write"}
!300 = distinct !{!300, !89}
!301 = distinct !{!301, !89}
!302 = distinct !{!302, !89}
!303 = !{!304}
!304 = distinct !{!304, !305, !"os.read_console-826: argument 0"}
!305 = distinct !{!305, !"os.read_console-826"}
!306 = !{!307}
!307 = distinct !{!307, !308, !"fmt.fprintln: %__.context_ptr"}
!308 = distinct !{!308, !"fmt.fprintln"}
!309 = !{!310, !307}
!310 = distinct !{!310, !311, !"os.stream_from_handle: %agg.result"}
!311 = distinct !{!311, !"os.stream_from_handle"}
!312 = !{!313, !307}
!313 = distinct !{!313, !314, !"bufio.writer_to_writer: %agg.result"}
!314 = distinct !{!314, !"bufio.writer_to_writer"}
!315 = !{!316, !313, !307}
!316 = distinct !{!316, !317, !"bufio.writer_to_stream: %agg.result"}
!317 = distinct !{!317, !"bufio.writer_to_stream"}
!318 = !{!319, !307}
!319 = distinct !{!319, !320, !"fmt.wprintln: %__.context_ptr"}
!320 = distinct !{!320, !"fmt.wprintln"}
!321 = !{!322, !324, !319, !307}
!322 = distinct !{!322, !323, !"io.write_string: argument 0"}
!323 = distinct !{!323, !"io.write_string"}
!324 = distinct !{!324, !323, !"io.write_string: %__.context_ptr"}
!325 = !{!326, !328, !322, !324, !319, !307}
!326 = distinct !{!326, !327, !"io.write: argument 0"}
!327 = distinct !{!327, !"io.write"}
!328 = distinct !{!328, !327, !"io.write: %__.context_ptr"}
!329 = !{!326, !322}
!330 = !{!331, !333, !334, !319, !307}
!331 = distinct !{!331, !332, !"io.write: argument 0"}
!332 = distinct !{!332, !"io.write"}
!333 = distinct !{!333, !332, !"io.write: %__.context_ptr"}
!334 = distinct !{!334, !335, !"io.write_byte: %__.context_ptr"}
!335 = distinct !{!335, !"io.write_byte"}
!336 = !{!334, !319, !307}
!337 = !{!331}
!338 = !{!339, !319, !307}
!339 = distinct !{!339, !340, !"io.flush: %__.context_ptr"}
!340 = distinct !{!340, !"io.flush"}
!341 = !{!342, !307}
!342 = distinct !{!342, !343, !"bufio.writer_flush: %__.context_ptr"}
!343 = distinct !{!343, !"bufio.writer_flush"}
!344 = !{!345, !347, !342, !307}
!345 = distinct !{!345, !346, !"io.write: argument 0"}
!346 = distinct !{!346, !"io.write"}
!347 = distinct !{!347, !346, !"io.write: %__.context_ptr"}
!348 = !{!345}
!349 = !{!350}
!350 = distinct !{!350, !351, !"os.read_at: argument 0"}
!351 = distinct !{!351, !"os.read_at"}
!352 = !{!353, !350}
!353 = distinct !{!353, !354, !"os.pread-848: argument 0"}
!354 = distinct !{!354, !"os.pread-848"}
!355 = !{!356}
!356 = distinct !{!356, !357, !"os.write: argument 0"}
!357 = distinct !{!357, !"os.write"}
!358 = !{!359}
!359 = distinct !{!359, !360, !"os.write_at: argument 0"}
!360 = distinct !{!360, !"os.write_at"}
!361 = !{!362, !359}
!362 = distinct !{!362, !363, !"os.pwrite-853: argument 0"}
!363 = distinct !{!363, !"os.pwrite-853"}
!364 = !{!365}
!365 = distinct !{!365, !366, !"os.seek: argument 0"}
!366 = distinct !{!366, !"os.seek"}
!367 = !{!368}
!368 = distinct !{!368, !369, !"os.file_size: argument 0"}
!369 = distinct !{!369, !"os.file_size"}
!370 = !{!371}
!371 = distinct !{!371, !372, !"runtime.map_cell_index_dynamic: argument 0"}
!372 = distinct !{!372, !"runtime.map_cell_index_dynamic"}
!373 = !{!374}
!374 = distinct !{!374, !375, !"runtime.map_cell_index_dynamic: argument 0"}
!375 = distinct !{!375, !"runtime.map_cell_index_dynamic"}
!376 = !{!377, !379}
!377 = distinct !{!377, !378, !"io.write_string: argument 0"}
!378 = distinct !{!378, !"io.write_string"}
!379 = distinct !{!379, !378, !"io.write_string: %__.context_ptr"}
!380 = !{!381, !383, !377, !379}
!381 = distinct !{!381, !382, !"io.write: argument 0"}
!382 = distinct !{!382, !"io.write"}
!383 = distinct !{!383, !382, !"io.write: %__.context_ptr"}
!384 = !{!381, !377}
!385 = !{!386}
!386 = distinct !{!386, !387, !"io.write_byte: %__.context_ptr"}
!387 = distinct !{!387, !"io.write_byte"}
!388 = !{!389, !391, !386}
!389 = distinct !{!389, !390, !"io.write: argument 0"}
!390 = distinct !{!390, !"io.write"}
!391 = distinct !{!391, !390, !"io.write: %__.context_ptr"}
!392 = !{!389}
!393 = !{!394, !396}
!394 = distinct !{!394, !395, !"reflect.write_typeid_writer: argument 0"}
!395 = distinct !{!395, !"reflect.write_typeid_writer"}
!396 = distinct !{!396, !395, !"reflect.write_typeid_writer: %__.context_ptr"}
!397 = !{!394}
!398 = !{!399}
!399 = distinct !{!399, !400, !"io.write_byte: %__.context_ptr"}
!400 = distinct !{!400, !"io.write_byte"}
!401 = !{!402, !404, !399}
!402 = distinct !{!402, !403, !"io.write: argument 0"}
!403 = distinct !{!403, !"io.write"}
!404 = distinct !{!404, !403, !"io.write: %__.context_ptr"}
!405 = !{!402}
!406 = !{!407, !409}
!407 = distinct !{!407, !408, !"io.write_string: argument 0"}
!408 = distinct !{!408, !"io.write_string"}
!409 = distinct !{!409, !408, !"io.write_string: %__.context_ptr"}
!410 = !{!411, !413, !407, !409}
!411 = distinct !{!411, !412, !"io.write: argument 0"}
!412 = distinct !{!412, !"io.write"}
!413 = distinct !{!413, !412, !"io.write: %__.context_ptr"}
!414 = !{!411, !407}
!415 = !{!416}
!416 = distinct !{!416, !417, !"io.write_byte: %__.context_ptr"}
!417 = distinct !{!417, !"io.write_byte"}
!418 = !{!419, !421, !416}
!419 = distinct !{!419, !420, !"io.write: argument 0"}
!420 = distinct !{!420, !"io.write"}
!421 = distinct !{!421, !420, !"io.write: %__.context_ptr"}
!422 = !{!419}
!423 = !{!424, !426}
!424 = distinct !{!424, !425, !"runtime.panic: %__.context_ptr"}
!425 = distinct !{!425, !"runtime.panic"}
!426 = distinct !{!426, !427, !"strconv.is_integer_negative: %__.context_ptr"}
!427 = distinct !{!427, !"strconv.is_integer_negative"}
!428 = !{!429}
!429 = distinct !{!429, !427, !"strconv.is_integer_negative: argument 0"}
!430 = !{!431}
!431 = distinct !{!431, !432, !"runtime.panic: %__.context_ptr"}
!432 = distinct !{!432, !"runtime.panic"}
!433 = !{!434}
!434 = distinct !{!434, !435, !"fmt.fmt_write_padding: %__.context_ptr"}
!435 = distinct !{!435, !"fmt.fmt_write_padding"}
!436 = !{!437, !439, !440, !434}
!437 = distinct !{!437, !438, !"io.write: argument 0"}
!438 = distinct !{!438, !"io.write"}
!439 = distinct !{!439, !438, !"io.write: %__.context_ptr"}
!440 = distinct !{!440, !441, !"io.write_byte: %__.context_ptr"}
!441 = distinct !{!441, !"io.write_byte"}
!442 = !{!440, !434}
!443 = !{!437}
!444 = distinct !{!444, !445}
!445 = !{!"llvm.loop.unswitch.partial.disable"}
!446 = !{!447}
!447 = distinct !{!447, !448, !"runtime.panic: %__.context_ptr"}
!448 = distinct !{!448, !"runtime.panic"}
!449 = !{!450}
!450 = distinct !{!450, !451, !"io.write_byte: %__.context_ptr"}
!451 = distinct !{!451, !"io.write_byte"}
!452 = !{!453}
!453 = distinct !{!453, !454, !"io.write_byte: %__.context_ptr"}
!454 = distinct !{!454, !"io.write_byte"}
!455 = !{!456, !458, !450}
!456 = distinct !{!456, !457, !"io.write: argument 0"}
!457 = distinct !{!457, !"io.write"}
!458 = distinct !{!458, !457, !"io.write: %__.context_ptr"}
!459 = !{!456}
!460 = !{!461, !463, !453}
!461 = distinct !{!461, !462, !"io.write: argument 0"}
!462 = distinct !{!462, !"io.write"}
!463 = distinct !{!463, !462, !"io.write: %__.context_ptr"}
!464 = !{!461}
!465 = !{!466}
!466 = distinct !{!466, !467, !"runtime.panic: %__.context_ptr"}
!467 = distinct !{!467, !"runtime.panic"}
!468 = !{!469}
!469 = distinct !{!469, !470, !"fmt.fmt_write_padding: %__.context_ptr"}
!470 = distinct !{!470, !"fmt.fmt_write_padding"}
!471 = !{!472, !474, !475, !469}
!472 = distinct !{!472, !473, !"io.write: argument 0"}
!473 = distinct !{!473, !"io.write"}
!474 = distinct !{!474, !473, !"io.write: %__.context_ptr"}
!475 = distinct !{!475, !476, !"io.write_byte: %__.context_ptr"}
!476 = distinct !{!476, !"io.write_byte"}
!477 = !{!475, !469}
!478 = !{!472}
!479 = !{!480}
!480 = distinct !{!480, !481, !"runtime.panic: %__.context_ptr"}
!481 = distinct !{!481, !"runtime.panic"}
!482 = !{!483}
!483 = distinct !{!483, !484, !"strconv.append_bits_128: %agg.result"}
!484 = distinct !{!484, !"strconv.append_bits_128"}
!485 = !{!486}
!486 = distinct !{!486, !487, !"io.write_byte: %__.context_ptr"}
!487 = distinct !{!487, !"io.write_byte"}
!488 = !{!489}
!489 = distinct !{!489, !490, !"io.write_byte: %__.context_ptr"}
!490 = distinct !{!490, !"io.write_byte"}
!491 = !{!492, !494, !486}
!492 = distinct !{!492, !493, !"io.write: argument 0"}
!493 = distinct !{!493, !"io.write"}
!494 = distinct !{!494, !493, !"io.write: %__.context_ptr"}
!495 = !{!492}
!496 = !{!497, !499, !489}
!497 = distinct !{!497, !498, !"io.write: argument 0"}
!498 = distinct !{!498, !"io.write"}
!499 = distinct !{!499, !498, !"io.write: %__.context_ptr"}
!500 = !{!497}
!501 = !{!502, !504}
!502 = distinct !{!502, !503, !"runtime.panic: %__.context_ptr"}
!503 = distinct !{!503, !"runtime.panic"}
!504 = distinct !{!504, !505, !"strconv.is_integer_negative: %__.context_ptr"}
!505 = distinct !{!505, !"strconv.is_integer_negative"}
!506 = !{!507}
!507 = distinct !{!507, !505, !"strconv.is_integer_negative: argument 0"}
!508 = !{!509, !511}
!509 = distinct !{!509, !510, !"io.write_quoted_rune._write_byte-0: %__.context_ptr"}
!510 = distinct !{!510, !"io.write_quoted_rune._write_byte-0"}
!511 = distinct !{!511, !512, !"io.write_quoted_rune: %__.context_ptr"}
!512 = distinct !{!512, !"io.write_quoted_rune"}
!513 = !{!514, !509, !511}
!514 = distinct !{!514, !515, !"io.write_byte: %__.context_ptr"}
!515 = distinct !{!515, !"io.write_byte"}
!516 = !{!517, !519, !514, !509, !511}
!517 = distinct !{!517, !518, !"io.write: argument 0"}
!518 = distinct !{!518, !"io.write"}
!519 = distinct !{!519, !518, !"io.write: %__.context_ptr"}
!520 = !{!517}
!521 = !{!511}
!522 = !{!523, !511}
!523 = distinct !{!523, !524, !"io.write_quoted_rune._write_byte-0: %__.context_ptr"}
!524 = distinct !{!524, !"io.write_quoted_rune._write_byte-0"}
!525 = !{!526, !523, !511}
!526 = distinct !{!526, !527, !"io.write_byte: %__.context_ptr"}
!527 = distinct !{!527, !"io.write_byte"}
!528 = !{!529, !531, !526, !523, !511}
!529 = distinct !{!529, !530, !"io.write: argument 0"}
!530 = distinct !{!530, !"io.write"}
!531 = distinct !{!531, !530, !"io.write: %__.context_ptr"}
!532 = !{!529}
!533 = !{!534, !536}
!534 = distinct !{!534, !535, !"io.write_string: argument 0"}
!535 = distinct !{!535, !"io.write_string"}
!536 = distinct !{!536, !535, !"io.write_string: %__.context_ptr"}
!537 = !{!538, !540, !534, !536}
!538 = distinct !{!538, !539, !"io.write: argument 0"}
!539 = distinct !{!539, !"io.write"}
!540 = distinct !{!540, !539, !"io.write: %__.context_ptr"}
!541 = !{!538, !534}
!542 = !{!543, !545}
!543 = distinct !{!543, !544, !"io.write_string: argument 0"}
!544 = distinct !{!544, !"io.write_string"}
!545 = distinct !{!545, !544, !"io.write_string: %__.context_ptr"}
!546 = !{!547, !549, !543, !545}
!547 = distinct !{!547, !548, !"io.write: argument 0"}
!548 = distinct !{!548, !"io.write"}
!549 = distinct !{!549, !548, !"io.write: %__.context_ptr"}
!550 = !{!547, !543}
!551 = !{!552, !554}
!552 = distinct !{!552, !553, !"io.write_string: argument 0"}
!553 = distinct !{!553, !"io.write_string"}
!554 = distinct !{!554, !553, !"io.write_string: %__.context_ptr"}
!555 = !{!556, !558, !552, !554}
!556 = distinct !{!556, !557, !"io.write: argument 0"}
!557 = distinct !{!557, !"io.write"}
!558 = distinct !{!558, !557, !"io.write: %__.context_ptr"}
!559 = !{!556, !552}
!560 = !{!561, !563}
!561 = distinct !{!561, !562, !"io.write_string: argument 0"}
!562 = distinct !{!562, !"io.write_string"}
!563 = distinct !{!563, !562, !"io.write_string: %__.context_ptr"}
!564 = !{!565, !567, !561, !563}
!565 = distinct !{!565, !566, !"io.write: argument 0"}
!566 = distinct !{!566, !"io.write"}
!567 = distinct !{!567, !566, !"io.write: %__.context_ptr"}
!568 = !{!565, !561}
!569 = !{!570}
!570 = distinct !{!570, !571, !"fmt.fmt_write_padding: %__.context_ptr"}
!571 = distinct !{!571, !"fmt.fmt_write_padding"}
!572 = !{!573, !575, !576, !570}
!573 = distinct !{!573, !574, !"io.write: argument 0"}
!574 = distinct !{!574, !"io.write"}
!575 = distinct !{!575, !574, !"io.write: %__.context_ptr"}
!576 = distinct !{!576, !577, !"io.write_byte: %__.context_ptr"}
!577 = distinct !{!577, !"io.write_byte"}
!578 = !{!576, !570}
!579 = !{!573}
!580 = !{!581}
!581 = distinct !{!581, !582, !"io.write_byte: %__.context_ptr"}
!582 = distinct !{!582, !"io.write_byte"}
!583 = !{!584, !586, !581}
!584 = distinct !{!584, !585, !"io.write: argument 0"}
!585 = distinct !{!585, !"io.write"}
!586 = distinct !{!586, !585, !"io.write: %__.context_ptr"}
!587 = !{!584}
!588 = !{!589}
!589 = distinct !{!589, !590, !"fmt.fmt_write_padding: %__.context_ptr"}
!590 = distinct !{!590, !"fmt.fmt_write_padding"}
!591 = !{!592, !589}
!592 = distinct !{!592, !593, !"io.write_byte: %__.context_ptr"}
!593 = distinct !{!593, !"io.write_byte"}
!594 = !{!595, !597, !592, !589}
!595 = distinct !{!595, !596, !"io.write: argument 0"}
!596 = distinct !{!596, !"io.write"}
!597 = distinct !{!597, !596, !"io.write: %__.context_ptr"}
!598 = !{!595}
!599 = !{!600, !602, !603, !605}
!600 = distinct !{!600, !601, !"io.write: argument 0"}
!601 = distinct !{!601, !"io.write"}
!602 = distinct !{!602, !601, !"io.write: %__.context_ptr"}
!603 = distinct !{!603, !604, !"io.write_string: argument 0"}
!604 = distinct !{!604, !"io.write_string"}
!605 = distinct !{!605, !604, !"io.write_string: %__.context_ptr"}
!606 = !{!603, !605}
!607 = !{!600, !603}
!608 = !{!609, !611, !612, !614}
!609 = distinct !{!609, !610, !"io.write: argument 0"}
!610 = distinct !{!610, !"io.write"}
!611 = distinct !{!611, !610, !"io.write: %__.context_ptr"}
!612 = distinct !{!612, !613, !"io.write_byte: %__.context_ptr"}
!613 = distinct !{!613, !"io.write_byte"}
!614 = distinct !{!614, !615, !"fmt.fmt_write_padding: %__.context_ptr"}
!615 = distinct !{!615, !"fmt.fmt_write_padding"}
!616 = !{!614}
!617 = !{!612, !614}
!618 = !{!609}
!619 = !{!620, !622}
!620 = distinct !{!620, !621, !"io.write_string: argument 0"}
!621 = distinct !{!621, !"io.write_string"}
!622 = distinct !{!622, !621, !"io.write_string: %__.context_ptr"}
!623 = !{!624, !626, !620, !622}
!624 = distinct !{!624, !625, !"io.write: argument 0"}
!625 = distinct !{!625, !"io.write"}
!626 = distinct !{!626, !625, !"io.write: %__.context_ptr"}
!627 = !{!624, !620}
!628 = !{!629}
!629 = distinct !{!629, !630, !"fmt._fmt_float_as: %__.context_ptr"}
!630 = distinct !{!630, !"fmt._fmt_float_as"}
!631 = !{!632}
!632 = distinct !{!632, !633, !"fmt._fmt_float_as: %__.context_ptr"}
!633 = distinct !{!633, !"fmt._fmt_float_as"}
!634 = !{!635}
!635 = distinct !{!635, !636, !"runtime.panic: %__.context_ptr"}
!636 = distinct !{!636, !"runtime.panic"}
!637 = !{!638, !640}
!638 = distinct !{!638, !639, !"io.write_string: argument 0"}
!639 = distinct !{!639, !"io.write_string"}
!640 = distinct !{!640, !639, !"io.write_string: %__.context_ptr"}
!641 = !{!642, !644, !638, !640}
!642 = distinct !{!642, !643, !"io.write: argument 0"}
!643 = distinct !{!643, !"io.write"}
!644 = distinct !{!644, !643, !"io.write: %__.context_ptr"}
!645 = !{!642, !638}
!646 = !{!647, !649}
!647 = distinct !{!647, !648, !"io.write_string: argument 0"}
!648 = distinct !{!648, !"io.write_string"}
!649 = distinct !{!649, !648, !"io.write_string: %__.context_ptr"}
!650 = !{!651, !653, !647, !649}
!651 = distinct !{!651, !652, !"io.write: argument 0"}
!652 = distinct !{!652, !"io.write"}
!653 = distinct !{!653, !652, !"io.write: %__.context_ptr"}
!654 = !{!651, !647}
!655 = !{!656, !658, !659}
!656 = distinct !{!656, !657, !"io.write: argument 0"}
!657 = distinct !{!657, !"io.write"}
!658 = distinct !{!658, !657, !"io.write: %__.context_ptr"}
!659 = distinct !{!659, !660, !"io.write_byte: %__.context_ptr"}
!660 = distinct !{!660, !"io.write_byte"}
!661 = !{!659}
!662 = !{!656}
!663 = distinct !{!663, !445}
!664 = !{!665, !667}
!665 = distinct !{!665, !666, !"io.write_string: argument 0"}
!666 = distinct !{!666, !"io.write_string"}
!667 = distinct !{!667, !666, !"io.write_string: %__.context_ptr"}
!668 = !{!669, !671, !665, !667}
!669 = distinct !{!669, !670, !"io.write: argument 0"}
!670 = distinct !{!670, !"io.write"}
!671 = distinct !{!671, !670, !"io.write: %__.context_ptr"}
!672 = !{!669, !665}
!673 = !{!674, !676}
!674 = distinct !{!674, !675, !"io.write_string: argument 0"}
!675 = distinct !{!675, !"io.write_string"}
!676 = distinct !{!676, !675, !"io.write_string: %__.context_ptr"}
!677 = !{!678, !680, !674, !676}
!678 = distinct !{!678, !679, !"io.write: argument 0"}
!679 = distinct !{!679, !"io.write"}
!680 = distinct !{!680, !679, !"io.write: %__.context_ptr"}
!681 = !{!678, !674}
!682 = !{!683, !685}
!683 = distinct !{!683, !684, !"io.write_string: argument 0"}
!684 = distinct !{!684, !"io.write_string"}
!685 = distinct !{!685, !684, !"io.write_string: %__.context_ptr"}
!686 = !{!687, !689, !683, !685}
!687 = distinct !{!687, !688, !"io.write: argument 0"}
!688 = distinct !{!688, !"io.write"}
!689 = distinct !{!689, !688, !"io.write: %__.context_ptr"}
!690 = !{!687, !683}
!691 = !{!692, !694}
!692 = distinct !{!692, !693, !"io.write_quoted_string: argument 0"}
!693 = distinct !{!693, !"io.write_quoted_string"}
!694 = distinct !{!694, !693, !"io.write_quoted_string: %__.context_ptr"}
!695 = !{!696, !692, !694}
!696 = distinct !{!696, !697, !"io.write_byte: %__.context_ptr"}
!697 = distinct !{!697, !"io.write_byte"}
!698 = !{!699, !701, !696, !692, !694}
!699 = distinct !{!699, !700, !"io.write: argument 0"}
!700 = distinct !{!700, !"io.write"}
!701 = distinct !{!701, !700, !"io.write: %__.context_ptr"}
!702 = !{!699, !692}
!703 = !{!692}
!704 = !{!705, !707, !692, !694}
!705 = distinct !{!705, !706, !"utf8.decode_rune_in_bytes: argument 0"}
!706 = distinct !{!706, !"utf8.decode_rune_in_bytes"}
!707 = distinct !{!707, !708, !"utf8.decode_rune_in_string: argument 0"}
!708 = distinct !{!708, !"utf8.decode_rune_in_string"}
!709 = !{!705, !707, !692}
!710 = !{!711, !692, !694}
!711 = distinct !{!711, !712, !"io.write_byte: %__.context_ptr"}
!712 = distinct !{!712, !"io.write_byte"}
!713 = !{!714, !716, !711, !692, !694}
!714 = distinct !{!714, !715, !"io.write: argument 0"}
!715 = distinct !{!715, !"io.write"}
!716 = distinct !{!716, !715, !"io.write: %__.context_ptr"}
!717 = !{!714, !692}
!718 = !{!719, !692, !694}
!719 = distinct !{!719, !720, !"io.write_byte: %__.context_ptr"}
!720 = distinct !{!720, !"io.write_byte"}
!721 = !{!722, !724, !719, !692, !694}
!722 = distinct !{!722, !723, !"io.write: argument 0"}
!723 = distinct !{!723, !"io.write"}
!724 = distinct !{!724, !723, !"io.write: %__.context_ptr"}
!725 = !{!722, !692}
!726 = !{!727, !692, !694}
!727 = distinct !{!727, !728, !"io.write_byte: %__.context_ptr"}
!728 = distinct !{!728, !"io.write_byte"}
!729 = !{!730, !732, !727, !692, !694}
!730 = distinct !{!730, !731, !"io.write: argument 0"}
!731 = distinct !{!731, !"io.write"}
!732 = distinct !{!732, !731, !"io.write: %__.context_ptr"}
!733 = !{!730, !692}
!734 = !{!735, !692, !694}
!735 = distinct !{!735, !736, !"io.write_byte: %__.context_ptr"}
!736 = distinct !{!736, !"io.write_byte"}
!737 = !{!738, !740, !735, !692, !694}
!738 = distinct !{!738, !739, !"io.write: argument 0"}
!739 = distinct !{!739, !"io.write"}
!740 = distinct !{!740, !739, !"io.write: %__.context_ptr"}
!741 = !{!738, !692}
!742 = !{!743, !692, !694}
!743 = distinct !{!743, !744, !"io.write_byte: %__.context_ptr"}
!744 = distinct !{!744, !"io.write_byte"}
!745 = !{!746, !748, !743, !692, !694}
!746 = distinct !{!746, !747, !"io.write: argument 0"}
!747 = distinct !{!747, !"io.write"}
!748 = distinct !{!748, !747, !"io.write: %__.context_ptr"}
!749 = !{!746, !692}
!750 = !{!751}
!751 = distinct !{!751, !752, !"io.write_byte: %__.context_ptr"}
!752 = distinct !{!752, !"io.write_byte"}
!753 = !{!754, !756, !751}
!754 = distinct !{!754, !755, !"io.write: argument 0"}
!755 = distinct !{!755, !"io.write"}
!756 = distinct !{!756, !755, !"io.write: %__.context_ptr"}
!757 = !{!754}
!758 = distinct !{!758, !759}
!759 = !{!"llvm.loop.peeled.count", i32 1}
!760 = !{!761}
!761 = distinct !{!761, !762, !"runtime.cstring_to_string: %agg.result"}
!762 = distinct !{!762, !"runtime.cstring_to_string"}
!763 = !{!764, !766}
!764 = distinct !{!764, !765, !"io.write_string: argument 0"}
!765 = distinct !{!765, !"io.write_string"}
!766 = distinct !{!766, !765, !"io.write_string: %__.context_ptr"}
!767 = !{!768, !770, !764, !766}
!768 = distinct !{!768, !769, !"io.write: argument 0"}
!769 = distinct !{!769, !"io.write"}
!770 = distinct !{!770, !769, !"io.write: %__.context_ptr"}
!771 = !{!768, !764}
!772 = !{!773, !775}
!773 = distinct !{!773, !774, !"io.write_string: argument 0"}
!774 = distinct !{!774, !"io.write_string"}
!775 = distinct !{!775, !774, !"io.write_string: %__.context_ptr"}
!776 = !{!777, !779, !773, !775}
!777 = distinct !{!777, !778, !"io.write: argument 0"}
!778 = distinct !{!778, !"io.write"}
!779 = distinct !{!779, !778, !"io.write: %__.context_ptr"}
!780 = !{!777, !773}
!781 = !{!782, !784}
!782 = distinct !{!782, !783, !"io.write_string: argument 0"}
!783 = distinct !{!783, !"io.write_string"}
!784 = distinct !{!784, !783, !"io.write_string: %__.context_ptr"}
!785 = !{!786, !788, !782, !784}
!786 = distinct !{!786, !787, !"io.write: argument 0"}
!787 = distinct !{!787, !"io.write"}
!788 = distinct !{!788, !787, !"io.write: %__.context_ptr"}
!789 = !{!786, !782}
!790 = !{!791, !793}
!791 = distinct !{!791, !792, !"io.write_string: argument 0"}
!792 = distinct !{!792, !"io.write_string"}
!793 = distinct !{!793, !792, !"io.write_string: %__.context_ptr"}
!794 = !{!795, !797, !791, !793}
!795 = distinct !{!795, !796, !"io.write: argument 0"}
!796 = distinct !{!796, !"io.write"}
!797 = distinct !{!797, !796, !"io.write: %__.context_ptr"}
!798 = !{!795, !791}
!799 = !{!800, !802}
!800 = distinct !{!800, !801, !"io.write_string: argument 0"}
!801 = distinct !{!801, !"io.write_string"}
!802 = distinct !{!802, !801, !"io.write_string: %__.context_ptr"}
!803 = !{!804, !806, !800, !802}
!804 = distinct !{!804, !805, !"io.write: argument 0"}
!805 = distinct !{!805, !"io.write"}
!806 = distinct !{!806, !805, !"io.write: %__.context_ptr"}
!807 = !{!804, !800}
!808 = !{!809}
!809 = distinct !{!809, !810, !"fmt.enum_value_to_string: argument 0"}
!810 = distinct !{!810, !"fmt.enum_value_to_string"}
!811 = !{!812, !814}
!812 = distinct !{!812, !813, !"io.write_string: argument 0"}
!813 = distinct !{!813, !"io.write_string"}
!814 = distinct !{!814, !813, !"io.write_string: %__.context_ptr"}
!815 = !{!816, !818, !812, !814}
!816 = distinct !{!816, !817, !"io.write: argument 0"}
!817 = distinct !{!817, !"io.write"}
!818 = distinct !{!818, !817, !"io.write: %__.context_ptr"}
!819 = !{!816, !812}
!820 = !{!821, !823}
!821 = distinct !{!821, !822, !"io.write_string: argument 0"}
!822 = distinct !{!822, !"io.write_string"}
!823 = distinct !{!823, !822, !"io.write_string: %__.context_ptr"}
!824 = !{!825, !827, !821, !823}
!825 = distinct !{!825, !826, !"io.write: argument 0"}
!826 = distinct !{!826, !"io.write"}
!827 = distinct !{!827, !826, !"io.write: %__.context_ptr"}
!828 = !{!825, !821}
!829 = !{!830}
!830 = distinct !{!830, !831, !"runtime.panic: %__.context_ptr"}
!831 = distinct !{!831, !"runtime.panic"}
!832 = !{!833, !835}
!833 = distinct !{!833, !834, !"io.write_string: argument 0"}
!834 = distinct !{!834, !"io.write_string"}
!835 = distinct !{!835, !834, !"io.write_string: %__.context_ptr"}
!836 = !{!837, !839, !833, !835}
!837 = distinct !{!837, !838, !"io.write: argument 0"}
!838 = distinct !{!838, !"io.write"}
!839 = distinct !{!839, !838, !"io.write: %__.context_ptr"}
!840 = !{!837, !833}
!841 = !{!842}
!842 = distinct !{!842, !843, !"io.write_byte: %__.context_ptr"}
!843 = distinct !{!843, !"io.write_byte"}
!844 = !{!845, !847, !842}
!845 = distinct !{!845, !846, !"io.write: argument 0"}
!846 = distinct !{!846, !"io.write"}
!847 = distinct !{!847, !846, !"io.write: %__.context_ptr"}
!848 = !{!845}
!849 = !{!850, !852}
!850 = distinct !{!850, !851, !"io.write_string: argument 0"}
!851 = distinct !{!851, !"io.write_string"}
!852 = distinct !{!852, !851, !"io.write_string: %__.context_ptr"}
!853 = !{!854, !856, !850, !852}
!854 = distinct !{!854, !855, !"io.write: argument 0"}
!855 = distinct !{!855, !"io.write"}
!856 = distinct !{!856, !855, !"io.write: %__.context_ptr"}
!857 = !{!854, !850}
!858 = !{!859, !861}
!859 = distinct !{!859, !860, !"io.write_string: argument 0"}
!860 = distinct !{!860, !"io.write_string"}
!861 = distinct !{!861, !860, !"io.write_string: %__.context_ptr"}
!862 = !{!863, !865, !859, !861}
!863 = distinct !{!863, !864, !"io.write: argument 0"}
!864 = distinct !{!864, !"io.write"}
!865 = distinct !{!865, !864, !"io.write: %__.context_ptr"}
!866 = !{!863, !859}
!867 = !{!868, !870}
!868 = distinct !{!868, !869, !"io.write_i64: argument 0"}
!869 = distinct !{!869, !"io.write_i64"}
!870 = distinct !{!870, !869, !"io.write_i64: %__.context_ptr"}
!871 = !{!872, !874, !868, !870}
!872 = distinct !{!872, !873, !"strconv.append_bits: %agg.result"}
!873 = distinct !{!873, !"strconv.append_bits"}
!874 = distinct !{!874, !873, !"strconv.append_bits: %__.context_ptr"}
!875 = !{!874, !868, !870}
!876 = !{!877, !879, !868, !870}
!877 = distinct !{!877, !878, !"io.write_string: argument 0"}
!878 = distinct !{!878, !"io.write_string"}
!879 = distinct !{!879, !878, !"io.write_string: %__.context_ptr"}
!880 = !{!881, !883, !877, !879, !868, !870}
!881 = distinct !{!881, !882, !"io.write: argument 0"}
!882 = distinct !{!882, !"io.write"}
!883 = distinct !{!883, !882, !"io.write: %__.context_ptr"}
!884 = !{!881, !877, !868}
!885 = !{!886}
!886 = distinct !{!886, !887, !"io.write_byte: %__.context_ptr"}
!887 = distinct !{!887, !"io.write_byte"}
!888 = !{!889, !891, !886}
!889 = distinct !{!889, !890, !"io.write: argument 0"}
!890 = distinct !{!890, !"io.write"}
!891 = distinct !{!891, !890, !"io.write: %__.context_ptr"}
!892 = !{!889}
!893 = !{!894, !896, !897}
!894 = distinct !{!894, !895, !"io.write: argument 0"}
!895 = distinct !{!895, !"io.write"}
!896 = distinct !{!896, !895, !"io.write: %__.context_ptr"}
!897 = distinct !{!897, !898, !"io.write_byte: %__.context_ptr"}
!898 = distinct !{!898, !"io.write_byte"}
!899 = !{!897}
!900 = !{!894}
!901 = distinct !{!901, !445}
!902 = !{!903, !905}
!903 = distinct !{!903, !904, !"io.write_string: argument 0"}
!904 = distinct !{!904, !"io.write_string"}
!905 = distinct !{!905, !904, !"io.write_string: %__.context_ptr"}
!906 = !{!907, !909, !903, !905}
!907 = distinct !{!907, !908, !"io.write: argument 0"}
!908 = distinct !{!908, !"io.write"}
!909 = distinct !{!909, !908, !"io.write: %__.context_ptr"}
!910 = !{!907, !903}
!911 = !{!912, !914}
!912 = distinct !{!912, !913, !"io.write_string: argument 0"}
!913 = distinct !{!913, !"io.write_string"}
!914 = distinct !{!914, !913, !"io.write_string: %__.context_ptr"}
!915 = !{!916, !918}
!916 = distinct !{!916, !917, !"io.write_string: argument 0"}
!917 = distinct !{!917, !"io.write_string"}
!918 = distinct !{!918, !917, !"io.write_string: %__.context_ptr"}
!919 = !{!920, !922, !912, !914}
!920 = distinct !{!920, !921, !"io.write: argument 0"}
!921 = distinct !{!921, !"io.write"}
!922 = distinct !{!922, !921, !"io.write: %__.context_ptr"}
!923 = !{!920, !912}
!924 = !{!925, !927, !916, !918}
!925 = distinct !{!925, !926, !"io.write: argument 0"}
!926 = distinct !{!926, !"io.write"}
!927 = distinct !{!927, !926, !"io.write: %__.context_ptr"}
!928 = !{!925, !916}
!929 = !{!930, !932}
!930 = distinct !{!930, !931, !"io.write_string: argument 0"}
!931 = distinct !{!931, !"io.write_string"}
!932 = distinct !{!932, !931, !"io.write_string: %__.context_ptr"}
!933 = !{!934}
!934 = distinct !{!934, !935, !"io.write_byte: %__.context_ptr"}
!935 = distinct !{!935, !"io.write_byte"}
!936 = !{!937, !939, !930, !932}
!937 = distinct !{!937, !938, !"io.write: argument 0"}
!938 = distinct !{!938, !"io.write"}
!939 = distinct !{!939, !938, !"io.write: %__.context_ptr"}
!940 = !{!937, !930}
!941 = !{!942, !944, !934}
!942 = distinct !{!942, !943, !"io.write: argument 0"}
!943 = distinct !{!943, !"io.write"}
!944 = distinct !{!944, !943, !"io.write: %__.context_ptr"}
!945 = !{!942}
!946 = !{!947}
!947 = distinct !{!947, !948, !"io.write_byte: %__.context_ptr"}
!948 = distinct !{!948, !"io.write_byte"}
!949 = !{!950, !952, !947}
!950 = distinct !{!950, !951, !"io.write: argument 0"}
!951 = distinct !{!951, !"io.write"}
!952 = distinct !{!952, !951, !"io.write: %__.context_ptr"}
!953 = !{!950}
!954 = !{!955, !957}
!955 = distinct !{!955, !956, !"io.write_string: argument 0"}
!956 = distinct !{!956, !"io.write_string"}
!957 = distinct !{!957, !956, !"io.write_string: %__.context_ptr"}
!958 = !{!959, !961, !955, !957}
!959 = distinct !{!959, !960, !"io.write: argument 0"}
!960 = distinct !{!960, !"io.write"}
!961 = distinct !{!961, !960, !"io.write: %__.context_ptr"}
!962 = !{!959, !955}
!963 = !{!964, !966}
!964 = distinct !{!964, !965, !"io.write_string: argument 0"}
!965 = distinct !{!965, !"io.write_string"}
!966 = distinct !{!966, !965, !"io.write_string: %__.context_ptr"}
!967 = !{!968}
!968 = distinct !{!968, !969, !"io.write_byte: %__.context_ptr"}
!969 = distinct !{!969, !"io.write_byte"}
!970 = !{!971, !973, !964, !966}
!971 = distinct !{!971, !972, !"io.write: argument 0"}
!972 = distinct !{!972, !"io.write"}
!973 = distinct !{!973, !972, !"io.write: %__.context_ptr"}
!974 = !{!971, !964}
!975 = !{!976, !978, !968}
!976 = distinct !{!976, !977, !"io.write: argument 0"}
!977 = distinct !{!977, !"io.write"}
!978 = distinct !{!978, !977, !"io.write: %__.context_ptr"}
!979 = !{!976}
!980 = !{!981, !983}
!981 = distinct !{!981, !982, !"io.write_string: argument 0"}
!982 = distinct !{!982, !"io.write_string"}
!983 = distinct !{!983, !982, !"io.write_string: %__.context_ptr"}
!984 = !{!985, !987, !981, !983}
!985 = distinct !{!985, !986, !"io.write: argument 0"}
!986 = distinct !{!986, !"io.write"}
!987 = distinct !{!987, !986, !"io.write: %__.context_ptr"}
!988 = !{!985, !981}
!989 = !{!990, !992}
!990 = distinct !{!990, !991, !"io.write_string: argument 0"}
!991 = distinct !{!991, !"io.write_string"}
!992 = distinct !{!992, !991, !"io.write_string: %__.context_ptr"}
!993 = !{!994}
!994 = distinct !{!994, !995, !"fmt.fmt_write_indent: %__.context_ptr"}
!995 = distinct !{!995, !"fmt.fmt_write_indent"}
!996 = !{!997, !994}
!997 = distinct !{!997, !998, !"io.write_byte: %__.context_ptr"}
!998 = distinct !{!998, !"io.write_byte"}
!999 = !{!1000, !1002, !997, !994}
!1000 = distinct !{!1000, !1001, !"io.write: argument 0"}
!1001 = distinct !{!1001, !"io.write"}
!1002 = distinct !{!1002, !1001, !"io.write: %__.context_ptr"}
!1003 = !{!1000}
!1004 = !{!1005, !1007}
!1005 = distinct !{!1005, !1006, !"io.write_string: argument 0"}
!1006 = distinct !{!1006, !"io.write_string"}
!1007 = distinct !{!1007, !1006, !"io.write_string: %__.context_ptr"}
!1008 = !{!1009, !1011, !990, !992}
!1009 = distinct !{!1009, !1010, !"io.write: argument 0"}
!1010 = distinct !{!1010, !"io.write"}
!1011 = distinct !{!1011, !1010, !"io.write: %__.context_ptr"}
!1012 = !{!1009, !990}
!1013 = !{!1014, !1016, !1005, !1007}
!1014 = distinct !{!1014, !1015, !"io.write: argument 0"}
!1015 = distinct !{!1015, !"io.write"}
!1016 = distinct !{!1016, !1015, !"io.write: %__.context_ptr"}
!1017 = !{!1014, !1005}
!1018 = !{!1019, !1021}
!1019 = distinct !{!1019, !1020, !"io.write_string: argument 0"}
!1020 = distinct !{!1020, !"io.write_string"}
!1021 = distinct !{!1021, !1020, !"io.write_string: %__.context_ptr"}
!1022 = !{!1023, !1025, !1019, !1021}
!1023 = distinct !{!1023, !1024, !"io.write: argument 0"}
!1024 = distinct !{!1024, !"io.write"}
!1025 = distinct !{!1025, !1024, !"io.write: %__.context_ptr"}
!1026 = !{!1023, !1019}
!1027 = !{!1028, !1030}
!1028 = distinct !{!1028, !1029, !"io.write_string: argument 0"}
!1029 = distinct !{!1029, !"io.write_string"}
!1030 = distinct !{!1030, !1029, !"io.write_string: %__.context_ptr"}
!1031 = !{!1032, !1034, !1028, !1030}
!1032 = distinct !{!1032, !1033, !"io.write: argument 0"}
!1033 = distinct !{!1033, !"io.write"}
!1034 = distinct !{!1034, !1033, !"io.write: %__.context_ptr"}
!1035 = !{!1032, !1028}
!1036 = !{!1037, !1039}
!1037 = distinct !{!1037, !1038, !"io.write_string: argument 0"}
!1038 = distinct !{!1038, !"io.write_string"}
!1039 = distinct !{!1039, !1038, !"io.write_string: %__.context_ptr"}
!1040 = !{!1041, !1043, !1037, !1039}
!1041 = distinct !{!1041, !1042, !"io.write: argument 0"}
!1042 = distinct !{!1042, !"io.write"}
!1043 = distinct !{!1043, !1042, !"io.write: %__.context_ptr"}
!1044 = !{!1041, !1037}
!1045 = !{!1046}
!1046 = distinct !{!1046, !1047, !"io.write_byte: %__.context_ptr"}
!1047 = distinct !{!1047, !"io.write_byte"}
!1048 = !{!1049, !1051, !1046}
!1049 = distinct !{!1049, !1050, !"io.write: argument 0"}
!1050 = distinct !{!1050, !"io.write"}
!1051 = distinct !{!1051, !1050, !"io.write: %__.context_ptr"}
!1052 = !{!1049}
!1053 = !{!1054}
!1054 = distinct !{!1054, !1055, !"reflect.struct_tag_lookup: argument 0"}
!1055 = distinct !{!1055, !"reflect.struct_tag_lookup"}
!1056 = !{!1057}
!1057 = distinct !{!1057, !1058, !"strings.trim_space: %agg.result"}
!1058 = distinct !{!1058, !"strings.trim_space"}
!1059 = !{!1060}
!1060 = distinct !{!1060, !1061, !"strings.trim_left_proc: %agg.result"}
!1061 = distinct !{!1061, !"strings.trim_left_proc"}
!1062 = !{!1063, !1057}
!1063 = distinct !{!1063, !1064, !"strings.trim_left_space: %agg.result"}
!1064 = distinct !{!1064, !"strings.trim_left_space"}
!1065 = !{!1066, !1060, !1063, !1057}
!1066 = distinct !{!1066, !1067, !"runtime.string_decode_rune: argument 0"}
!1067 = distinct !{!1067, !"runtime.string_decode_rune"}
!1068 = !{!1060, !1063, !1057}
!1069 = !{!1070, !1057}
!1070 = distinct !{!1070, !1071, !"strings.trim_right_proc: %agg.result"}
!1071 = distinct !{!1071, !"strings.trim_right_proc"}
!1072 = !{!1073, !1057}
!1073 = distinct !{!1073, !1074, !"strings.trim_right_space: %agg.result"}
!1074 = distinct !{!1074, !"strings.trim_right_space"}
!1075 = !{!1076, !1078, !1080, !1073, !1057}
!1076 = distinct !{!1076, !1077, !"utf8.decode_last_rune_in_bytes: argument 0"}
!1077 = distinct !{!1077, !"utf8.decode_last_rune_in_bytes"}
!1078 = distinct !{!1078, !1079, !"utf8.decode_last_rune_in_string: argument 0"}
!1079 = distinct !{!1079, !"utf8.decode_last_rune_in_string"}
!1080 = distinct !{!1080, !1081, !"strings.trim_right_proc: %agg.result"}
!1081 = distinct !{!1081, !"strings.trim_right_proc"}
!1082 = !{!1083, !1076, !1078, !1080, !1073, !1057}
!1083 = distinct !{!1083, !1084, !"utf8.decode_rune_in_bytes: argument 0"}
!1084 = distinct !{!1084, !"utf8.decode_rune_in_bytes"}
!1085 = !{!1080, !1073, !1057}
!1086 = !{!1087, !1089, !1080, !1073, !1057}
!1087 = distinct !{!1087, !1088, !"utf8.decode_rune_in_bytes: argument 0"}
!1088 = distinct !{!1088, !"utf8.decode_rune_in_bytes"}
!1089 = distinct !{!1089, !1090, !"utf8.decode_rune_in_string: argument 0"}
!1090 = distinct !{!1090, !"utf8.decode_rune_in_string"}
!1091 = !{!1092, !1094}
!1092 = distinct !{!1092, !1093, !"utf8.decode_rune_in_bytes: argument 0"}
!1093 = distinct !{!1093, !"utf8.decode_rune_in_bytes"}
!1094 = distinct !{!1094, !1095, !"utf8.decode_rune_in_string: argument 0"}
!1095 = distinct !{!1095, !"utf8.decode_rune_in_string"}
!1096 = !{!1097, !1099}
!1097 = distinct !{!1097, !1098, !"io.write_string: argument 0"}
!1098 = distinct !{!1098, !"io.write_string"}
!1099 = distinct !{!1099, !1098, !"io.write_string: %__.context_ptr"}
!1100 = !{!1101, !1103, !1097, !1099}
!1101 = distinct !{!1101, !1102, !"io.write: argument 0"}
!1102 = distinct !{!1102, !"io.write"}
!1103 = distinct !{!1103, !1102, !"io.write: %__.context_ptr"}
!1104 = !{!1101, !1097}
!1105 = !{!1106}
!1106 = distinct !{!1106, !1107, !"fmt.fmt_write_indent: %__.context_ptr"}
!1107 = distinct !{!1107, !"fmt.fmt_write_indent"}
!1108 = !{!1109, !1111}
!1109 = distinct !{!1109, !1110, !"io.write_string: argument 0"}
!1110 = distinct !{!1110, !"io.write_string"}
!1111 = distinct !{!1111, !1110, !"io.write_string: %__.context_ptr"}
!1112 = !{!1113, !1106}
!1113 = distinct !{!1113, !1114, !"io.write_byte: %__.context_ptr"}
!1114 = distinct !{!1114, !"io.write_byte"}
!1115 = !{!1116, !1118, !1113, !1106}
!1116 = distinct !{!1116, !1117, !"io.write: argument 0"}
!1117 = distinct !{!1117, !"io.write"}
!1118 = distinct !{!1118, !1117, !"io.write: %__.context_ptr"}
!1119 = !{!1116}
!1120 = !{!1121, !1123}
!1121 = distinct !{!1121, !1122, !"io.write_string: argument 0"}
!1122 = distinct !{!1122, !"io.write_string"}
!1123 = distinct !{!1123, !1122, !"io.write_string: %__.context_ptr"}
!1124 = !{!1125, !1127, !1109, !1111}
!1125 = distinct !{!1125, !1126, !"io.write: argument 0"}
!1126 = distinct !{!1126, !"io.write"}
!1127 = distinct !{!1127, !1126, !"io.write: %__.context_ptr"}
!1128 = !{!1125, !1109}
!1129 = !{!1130, !1132, !1121, !1123}
!1130 = distinct !{!1130, !1131, !"io.write: argument 0"}
!1131 = distinct !{!1131, !"io.write"}
!1132 = distinct !{!1132, !1131, !"io.write: %__.context_ptr"}
!1133 = !{!1130, !1121}
!1134 = !{!1135, !1137}
!1135 = distinct !{!1135, !1136, !"io.write_string: argument 0"}
!1136 = distinct !{!1136, !"io.write_string"}
!1137 = distinct !{!1137, !1136, !"io.write_string: %__.context_ptr"}
!1138 = !{!1139, !1141, !1135, !1137}
!1139 = distinct !{!1139, !1140, !"io.write: argument 0"}
!1140 = distinct !{!1140, !"io.write"}
!1141 = distinct !{!1141, !1140, !"io.write: %__.context_ptr"}
!1142 = !{!1139, !1135}
!1143 = !{!1144, !1146}
!1144 = distinct !{!1144, !1145, !"io.write_string: argument 0"}
!1145 = distinct !{!1145, !"io.write_string"}
!1146 = distinct !{!1146, !1145, !"io.write_string: %__.context_ptr"}
!1147 = !{!1148, !1150, !1144, !1146}
!1148 = distinct !{!1148, !1149, !"io.write: argument 0"}
!1149 = distinct !{!1149, !"io.write"}
!1150 = distinct !{!1150, !1149, !"io.write: %__.context_ptr"}
!1151 = !{!1148, !1144}
!1152 = !{!1153}
!1153 = distinct !{!1153, !1154, !"io.write_byte: %__.context_ptr"}
!1154 = distinct !{!1154, !"io.write_byte"}
!1155 = !{!1156}
!1156 = distinct !{!1156, !1157, !"io.write_byte: %__.context_ptr"}
!1157 = distinct !{!1157, !"io.write_byte"}
!1158 = !{!1159, !1161, !1156}
!1159 = distinct !{!1159, !1160, !"io.write: argument 0"}
!1160 = distinct !{!1160, !"io.write"}
!1161 = distinct !{!1161, !1160, !"io.write: %__.context_ptr"}
!1162 = !{!1159}
!1163 = distinct !{!1163, !445}
!1164 = !{!1165, !1167, !1153}
!1165 = distinct !{!1165, !1166, !"io.write: argument 0"}
!1166 = distinct !{!1166, !"io.write"}
!1167 = distinct !{!1167, !1166, !"io.write: %__.context_ptr"}
!1168 = !{!1165}
!1169 = !{!1170, !1172}
!1170 = distinct !{!1170, !1171, !"io.write_string: argument 0"}
!1171 = distinct !{!1171, !"io.write_string"}
!1172 = distinct !{!1172, !1171, !"io.write_string: %__.context_ptr"}
!1173 = !{!1174, !1176, !1170, !1172}
!1174 = distinct !{!1174, !1175, !"io.write: argument 0"}
!1175 = distinct !{!1175, !"io.write"}
!1176 = distinct !{!1176, !1175, !"io.write: %__.context_ptr"}
!1177 = !{!1174, !1170}
!1178 = !{!1179, !1181}
!1179 = distinct !{!1179, !1180, !"io.write_string: argument 0"}
!1180 = distinct !{!1180, !"io.write_string"}
!1181 = distinct !{!1181, !1180, !"io.write_string: %__.context_ptr"}
!1182 = !{!1183, !1185, !1179, !1181}
!1183 = distinct !{!1183, !1184, !"io.write: argument 0"}
!1184 = distinct !{!1184, !"io.write"}
!1185 = distinct !{!1185, !1184, !"io.write: %__.context_ptr"}
!1186 = !{!1183, !1179}
!1187 = !{!1188}
!1188 = distinct !{!1188, !1189, !"fmt.fmt_array.print_utf16-0: %__.context_ptr"}
!1189 = distinct !{!1189, !"fmt.fmt_array.print_utf16-0"}
!1190 = !{!1191}
!1191 = distinct !{!1191, !1192, !"fmt.fmt_array.print_utf16-1: %__.context_ptr"}
!1192 = distinct !{!1192, !"fmt.fmt_array.print_utf16-1"}
!1193 = !{!1194}
!1194 = distinct !{!1194, !1195, !"fmt.fmt_array.print_utf16-2: %__.context_ptr"}
!1195 = distinct !{!1195, !"fmt.fmt_array.print_utf16-2"}
!1196 = !{!1197}
!1197 = distinct !{!1197, !1198, !"fmt.fmt_array.print_utf32-3: %__.context_ptr"}
!1198 = distinct !{!1198, !"fmt.fmt_array.print_utf32-3"}
!1199 = !{!1200}
!1200 = distinct !{!1200, !1201, !"fmt.fmt_array.print_utf32-4: %__.context_ptr"}
!1201 = distinct !{!1201, !"fmt.fmt_array.print_utf32-4"}
!1202 = !{!1203}
!1203 = distinct !{!1203, !1204, !"fmt.fmt_array.print_utf32-5: %__.context_ptr"}
!1204 = distinct !{!1204, !"fmt.fmt_array.print_utf32-5"}
!1205 = !{!1206}
!1206 = distinct !{!1206, !1207, !"fmt.fmt_array.print_utf32-6: %__.context_ptr"}
!1207 = distinct !{!1207, !"fmt.fmt_array.print_utf32-6"}
!1208 = !{!1209}
!1209 = distinct !{!1209, !1210, !"io.write_byte: %__.context_ptr"}
!1210 = distinct !{!1210, !"io.write_byte"}
!1211 = !{!1212, !1214, !1209}
!1212 = distinct !{!1212, !1213, !"io.write: argument 0"}
!1213 = distinct !{!1213, !"io.write"}
!1214 = distinct !{!1214, !1213, !"io.write: %__.context_ptr"}
!1215 = !{!1212}
!1216 = !{!1217}
!1217 = distinct !{!1217, !1218, !"io.write_byte: %__.context_ptr"}
!1218 = distinct !{!1218, !"io.write_byte"}
!1219 = !{!1220, !1222, !1217}
!1220 = distinct !{!1220, !1221, !"io.write: argument 0"}
!1221 = distinct !{!1221, !"io.write"}
!1222 = distinct !{!1222, !1221, !"io.write: %__.context_ptr"}
!1223 = !{!1220}
!1224 = !{!1225}
!1225 = distinct !{!1225, !1226, !"fmt.fmt_write_array: %__.context_ptr"}
!1226 = distinct !{!1226, !"fmt.fmt_write_array"}
!1227 = !{!1228}
!1228 = distinct !{!1228, !1229, !"io.write_byte: %__.context_ptr"}
!1229 = distinct !{!1229, !"io.write_byte"}
!1230 = !{!1231, !1233, !1228}
!1231 = distinct !{!1231, !1232, !"io.write: argument 0"}
!1232 = distinct !{!1232, !"io.write"}
!1233 = distinct !{!1233, !1232, !"io.write: %__.context_ptr"}
!1234 = !{!1231}
!1235 = !{!1236}
!1236 = distinct !{!1236, !1237, !"fmt.fmt_write_indent: %__.context_ptr"}
!1237 = distinct !{!1237, !"fmt.fmt_write_indent"}
!1238 = !{!1239, !1241, !1242, !1236}
!1239 = distinct !{!1239, !1240, !"io.write: argument 0"}
!1240 = distinct !{!1240, !"io.write"}
!1241 = distinct !{!1241, !1240, !"io.write: %__.context_ptr"}
!1242 = distinct !{!1242, !1243, !"io.write_byte: %__.context_ptr"}
!1243 = distinct !{!1243, !"io.write_byte"}
!1244 = !{!1242, !1236}
!1245 = !{!1239}
!1246 = !{!1247, !1249}
!1247 = distinct !{!1247, !1248, !"io.write_string: argument 0"}
!1248 = distinct !{!1248, !"io.write_string"}
!1249 = distinct !{!1249, !1248, !"io.write_string: %__.context_ptr"}
!1250 = !{!1251, !1253, !1247, !1249}
!1251 = distinct !{!1251, !1252, !"io.write: argument 0"}
!1252 = distinct !{!1252, !"io.write"}
!1253 = distinct !{!1253, !1252, !"io.write: %__.context_ptr"}
!1254 = !{!1251, !1247}
!1255 = !{!1256, !1258, !1259, !1261}
!1256 = distinct !{!1256, !1257, !"io.write: argument 0"}
!1257 = distinct !{!1257, !"io.write"}
!1258 = distinct !{!1258, !1257, !"io.write: %__.context_ptr"}
!1259 = distinct !{!1259, !1260, !"io.write_byte: %__.context_ptr"}
!1260 = distinct !{!1260, !"io.write_byte"}
!1261 = distinct !{!1261, !1262, !"fmt.fmt_write_indent: %__.context_ptr"}
!1262 = distinct !{!1262, !"fmt.fmt_write_indent"}
!1263 = !{!1261}
!1264 = !{!1259, !1261}
!1265 = !{!1256}
!1266 = !{!1267, !1269}
!1267 = distinct !{!1267, !1268, !"io.write_string: argument 0"}
!1268 = distinct !{!1268, !"io.write_string"}
!1269 = distinct !{!1269, !1268, !"io.write_string: %__.context_ptr"}
!1270 = !{!1271, !1273, !1267, !1269}
!1271 = distinct !{!1271, !1272, !"io.write: argument 0"}
!1272 = distinct !{!1272, !"io.write"}
!1273 = distinct !{!1273, !1272, !"io.write: %__.context_ptr"}
!1274 = !{!1271, !1267}
!1275 = distinct !{!1275, !759}
!1276 = !{!1277}
!1277 = distinct !{!1277, !1278, !"io.write_byte: %__.context_ptr"}
!1278 = distinct !{!1278, !"io.write_byte"}
!1279 = !{!1280, !1282, !1277}
!1280 = distinct !{!1280, !1281, !"io.write: argument 0"}
!1281 = distinct !{!1281, !"io.write"}
!1282 = distinct !{!1282, !1281, !"io.write: %__.context_ptr"}
!1283 = !{!1280}
!1284 = !{!1285, !1287}
!1285 = distinct !{!1285, !1286, !"io.write_string: argument 0"}
!1286 = distinct !{!1286, !"io.write_string"}
!1287 = distinct !{!1287, !1286, !"io.write_string: %__.context_ptr"}
!1288 = !{!1289}
!1289 = distinct !{!1289, !1290, !"io.write_byte: %__.context_ptr"}
!1290 = distinct !{!1290, !"io.write_byte"}
!1291 = !{!1292, !1294, !1285, !1287}
!1292 = distinct !{!1292, !1293, !"io.write: argument 0"}
!1293 = distinct !{!1293, !"io.write"}
!1294 = distinct !{!1294, !1293, !"io.write: %__.context_ptr"}
!1295 = !{!1292, !1285}
!1296 = !{!1297, !1299, !1289}
!1297 = distinct !{!1297, !1298, !"io.write: argument 0"}
!1298 = distinct !{!1298, !"io.write"}
!1299 = distinct !{!1299, !1298, !"io.write: %__.context_ptr"}
!1300 = !{!1297}
!1301 = !{!1302, !1304, !1305}
!1302 = distinct !{!1302, !1303, !"io.write_i64: argument 0"}
!1303 = distinct !{!1303, !"io.write_i64"}
!1304 = distinct !{!1304, !1303, !"io.write_i64: %__.context_ptr"}
!1305 = distinct !{!1305, !1306, !"io.write_int: argument 0"}
!1306 = distinct !{!1306, !"io.write_int"}
!1307 = !{!1308, !1310, !1302, !1304, !1305}
!1308 = distinct !{!1308, !1309, !"strconv.append_bits: %agg.result"}
!1309 = distinct !{!1309, !"strconv.append_bits"}
!1310 = distinct !{!1310, !1309, !"strconv.append_bits: %__.context_ptr"}
!1311 = !{!1310, !1302, !1304, !1305}
!1312 = !{!1313, !1315, !1302, !1304, !1305}
!1313 = distinct !{!1313, !1314, !"io.write_string: argument 0"}
!1314 = distinct !{!1314, !"io.write_string"}
!1315 = distinct !{!1315, !1314, !"io.write_string: %__.context_ptr"}
!1316 = !{!1317}
!1317 = distinct !{!1317, !1318, !"io.write_byte: %__.context_ptr"}
!1318 = distinct !{!1318, !"io.write_byte"}
!1319 = !{!1320, !1322, !1313, !1315, !1302, !1304, !1305}
!1320 = distinct !{!1320, !1321, !"io.write: argument 0"}
!1321 = distinct !{!1321, !"io.write"}
!1322 = distinct !{!1322, !1321, !"io.write: %__.context_ptr"}
!1323 = !{!1320, !1313, !1302, !1305}
!1324 = !{!1325, !1327, !1317}
!1325 = distinct !{!1325, !1326, !"io.write: argument 0"}
!1326 = distinct !{!1326, !"io.write"}
!1327 = distinct !{!1327, !1326, !"io.write: %__.context_ptr"}
!1328 = !{!1325}
!1329 = !{!1330, !1332, !1333}
!1330 = distinct !{!1330, !1331, !"io.write_i64: argument 0"}
!1331 = distinct !{!1331, !"io.write_i64"}
!1332 = distinct !{!1332, !1331, !"io.write_i64: %__.context_ptr"}
!1333 = distinct !{!1333, !1334, !"io.write_int: argument 0"}
!1334 = distinct !{!1334, !"io.write_int"}
!1335 = !{!1336, !1338, !1330, !1332, !1333}
!1336 = distinct !{!1336, !1337, !"strconv.append_bits: %agg.result"}
!1337 = distinct !{!1337, !"strconv.append_bits"}
!1338 = distinct !{!1338, !1337, !"strconv.append_bits: %__.context_ptr"}
!1339 = !{!1338, !1330, !1332, !1333}
!1340 = !{!1341, !1343, !1330, !1332, !1333}
!1341 = distinct !{!1341, !1342, !"io.write_string: argument 0"}
!1342 = distinct !{!1342, !"io.write_string"}
!1343 = distinct !{!1343, !1342, !"io.write_string: %__.context_ptr"}
!1344 = !{!1345}
!1345 = distinct !{!1345, !1346, !"io.write_byte: %__.context_ptr"}
!1346 = distinct !{!1346, !"io.write_byte"}
!1347 = !{!1348, !1350, !1341, !1343, !1330, !1332, !1333}
!1348 = distinct !{!1348, !1349, !"io.write: argument 0"}
!1349 = distinct !{!1349, !"io.write"}
!1350 = distinct !{!1350, !1349, !"io.write: %__.context_ptr"}
!1351 = !{!1348, !1341, !1330, !1333}
!1352 = !{!1353, !1355, !1345}
!1353 = distinct !{!1353, !1354, !"io.write: argument 0"}
!1354 = distinct !{!1354, !"io.write"}
!1355 = distinct !{!1355, !1354, !"io.write: %__.context_ptr"}
!1356 = !{!1353}
!1357 = !{!1358, !1360}
!1358 = distinct !{!1358, !1359, !"io.write_string: argument 0"}
!1359 = distinct !{!1359, !"io.write_string"}
!1360 = distinct !{!1360, !1359, !"io.write_string: %__.context_ptr"}
!1361 = !{!1362, !1364, !1358, !1360}
!1362 = distinct !{!1362, !1363, !"io.write: argument 0"}
!1363 = distinct !{!1363, !"io.write"}
!1364 = distinct !{!1364, !1363, !"io.write: %__.context_ptr"}
!1365 = !{!1362, !1358}
!1366 = !{!1367}
!1367 = distinct !{!1367, !1368, !"fmt.fmt_named.ffrac-1: argument 0"}
!1368 = distinct !{!1368, !"fmt.fmt_named.ffrac-1"}
!1369 = distinct !{!1369, !759}
!1370 = !{!1371}
!1371 = distinct !{!1371, !1372, !"fmt.fmt_named.ffrac-1: argument 0"}
!1372 = distinct !{!1372, !"fmt.fmt_named.ffrac-1"}
!1373 = distinct !{!1373, !759}
!1374 = !{!1375, !1377}
!1375 = distinct !{!1375, !1376, !"io.write_string: argument 0"}
!1376 = distinct !{!1376, !"io.write_string"}
!1377 = distinct !{!1377, !1376, !"io.write_string: %__.context_ptr"}
!1378 = !{!1379, !1381, !1375, !1377}
!1379 = distinct !{!1379, !1380, !"io.write: argument 0"}
!1380 = distinct !{!1380, !"io.write"}
!1381 = distinct !{!1381, !1380, !"io.write: %__.context_ptr"}
!1382 = !{!1379, !1375}
!1383 = !{!1384, !1386, !1387, !1388, !1390}
!1384 = distinct !{!1384, !1385, !"time._abs_date-2724: argument 0"}
!1385 = distinct !{!1385, !"time._abs_date-2724"}
!1386 = distinct !{!1386, !1385, !"time._abs_date-2724: argument 1"}
!1387 = distinct !{!1387, !1385, !"time._abs_date-2724: argument 2"}
!1388 = distinct !{!1388, !1389, !"time.date: argument 0"}
!1389 = distinct !{!1389, !"time.date"}
!1390 = distinct !{!1390, !1389, !"time.date: argument 1"}
!1391 = !{!1392}
!1392 = distinct !{!1392, !1393, !"io.write_byte: %__.context_ptr"}
!1393 = distinct !{!1393, !"io.write_byte"}
!1394 = !{!1395, !1397, !1392}
!1395 = distinct !{!1395, !1396, !"io.write: argument 0"}
!1396 = distinct !{!1396, !"io.write"}
!1397 = distinct !{!1397, !1396, !"io.write: %__.context_ptr"}
!1398 = !{!1395}
!1399 = !{!1400}
!1400 = distinct !{!1400, !1401, !"io.write_byte: %__.context_ptr"}
!1401 = distinct !{!1401, !"io.write_byte"}
!1402 = !{!1403, !1405, !1400}
!1403 = distinct !{!1403, !1404, !"io.write: argument 0"}
!1404 = distinct !{!1404, !"io.write"}
!1405 = distinct !{!1405, !1404, !"io.write: %__.context_ptr"}
!1406 = !{!1403}
!1407 = !{!1408}
!1408 = distinct !{!1408, !1409, !"io.write_byte: %__.context_ptr"}
!1409 = distinct !{!1409, !"io.write_byte"}
!1410 = !{!1411, !1413, !1408}
!1411 = distinct !{!1411, !1412, !"io.write: argument 0"}
!1412 = distinct !{!1412, !"io.write"}
!1413 = distinct !{!1413, !1412, !"io.write: %__.context_ptr"}
!1414 = !{!1411}
!1415 = !{!1416}
!1416 = distinct !{!1416, !1417, !"io.write_byte: %__.context_ptr"}
!1417 = distinct !{!1417, !"io.write_byte"}
!1418 = !{!1419, !1421, !1416}
!1419 = distinct !{!1419, !1420, !"io.write: argument 0"}
!1420 = distinct !{!1420, !"io.write"}
!1421 = distinct !{!1421, !1420, !"io.write: %__.context_ptr"}
!1422 = !{!1419}
!1423 = !{!1424}
!1424 = distinct !{!1424, !1425, !"io.write_byte: %__.context_ptr"}
!1425 = distinct !{!1425, !"io.write_byte"}
!1426 = !{!1427, !1429, !1424}
!1427 = distinct !{!1427, !1428, !"io.write: argument 0"}
!1428 = distinct !{!1428, !"io.write"}
!1429 = distinct !{!1429, !1428, !"io.write: %__.context_ptr"}
!1430 = !{!1427}
!1431 = !{!1432}
!1432 = distinct !{!1432, !1433, !"io.write_byte: %__.context_ptr"}
!1433 = distinct !{!1433, !"io.write_byte"}
!1434 = !{!1435, !1437, !1432}
!1435 = distinct !{!1435, !1436, !"io.write: argument 0"}
!1436 = distinct !{!1436, !"io.write"}
!1437 = distinct !{!1437, !1436, !"io.write: %__.context_ptr"}
!1438 = !{!1435}
!1439 = !{!1440, !1442}
!1440 = distinct !{!1440, !1441, !"io.write_string: argument 0"}
!1441 = distinct !{!1441, !"io.write_string"}
!1442 = distinct !{!1442, !1441, !"io.write_string: %__.context_ptr"}
!1443 = !{!1444, !1446, !1440, !1442}
!1444 = distinct !{!1444, !1445, !"io.write: argument 0"}
!1445 = distinct !{!1445, !"io.write"}
!1446 = distinct !{!1446, !1445, !"io.write: %__.context_ptr"}
!1447 = !{!1444, !1440}
!1448 = !{!1449, !1451}
!1449 = distinct !{!1449, !1450, !"io.write_string: argument 0"}
!1450 = distinct !{!1450, !"io.write_string"}
!1451 = distinct !{!1451, !1450, !"io.write_string: %__.context_ptr"}
!1452 = !{!1453, !1455, !1449, !1451}
!1453 = distinct !{!1453, !1454, !"io.write: argument 0"}
!1454 = distinct !{!1454, !"io.write"}
!1455 = distinct !{!1455, !1454, !"io.write: %__.context_ptr"}
!1456 = !{!1453, !1449}
!1457 = !{!1458, !1460}
!1458 = distinct !{!1458, !1459, !"io.write_string: argument 0"}
!1459 = distinct !{!1459, !"io.write_string"}
!1460 = distinct !{!1460, !1459, !"io.write_string: %__.context_ptr"}
!1461 = !{!1462, !1464, !1458, !1460}
!1462 = distinct !{!1462, !1463, !"io.write: argument 0"}
!1463 = distinct !{!1463, !"io.write"}
!1464 = distinct !{!1464, !1463, !"io.write: %__.context_ptr"}
!1465 = !{!1462, !1458}
!1466 = !{!1467}
!1467 = distinct !{!1467, !1468, !"runtime.panic: %__.context_ptr"}
!1468 = distinct !{!1468, !"runtime.panic"}
!1469 = !{!1470, !1472}
!1470 = distinct !{!1470, !1471, !"io.write_string: argument 0"}
!1471 = distinct !{!1471, !"io.write_string"}
!1472 = distinct !{!1472, !1471, !"io.write_string: %__.context_ptr"}
!1473 = !{!1474, !1476, !1470, !1472}
!1474 = distinct !{!1474, !1475, !"io.write: argument 0"}
!1475 = distinct !{!1475, !"io.write"}
!1476 = distinct !{!1476, !1475, !"io.write: %__.context_ptr"}
!1477 = !{!1474, !1470}
!1478 = !{!1479, !1481}
!1479 = distinct !{!1479, !1480, !"io.write_string: argument 0"}
!1480 = distinct !{!1480, !"io.write_string"}
!1481 = distinct !{!1481, !1480, !"io.write_string: %__.context_ptr"}
!1482 = !{!1483, !1485, !1479, !1481}
!1483 = distinct !{!1483, !1484, !"io.write: argument 0"}
!1484 = distinct !{!1484, !"io.write"}
!1485 = distinct !{!1485, !1484, !"io.write: %__.context_ptr"}
!1486 = !{!1483, !1479}
!1487 = !{!1488, !1490}
!1488 = distinct !{!1488, !1489, !"io.write_string: argument 0"}
!1489 = distinct !{!1489, !"io.write_string"}
!1490 = distinct !{!1490, !1489, !"io.write_string: %__.context_ptr"}
!1491 = !{!1492, !1494, !1488, !1490}
!1492 = distinct !{!1492, !1493, !"io.write: argument 0"}
!1493 = distinct !{!1493, !"io.write"}
!1494 = distinct !{!1494, !1493, !"io.write: %__.context_ptr"}
!1495 = !{!1492, !1488}
!1496 = !{!1497}
!1497 = distinct !{!1497, !1498, !"io.write_byte: %__.context_ptr"}
!1498 = distinct !{!1498, !"io.write_byte"}
!1499 = !{!1500, !1502, !1497}
!1500 = distinct !{!1500, !1501, !"io.write: argument 0"}
!1501 = distinct !{!1501, !"io.write"}
!1502 = distinct !{!1502, !1501, !"io.write: %__.context_ptr"}
!1503 = !{!1500}
!1504 = !{!1505}
!1505 = distinct !{!1505, !1506, !"fmt.fmt_write_indent: %__.context_ptr"}
!1506 = distinct !{!1506, !"fmt.fmt_write_indent"}
!1507 = !{!1508, !1510, !1511, !1505}
!1508 = distinct !{!1508, !1509, !"io.write: argument 0"}
!1509 = distinct !{!1509, !"io.write"}
!1510 = distinct !{!1510, !1509, !"io.write: %__.context_ptr"}
!1511 = distinct !{!1511, !1512, !"io.write_byte: %__.context_ptr"}
!1512 = distinct !{!1512, !"io.write_byte"}
!1513 = !{!1511, !1505}
!1514 = !{!1508}
!1515 = !{!1516, !1518}
!1516 = distinct !{!1516, !1517, !"io.write_string: argument 0"}
!1517 = distinct !{!1517, !"io.write_string"}
!1518 = distinct !{!1518, !1517, !"io.write_string: %__.context_ptr"}
!1519 = !{!1520, !1522, !1516, !1518}
!1520 = distinct !{!1520, !1521, !"io.write: argument 0"}
!1521 = distinct !{!1521, !"io.write"}
!1522 = distinct !{!1522, !1521, !"io.write: %__.context_ptr"}
!1523 = !{!1520, !1516}
!1524 = distinct !{!1524, !759}
!1525 = !{!1526, !1528}
!1526 = distinct !{!1526, !1527, !"io.write_string: argument 0"}
!1527 = distinct !{!1527, !"io.write_string"}
!1528 = distinct !{!1528, !1527, !"io.write_string: %__.context_ptr"}
!1529 = !{!1530, !1532, !1526, !1528}
!1530 = distinct !{!1530, !1531, !"io.write: argument 0"}
!1531 = distinct !{!1531, !"io.write"}
!1532 = distinct !{!1532, !1531, !"io.write: %__.context_ptr"}
!1533 = !{!1530, !1526}
!1534 = !{!1535, !1537}
!1535 = distinct !{!1535, !1536, !"io.write_string: argument 0"}
!1536 = distinct !{!1536, !"io.write_string"}
!1537 = distinct !{!1537, !1536, !"io.write_string: %__.context_ptr"}
!1538 = !{!1539, !1541, !1535, !1537}
!1539 = distinct !{!1539, !1540, !"io.write: argument 0"}
!1540 = distinct !{!1540, !"io.write"}
!1541 = distinct !{!1541, !1540, !"io.write: %__.context_ptr"}
!1542 = !{!1539, !1535}
!1543 = !{!1544, !1546}
!1544 = distinct !{!1544, !1545, !"io.write_string: argument 0"}
!1545 = distinct !{!1545, !"io.write_string"}
!1546 = distinct !{!1546, !1545, !"io.write_string: %__.context_ptr"}
!1547 = !{!1548, !1550, !1544, !1546}
!1548 = distinct !{!1548, !1549, !"io.write: argument 0"}
!1549 = distinct !{!1549, !"io.write"}
!1550 = distinct !{!1550, !1549, !"io.write: %__.context_ptr"}
!1551 = !{!1548, !1544}
!1552 = distinct !{!1552, !759}
!1553 = !{!1554}
!1554 = distinct !{!1554, !1555, !"io.write_byte: %__.context_ptr"}
!1555 = distinct !{!1555, !"io.write_byte"}
!1556 = !{!1557}
!1557 = distinct !{!1557, !1558, !"fmt.fmt_write_indent: %__.context_ptr"}
!1558 = distinct !{!1558, !"fmt.fmt_write_indent"}
!1559 = !{!1560, !1557}
!1560 = distinct !{!1560, !1561, !"io.write_byte: %__.context_ptr"}
!1561 = distinct !{!1561, !"io.write_byte"}
!1562 = !{!1563, !1565, !1560, !1557}
!1563 = distinct !{!1563, !1564, !"io.write: argument 0"}
!1564 = distinct !{!1564, !"io.write"}
!1565 = distinct !{!1565, !1564, !"io.write: %__.context_ptr"}
!1566 = !{!1563}
!1567 = !{!1568, !1570, !1554}
!1568 = distinct !{!1568, !1569, !"io.write: argument 0"}
!1569 = distinct !{!1569, !"io.write"}
!1570 = distinct !{!1570, !1569, !"io.write: %__.context_ptr"}
!1571 = !{!1568}
!1572 = !{!1573, !1575}
!1573 = distinct !{!1573, !1574, !"io.write_string: argument 0"}
!1574 = distinct !{!1574, !"io.write_string"}
!1575 = distinct !{!1575, !1574, !"io.write_string: %__.context_ptr"}
!1576 = !{!1577, !1579, !1573, !1575}
!1577 = distinct !{!1577, !1578, !"io.write: argument 0"}
!1578 = distinct !{!1578, !"io.write"}
!1579 = distinct !{!1579, !1578, !"io.write: %__.context_ptr"}
!1580 = !{!1577, !1573}
!1581 = !{!1582, !1584}
!1582 = distinct !{!1582, !1583, !"io.write_string: argument 0"}
!1583 = distinct !{!1583, !"io.write_string"}
!1584 = distinct !{!1584, !1583, !"io.write_string: %__.context_ptr"}
!1585 = !{!1586, !1588, !1582, !1584}
!1586 = distinct !{!1586, !1587, !"io.write: argument 0"}
!1587 = distinct !{!1587, !"io.write"}
!1588 = distinct !{!1588, !1587, !"io.write: %__.context_ptr"}
!1589 = !{!1586, !1582}
!1590 = !{!1591, !1593}
!1591 = distinct !{!1591, !1592, !"io.write_string: argument 0"}
!1592 = distinct !{!1592, !"io.write_string"}
!1593 = distinct !{!1593, !1592, !"io.write_string: %__.context_ptr"}
!1594 = !{!1595, !1597, !1591, !1593}
!1595 = distinct !{!1595, !1596, !"io.write: argument 0"}
!1596 = distinct !{!1596, !"io.write"}
!1597 = distinct !{!1597, !1596, !"io.write: %__.context_ptr"}
!1598 = !{!1595, !1591}
!1599 = !{!1600, !1602}
!1600 = distinct !{!1600, !1601, !"io.write_string: argument 0"}
!1601 = distinct !{!1601, !"io.write_string"}
!1602 = distinct !{!1602, !1601, !"io.write_string: %__.context_ptr"}
!1603 = !{!1604, !1606, !1600, !1602}
!1604 = distinct !{!1604, !1605, !"io.write: argument 0"}
!1605 = distinct !{!1605, !"io.write"}
!1606 = distinct !{!1606, !1605, !"io.write: %__.context_ptr"}
!1607 = !{!1604, !1600}
!1608 = !{!1609, !1611}
!1609 = distinct !{!1609, !1610, !"io.write_string: argument 0"}
!1610 = distinct !{!1610, !"io.write_string"}
!1611 = distinct !{!1611, !1610, !"io.write_string: %__.context_ptr"}
!1612 = !{!1613, !1615, !1609, !1611}
!1613 = distinct !{!1613, !1614, !"io.write: argument 0"}
!1614 = distinct !{!1614, !"io.write"}
!1615 = distinct !{!1615, !1614, !"io.write: %__.context_ptr"}
!1616 = !{!1613, !1609}
!1617 = !{!1618}
!1618 = distinct !{!1618, !1619, !"fmt.fmt_write_indent: %__.context_ptr"}
!1619 = distinct !{!1619, !"fmt.fmt_write_indent"}
!1620 = !{!1621, !1623, !1624, !1618}
!1621 = distinct !{!1621, !1622, !"io.write: argument 0"}
!1622 = distinct !{!1622, !"io.write"}
!1623 = distinct !{!1623, !1622, !"io.write: %__.context_ptr"}
!1624 = distinct !{!1624, !1625, !"io.write_byte: %__.context_ptr"}
!1625 = distinct !{!1625, !"io.write_byte"}
!1626 = !{!1624, !1618}
!1627 = !{!1621}
!1628 = !{!1629}
!1629 = distinct !{!1629, !1630, !"io.write_byte: %__.context_ptr"}
!1630 = distinct !{!1630, !"io.write_byte"}
!1631 = !{!1632, !1634}
!1632 = distinct !{!1632, !1633, !"io.write_string: argument 0"}
!1633 = distinct !{!1633, !"io.write_string"}
!1634 = distinct !{!1634, !1633, !"io.write_string: %__.context_ptr"}
!1635 = !{!1636, !1638, !1629}
!1636 = distinct !{!1636, !1637, !"io.write: argument 0"}
!1637 = distinct !{!1637, !"io.write"}
!1638 = distinct !{!1638, !1637, !"io.write: %__.context_ptr"}
!1639 = !{!1636}
!1640 = !{!1641, !1643, !1632, !1634}
!1641 = distinct !{!1641, !1642, !"io.write: argument 0"}
!1642 = distinct !{!1642, !"io.write"}
!1643 = distinct !{!1643, !1642, !"io.write: %__.context_ptr"}
!1644 = !{!1641, !1632}
!1645 = !{!1646, !1648}
!1646 = distinct !{!1646, !1647, !"io.write_i64: argument 0"}
!1647 = distinct !{!1647, !"io.write_i64"}
!1648 = distinct !{!1648, !1647, !"io.write_i64: %__.context_ptr"}
!1649 = !{!1650, !1652, !1646, !1648}
!1650 = distinct !{!1650, !1651, !"strconv.append_bits: %agg.result"}
!1651 = distinct !{!1651, !"strconv.append_bits"}
!1652 = distinct !{!1652, !1651, !"strconv.append_bits: %__.context_ptr"}
!1653 = !{!1652, !1646, !1648}
!1654 = !{!1655, !1657, !1646, !1648}
!1655 = distinct !{!1655, !1656, !"io.write_string: argument 0"}
!1656 = distinct !{!1656, !"io.write_string"}
!1657 = distinct !{!1657, !1656, !"io.write_string: %__.context_ptr"}
!1658 = !{!1659, !1661, !1655, !1657, !1646, !1648}
!1659 = distinct !{!1659, !1660, !"io.write: argument 0"}
!1660 = distinct !{!1660, !"io.write"}
!1661 = distinct !{!1661, !1660, !"io.write: %__.context_ptr"}
!1662 = !{!1659, !1655, !1646}
!1663 = !{!1664, !1666}
!1664 = distinct !{!1664, !1665, !"io.write_string: argument 0"}
!1665 = distinct !{!1665, !"io.write_string"}
!1666 = distinct !{!1666, !1665, !"io.write_string: %__.context_ptr"}
!1667 = !{!1668, !1670, !1664, !1666}
!1668 = distinct !{!1668, !1669, !"io.write: argument 0"}
!1669 = distinct !{!1669, !"io.write"}
!1670 = distinct !{!1670, !1669, !"io.write: %__.context_ptr"}
!1671 = !{!1668, !1664}
!1672 = !{!1673, !1675}
!1673 = distinct !{!1673, !1674, !"io.write_string: argument 0"}
!1674 = distinct !{!1674, !"io.write_string"}
!1675 = distinct !{!1675, !1674, !"io.write_string: %__.context_ptr"}
!1676 = !{!1677, !1679, !1673, !1675}
!1677 = distinct !{!1677, !1678, !"io.write: argument 0"}
!1678 = distinct !{!1678, !"io.write"}
!1679 = distinct !{!1679, !1678, !"io.write: %__.context_ptr"}
!1680 = !{!1677, !1673}
!1681 = !{!1682, !1684}
!1682 = distinct !{!1682, !1683, !"io.write_string: argument 0"}
!1683 = distinct !{!1683, !"io.write_string"}
!1684 = distinct !{!1684, !1683, !"io.write_string: %__.context_ptr"}
!1685 = !{!1686, !1688, !1682, !1684}
!1686 = distinct !{!1686, !1687, !"io.write: argument 0"}
!1687 = distinct !{!1687, !"io.write"}
!1688 = distinct !{!1688, !1687, !"io.write: %__.context_ptr"}
!1689 = !{!1686, !1682}
!1690 = !{!1691}
!1691 = distinct !{!1691, !1692, !"io.write_byte: %__.context_ptr"}
!1692 = distinct !{!1692, !"io.write_byte"}
!1693 = !{!1694, !1696}
!1694 = distinct !{!1694, !1695, !"io.write_string: argument 0"}
!1695 = distinct !{!1695, !"io.write_string"}
!1696 = distinct !{!1696, !1695, !"io.write_string: %__.context_ptr"}
!1697 = !{!1698, !1700, !1691}
!1698 = distinct !{!1698, !1699, !"io.write: argument 0"}
!1699 = distinct !{!1699, !"io.write"}
!1700 = distinct !{!1700, !1699, !"io.write: %__.context_ptr"}
!1701 = !{!1698}
!1702 = !{!1703, !1705, !1694, !1696}
!1703 = distinct !{!1703, !1704, !"io.write: argument 0"}
!1704 = distinct !{!1704, !"io.write"}
!1705 = distinct !{!1705, !1704, !"io.write: %__.context_ptr"}
!1706 = !{!1703, !1694}
!1707 = !{!1708, !1710}
!1708 = distinct !{!1708, !1709, !"io.write_i64: argument 0"}
!1709 = distinct !{!1709, !"io.write_i64"}
!1710 = distinct !{!1710, !1709, !"io.write_i64: %__.context_ptr"}
!1711 = !{!1712, !1714, !1708, !1710}
!1712 = distinct !{!1712, !1713, !"strconv.append_bits: %agg.result"}
!1713 = distinct !{!1713, !"strconv.append_bits"}
!1714 = distinct !{!1714, !1713, !"strconv.append_bits: %__.context_ptr"}
!1715 = !{!1714, !1708, !1710}
!1716 = !{!1717, !1719, !1708, !1710}
!1717 = distinct !{!1717, !1718, !"io.write_string: argument 0"}
!1718 = distinct !{!1718, !"io.write_string"}
!1719 = distinct !{!1719, !1718, !"io.write_string: %__.context_ptr"}
!1720 = !{!1721, !1723, !1717, !1719, !1708, !1710}
!1721 = distinct !{!1721, !1722, !"io.write: argument 0"}
!1722 = distinct !{!1722, !"io.write"}
!1723 = distinct !{!1723, !1722, !"io.write: %__.context_ptr"}
!1724 = !{!1721, !1717, !1708}
!1725 = !{!1726, !1728}
!1726 = distinct !{!1726, !1727, !"io.write_string: argument 0"}
!1727 = distinct !{!1727, !"io.write_string"}
!1728 = distinct !{!1728, !1727, !"io.write_string: %__.context_ptr"}
!1729 = !{!1730, !1732, !1726, !1728}
!1730 = distinct !{!1730, !1731, !"io.write: argument 0"}
!1731 = distinct !{!1731, !"io.write"}
!1732 = distinct !{!1732, !1731, !"io.write: %__.context_ptr"}
!1733 = !{!1730, !1726}
!1734 = !{!1735, !1737}
!1735 = distinct !{!1735, !1736, !"io.write_string: argument 0"}
!1736 = distinct !{!1736, !"io.write_string"}
!1737 = distinct !{!1737, !1736, !"io.write_string: %__.context_ptr"}
!1738 = !{!1739, !1741, !1735, !1737}
!1739 = distinct !{!1739, !1740, !"io.write: argument 0"}
!1740 = distinct !{!1740, !"io.write"}
!1741 = distinct !{!1741, !1740, !"io.write: %__.context_ptr"}
!1742 = !{!1739, !1735}
!1743 = distinct !{!1743, !759}
!1744 = !{!1745, !1747}
!1745 = distinct !{!1745, !1746, !"io.write_string: argument 0"}
!1746 = distinct !{!1746, !"io.write_string"}
!1747 = distinct !{!1747, !1746, !"io.write_string: %__.context_ptr"}
!1748 = !{!1749, !1751, !1745, !1747}
!1749 = distinct !{!1749, !1750, !"io.write: argument 0"}
!1750 = distinct !{!1750, !"io.write"}
!1751 = distinct !{!1751, !1750, !"io.write: %__.context_ptr"}
!1752 = !{!1749, !1745}
!1753 = !{!1754, !1756}
!1754 = distinct !{!1754, !1755, !"io.write_string: argument 0"}
!1755 = distinct !{!1755, !"io.write_string"}
!1756 = distinct !{!1756, !1755, !"io.write_string: %__.context_ptr"}
!1757 = !{!1758, !1760, !1754, !1756}
!1758 = distinct !{!1758, !1759, !"io.write: argument 0"}
!1759 = distinct !{!1759, !"io.write"}
!1760 = distinct !{!1760, !1759, !"io.write: %__.context_ptr"}
!1761 = !{!1758, !1754}
!1762 = !{!1763}
!1763 = distinct !{!1763, !1764, !"runtime.map_cell_index_dynamic: argument 0"}
!1764 = distinct !{!1764, !"runtime.map_cell_index_dynamic"}
!1765 = !{!1766}
!1766 = distinct !{!1766, !1767, !"runtime.map_cell_index_dynamic: argument 0"}
!1767 = distinct !{!1767, !"runtime.map_cell_index_dynamic"}
!1768 = !{!1769, !1771}
!1769 = distinct !{!1769, !1770, !"io.write_string: argument 0"}
!1770 = distinct !{!1770, !"io.write_string"}
!1771 = distinct !{!1771, !1770, !"io.write_string: %__.context_ptr"}
!1772 = !{!1773, !1775, !1769, !1771}
!1773 = distinct !{!1773, !1774, !"io.write: argument 0"}
!1774 = distinct !{!1774, !"io.write"}
!1775 = distinct !{!1775, !1774, !"io.write: %__.context_ptr"}
!1776 = !{!1773, !1769}
!1777 = !{!1778, !1780}
!1778 = distinct !{!1778, !1779, !"io.write_string: argument 0"}
!1779 = distinct !{!1779, !"io.write_string"}
!1780 = distinct !{!1780, !1779, !"io.write_string: %__.context_ptr"}
!1781 = !{!1782, !1784, !1778, !1780}
!1782 = distinct !{!1782, !1783, !"io.write: argument 0"}
!1783 = distinct !{!1783, !"io.write"}
!1784 = distinct !{!1784, !1783, !"io.write: %__.context_ptr"}
!1785 = !{!1782, !1778}
!1786 = !{!1787, !1789}
!1787 = distinct !{!1787, !1788, !"reflect.write_typeid_writer: argument 0"}
!1788 = distinct !{!1788, !"reflect.write_typeid_writer"}
!1789 = distinct !{!1789, !1788, !"reflect.write_typeid_writer: %__.context_ptr"}
!1790 = !{!1787}
!1791 = !{!1792, !1794}
!1792 = distinct !{!1792, !1793, !"io.write_string: argument 0"}
!1793 = distinct !{!1793, !"io.write_string"}
!1794 = distinct !{!1794, !1793, !"io.write_string: %__.context_ptr"}
!1795 = !{!1796, !1798, !1792, !1794}
!1796 = distinct !{!1796, !1797, !"io.write: argument 0"}
!1797 = distinct !{!1797, !"io.write"}
!1798 = distinct !{!1798, !1797, !"io.write: %__.context_ptr"}
!1799 = !{!1796, !1792}
!1800 = !{!1801, !1803}
!1801 = distinct !{!1801, !1802, !"reflect.write_typeid_writer: argument 0"}
!1802 = distinct !{!1802, !"reflect.write_typeid_writer"}
!1803 = distinct !{!1803, !1802, !"reflect.write_typeid_writer: %__.context_ptr"}
!1804 = !{!1801}
!1805 = !{!1806, !1808}
!1806 = distinct !{!1806, !1807, !"io.write_rune: argument 0"}
!1807 = distinct !{!1807, !"io.write_rune"}
!1808 = distinct !{!1808, !1807, !"io.write_rune: %__.context_ptr"}
!1809 = !{!1810, !1806, !1808}
!1810 = distinct !{!1810, !1811, !"io.write_byte: %__.context_ptr"}
!1811 = distinct !{!1811, !"io.write_byte"}
!1812 = !{!1813, !1815, !1810, !1806, !1808}
!1813 = distinct !{!1813, !1814, !"io.write: argument 0"}
!1814 = distinct !{!1814, !"io.write"}
!1815 = distinct !{!1815, !1814, !"io.write: %__.context_ptr"}
!1816 = !{!1813, !1806}
!1817 = !{!1818, !1820}
!1818 = distinct !{!1818, !1819, !"io.write_rune: argument 0"}
!1819 = distinct !{!1819, !"io.write_rune"}
!1820 = distinct !{!1820, !1819, !"io.write_rune: %__.context_ptr"}
!1821 = !{!1822, !1818, !1820}
!1822 = distinct !{!1822, !1823, !"io.write_byte: %__.context_ptr"}
!1823 = distinct !{!1823, !"io.write_byte"}
!1824 = !{!1825, !1827, !1822, !1818, !1820}
!1825 = distinct !{!1825, !1826, !"io.write: argument 0"}
!1826 = distinct !{!1826, !"io.write"}
!1827 = distinct !{!1827, !1826, !"io.write: %__.context_ptr"}
!1828 = !{!1825, !1818}
!1829 = !{!1830, !1832}
!1830 = distinct !{!1830, !1831, !"io.write_rune: argument 0"}
!1831 = distinct !{!1831, !"io.write_rune"}
!1832 = distinct !{!1832, !1831, !"io.write_rune: %__.context_ptr"}
!1833 = !{!1834, !1830, !1832}
!1834 = distinct !{!1834, !1835, !"io.write_byte: %__.context_ptr"}
!1835 = distinct !{!1835, !"io.write_byte"}
!1836 = !{!1837, !1839, !1834, !1830, !1832}
!1837 = distinct !{!1837, !1838, !"io.write: argument 0"}
!1838 = distinct !{!1838, !"io.write"}
!1839 = distinct !{!1839, !1838, !"io.write: %__.context_ptr"}
!1840 = !{!1837, !1830}
!1841 = !{!1842, !1844}
!1842 = distinct !{!1842, !1843, !"io.write_rune: argument 0"}
!1843 = distinct !{!1843, !"io.write_rune"}
!1844 = distinct !{!1844, !1843, !"io.write_rune: %__.context_ptr"}
!1845 = !{!1846, !1842, !1844}
!1846 = distinct !{!1846, !1847, !"io.write_byte: %__.context_ptr"}
!1847 = distinct !{!1847, !"io.write_byte"}
!1848 = !{!1849, !1851, !1846, !1842, !1844}
!1849 = distinct !{!1849, !1850, !"io.write: argument 0"}
!1850 = distinct !{!1850, !"io.write"}
!1851 = distinct !{!1851, !1850, !"io.write: %__.context_ptr"}
!1852 = !{!1849, !1842}
!1853 = !{!1854, !1856}
!1854 = distinct !{!1854, !1855, !"io.write_rune: argument 0"}
!1855 = distinct !{!1855, !"io.write_rune"}
!1856 = distinct !{!1856, !1855, !"io.write_rune: %__.context_ptr"}
!1857 = !{!1858, !1854, !1856}
!1858 = distinct !{!1858, !1859, !"io.write_byte: %__.context_ptr"}
!1859 = distinct !{!1859, !"io.write_byte"}
!1860 = !{!1861, !1863, !1858, !1854, !1856}
!1861 = distinct !{!1861, !1862, !"io.write: argument 0"}
!1862 = distinct !{!1862, !"io.write"}
!1863 = distinct !{!1863, !1862, !"io.write: %__.context_ptr"}
!1864 = !{!1861, !1854}
!1865 = !{!1866, !1868}
!1866 = distinct !{!1866, !1867, !"io.write_rune: argument 0"}
!1867 = distinct !{!1867, !"io.write_rune"}
!1868 = distinct !{!1868, !1867, !"io.write_rune: %__.context_ptr"}
!1869 = !{!1870, !1866, !1868}
!1870 = distinct !{!1870, !1871, !"io.write_byte: %__.context_ptr"}
!1871 = distinct !{!1871, !"io.write_byte"}
!1872 = !{!1873, !1875, !1870, !1866, !1868}
!1873 = distinct !{!1873, !1874, !"io.write: argument 0"}
!1874 = distinct !{!1874, !"io.write"}
!1875 = distinct !{!1875, !1874, !"io.write: %__.context_ptr"}
!1876 = !{!1873, !1866}
!1877 = !{!1878, !1880}
!1878 = distinct !{!1878, !1879, !"io.write_rune: argument 0"}
!1879 = distinct !{!1879, !"io.write_rune"}
!1880 = distinct !{!1880, !1879, !"io.write_rune: %__.context_ptr"}
!1881 = !{!1882, !1878, !1880}
!1882 = distinct !{!1882, !1883, !"io.write_byte: %__.context_ptr"}
!1883 = distinct !{!1883, !"io.write_byte"}
!1884 = !{!1885, !1887, !1882, !1878, !1880}
!1885 = distinct !{!1885, !1886, !"io.write: argument 0"}
!1886 = distinct !{!1886, !"io.write"}
!1887 = distinct !{!1887, !1886, !"io.write: %__.context_ptr"}
!1888 = !{!1885, !1878}
!1889 = !{!1890, !1892}
!1890 = distinct !{!1890, !1891, !"io.write_rune: argument 0"}
!1891 = distinct !{!1891, !"io.write_rune"}
!1892 = distinct !{!1892, !1891, !"io.write_rune: %__.context_ptr"}
!1893 = !{!1894, !1890, !1892}
!1894 = distinct !{!1894, !1895, !"io.write_byte: %__.context_ptr"}
!1895 = distinct !{!1895, !"io.write_byte"}
!1896 = !{!1897, !1899, !1894, !1890, !1892}
!1897 = distinct !{!1897, !1898, !"io.write: argument 0"}
!1898 = distinct !{!1898, !"io.write"}
!1899 = distinct !{!1899, !1898, !"io.write: %__.context_ptr"}
!1900 = !{!1897, !1890}
!1901 = !{!1902, !1904}
!1902 = distinct !{!1902, !1903, !"io.write_string: argument 0"}
!1903 = distinct !{!1903, !"io.write_string"}
!1904 = distinct !{!1904, !1903, !"io.write_string: %__.context_ptr"}
!1905 = !{!1906, !1908, !1902, !1904}
!1906 = distinct !{!1906, !1907, !"io.write: argument 0"}
!1907 = distinct !{!1907, !"io.write"}
!1908 = distinct !{!1908, !1907, !"io.write: %__.context_ptr"}
!1909 = !{!1906, !1902}
!1910 = !{!1911, !1913}
!1911 = distinct !{!1911, !1912, !"reflect.write_typeid_writer: argument 0"}
!1912 = distinct !{!1912, !"reflect.write_typeid_writer"}
!1913 = distinct !{!1913, !1912, !"reflect.write_typeid_writer: %__.context_ptr"}
!1914 = !{!1911}
!1915 = !{i128 0, i128 129}
!1916 = !{!1917, !1919}
!1917 = distinct !{!1917, !1918, !"strconv.append_bits: %agg.result"}
!1918 = distinct !{!1918, !"strconv.append_bits"}
!1919 = distinct !{!1919, !1918, !"strconv.append_bits: %__.context_ptr"}
!1920 = !{!1919}
!1921 = !{!1922, !1924}
!1922 = distinct !{!1922, !1923, !"io.write_string: argument 0"}
!1923 = distinct !{!1923, !"io.write_string"}
!1924 = distinct !{!1924, !1923, !"io.write_string: %__.context_ptr"}
!1925 = !{!1926, !1928, !1922, !1924}
!1926 = distinct !{!1926, !1927, !"io.write: argument 0"}
!1927 = distinct !{!1927, !"io.write"}
!1928 = distinct !{!1928, !1927, !"io.write: %__.context_ptr"}
!1929 = !{!1926, !1922}
!1930 = !{!1931}
!1931 = distinct !{!1931, !1932, !"io.write_byte: %__.context_ptr"}
!1932 = distinct !{!1932, !"io.write_byte"}
!1933 = !{!1934, !1936, !1931}
!1934 = distinct !{!1934, !1935, !"io.write: argument 0"}
!1935 = distinct !{!1935, !"io.write"}
!1936 = distinct !{!1936, !1935, !"io.write: %__.context_ptr"}
!1937 = !{!1934}
!1938 = !{!1939, !1941}
!1939 = distinct !{!1939, !1940, !"io.write_string: argument 0"}
!1940 = distinct !{!1940, !"io.write_string"}
!1941 = distinct !{!1941, !1940, !"io.write_string: %__.context_ptr"}
!1942 = !{!1943, !1945, !1939, !1941}
!1943 = distinct !{!1943, !1944, !"io.write: argument 0"}
!1944 = distinct !{!1944, !"io.write"}
!1945 = distinct !{!1945, !1944, !"io.write: %__.context_ptr"}
!1946 = !{!1943, !1939}
!1947 = !{!1948, !1950}
!1948 = distinct !{!1948, !1949, !"io.write_string: argument 0"}
!1949 = distinct !{!1949, !"io.write_string"}
!1950 = distinct !{!1950, !1949, !"io.write_string: %__.context_ptr"}
!1951 = !{!1952, !1954, !1948, !1950}
!1952 = distinct !{!1952, !1953, !"io.write: argument 0"}
!1953 = distinct !{!1953, !"io.write"}
!1954 = distinct !{!1954, !1953, !"io.write: %__.context_ptr"}
!1955 = !{!1952, !1948}
!1956 = !{!1957, !1959}
!1957 = distinct !{!1957, !1958, !"io.write_string: argument 0"}
!1958 = distinct !{!1958, !"io.write_string"}
!1959 = distinct !{!1959, !1958, !"io.write_string: %__.context_ptr"}
!1960 = !{!1961, !1963, !1957, !1959}
!1961 = distinct !{!1961, !1962, !"io.write: argument 0"}
!1962 = distinct !{!1962, !"io.write"}
!1963 = distinct !{!1963, !1962, !"io.write: %__.context_ptr"}
!1964 = !{!1961, !1957}
!1965 = !{!1966, !1968}
!1966 = distinct !{!1966, !1967, !"io.write_string: argument 0"}
!1967 = distinct !{!1967, !"io.write_string"}
!1968 = distinct !{!1968, !1967, !"io.write_string: %__.context_ptr"}
!1969 = !{!1970, !1972, !1966, !1968}
!1970 = distinct !{!1970, !1971, !"io.write: argument 0"}
!1971 = distinct !{!1971, !"io.write"}
!1972 = distinct !{!1972, !1971, !"io.write: %__.context_ptr"}
!1973 = !{!1970, !1966}
!1974 = !{!1975, !1977}
!1975 = distinct !{!1975, !1976, !"io.write_string: argument 0"}
!1976 = distinct !{!1976, !"io.write_string"}
!1977 = distinct !{!1977, !1976, !"io.write_string: %__.context_ptr"}
!1978 = !{!1979, !1981, !1975, !1977}
!1979 = distinct !{!1979, !1980, !"io.write: argument 0"}
!1980 = distinct !{!1980, !"io.write"}
!1981 = distinct !{!1981, !1980, !"io.write: %__.context_ptr"}
!1982 = !{!1979, !1975}
!1983 = !{!1984, !1986}
!1984 = distinct !{!1984, !1985, !"io.write_string: argument 0"}
!1985 = distinct !{!1985, !"io.write_string"}
!1986 = distinct !{!1986, !1985, !"io.write_string: %__.context_ptr"}
!1987 = !{!1988, !1990, !1984, !1986}
!1988 = distinct !{!1988, !1989, !"io.write: argument 0"}
!1989 = distinct !{!1989, !"io.write"}
!1990 = distinct !{!1990, !1989, !"io.write: %__.context_ptr"}
!1991 = !{!1988, !1984}
!1992 = !{!1993, !1995}
!1993 = distinct !{!1993, !1994, !"io.write_string: argument 0"}
!1994 = distinct !{!1994, !"io.write_string"}
!1995 = distinct !{!1995, !1994, !"io.write_string: %__.context_ptr"}
!1996 = !{!1997, !1999, !1993, !1995}
!1997 = distinct !{!1997, !1998, !"io.write: argument 0"}
!1998 = distinct !{!1998, !"io.write"}
!1999 = distinct !{!1999, !1998, !"io.write: %__.context_ptr"}
!2000 = !{!1997, !1993}
!2001 = !{!2002, !2004}
!2002 = distinct !{!2002, !2003, !"io.write_string: argument 0"}
!2003 = distinct !{!2003, !"io.write_string"}
!2004 = distinct !{!2004, !2003, !"io.write_string: %__.context_ptr"}
!2005 = !{!2006, !2008, !2002, !2004}
!2006 = distinct !{!2006, !2007, !"io.write: argument 0"}
!2007 = distinct !{!2007, !"io.write"}
!2008 = distinct !{!2008, !2007, !"io.write: %__.context_ptr"}
!2009 = !{!2006, !2002}
!2010 = !{!2011, !2013}
!2011 = distinct !{!2011, !2012, !"io.write_string: argument 0"}
!2012 = distinct !{!2012, !"io.write_string"}
!2013 = distinct !{!2013, !2012, !"io.write_string: %__.context_ptr"}
!2014 = !{!2015, !2017, !2011, !2013}
!2015 = distinct !{!2015, !2016, !"io.write: argument 0"}
!2016 = distinct !{!2016, !"io.write"}
!2017 = distinct !{!2017, !2016, !"io.write: %__.context_ptr"}
!2018 = !{!2015, !2011}
!2019 = !{!2020, !2022}
!2020 = distinct !{!2020, !2021, !"io.write_string: argument 0"}
!2021 = distinct !{!2021, !"io.write_string"}
!2022 = distinct !{!2022, !2021, !"io.write_string: %__.context_ptr"}
!2023 = !{!2024, !2026, !2020, !2022}
!2024 = distinct !{!2024, !2025, !"io.write: argument 0"}
!2025 = distinct !{!2025, !"io.write"}
!2026 = distinct !{!2026, !2025, !"io.write: %__.context_ptr"}
!2027 = !{!2024, !2020}
!2028 = !{!2029, !2031}
!2029 = distinct !{!2029, !2030, !"io.write_string: argument 0"}
!2030 = distinct !{!2030, !"io.write_string"}
!2031 = distinct !{!2031, !2030, !"io.write_string: %__.context_ptr"}
!2032 = !{!2033, !2035, !2029, !2031}
!2033 = distinct !{!2033, !2034, !"io.write: argument 0"}
!2034 = distinct !{!2034, !"io.write"}
!2035 = distinct !{!2035, !2034, !"io.write: %__.context_ptr"}
!2036 = !{!2033, !2029}
!2037 = !{!2038}
!2038 = distinct !{!2038, !2039, !"io.write_byte: %__.context_ptr"}
!2039 = distinct !{!2039, !"io.write_byte"}
!2040 = !{!2041, !2043, !2038}
!2041 = distinct !{!2041, !2042, !"io.write: argument 0"}
!2042 = distinct !{!2042, !"io.write"}
!2043 = distinct !{!2043, !2042, !"io.write: %__.context_ptr"}
!2044 = !{!2041}
!2045 = !{!2046}
!2046 = distinct !{!2046, !2047, !"io.write_byte: %__.context_ptr"}
!2047 = distinct !{!2047, !"io.write_byte"}
!2048 = !{!2049, !2051, !2046}
!2049 = distinct !{!2049, !2050, !"io.write: argument 0"}
!2050 = distinct !{!2050, !"io.write"}
!2051 = distinct !{!2051, !2050, !"io.write: %__.context_ptr"}
!2052 = !{!2049}
!2053 = !{!2054}
!2054 = distinct !{!2054, !2055, !"io.write_byte: %__.context_ptr"}
!2055 = distinct !{!2055, !"io.write_byte"}
!2056 = !{!2057, !2059, !2054}
!2057 = distinct !{!2057, !2058, !"io.write: argument 0"}
!2058 = distinct !{!2058, !"io.write"}
!2059 = distinct !{!2059, !2058, !"io.write: %__.context_ptr"}
!2060 = !{!2057}
!2061 = !{!2062, !2064}
!2062 = distinct !{!2062, !2063, !"io.write_string: argument 0"}
!2063 = distinct !{!2063, !"io.write_string"}
!2064 = distinct !{!2064, !2063, !"io.write_string: %__.context_ptr"}
!2065 = !{!2066, !2068, !2062, !2064}
!2066 = distinct !{!2066, !2067, !"io.write: argument 0"}
!2067 = distinct !{!2067, !"io.write"}
!2068 = distinct !{!2068, !2067, !"io.write: %__.context_ptr"}
!2069 = !{!2066, !2062}
!2070 = !{!2071, !2073}
!2071 = distinct !{!2071, !2072, !"io.write_string: argument 0"}
!2072 = distinct !{!2072, !"io.write_string"}
!2073 = distinct !{!2073, !2072, !"io.write_string: %__.context_ptr"}
!2074 = !{!2075, !2077, !2071, !2073}
!2075 = distinct !{!2075, !2076, !"io.write: argument 0"}
!2076 = distinct !{!2076, !"io.write"}
!2077 = distinct !{!2077, !2076, !"io.write: %__.context_ptr"}
!2078 = !{!2075, !2071}
!2079 = !{!2080, !2082}
!2080 = distinct !{!2080, !2081, !"io.write_string: argument 0"}
!2081 = distinct !{!2081, !"io.write_string"}
!2082 = distinct !{!2082, !2081, !"io.write_string: %__.context_ptr"}
!2083 = !{!2084, !2086, !2080, !2082}
!2084 = distinct !{!2084, !2085, !"io.write: argument 0"}
!2085 = distinct !{!2085, !"io.write"}
!2086 = distinct !{!2086, !2085, !"io.write: %__.context_ptr"}
!2087 = !{!2084, !2080}
!2088 = !{!2089, !2091}
!2089 = distinct !{!2089, !2090, !"io.write_string: argument 0"}
!2090 = distinct !{!2090, !"io.write_string"}
!2091 = distinct !{!2091, !2090, !"io.write_string: %__.context_ptr"}
!2092 = !{!2093, !2095, !2089, !2091}
!2093 = distinct !{!2093, !2094, !"io.write: argument 0"}
!2094 = distinct !{!2094, !"io.write"}
!2095 = distinct !{!2095, !2094, !"io.write: %__.context_ptr"}
!2096 = !{!2093, !2089}
!2097 = !{!2098, !2100}
!2098 = distinct !{!2098, !2099, !"io.write_string: argument 0"}
!2099 = distinct !{!2099, !"io.write_string"}
!2100 = distinct !{!2100, !2099, !"io.write_string: %__.context_ptr"}
!2101 = !{!2102, !2104, !2098, !2100}
!2102 = distinct !{!2102, !2103, !"io.write: argument 0"}
!2103 = distinct !{!2103, !"io.write"}
!2104 = distinct !{!2104, !2103, !"io.write: %__.context_ptr"}
!2105 = !{!2102, !2098}
!2106 = !{!2107, !2109}
!2107 = distinct !{!2107, !2108, !"io.write_string: argument 0"}
!2108 = distinct !{!2108, !"io.write_string"}
!2109 = distinct !{!2109, !2108, !"io.write_string: %__.context_ptr"}
!2110 = !{!2111, !2113, !2107, !2109}
!2111 = distinct !{!2111, !2112, !"io.write: argument 0"}
!2112 = distinct !{!2112, !"io.write"}
!2113 = distinct !{!2113, !2112, !"io.write: %__.context_ptr"}
!2114 = !{!2111, !2107}
!2115 = !{!2116, !2118}
!2116 = distinct !{!2116, !2117, !"io.write_string: argument 0"}
!2117 = distinct !{!2117, !"io.write_string"}
!2118 = distinct !{!2118, !2117, !"io.write_string: %__.context_ptr"}
!2119 = !{!2120, !2122, !2116, !2118}
!2120 = distinct !{!2120, !2121, !"io.write: argument 0"}
!2121 = distinct !{!2121, !"io.write"}
!2122 = distinct !{!2122, !2121, !"io.write: %__.context_ptr"}
!2123 = !{!2120, !2116}
!2124 = !{!2125, !2127}
!2125 = distinct !{!2125, !2126, !"io.write_string: argument 0"}
!2126 = distinct !{!2126, !"io.write_string"}
!2127 = distinct !{!2127, !2126, !"io.write_string: %__.context_ptr"}
!2128 = !{!2129, !2131, !2125, !2127}
!2129 = distinct !{!2129, !2130, !"io.write: argument 0"}
!2130 = distinct !{!2130, !"io.write"}
!2131 = distinct !{!2131, !2130, !"io.write: %__.context_ptr"}
!2132 = !{!2129, !2125}
!2133 = !{!2134, !2136}
!2134 = distinct !{!2134, !2135, !"io.write: argument 0"}
!2135 = distinct !{!2135, !"io.write"}
!2136 = distinct !{!2136, !2135, !"io.write: %__.context_ptr"}
!2137 = !{!2134}
!2138 = !{!2139}
!2139 = distinct !{!2139, !2140, !"io.write_byte: %__.context_ptr"}
!2140 = distinct !{!2140, !"io.write_byte"}
!2141 = !{!2142, !2144, !2139}
!2142 = distinct !{!2142, !2143, !"io.write: argument 0"}
!2143 = distinct !{!2143, !"io.write"}
!2144 = distinct !{!2144, !2143, !"io.write: %__.context_ptr"}
!2145 = !{!2142}
!2146 = !{!2147, !2149}
!2147 = distinct !{!2147, !2148, !"io.write: argument 0"}
!2148 = distinct !{!2148, !"io.write"}
!2149 = distinct !{!2149, !2148, !"io.write: %__.context_ptr"}
!2150 = !{!2147}
!2151 = !{!2152, !2154}
!2152 = distinct !{!2152, !2153, !"runtime.panic: %__.context_ptr"}
!2153 = distinct !{!2153, !"runtime.panic"}
!2154 = distinct !{!2154, !2155, !"strconv.is_integer_negative: %__.context_ptr"}
!2155 = distinct !{!2155, !"strconv.is_integer_negative"}
!2156 = !{!2157}
!2157 = distinct !{!2157, !2155, !"strconv.is_integer_negative: argument 0"}
!2158 = !{!2159}
!2159 = distinct !{!2159, !2160, !"bufio.writer_flush: %__.context_ptr"}
!2160 = distinct !{!2160, !"bufio.writer_flush"}
!2161 = !{!2162, !2164, !2159}
!2162 = distinct !{!2162, !2163, !"io.write: argument 0"}
!2163 = distinct !{!2163, !"io.write"}
!2164 = distinct !{!2164, !2163, !"io.write: %__.context_ptr"}
!2165 = !{!2162}
!2166 = !{!2167, !2169}
!2167 = distinct !{!2167, !2168, !"bufio.writer_write: argument 0"}
!2168 = distinct !{!2168, !"bufio.writer_write"}
!2169 = distinct !{!2169, !2168, !"bufio.writer_write: %__.context_ptr"}
!2170 = !{!2171, !2173, !2167, !2169}
!2171 = distinct !{!2171, !2172, !"io.write: argument 0"}
!2172 = distinct !{!2172, !"io.write"}
!2173 = distinct !{!2173, !2172, !"io.write: %__.context_ptr"}
!2174 = !{!2171, !2167}
!2175 = !{!2167}
!2176 = !{!2177, !2167, !2169}
!2177 = distinct !{!2177, !2178, !"bufio.writer_flush: %__.context_ptr"}
!2178 = distinct !{!2178, !"bufio.writer_flush"}
!2179 = !{!2180, !2182, !2177, !2167, !2169}
!2180 = distinct !{!2180, !2181, !"io.write: argument 0"}
!2181 = distinct !{!2181, !"io.write"}
!2182 = distinct !{!2182, !2181, !"io.write: %__.context_ptr"}
!2183 = !{!2180, !2167}
!2184 = !{!2185}
!2185 = distinct !{!2185, !2186, !"bufio.writer_destroy: %__.context_ptr"}
!2186 = distinct !{!2186, !"bufio.writer_destroy"}
!2187 = !{!2188, !2185}
!2188 = distinct !{!2188, !2189, !"runtime.delete_slice-19740: %__.context_ptr"}
!2189 = distinct !{!2189, !"runtime.delete_slice-19740"}
!2190 = !{!2191, !2188, !2185}
!2191 = distinct !{!2191, !2192, !"runtime.mem_free_with_size: %__.context_ptr"}
!2192 = distinct !{!2192, !"runtime.mem_free_with_size"}
!2193 = !{!2194}
!2194 = distinct !{!2194, !2195, !"strconv.generic_ftoa: %__.context_ptr"}
!2195 = distinct !{!2195, !"strconv.generic_ftoa"}
!2196 = !{!2197, !2194}
!2197 = distinct !{!2197, !2198, !"runtime.panic: %__.context_ptr"}
!2198 = distinct !{!2198, !"runtime.panic"}
!2199 = !{!2200}
!2200 = distinct !{!2200, !2195, !"strconv.generic_ftoa: %agg.result"}
!2201 = !{!2200, !2194}
!2202 = distinct !{!2202, !89}
!2203 = distinct !{!2203, !89}
!2204 = distinct !{!2204, !89}
!2205 = !{!2206, !2200, !2194}
!2206 = distinct !{!2206, !2207, !"strconv.format_digits: %agg.result"}
!2207 = distinct !{!2207, !"strconv.format_digits"}
!2208 = distinct !{!2208, !89}
!2209 = distinct !{!2209, !89}
!2210 = !{!2211, !2206, !2200, !2194}
!2211 = distinct !{!2211, !2212, !"strconv.format_digits.to_bytes-0: %agg.result"}
!2212 = distinct !{!2212, !"strconv.format_digits.to_bytes-0"}
!2213 = !{!2214, !2206, !2200, !2194}
!2214 = distinct !{!2214, !2215, !"strconv.format_digits.to_bytes-0: %agg.result"}
!2215 = distinct !{!2215, !"strconv.format_digits.to_bytes-0"}
!2216 = !{!2217, !2206, !2200, !2194}
!2217 = distinct !{!2217, !2218, !"strconv.format_digits.to_bytes-0: %agg.result"}
!2218 = distinct !{!2218, !"strconv.format_digits.to_bytes-0"}
!2219 = distinct !{!2219, !89}
!2220 = distinct !{!2220, !89}
!2221 = !{!2222, !2224}
!2222 = distinct !{!2222, !2223, !"io.write_string: argument 0"}
!2223 = distinct !{!2223, !"io.write_string"}
!2224 = distinct !{!2224, !2223, !"io.write_string: %__.context_ptr"}
!2225 = !{!2226, !2228, !2222, !2224}
!2226 = distinct !{!2226, !2227, !"io.write: argument 0"}
!2227 = distinct !{!2227, !"io.write"}
!2228 = distinct !{!2228, !2227, !"io.write: %__.context_ptr"}
!2229 = !{!2226, !2222}
!2230 = !{!2231, !2233}
!2231 = distinct !{!2231, !2232, !"io.write_string: argument 0"}
!2232 = distinct !{!2232, !"io.write_string"}
!2233 = distinct !{!2233, !2232, !"io.write_string: %__.context_ptr"}
!2234 = !{!2235, !2237, !2231, !2233}
!2235 = distinct !{!2235, !2236, !"io.write: argument 0"}
!2236 = distinct !{!2236, !"io.write"}
!2237 = distinct !{!2237, !2236, !"io.write: %__.context_ptr"}
!2238 = !{!2235, !2231}
!2239 = !{!2240, !2242}
!2240 = distinct !{!2240, !2241, !"io.write_string: argument 0"}
!2241 = distinct !{!2241, !"io.write_string"}
!2242 = distinct !{!2242, !2241, !"io.write_string: %__.context_ptr"}
!2243 = !{!2244, !2246, !2240, !2242}
!2244 = distinct !{!2244, !2245, !"io.write: argument 0"}
!2245 = distinct !{!2245, !"io.write"}
!2246 = distinct !{!2246, !2245, !"io.write: %__.context_ptr"}
!2247 = !{!2244, !2240}
!2248 = !{!2249, !2251}
!2249 = distinct !{!2249, !2250, !"io.write_string: argument 0"}
!2250 = distinct !{!2250, !"io.write_string"}
!2251 = distinct !{!2251, !2250, !"io.write_string: %__.context_ptr"}
!2252 = !{!2253, !2255, !2249, !2251}
!2253 = distinct !{!2253, !2254, !"io.write: argument 0"}
!2254 = distinct !{!2254, !"io.write"}
!2255 = distinct !{!2255, !2254, !"io.write: %__.context_ptr"}
!2256 = !{!2253, !2249}
!2257 = !{!2258, !2260}
!2258 = distinct !{!2258, !2259, !"io.write_string: argument 0"}
!2259 = distinct !{!2259, !"io.write_string"}
!2260 = distinct !{!2260, !2259, !"io.write_string: %__.context_ptr"}
!2261 = !{!2262, !2264, !2258, !2260}
!2262 = distinct !{!2262, !2263, !"io.write: argument 0"}
!2263 = distinct !{!2263, !"io.write"}
!2264 = distinct !{!2264, !2263, !"io.write: %__.context_ptr"}
!2265 = !{!2262, !2258}
!2266 = !{!2267, !2269}
!2267 = distinct !{!2267, !2268, !"io.write_string: argument 0"}
!2268 = distinct !{!2268, !"io.write_string"}
!2269 = distinct !{!2269, !2268, !"io.write_string: %__.context_ptr"}
!2270 = !{!2271, !2273, !2267, !2269}
!2271 = distinct !{!2271, !2272, !"io.write: argument 0"}
!2272 = distinct !{!2272, !"io.write"}
!2273 = distinct !{!2273, !2272, !"io.write: %__.context_ptr"}
!2274 = !{!2271, !2267}
!2275 = !{!2276, !2278}
!2276 = distinct !{!2276, !2277, !"io.write_string: argument 0"}
!2277 = distinct !{!2277, !"io.write_string"}
!2278 = distinct !{!2278, !2277, !"io.write_string: %__.context_ptr"}
!2279 = !{!2280, !2282, !2276, !2278}
!2280 = distinct !{!2280, !2281, !"io.write: argument 0"}
!2281 = distinct !{!2281, !"io.write"}
!2282 = distinct !{!2282, !2281, !"io.write: %__.context_ptr"}
!2283 = !{!2280, !2276}
!2284 = !{!2285, !2287}
!2285 = distinct !{!2285, !2286, !"io.write_string: argument 0"}
!2286 = distinct !{!2286, !"io.write_string"}
!2287 = distinct !{!2287, !2286, !"io.write_string: %__.context_ptr"}
!2288 = !{!2289, !2291, !2285, !2287}
!2289 = distinct !{!2289, !2290, !"io.write: argument 0"}
!2290 = distinct !{!2290, !"io.write"}
!2291 = distinct !{!2291, !2290, !"io.write: %__.context_ptr"}
!2292 = !{!2289, !2285}
!2293 = !{!2294}
!2294 = distinct !{!2294, !2295, !"io.write_byte: %__.context_ptr"}
!2295 = distinct !{!2295, !"io.write_byte"}
!2296 = !{!2297, !2299, !2294}
!2297 = distinct !{!2297, !2298, !"io.write: argument 0"}
!2298 = distinct !{!2298, !"io.write"}
!2299 = distinct !{!2299, !2298, !"io.write: %__.context_ptr"}
!2300 = !{!2297}
!2301 = !{!2302, !2304}
!2302 = distinct !{!2302, !2303, !"io.write_string: argument 0"}
!2303 = distinct !{!2303, !"io.write_string"}
!2304 = distinct !{!2304, !2303, !"io.write_string: %__.context_ptr"}
!2305 = !{!2306, !2308, !2302, !2304}
!2306 = distinct !{!2306, !2307, !"io.write: argument 0"}
!2307 = distinct !{!2307, !"io.write"}
!2308 = distinct !{!2308, !2307, !"io.write: %__.context_ptr"}
!2309 = !{!2306, !2302}
!2310 = !{!2311, !2313}
!2311 = distinct !{!2311, !2312, !"io.write_string: argument 0"}
!2312 = distinct !{!2312, !"io.write_string"}
!2313 = distinct !{!2313, !2312, !"io.write_string: %__.context_ptr"}
!2314 = !{!2315, !2317, !2311, !2313}
!2315 = distinct !{!2315, !2316, !"io.write: argument 0"}
!2316 = distinct !{!2316, !"io.write"}
!2317 = distinct !{!2317, !2316, !"io.write: %__.context_ptr"}
!2318 = !{!2315, !2311}
!2319 = !{!2320, !2322}
!2320 = distinct !{!2320, !2321, !"io.write_string: argument 0"}
!2321 = distinct !{!2321, !"io.write_string"}
!2322 = distinct !{!2322, !2321, !"io.write_string: %__.context_ptr"}
!2323 = !{!2324, !2326, !2320, !2322}
!2324 = distinct !{!2324, !2325, !"io.write: argument 0"}
!2325 = distinct !{!2325, !"io.write"}
!2326 = distinct !{!2326, !2325, !"io.write: %__.context_ptr"}
!2327 = !{!2324, !2320}
!2328 = !{!2329, !2331}
!2329 = distinct !{!2329, !2330, !"io.write_string: argument 0"}
!2330 = distinct !{!2330, !"io.write_string"}
!2331 = distinct !{!2331, !2330, !"io.write_string: %__.context_ptr"}
!2332 = !{!2333, !2335, !2329, !2331}
!2333 = distinct !{!2333, !2334, !"io.write: argument 0"}
!2334 = distinct !{!2334, !"io.write"}
!2335 = distinct !{!2335, !2334, !"io.write: %__.context_ptr"}
!2336 = !{!2333, !2329}
!2337 = !{!2338, !2340}
!2338 = distinct !{!2338, !2339, !"io.write_string: argument 0"}
!2339 = distinct !{!2339, !"io.write_string"}
!2340 = distinct !{!2340, !2339, !"io.write_string: %__.context_ptr"}
!2341 = !{!2342, !2344, !2338, !2340}
!2342 = distinct !{!2342, !2343, !"io.write: argument 0"}
!2343 = distinct !{!2343, !"io.write"}
!2344 = distinct !{!2344, !2343, !"io.write: %__.context_ptr"}
!2345 = !{!2342, !2338}
!2346 = !{!2347, !2349}
!2347 = distinct !{!2347, !2348, !"io.write_string: argument 0"}
!2348 = distinct !{!2348, !"io.write_string"}
!2349 = distinct !{!2349, !2348, !"io.write_string: %__.context_ptr"}
!2350 = !{!2351, !2353, !2347, !2349}
!2351 = distinct !{!2351, !2352, !"io.write: argument 0"}
!2352 = distinct !{!2352, !"io.write"}
!2353 = distinct !{!2353, !2352, !"io.write: %__.context_ptr"}
!2354 = !{!2351, !2347}
!2355 = !{!2356, !2358}
!2356 = distinct !{!2356, !2357, !"io.write_string: argument 0"}
!2357 = distinct !{!2357, !"io.write_string"}
!2358 = distinct !{!2358, !2357, !"io.write_string: %__.context_ptr"}
!2359 = !{!2360, !2362, !2356, !2358}
!2360 = distinct !{!2360, !2361, !"io.write: argument 0"}
!2361 = distinct !{!2361, !"io.write"}
!2362 = distinct !{!2362, !2361, !"io.write: %__.context_ptr"}
!2363 = !{!2360, !2356}
!2364 = !{!2365, !2367}
!2365 = distinct !{!2365, !2366, !"io.write_string: argument 0"}
!2366 = distinct !{!2366, !"io.write_string"}
!2367 = distinct !{!2367, !2366, !"io.write_string: %__.context_ptr"}
!2368 = !{!2369, !2371, !2365, !2367}
!2369 = distinct !{!2369, !2370, !"io.write: argument 0"}
!2370 = distinct !{!2370, !"io.write"}
!2371 = distinct !{!2371, !2370, !"io.write: %__.context_ptr"}
!2372 = !{!2369, !2365}
!2373 = !{!2374, !2376}
!2374 = distinct !{!2374, !2375, !"io.write_string: argument 0"}
!2375 = distinct !{!2375, !"io.write_string"}
!2376 = distinct !{!2376, !2375, !"io.write_string: %__.context_ptr"}
!2377 = !{!2378, !2380, !2374, !2376}
!2378 = distinct !{!2378, !2379, !"io.write: argument 0"}
!2379 = distinct !{!2379, !"io.write"}
!2380 = distinct !{!2380, !2379, !"io.write: %__.context_ptr"}
!2381 = !{!2378, !2374}
!2382 = !{!2383, !2385}
!2383 = distinct !{!2383, !2384, !"io.write_string: argument 0"}
!2384 = distinct !{!2384, !"io.write_string"}
!2385 = distinct !{!2385, !2384, !"io.write_string: %__.context_ptr"}
!2386 = !{!2387, !2389, !2383, !2385}
!2387 = distinct !{!2387, !2388, !"io.write: argument 0"}
!2388 = distinct !{!2388, !"io.write"}
!2389 = distinct !{!2389, !2388, !"io.write: %__.context_ptr"}
!2390 = !{!2387, !2383}
!2391 = !{!2392, !2394}
!2392 = distinct !{!2392, !2393, !"io.write_string: argument 0"}
!2393 = distinct !{!2393, !"io.write_string"}
!2394 = distinct !{!2394, !2393, !"io.write_string: %__.context_ptr"}
!2395 = !{!2396, !2398, !2392, !2394}
!2396 = distinct !{!2396, !2397, !"io.write: argument 0"}
!2397 = distinct !{!2397, !"io.write"}
!2398 = distinct !{!2398, !2397, !"io.write: %__.context_ptr"}
!2399 = !{!2396, !2392}
!2400 = !{!2401, !2403}
!2401 = distinct !{!2401, !2402, !"io.write_string: argument 0"}
!2402 = distinct !{!2402, !"io.write_string"}
!2403 = distinct !{!2403, !2402, !"io.write_string: %__.context_ptr"}
!2404 = !{!2405, !2407, !2401, !2403}
!2405 = distinct !{!2405, !2406, !"io.write: argument 0"}
!2406 = distinct !{!2406, !"io.write"}
!2407 = distinct !{!2407, !2406, !"io.write: %__.context_ptr"}
!2408 = !{!2405, !2401}
!2409 = !{!2410, !2412}
!2410 = distinct !{!2410, !2411, !"io.write_string: argument 0"}
!2411 = distinct !{!2411, !"io.write_string"}
!2412 = distinct !{!2412, !2411, !"io.write_string: %__.context_ptr"}
!2413 = !{!2414, !2416, !2410, !2412}
!2414 = distinct !{!2414, !2415, !"io.write: argument 0"}
!2415 = distinct !{!2415, !"io.write"}
!2416 = distinct !{!2416, !2415, !"io.write: %__.context_ptr"}
!2417 = !{!2414, !2410}
!2418 = !{!2419, !2421}
!2419 = distinct !{!2419, !2420, !"io.write_string: argument 0"}
!2420 = distinct !{!2420, !"io.write_string"}
!2421 = distinct !{!2421, !2420, !"io.write_string: %__.context_ptr"}
!2422 = !{!2423, !2425, !2419, !2421}
!2423 = distinct !{!2423, !2424, !"io.write: argument 0"}
!2424 = distinct !{!2424, !"io.write"}
!2425 = distinct !{!2425, !2424, !"io.write: %__.context_ptr"}
!2426 = !{!2423, !2419}
!2427 = !{!2428, !2430}
!2428 = distinct !{!2428, !2429, !"io.write_string: argument 0"}
!2429 = distinct !{!2429, !"io.write_string"}
!2430 = distinct !{!2430, !2429, !"io.write_string: %__.context_ptr"}
!2431 = !{!2432, !2434, !2428, !2430}
!2432 = distinct !{!2432, !2433, !"io.write: argument 0"}
!2433 = distinct !{!2433, !"io.write"}
!2434 = distinct !{!2434, !2433, !"io.write: %__.context_ptr"}
!2435 = !{!2432, !2428}
!2436 = !{!2437, !2439}
!2437 = distinct !{!2437, !2438, !"io.write_string: argument 0"}
!2438 = distinct !{!2438, !"io.write_string"}
!2439 = distinct !{!2439, !2438, !"io.write_string: %__.context_ptr"}
!2440 = !{!2441, !2443, !2437, !2439}
!2441 = distinct !{!2441, !2442, !"io.write: argument 0"}
!2442 = distinct !{!2442, !"io.write"}
!2443 = distinct !{!2443, !2442, !"io.write: %__.context_ptr"}
!2444 = !{!2441, !2437}
!2445 = !{!2446, !2448}
!2446 = distinct !{!2446, !2447, !"io.write_string: argument 0"}
!2447 = distinct !{!2447, !"io.write_string"}
!2448 = distinct !{!2448, !2447, !"io.write_string: %__.context_ptr"}
!2449 = !{!2450, !2452, !2446, !2448}
!2450 = distinct !{!2450, !2451, !"io.write: argument 0"}
!2451 = distinct !{!2451, !"io.write"}
!2452 = distinct !{!2452, !2451, !"io.write: %__.context_ptr"}
!2453 = !{!2450, !2446}
!2454 = !{!2455, !2457}
!2455 = distinct !{!2455, !2456, !"io.write_string: argument 0"}
!2456 = distinct !{!2456, !"io.write_string"}
!2457 = distinct !{!2457, !2456, !"io.write_string: %__.context_ptr"}
!2458 = !{!2459, !2461, !2455, !2457}
!2459 = distinct !{!2459, !2460, !"io.write: argument 0"}
!2460 = distinct !{!2460, !"io.write"}
!2461 = distinct !{!2461, !2460, !"io.write: %__.context_ptr"}
!2462 = !{!2459, !2455}
!2463 = !{!2464, !2466}
!2464 = distinct !{!2464, !2465, !"io.write_string: argument 0"}
!2465 = distinct !{!2465, !"io.write_string"}
!2466 = distinct !{!2466, !2465, !"io.write_string: %__.context_ptr"}
!2467 = !{!2468, !2470, !2464, !2466}
!2468 = distinct !{!2468, !2469, !"io.write: argument 0"}
!2469 = distinct !{!2469, !"io.write"}
!2470 = distinct !{!2470, !2469, !"io.write: %__.context_ptr"}
!2471 = !{!2468, !2464}
!2472 = !{!2473, !2475}
!2473 = distinct !{!2473, !2474, !"io.write_string: argument 0"}
!2474 = distinct !{!2474, !"io.write_string"}
!2475 = distinct !{!2475, !2474, !"io.write_string: %__.context_ptr"}
!2476 = !{!2477, !2479, !2473, !2475}
!2477 = distinct !{!2477, !2478, !"io.write: argument 0"}
!2478 = distinct !{!2478, !"io.write"}
!2479 = distinct !{!2479, !2478, !"io.write: %__.context_ptr"}
!2480 = !{!2477, !2473}
!2481 = !{!2482, !2484}
!2482 = distinct !{!2482, !2483, !"io.write_string: argument 0"}
!2483 = distinct !{!2483, !"io.write_string"}
!2484 = distinct !{!2484, !2483, !"io.write_string: %__.context_ptr"}
!2485 = !{!2486, !2488, !2482, !2484}
!2486 = distinct !{!2486, !2487, !"io.write: argument 0"}
!2487 = distinct !{!2487, !"io.write"}
!2488 = distinct !{!2488, !2487, !"io.write: %__.context_ptr"}
!2489 = !{!2486, !2482}
!2490 = !{!2491, !2493}
!2491 = distinct !{!2491, !2492, !"io.write_string: argument 0"}
!2492 = distinct !{!2492, !"io.write_string"}
!2493 = distinct !{!2493, !2492, !"io.write_string: %__.context_ptr"}
!2494 = !{!2495, !2497, !2491, !2493}
!2495 = distinct !{!2495, !2496, !"io.write: argument 0"}
!2496 = distinct !{!2496, !"io.write"}
!2497 = distinct !{!2497, !2496, !"io.write: %__.context_ptr"}
!2498 = !{!2495, !2491}
!2499 = !{!2500, !2502}
!2500 = distinct !{!2500, !2501, !"io.write_string: argument 0"}
!2501 = distinct !{!2501, !"io.write_string"}
!2502 = distinct !{!2502, !2501, !"io.write_string: %__.context_ptr"}
!2503 = !{!2504, !2506, !2500, !2502}
!2504 = distinct !{!2504, !2505, !"io.write: argument 0"}
!2505 = distinct !{!2505, !"io.write"}
!2506 = distinct !{!2506, !2505, !"io.write: %__.context_ptr"}
!2507 = !{!2504, !2500}
!2508 = !{!2509, !2511}
!2509 = distinct !{!2509, !2510, !"io.write_string: argument 0"}
!2510 = distinct !{!2510, !"io.write_string"}
!2511 = distinct !{!2511, !2510, !"io.write_string: %__.context_ptr"}
!2512 = !{!2513, !2515, !2509, !2511}
!2513 = distinct !{!2513, !2514, !"io.write: argument 0"}
!2514 = distinct !{!2514, !"io.write"}
!2515 = distinct !{!2515, !2514, !"io.write: %__.context_ptr"}
!2516 = !{!2513, !2509}
!2517 = !{!2518, !2520}
!2518 = distinct !{!2518, !2519, !"io.write_string: argument 0"}
!2519 = distinct !{!2519, !"io.write_string"}
!2520 = distinct !{!2520, !2519, !"io.write_string: %__.context_ptr"}
!2521 = !{!2522, !2524, !2518, !2520}
!2522 = distinct !{!2522, !2523, !"io.write: argument 0"}
!2523 = distinct !{!2523, !"io.write"}
!2524 = distinct !{!2524, !2523, !"io.write: %__.context_ptr"}
!2525 = !{!2522, !2518}
!2526 = !{!2527, !2529}
!2527 = distinct !{!2527, !2528, !"io.write_string: argument 0"}
!2528 = distinct !{!2528, !"io.write_string"}
!2529 = distinct !{!2529, !2528, !"io.write_string: %__.context_ptr"}
!2530 = !{!2531, !2533, !2527, !2529}
!2531 = distinct !{!2531, !2532, !"io.write: argument 0"}
!2532 = distinct !{!2532, !"io.write"}
!2533 = distinct !{!2533, !2532, !"io.write: %__.context_ptr"}
!2534 = !{!2531, !2527}
!2535 = !{!2536, !2538}
!2536 = distinct !{!2536, !2537, !"io.write_string: argument 0"}
!2537 = distinct !{!2537, !"io.write_string"}
!2538 = distinct !{!2538, !2537, !"io.write_string: %__.context_ptr"}
!2539 = !{!2540, !2542, !2536, !2538}
!2540 = distinct !{!2540, !2541, !"io.write: argument 0"}
!2541 = distinct !{!2541, !"io.write"}
!2542 = distinct !{!2542, !2541, !"io.write: %__.context_ptr"}
!2543 = !{!2540, !2536}
!2544 = !{!2545, !2547}
!2545 = distinct !{!2545, !2546, !"io.write_string: argument 0"}
!2546 = distinct !{!2546, !"io.write_string"}
!2547 = distinct !{!2547, !2546, !"io.write_string: %__.context_ptr"}
!2548 = !{!2549, !2551, !2545, !2547}
!2549 = distinct !{!2549, !2550, !"io.write: argument 0"}
!2550 = distinct !{!2550, !"io.write"}
!2551 = distinct !{!2551, !2550, !"io.write: %__.context_ptr"}
!2552 = !{!2549, !2545}
!2553 = !{!2554, !2556}
!2554 = distinct !{!2554, !2555, !"io.write_string: argument 0"}
!2555 = distinct !{!2555, !"io.write_string"}
!2556 = distinct !{!2556, !2555, !"io.write_string: %__.context_ptr"}
!2557 = !{!2558, !2560, !2554, !2556}
!2558 = distinct !{!2558, !2559, !"io.write: argument 0"}
!2559 = distinct !{!2559, !"io.write"}
!2560 = distinct !{!2560, !2559, !"io.write: %__.context_ptr"}
!2561 = !{!2558, !2554}
!2562 = !{!2563, !2565}
!2563 = distinct !{!2563, !2564, !"io.write_string: argument 0"}
!2564 = distinct !{!2564, !"io.write_string"}
!2565 = distinct !{!2565, !2564, !"io.write_string: %__.context_ptr"}
!2566 = !{!2567, !2569, !2563, !2565}
!2567 = distinct !{!2567, !2568, !"io.write: argument 0"}
!2568 = distinct !{!2568, !"io.write"}
!2569 = distinct !{!2569, !2568, !"io.write: %__.context_ptr"}
!2570 = !{!2567, !2563}
!2571 = !{!2572, !2574}
!2572 = distinct !{!2572, !2573, !"io.write_string: argument 0"}
!2573 = distinct !{!2573, !"io.write_string"}
!2574 = distinct !{!2574, !2573, !"io.write_string: %__.context_ptr"}
!2575 = !{!2576, !2578, !2572, !2574}
!2576 = distinct !{!2576, !2577, !"io.write: argument 0"}
!2577 = distinct !{!2577, !"io.write"}
!2578 = distinct !{!2578, !2577, !"io.write: %__.context_ptr"}
!2579 = !{!2576, !2572}
!2580 = !{!2581, !2583}
!2581 = distinct !{!2581, !2582, !"io.write_string: argument 0"}
!2582 = distinct !{!2582, !"io.write_string"}
!2583 = distinct !{!2583, !2582, !"io.write_string: %__.context_ptr"}
!2584 = !{!2585, !2587, !2581, !2583}
!2585 = distinct !{!2585, !2586, !"io.write: argument 0"}
!2586 = distinct !{!2586, !"io.write"}
!2587 = distinct !{!2587, !2586, !"io.write: %__.context_ptr"}
!2588 = !{!2585, !2581}
!2589 = !{!2590, !2592}
!2590 = distinct !{!2590, !2591, !"io.write_string: argument 0"}
!2591 = distinct !{!2591, !"io.write_string"}
!2592 = distinct !{!2592, !2591, !"io.write_string: %__.context_ptr"}
!2593 = !{!2594, !2596, !2590, !2592}
!2594 = distinct !{!2594, !2595, !"io.write: argument 0"}
!2595 = distinct !{!2595, !"io.write"}
!2596 = distinct !{!2596, !2595, !"io.write: %__.context_ptr"}
!2597 = !{!2594, !2590}
!2598 = !{!2599, !2601}
!2599 = distinct !{!2599, !2600, !"io.write_string: argument 0"}
!2600 = distinct !{!2600, !"io.write_string"}
!2601 = distinct !{!2601, !2600, !"io.write_string: %__.context_ptr"}
!2602 = !{!2603, !2605, !2599, !2601}
!2603 = distinct !{!2603, !2604, !"io.write: argument 0"}
!2604 = distinct !{!2604, !"io.write"}
!2605 = distinct !{!2605, !2604, !"io.write: %__.context_ptr"}
!2606 = !{!2603, !2599}
!2607 = !{!2608, !2610}
!2608 = distinct !{!2608, !2609, !"io.write_string: argument 0"}
!2609 = distinct !{!2609, !"io.write_string"}
!2610 = distinct !{!2610, !2609, !"io.write_string: %__.context_ptr"}
!2611 = !{!2612, !2614, !2608, !2610}
!2612 = distinct !{!2612, !2613, !"io.write: argument 0"}
!2613 = distinct !{!2613, !"io.write"}
!2614 = distinct !{!2614, !2613, !"io.write: %__.context_ptr"}
!2615 = !{!2612, !2608}
!2616 = !{!2617, !2619}
!2617 = distinct !{!2617, !2618, !"io.write_string: argument 0"}
!2618 = distinct !{!2618, !"io.write_string"}
!2619 = distinct !{!2619, !2618, !"io.write_string: %__.context_ptr"}
!2620 = !{!2621, !2623, !2617, !2619}
!2621 = distinct !{!2621, !2622, !"io.write: argument 0"}
!2622 = distinct !{!2622, !"io.write"}
!2623 = distinct !{!2623, !2622, !"io.write: %__.context_ptr"}
!2624 = !{!2621, !2617}
!2625 = !{!2626, !2628}
!2626 = distinct !{!2626, !2627, !"io.write_string: argument 0"}
!2627 = distinct !{!2627, !"io.write_string"}
!2628 = distinct !{!2628, !2627, !"io.write_string: %__.context_ptr"}
!2629 = !{!2630, !2632, !2626, !2628}
!2630 = distinct !{!2630, !2631, !"io.write: argument 0"}
!2631 = distinct !{!2631, !"io.write"}
!2632 = distinct !{!2632, !2631, !"io.write: %__.context_ptr"}
!2633 = !{!2630, !2626}
!2634 = !{!2635, !2637}
!2635 = distinct !{!2635, !2636, !"io.write_string: argument 0"}
!2636 = distinct !{!2636, !"io.write_string"}
!2637 = distinct !{!2637, !2636, !"io.write_string: %__.context_ptr"}
!2638 = !{!2639, !2641, !2635, !2637}
!2639 = distinct !{!2639, !2640, !"io.write: argument 0"}
!2640 = distinct !{!2640, !"io.write"}
!2641 = distinct !{!2641, !2640, !"io.write: %__.context_ptr"}
!2642 = !{!2639, !2635}
!2643 = !{!2644, !2646}
!2644 = distinct !{!2644, !2645, !"io.write_string: argument 0"}
!2645 = distinct !{!2645, !"io.write_string"}
!2646 = distinct !{!2646, !2645, !"io.write_string: %__.context_ptr"}
!2647 = !{!2648, !2650, !2644, !2646}
!2648 = distinct !{!2648, !2649, !"io.write: argument 0"}
!2649 = distinct !{!2649, !"io.write"}
!2650 = distinct !{!2650, !2649, !"io.write: %__.context_ptr"}
!2651 = !{!2648, !2644}
!2652 = !{!2653, !2655}
!2653 = distinct !{!2653, !2654, !"io.write_string: argument 0"}
!2654 = distinct !{!2654, !"io.write_string"}
!2655 = distinct !{!2655, !2654, !"io.write_string: %__.context_ptr"}
!2656 = !{!2657, !2659, !2653, !2655}
!2657 = distinct !{!2657, !2658, !"io.write: argument 0"}
!2658 = distinct !{!2658, !"io.write"}
!2659 = distinct !{!2659, !2658, !"io.write: %__.context_ptr"}
!2660 = !{!2657, !2653}
!2661 = !{!2662, !2664}
!2662 = distinct !{!2662, !2663, !"io.write_string: argument 0"}
!2663 = distinct !{!2663, !"io.write_string"}
!2664 = distinct !{!2664, !2663, !"io.write_string: %__.context_ptr"}
!2665 = !{!2666, !2668, !2662, !2664}
!2666 = distinct !{!2666, !2667, !"io.write: argument 0"}
!2667 = distinct !{!2667, !"io.write"}
!2668 = distinct !{!2668, !2667, !"io.write: %__.context_ptr"}
!2669 = !{!2666, !2662}
!2670 = !{!2671, !2673}
!2671 = distinct !{!2671, !2672, !"io.write_string: argument 0"}
!2672 = distinct !{!2672, !"io.write_string"}
!2673 = distinct !{!2673, !2672, !"io.write_string: %__.context_ptr"}
!2674 = !{!2675, !2677, !2671, !2673}
!2675 = distinct !{!2675, !2676, !"io.write: argument 0"}
!2676 = distinct !{!2676, !"io.write"}
!2677 = distinct !{!2677, !2676, !"io.write: %__.context_ptr"}
!2678 = !{!2675, !2671}
!2679 = !{!2680, !2682}
!2680 = distinct !{!2680, !2681, !"io.write_string: argument 0"}
!2681 = distinct !{!2681, !"io.write_string"}
!2682 = distinct !{!2682, !2681, !"io.write_string: %__.context_ptr"}
!2683 = !{!2684, !2686, !2680, !2682}
!2684 = distinct !{!2684, !2685, !"io.write: argument 0"}
!2685 = distinct !{!2685, !"io.write"}
!2686 = distinct !{!2686, !2685, !"io.write: %__.context_ptr"}
!2687 = !{!2684, !2680}
!2688 = !{!2689, !2691}
!2689 = distinct !{!2689, !2690, !"io.write_string: argument 0"}
!2690 = distinct !{!2690, !"io.write_string"}
!2691 = distinct !{!2691, !2690, !"io.write_string: %__.context_ptr"}
!2692 = !{!2693, !2695, !2689, !2691}
!2693 = distinct !{!2693, !2694, !"io.write: argument 0"}
!2694 = distinct !{!2694, !"io.write"}
!2695 = distinct !{!2695, !2694, !"io.write: %__.context_ptr"}
!2696 = !{!2693, !2689}
!2697 = !{!2698, !2700}
!2698 = distinct !{!2698, !2699, !"io.write_string: argument 0"}
!2699 = distinct !{!2699, !"io.write_string"}
!2700 = distinct !{!2700, !2699, !"io.write_string: %__.context_ptr"}
!2701 = !{!2702, !2704, !2698, !2700}
!2702 = distinct !{!2702, !2703, !"io.write: argument 0"}
!2703 = distinct !{!2703, !"io.write"}
!2704 = distinct !{!2704, !2703, !"io.write: %__.context_ptr"}
!2705 = !{!2702, !2698}
!2706 = !{!2707, !2709}
!2707 = distinct !{!2707, !2708, !"io.write_string: argument 0"}
!2708 = distinct !{!2708, !"io.write_string"}
!2709 = distinct !{!2709, !2708, !"io.write_string: %__.context_ptr"}
!2710 = !{!2711, !2713, !2707, !2709}
!2711 = distinct !{!2711, !2712, !"io.write: argument 0"}
!2712 = distinct !{!2712, !"io.write"}
!2713 = distinct !{!2713, !2712, !"io.write: %__.context_ptr"}
!2714 = !{!2711, !2707}
!2715 = !{!2716, !2718}
!2716 = distinct !{!2716, !2717, !"io.write_string: argument 0"}
!2717 = distinct !{!2717, !"io.write_string"}
!2718 = distinct !{!2718, !2717, !"io.write_string: %__.context_ptr"}
!2719 = !{!2720, !2722, !2716, !2718}
!2720 = distinct !{!2720, !2721, !"io.write: argument 0"}
!2721 = distinct !{!2721, !"io.write"}
!2722 = distinct !{!2722, !2721, !"io.write: %__.context_ptr"}
!2723 = !{!2720, !2716}
!2724 = !{!2725, !2727}
!2725 = distinct !{!2725, !2726, !"io.write_string: argument 0"}
!2726 = distinct !{!2726, !"io.write_string"}
!2727 = distinct !{!2727, !2726, !"io.write_string: %__.context_ptr"}
!2728 = !{!2729, !2731, !2725, !2727}
!2729 = distinct !{!2729, !2730, !"io.write: argument 0"}
!2730 = distinct !{!2730, !"io.write"}
!2731 = distinct !{!2731, !2730, !"io.write: %__.context_ptr"}
!2732 = !{!2729, !2725}
!2733 = !{!2734, !2736}
!2734 = distinct !{!2734, !2735, !"io.write_string: argument 0"}
!2735 = distinct !{!2735, !"io.write_string"}
!2736 = distinct !{!2736, !2735, !"io.write_string: %__.context_ptr"}
!2737 = !{!2738, !2740, !2734, !2736}
!2738 = distinct !{!2738, !2739, !"io.write: argument 0"}
!2739 = distinct !{!2739, !"io.write"}
!2740 = distinct !{!2740, !2739, !"io.write: %__.context_ptr"}
!2741 = !{!2738, !2734}
!2742 = !{!2743, !2745}
!2743 = distinct !{!2743, !2744, !"io.write_string: argument 0"}
!2744 = distinct !{!2744, !"io.write_string"}
!2745 = distinct !{!2745, !2744, !"io.write_string: %__.context_ptr"}
!2746 = !{!2747, !2749, !2743, !2745}
!2747 = distinct !{!2747, !2748, !"io.write: argument 0"}
!2748 = distinct !{!2748, !"io.write"}
!2749 = distinct !{!2749, !2748, !"io.write: %__.context_ptr"}
!2750 = !{!2747, !2743}
!2751 = !{!2752, !2754}
!2752 = distinct !{!2752, !2753, !"io.write_string: argument 0"}
!2753 = distinct !{!2753, !"io.write_string"}
!2754 = distinct !{!2754, !2753, !"io.write_string: %__.context_ptr"}
!2755 = !{!2756, !2758, !2752, !2754}
!2756 = distinct !{!2756, !2757, !"io.write: argument 0"}
!2757 = distinct !{!2757, !"io.write"}
!2758 = distinct !{!2758, !2757, !"io.write: %__.context_ptr"}
!2759 = !{!2756, !2752}
!2760 = !{!2761, !2763}
!2761 = distinct !{!2761, !2762, !"io.write_string: argument 0"}
!2762 = distinct !{!2762, !"io.write_string"}
!2763 = distinct !{!2763, !2762, !"io.write_string: %__.context_ptr"}
!2764 = !{!2765, !2767, !2761, !2763}
!2765 = distinct !{!2765, !2766, !"io.write: argument 0"}
!2766 = distinct !{!2766, !"io.write"}
!2767 = distinct !{!2767, !2766, !"io.write: %__.context_ptr"}
!2768 = !{!2765, !2761}
!2769 = !{!2770, !2772}
!2770 = distinct !{!2770, !2771, !"io.write_string: argument 0"}
!2771 = distinct !{!2771, !"io.write_string"}
!2772 = distinct !{!2772, !2771, !"io.write_string: %__.context_ptr"}
!2773 = !{!2774, !2776, !2770, !2772}
!2774 = distinct !{!2774, !2775, !"io.write: argument 0"}
!2775 = distinct !{!2775, !"io.write"}
!2776 = distinct !{!2776, !2775, !"io.write: %__.context_ptr"}
!2777 = !{!2774, !2770}
!2778 = !{!2779, !2781}
!2779 = distinct !{!2779, !2780, !"io.write_string: argument 0"}
!2780 = distinct !{!2780, !"io.write_string"}
!2781 = distinct !{!2781, !2780, !"io.write_string: %__.context_ptr"}
!2782 = !{!2783, !2785, !2779, !2781}
!2783 = distinct !{!2783, !2784, !"io.write: argument 0"}
!2784 = distinct !{!2784, !"io.write"}
!2785 = distinct !{!2785, !2784, !"io.write: %__.context_ptr"}
!2786 = !{!2783, !2779}
!2787 = !{!2788, !2790}
!2788 = distinct !{!2788, !2789, !"io.write_string: argument 0"}
!2789 = distinct !{!2789, !"io.write_string"}
!2790 = distinct !{!2790, !2789, !"io.write_string: %__.context_ptr"}
!2791 = !{!2792, !2794, !2788, !2790}
!2792 = distinct !{!2792, !2793, !"io.write: argument 0"}
!2793 = distinct !{!2793, !"io.write"}
!2794 = distinct !{!2794, !2793, !"io.write: %__.context_ptr"}
!2795 = !{!2792, !2788}
!2796 = !{!2797, !2799}
!2797 = distinct !{!2797, !2798, !"io.write_string: argument 0"}
!2798 = distinct !{!2798, !"io.write_string"}
!2799 = distinct !{!2799, !2798, !"io.write_string: %__.context_ptr"}
!2800 = !{!2801, !2803, !2797, !2799}
!2801 = distinct !{!2801, !2802, !"io.write: argument 0"}
!2802 = distinct !{!2802, !"io.write"}
!2803 = distinct !{!2803, !2802, !"io.write: %__.context_ptr"}
!2804 = !{!2801, !2797}
!2805 = !{!2806, !2808}
!2806 = distinct !{!2806, !2807, !"io.write_string: argument 0"}
!2807 = distinct !{!2807, !"io.write_string"}
!2808 = distinct !{!2808, !2807, !"io.write_string: %__.context_ptr"}
!2809 = !{!2810, !2812, !2806, !2808}
!2810 = distinct !{!2810, !2811, !"io.write: argument 0"}
!2811 = distinct !{!2811, !"io.write"}
!2812 = distinct !{!2812, !2811, !"io.write: %__.context_ptr"}
!2813 = !{!2810, !2806}
!2814 = !{!2815, !2817}
!2815 = distinct !{!2815, !2816, !"io.write_string: argument 0"}
!2816 = distinct !{!2816, !"io.write_string"}
!2817 = distinct !{!2817, !2816, !"io.write_string: %__.context_ptr"}
!2818 = !{!2819, !2821, !2815, !2817}
!2819 = distinct !{!2819, !2820, !"io.write: argument 0"}
!2820 = distinct !{!2820, !"io.write"}
!2821 = distinct !{!2821, !2820, !"io.write: %__.context_ptr"}
!2822 = !{!2819, !2815}
!2823 = !{!2824, !2826}
!2824 = distinct !{!2824, !2825, !"io.write_string: argument 0"}
!2825 = distinct !{!2825, !"io.write_string"}
!2826 = distinct !{!2826, !2825, !"io.write_string: %__.context_ptr"}
!2827 = !{!2828, !2830, !2824, !2826}
!2828 = distinct !{!2828, !2829, !"io.write: argument 0"}
!2829 = distinct !{!2829, !"io.write"}
!2830 = distinct !{!2830, !2829, !"io.write: %__.context_ptr"}
!2831 = !{!2828, !2824}
!2832 = !{!2833, !2835}
!2833 = distinct !{!2833, !2834, !"io.write_string: argument 0"}
!2834 = distinct !{!2834, !"io.write_string"}
!2835 = distinct !{!2835, !2834, !"io.write_string: %__.context_ptr"}
!2836 = !{!2837, !2839, !2833, !2835}
!2837 = distinct !{!2837, !2838, !"io.write: argument 0"}
!2838 = distinct !{!2838, !"io.write"}
!2839 = distinct !{!2839, !2838, !"io.write: %__.context_ptr"}
!2840 = !{!2837, !2833}
!2841 = !{!2842, !2844}
!2842 = distinct !{!2842, !2843, !"io.write_string: argument 0"}
!2843 = distinct !{!2843, !"io.write_string"}
!2844 = distinct !{!2844, !2843, !"io.write_string: %__.context_ptr"}
!2845 = !{!2846, !2848, !2842, !2844}
!2846 = distinct !{!2846, !2847, !"io.write: argument 0"}
!2847 = distinct !{!2847, !"io.write"}
!2848 = distinct !{!2848, !2847, !"io.write: %__.context_ptr"}
!2849 = !{!2846, !2842}
!2850 = !{!2851, !2853}
!2851 = distinct !{!2851, !2852, !"io.write_string: argument 0"}
!2852 = distinct !{!2852, !"io.write_string"}
!2853 = distinct !{!2853, !2852, !"io.write_string: %__.context_ptr"}
!2854 = !{!2855, !2857, !2851, !2853}
!2855 = distinct !{!2855, !2856, !"io.write: argument 0"}
!2856 = distinct !{!2856, !"io.write"}
!2857 = distinct !{!2857, !2856, !"io.write: %__.context_ptr"}
!2858 = !{!2855, !2851}
!2859 = !{!2860, !2862}
!2860 = distinct !{!2860, !2861, !"io.write_string: argument 0"}
!2861 = distinct !{!2861, !"io.write_string"}
!2862 = distinct !{!2862, !2861, !"io.write_string: %__.context_ptr"}
!2863 = !{!2864, !2866, !2860, !2862}
!2864 = distinct !{!2864, !2865, !"io.write: argument 0"}
!2865 = distinct !{!2865, !"io.write"}
!2866 = distinct !{!2866, !2865, !"io.write: %__.context_ptr"}
!2867 = !{!2864, !2860}
!2868 = !{!2869, !2871}
!2869 = distinct !{!2869, !2870, !"io.write_string: argument 0"}
!2870 = distinct !{!2870, !"io.write_string"}
!2871 = distinct !{!2871, !2870, !"io.write_string: %__.context_ptr"}
!2872 = !{!2873, !2875, !2869, !2871}
!2873 = distinct !{!2873, !2874, !"io.write: argument 0"}
!2874 = distinct !{!2874, !"io.write"}
!2875 = distinct !{!2875, !2874, !"io.write: %__.context_ptr"}
!2876 = !{!2873, !2869}
!2877 = !{!2878, !2880}
!2878 = distinct !{!2878, !2879, !"io.write_string: argument 0"}
!2879 = distinct !{!2879, !"io.write_string"}
!2880 = distinct !{!2880, !2879, !"io.write_string: %__.context_ptr"}
!2881 = !{!2882, !2884, !2878, !2880}
!2882 = distinct !{!2882, !2883, !"io.write: argument 0"}
!2883 = distinct !{!2883, !"io.write"}
!2884 = distinct !{!2884, !2883, !"io.write: %__.context_ptr"}
!2885 = !{!2882, !2878}
!2886 = !{!2887, !2889}
!2887 = distinct !{!2887, !2888, !"runtime._windows_default_alloc_or_resize: argument 0"}
!2888 = distinct !{!2888, !"runtime._windows_default_alloc_or_resize"}
!2889 = distinct !{!2889, !2890, !"runtime._windows_default_alloc: argument 0"}
!2890 = distinct !{!2890, !"runtime._windows_default_alloc"}
!2891 = !{!2892, !2894}
!2892 = distinct !{!2892, !2893, !"runtime._windows_default_alloc_or_resize: argument 0"}
!2893 = distinct !{!2893, !"runtime._windows_default_alloc_or_resize"}
!2894 = distinct !{!2894, !2895, !"runtime._windows_default_resize: argument 0"}
!2895 = distinct !{!2895, !"runtime._windows_default_resize"}
!2896 = !{!2897, !2899}
!2897 = distinct !{!2897, !2898, !"runtime.arena_allocator_proc: argument 0"}
!2898 = distinct !{!2898, !"runtime.arena_allocator_proc"}
!2899 = distinct !{!2899, !2898, !"runtime.arena_allocator_proc: %__.context_ptr"}
!2900 = !{!2897}
!2901 = !{!2902, !2897, !2899}
!2902 = distinct !{!2902, !2903, !"runtime.arena_free_all: %__.context_ptr"}
!2903 = distinct !{!2903, !"runtime.arena_free_all"}
!2904 = !{!2905, !2902, !2897, !2899}
!2905 = distinct !{!2905, !2906, !"runtime.arena_free_last_memory_block: %__.context_ptr"}
!2906 = distinct !{!2906, !"runtime.arena_free_last_memory_block"}
!2907 = !{!2905, !2897}
!2908 = !{!2909, !2905, !2897}
!2909 = distinct !{!2909, !2910, !"runtime.memory_block_dealloc: %__.context_ptr"}
!2910 = distinct !{!2910, !"runtime.memory_block_dealloc"}
!2911 = !{!2909, !2905, !2902, !2897, !2899}
!2912 = !{!2913, !2909, !2905, !2902, !2897, !2899}
!2913 = distinct !{!2913, !2914, !"runtime.mem_free: %__.context_ptr"}
!2914 = distinct !{!2914, !"runtime.mem_free"}
!2915 = !{!2916, !2918}
!2916 = distinct !{!2916, !2917, !"runtime.make_aligned-20386: argument 0"}
!2917 = distinct !{!2917, !"runtime.make_aligned-20386"}
!2918 = distinct !{!2918, !2917, !"runtime.make_aligned-20386: %__.context_ptr"}
!2919 = !{!2920, !2922, !2916, !2918}
!2920 = distinct !{!2920, !2921, !"runtime.mem_alloc_bytes: argument 0"}
!2921 = distinct !{!2921, !"runtime.mem_alloc_bytes"}
!2922 = distinct !{!2922, !2921, !"runtime.mem_alloc_bytes: %__.context_ptr"}
!2923 = !{!2920, !2916}
!2924 = !{!2925}
!2925 = distinct !{!2925, !2926, !"reflect.as_int: argument 0"}
!2926 = distinct !{!2926, !"reflect.as_int"}
!2927 = !{!2928, !2930, !2931}
!2928 = distinct !{!2928, !2929, !"io.write: argument 0"}
!2929 = distinct !{!2929, !"io.write"}
!2930 = distinct !{!2930, !2929, !"io.write: %__.context_ptr"}
!2931 = distinct !{!2931, !2932, !"io.write_byte: %__.context_ptr"}
!2932 = distinct !{!2932, !"io.write_byte"}
!2933 = !{!2931}
!2934 = !{!2928}
!2935 = distinct !{!2935, !445}
!2936 = !{!2937, !2939}
!2937 = distinct !{!2937, !2938, !"io.write_i64: argument 0"}
!2938 = distinct !{!2938, !"io.write_i64"}
!2939 = distinct !{!2939, !2938, !"io.write_i64: %__.context_ptr"}
!2940 = !{!2941, !2943, !2937, !2939}
!2941 = distinct !{!2941, !2942, !"strconv.append_bits: %agg.result"}
!2942 = distinct !{!2942, !"strconv.append_bits"}
!2943 = distinct !{!2943, !2942, !"strconv.append_bits: %__.context_ptr"}
!2944 = !{!2943, !2937, !2939}
!2945 = !{!2946, !2948, !2937, !2939}
!2946 = distinct !{!2946, !2947, !"io.write_string: argument 0"}
!2947 = distinct !{!2947, !"io.write_string"}
!2948 = distinct !{!2948, !2947, !"io.write_string: %__.context_ptr"}
!2949 = !{!2950, !2952, !2946, !2948, !2937, !2939}
!2950 = distinct !{!2950, !2951, !"io.write: argument 0"}
!2951 = distinct !{!2951, !"io.write"}
!2952 = distinct !{!2952, !2951, !"io.write: %__.context_ptr"}
!2953 = !{!2950, !2946, !2937}
